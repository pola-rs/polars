searchState.loadedDescShard("polars_sql", 0, "Polars SQL This crate provides a SQL interface for Polars …\nThe SQLContext is the main entry point for executing SQL …\nExecute a SQL query, returning a <code>LazyFrame</code>.\nReturns the argument unchanged.\nThis module defines the function registry and user defined …\nGet internal table map. For internal use only.\nGet the names of all registered tables, in sorted order.\nCalls <code>U::from(self)</code>.\nKeywords that are supported by Polars SQL\nCreate a new SQLContext.\nCreate a new SQLContext from a table map. For internal use …\nRegister a <code>LazyFrame</code> as a table in the SQLContext.\nGet the function registry of the SQLContext\nGet a mutable reference to the function registry of the …\nparse a SQL expression to a polars expression\nUnregister a <code>LazyFrame</code> table from the <code>SQLContext</code>.\nadd a function registry to the SQLContext the registry …\nAny operation that is done on groups\nAny operation that is done while projection/ selection of …\nA default registry that does not support registering or …\nA registry that holds user defined functions.\nCollect groups to a list and apply the function over the …\nCheck if a function is registered.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall a user defined function.\nThere can be two ways of expanding wildcards:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny function that is sensitive to the number of elements …\nRegister a function.\nAutomatically explode on unit length if it ran as final …\nGet a list of all function names that are supported by …\nGet all keywords that are supported by Polars SQL")