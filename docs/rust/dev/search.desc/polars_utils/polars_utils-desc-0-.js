searchState.loadedDescShard("polars_utils", 0, "Copy pasted from std::cell::SyncUnsafeCell can be removed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet mutable references to several items of the Arena\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA utility to create a sharable counter This does not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nFind the index of the first element of <code>arr</code> that is greater …\nFind the index of the first element of <code>arr</code> that is greater …\nA cached function that use <code>FastFixedCache</code> for access speed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>UnsafeCell</code>, but <code>Sync</code>.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nReturns the argument unchanged.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nUnwraps the value.\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nGets a mutable pointer to the wrapped value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nContains a byte slice and a precomputed hash for that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type logically equivalent to <code>Vec&lt;T&gt;</code>, but which does not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhich kind of iterator are we turning this into?\nThe type of the elements being iterated over.\nSafety\nNaN will be larger than every valid value\nNaN will be smaller than every valid value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nThis is a perfect sort particularly useful for an arg_sort …\nUtility that allows use to send pointers to another thread.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nStartup system is expensive, so we do it once\nThis call is quite expensive, cache the results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis elides creating a <code>TotalOrdWrap</code> for types that don’t …\nAlternative trait for Eq. By consistently using this we …\nAlternative trait for Hash. By consistently using this we …\nAlternative trait for Ord. By consistently using this we …\nConverts an f32 into a canonical form, where -0 == 0 and …\nConverts an f64 into a canonical form, where -0 == 0 and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nFill current allocation if if &gt; 0 otherwise realloc\nWill push an item and not check if there is enough capacity")