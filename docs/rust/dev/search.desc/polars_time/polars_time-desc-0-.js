searchState.loadedDescShard("polars_time", 0, "Represents a window in time\nTraits and utilities for temporal data.\nCreate a <code>DatetimeChunked</code> from a given <code>start</code> and <code>end</code> date …\nCreate a <code>TimeChunked</code> from a given <code>start</code> and <code>end</code> date and a …\nUpsample a <code>DataFrame</code> at a regular frequency.\nUpsample a <code>DataFrame</code> at a regular frequency.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly useful if periods are weekly\nRepresents a window in time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the bounds for the earliest window bounds that …\nDifferent from <code>group_by_windows</code>, where define window …\nWindow boundaries are created based on the given <code>Window</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the duration consists of full days.\n<code>true</code> if zero duration.\nReturns the nanoseconds from the <code>Duration</code> without the …\nReturns whether duration is negative.\nCreate a new integer size <code>Duration</code>\nParse a string into a <code>Duration</code>\nRound the given ms timestamp by the window boundary.\nRound the given ns timestamp by the window boundary.\nRound the given us timestamp by the window boundary.\nTruncate the given ms timestamp by the window boundary.\nTruncate the given ns timestamp by the window boundary.\nTruncate the given us timestamp by the window boundary.\nCalculate the millennium from the underlying NaiveDateTime …\nExtract day from underlying NaiveDateTime representation. …\nExtract hour from underlying NaiveDateTime representation. …\nExtract year from underlying NaiveDateTime representation. …\nCalculate the millennium from the underlying NaiveDateTime …\nExtract minute from underlying NaiveDateTime …\nExtract month from underlying NaiveDateTime representation.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the day of year starting from 1.\nExtract ordinal year from underlying NaiveDateTime …\nExtract quarter from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nConvert from Time into String with the given format. See …\nConvert Time into String with the given format. See chrono …\nReturns the ISO week number starting from 1. The return …\nReturns the ISO weekday number where monday = 1 and sunday …\nExtract year from underlying NaiveDateTime representation. …")