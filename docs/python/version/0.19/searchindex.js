Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 104, 134, 152, 207, 281, 295, 513, 711, 746, 846, 897, 1077, 1224], "refer": [0, 40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 161, 295, 396, 399, 511, 556, 560, 603, 633, 634, 635, 638, 746, 771, 810, 858, 961, 964, 1097, 1179, 1180, 1181, 1184, 1224], "input": [0, 78, 84, 106, 114, 115, 156, 183, 186, 207, 211, 220, 237, 238, 241, 245, 248, 260, 270, 271, 274, 295, 302, 340, 418, 441, 505, 512, 513, 522, 545, 560, 592, 629, 630, 631, 632, 662, 664, 666, 667, 669, 672, 675, 676, 677, 684, 688, 697, 698, 705, 706, 707, 709, 710, 711, 713, 717, 725, 728, 730, 736, 746, 758, 763, 784, 787, 815, 816, 817, 819, 823, 828, 834, 835, 839, 858, 902, 1003, 1073, 1074, 1077, 1127, 1224], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 57, 119, 153, 184, 185, 187, 188, 201, 207, 211, 214, 220, 222, 231, 233, 237, 248, 266, 270, 295, 305, 307, 309, 358, 501, 509, 510, 511, 513, 521, 533, 553, 565, 570, 572, 574, 576, 595, 610, 659, 663, 665, 667, 678, 690, 691, 709, 710, 711, 733, 746, 758, 785, 786, 788, 789, 798, 799, 803, 804, 813, 815, 817, 834, 838, 841, 846, 858, 865, 866, 868, 918, 1077, 1095, 1141, 1156, 1212, 1224], "seri": [0, 1, 2, 16, 30, 69, 70, 79, 80, 81, 82, 86, 87, 88, 103, 105, 108, 110, 137, 139, 140, 144, 164, 173, 176, 179, 181, 184, 189, 192, 193, 194, 196, 198, 200, 208, 209, 210, 211, 215, 216, 227, 228, 229, 231, 235, 247, 248, 252, 255, 258, 259, 275, 295, 308, 309, 320, 328, 336, 337, 339, 392, 421, 427, 431, 432, 439, 443, 446, 447, 450, 452, 453, 454, 466, 474, 476, 499, 501, 507, 509, 511, 513, 550, 556, 557, 558, 559, 561, 563, 565, 566, 567, 573, 581, 584, 595, 622, 633, 634, 635, 638, 642, 649, 650, 658, 667, 668, 669, 673, 674, 679, 681, 682, 685, 686, 690, 691, 693, 694, 698, 699, 701, 703, 705, 706, 707, 708, 709, 710, 711, 714, 715, 718, 719, 721, 722, 725, 727, 728, 731, 733, 734, 735, 737, 746, 758, 780, 785, 813, 840, 858, 1216, 1218, 1220, 1223, 1225, 1228, 1229, 1230, 1232], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 84, 85, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 137, 138, 141, 142, 150, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 742, 746, 758, 768, 769, 772, 776, 777, 781, 785, 793, 794, 795, 796, 798, 799, 803, 804, 808, 812, 822, 823, 829, 830, 831, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 867, 882, 884, 895, 918, 919, 957, 999, 1030, 1031, 1041, 1077, 1095, 1154, 1170, 1171, 1193, 1201, 1202, 1212, 1224, 1231, 1232], "lazyfram": [0, 1, 63, 64, 66, 68, 78, 79, 80, 81, 82, 84, 85, 86, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 205, 221, 222, 238, 271, 295, 334, 424, 501, 746, 758, 857, 861, 1231, 1232], "express": [0, 13, 57, 58, 59, 84, 85, 141, 144, 146, 156, 169, 171, 173, 183, 186, 207, 218, 222, 232, 237, 238, 241, 245, 260, 270, 271, 274, 281, 295, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 325, 328, 330, 331, 332, 334, 340, 343, 344, 345, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 418, 420, 421, 423, 424, 428, 430, 431, 433, 434, 435, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 459, 464, 465, 467, 468, 469, 473, 474, 480, 482, 500, 501, 507, 508, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 524, 526, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 544, 545, 549, 550, 551, 552, 553, 555, 559, 560, 561, 563, 579, 580, 581, 583, 585, 587, 588, 590, 592, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 610, 618, 619, 622, 623, 624, 625, 645, 646, 649, 651, 652, 655, 656, 658, 659, 661, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 713, 717, 719, 721, 722, 723, 724, 725, 726, 728, 730, 732, 733, 734, 736, 737, 742, 745, 758, 763, 768, 769, 775, 776, 777, 780, 784, 787, 808, 815, 816, 819, 820, 821, 823, 828, 834, 835, 836, 839, 846, 858, 861, 902, 917, 927, 987, 1003, 1036, 1037, 1041, 1077, 1121, 1127, 1128, 1142, 1143, 1144, 1149, 1150, 1151, 1152, 1154, 1164, 1165, 1224], "selector": [0, 40, 157, 163, 165, 169, 213, 220, 222, 254, 262, 264, 295, 418, 746, 758, 765, 772, 773, 776, 803, 829, 858], "extend": [0, 106, 268, 295, 421, 746, 758, 867, 987, 1224], "function": [0, 40, 69, 78, 79, 80, 81, 82, 85, 87, 88, 104, 110, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 137, 138, 139, 140, 142, 152, 153, 161, 168, 176, 207, 213, 221, 222, 257, 261, 264, 265, 276, 281, 295, 305, 309, 357, 393, 415, 416, 417, 501, 509, 510, 511, 513, 533, 545, 549, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 589, 653, 663, 667, 681, 682, 685, 686, 687, 688, 698, 699, 701, 707, 709, 710, 711, 721, 742, 746, 758, 768, 769, 771, 777, 798, 799, 803, 807, 810, 841, 846, 858, 868, 917, 958, 980, 981, 982, 983, 999, 1069, 1077, 1095, 1106, 1107, 1120, 1123, 1130, 1135, 1206, 1224, 1232], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 57, 58, 59, 63, 69, 78, 79, 81, 86, 88, 93, 94, 98, 100, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 138, 139, 140, 142, 143, 144, 146, 152, 159, 170, 182, 183, 184, 185, 186, 187, 188, 201, 202, 203, 205, 207, 220, 221, 225, 231, 232, 233, 234, 243, 251, 256, 257, 261, 270, 273, 293, 295, 305, 306, 307, 311, 312, 313, 314, 315, 316, 319, 322, 323, 324, 325, 326, 328, 330, 331, 332, 335, 336, 340, 343, 344, 345, 358, 359, 364, 365, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 420, 431, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 459, 464, 465, 467, 474, 480, 482, 488, 500, 503, 508, 513, 540, 541, 544, 545, 553, 555, 556, 559, 561, 563, 565, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 587, 588, 589, 595, 597, 598, 600, 602, 603, 604, 605, 608, 609, 610, 622, 623, 624, 625, 633, 634, 635, 638, 641, 651, 652, 653, 655, 656, 659, 662, 667, 669, 689, 690, 691, 692, 693, 694, 695, 705, 706, 708, 709, 710, 711, 719, 722, 732, 733, 734, 737, 742, 746, 758, 766, 767, 768, 777, 784, 785, 786, 787, 788, 789, 807, 813, 834, 858, 865, 866, 867, 878, 882, 883, 884, 885, 887, 891, 893, 901, 902, 905, 918, 925, 926, 929, 930, 931, 933, 935, 937, 938, 942, 944, 947, 949, 950, 951, 952, 954, 955, 956, 958, 959, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 985, 986, 999, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1032, 1033, 1035, 1042, 1048, 1050, 1056, 1068, 1071, 1077, 1089, 1095, 1097, 1102, 1104, 1117, 1119, 1130, 1135, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1168, 1169, 1170, 1171, 1179, 1180, 1181, 1184, 1187, 1204, 1205, 1206, 1207, 1209, 1214, 1223, 1224, 1231], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 93, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 123, 124, 125, 128, 129, 130, 132, 136, 137, 138, 139, 140, 143, 144, 153, 176, 182, 184, 185, 187, 188, 189, 202, 203, 207, 231, 251, 257, 259, 262, 295, 305, 307, 311, 312, 313, 314, 315, 316, 319, 325, 328, 330, 331, 332, 335, 336, 337, 340, 343, 344, 345, 358, 359, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 418, 420, 431, 434, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 464, 465, 467, 474, 480, 482, 500, 501, 513, 553, 555, 559, 560, 561, 563, 565, 587, 588, 595, 597, 598, 600, 602, 603, 604, 605, 608, 609, 610, 622, 623, 624, 625, 633, 651, 652, 653, 659, 667, 669, 689, 690, 691, 692, 693, 694, 695, 697, 698, 705, 706, 707, 708, 709, 710, 711, 719, 722, 732, 733, 734, 737, 742, 746, 758, 768, 769, 775, 777, 785, 786, 788, 789, 793, 808, 813, 821, 829, 858, 865, 866, 878, 883, 885, 887, 891, 893, 895, 902, 918, 925, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 985, 997, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1032, 1033, 1035, 1042, 1048, 1050, 1068, 1069, 1089, 1095, 1101, 1102, 1104, 1130, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1168, 1169, 1170, 1171, 1179, 1204, 1205, 1207, 1215, 1224, 1231], "config": [0, 78, 237, 270, 295, 695, 758, 768, 815, 834, 858], "except": [0, 137, 190, 204, 206, 249, 295, 697, 758, 794, 858, 861, 998, 1028, 1195, 1205, 1214, 1224], "test": [0, 6, 116, 117, 119, 125, 758, 790, 797, 858], "util": [0, 110, 701, 758, 777, 858], "sql": [0, 38, 63, 67, 116, 117, 203, 241, 295, 493, 582, 726, 746, 758, 819, 858, 1061, 1127, 1224], "These": [1, 40, 116, 150, 261, 295, 407, 745, 746, 958, 972], "allow": [1, 13, 39, 40, 57, 58, 59, 69, 88, 93, 104, 116, 128, 131, 132, 133, 134, 144, 146, 152, 201, 204, 205, 232, 233, 235, 256, 257, 262, 273, 295, 389, 396, 399, 488, 511, 513, 558, 579, 633, 634, 635, 746, 793, 794, 798, 799, 803, 829, 836, 858, 861, 954, 961, 964, 979, 1056, 1077, 1099, 1119, 1122, 1179, 1180, 1181, 1206, 1224, 1232], "you": [1, 15, 19, 40, 45, 59, 68, 78, 85, 86, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 123, 124, 126, 128, 132, 134, 150, 170, 184, 185, 187, 188, 200, 201, 207, 218, 222, 231, 232, 233, 234, 253, 256, 261, 281, 295, 385, 386, 389, 392, 396, 399, 407, 418, 424, 441, 473, 501, 511, 513, 558, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 609, 681, 690, 695, 699, 711, 719, 722, 737, 746, 769, 773, 785, 786, 788, 789, 790, 797, 813, 821, 846, 858, 861, 867, 950, 951, 957, 958, 961, 964, 972, 986, 1003, 1041, 1077, 1099, 1105, 1155, 1181, 1214, 1224, 1232], "regist": [1, 63, 65, 66, 67, 68, 79, 80, 81, 82, 145, 147, 746, 1231], "custom": [1, 32, 39, 40, 79, 80, 81, 82, 145, 146, 147, 153, 207, 276, 281, 295, 309, 396, 399, 501, 509, 511, 513, 566, 567, 667, 709, 710, 711, 746, 798, 799, 841, 846, 858, 868, 961, 964, 1069, 1077, 1106, 1107, 1224, 1232], "dedic": [1, 104, 201, 233, 295], "namespac": [1, 294, 745, 758, 857, 1232], "underli": [1, 69, 88, 96, 103, 105, 106, 107, 109, 116, 123, 124, 126, 132, 141, 144, 146, 169, 170, 201, 202, 233, 251, 295, 329, 365, 366, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 392, 394, 408, 409, 410, 411, 558, 577, 596, 599, 746, 776, 858, 861, 867, 886, 896, 926, 927, 931, 935, 937, 938, 942, 944, 947, 949, 952, 955, 956, 957, 959, 973, 974, 975, 976, 986, 1099, 1117, 1130, 1142, 1145, 1200, 1205, 1224], "polar": [1, 295, 745, 746, 752, 758, 858, 861, 1224, 1231], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 142, 234, 257, 295, 733, 742, 746, 752, 758, 810, 858, 1204, 1205, 1224, 1231], "without": [1, 85, 110, 118, 121, 127, 129, 130, 134, 264, 265, 295, 309, 357, 393, 568, 569, 570, 571, 572, 574, 575, 576, 725, 746, 769, 858, 894, 897, 917, 958, 999, 1095, 1205, 1224], "requir": [1, 39, 40, 45, 59, 78, 104, 108, 116, 137, 138, 139, 140, 156, 161, 232, 257, 260, 295, 326, 415, 416, 417, 503, 513, 584, 633, 634, 635, 656, 722, 746, 763, 823, 828, 858, 884, 981, 982, 983, 1071, 1129, 1179, 1180, 1181, 1205, 1206, 1209, 1224], "subclass": [1, 295], "mixin": 1, "expr": [1, 78, 79, 80, 81, 82, 169, 171, 203, 204, 218, 222, 232, 237, 238, 270, 271, 295, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 742, 746, 747, 748, 751, 752, 753, 754, 755, 776, 778, 793, 794, 809, 815, 816, 817, 820, 834, 835, 858, 917, 927, 954, 972, 988, 993, 1030, 1031, 1036, 1037, 1041, 1046, 1062, 1066, 1128, 1142, 1147, 1172, 1196, 1224], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 57, 58, 59, 68, 69, 78, 85, 86, 87, 88, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 144, 150, 152, 156, 161, 165, 168, 171, 175, 176, 182, 183, 184, 185, 186, 187, 188, 201, 203, 204, 205, 207, 213, 214, 220, 222, 231, 232, 233, 234, 237, 238, 239, 241, 245, 252, 257, 260, 265, 266, 270, 271, 274, 295, 305, 307, 334, 340, 346, 348, 350, 351, 393, 407, 412, 414, 415, 416, 417, 441, 443, 446, 447, 450, 452, 453, 454, 457, 460, 462, 482, 493, 501, 511, 512, 541, 545, 553, 556, 559, 560, 561, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 586, 589, 591, 592, 605, 606, 607, 608, 615, 616, 617, 641, 647, 663, 664, 666, 672, 675, 676, 677, 678, 684, 688, 690, 691, 693, 694, 713, 717, 725, 728, 730, 733, 734, 736, 738, 739, 741, 745, 746, 747, 748, 751, 752, 753, 754, 755, 758, 763, 768, 769, 773, 777, 778, 784, 785, 786, 787, 788, 789, 790, 793, 794, 797, 799, 803, 804, 808, 811, 813, 815, 816, 818, 819, 823, 828, 831, 834, 835, 836, 839, 858, 861, 865, 866, 867, 894, 902, 911, 912, 958, 972, 978, 980, 981, 982, 983, 996, 1003, 1007, 1011, 1012, 1016, 1017, 1018, 1019, 1026, 1027, 1030, 1050, 1061, 1069, 1095, 1097, 1102, 1113, 1127, 1132, 1135, 1151, 1152, 1153, 1161, 1162, 1163, 1181, 1187, 1194, 1206, 1214, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1230, 1232], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 40, 46, 57, 65, 78, 84, 103, 106, 108, 109, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 132, 141, 142, 146, 150, 157, 162, 165, 172, 190, 196, 198, 200, 201, 202, 205, 206, 211, 213, 217, 218, 225, 232, 233, 234, 238, 244, 248, 249, 254, 256, 262, 264, 265, 266, 271, 295, 306, 308, 327, 346, 357, 362, 363, 364, 418, 423, 429, 436, 438, 440, 443, 447, 453, 454, 456, 460, 472, 473, 480, 496, 501, 510, 511, 529, 532, 533, 534, 535, 536, 537, 543, 551, 556, 562, 567, 584, 590, 592, 597, 598, 604, 605, 606, 607, 608, 613, 618, 619, 621, 627, 628, 629, 630, 646, 664, 681, 682, 683, 684, 687, 688, 690, 697, 699, 704, 721, 728, 729, 730, 736, 746, 752, 758, 765, 768, 769, 773, 775, 777, 779, 798, 799, 803, 808, 816, 821, 822, 829, 831, 835, 836, 858, 861, 917, 919, 922, 923, 925, 998, 1005, 1023, 1028, 1040, 1041, 1048, 1064, 1069, 1097, 1107, 1136, 1143, 1144, 1150, 1151, 1152, 1153, 1154, 1159, 1164, 1165, 1167, 1173, 1174, 1175, 1176, 1195, 1224, 1231, 1232], "support": [1, 39, 40, 45, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 119, 123, 124, 125, 129, 130, 133, 141, 146, 150, 201, 202, 203, 204, 208, 210, 215, 233, 234, 244, 245, 247, 253, 257, 295, 494, 545, 590, 592, 622, 742, 746, 752, 793, 794, 822, 823, 858, 861, 1062, 1136, 1168, 1206, 1224, 1231], "target": [1, 38, 39, 40, 83, 119, 295, 603, 633, 634, 635, 861, 1149, 1179, 1180, 1181], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 39, 40, 43, 45, 49, 57, 58, 59, 63, 64, 68, 69, 78, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 159, 161, 165, 166, 168, 170, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 210, 212, 213, 214, 215, 217, 218, 220, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 237, 238, 241, 242, 244, 246, 247, 250, 251, 253, 256, 257, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 276, 277, 281, 294, 295, 305, 308, 309, 310, 319, 326, 333, 334, 336, 337, 340, 346, 352, 353, 354, 355, 356, 357, 358, 364, 365, 377, 385, 386, 389, 392, 393, 396, 399, 407, 410, 414, 420, 436, 439, 440, 441, 444, 446, 448, 451, 456, 460, 468, 471, 473, 474, 479, 480, 482, 483, 488, 489, 490, 491, 492, 493, 495, 497, 501, 502, 503, 506, 507, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 532, 534, 535, 536, 537, 538, 539, 541, 545, 551, 553, 556, 557, 558, 559, 561, 564, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 579, 581, 582, 583, 584, 585, 590, 591, 592, 597, 603, 607, 611, 612, 613, 614, 615, 616, 617, 620, 621, 627, 628, 629, 630, 631, 632, 636, 641, 643, 646, 649, 650, 654, 656, 657, 658, 659, 663, 667, 668, 676, 679, 681, 685, 687, 688, 690, 698, 699, 701, 707, 709, 711, 722, 725, 733, 736, 742, 746, 758, 759, 761, 762, 763, 764, 767, 768, 769, 773, 775, 777, 782, 784, 785, 786, 787, 788, 789, 791, 793, 794, 798, 799, 803, 804, 808, 810, 811, 813, 815, 816, 817, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 837, 838, 841, 842, 846, 857, 858, 861, 867, 868, 877, 884, 890, 893, 895, 896, 897, 902, 905, 913, 914, 915, 916, 917, 918, 925, 926, 927, 938, 950, 951, 954, 957, 958, 961, 964, 972, 975, 980, 985, 986, 995, 997, 999, 1004, 1008, 1010, 1011, 1013, 1014, 1020, 1022, 1024, 1025, 1027, 1036, 1039, 1041, 1042, 1047, 1048, 1050, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1065, 1067, 1070, 1071, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1090, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1105, 1106, 1108, 1109, 1111, 1114, 1115, 1116, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1136, 1137, 1139, 1143, 1149, 1153, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1167, 1173, 1174, 1175, 1176, 1181, 1182, 1187, 1188, 1193, 1194, 1196, 1197, 1200, 1202, 1204, 1205, 1206, 1208, 1209, 1211, 1212, 1213, 1214, 1224, 1231, 1232], "featur": [1, 45, 49, 83, 295], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 57, 58, 59, 63, 68, 69, 78, 83, 84, 85, 86, 88, 90, 92, 93, 95, 99, 101, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 154, 156, 159, 162, 165, 167, 168, 170, 173, 177, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 210, 213, 214, 218, 220, 221, 222, 229, 231, 232, 233, 234, 235, 238, 241, 244, 245, 246, 247, 249, 251, 256, 257, 260, 261, 262, 264, 265, 266, 267, 271, 273, 277, 281, 294, 295, 302, 305, 307, 308, 309, 310, 320, 334, 357, 358, 362, 363, 364, 366, 376, 389, 393, 396, 407, 415, 416, 417, 420, 424, 436, 439, 441, 457, 463, 472, 473, 476, 477, 488, 493, 494, 499, 501, 506, 511, 513, 517, 520, 521, 522, 545, 553, 556, 558, 559, 561, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 580, 581, 582, 585, 586, 589, 590, 591, 592, 594, 595, 596, 597, 598, 603, 604, 605, 608, 609, 613, 615, 616, 617, 618, 621, 622, 625, 627, 628, 629, 630, 633, 634, 635, 638, 641, 659, 660, 663, 665, 668, 673, 676, 678, 679, 680, 681, 682, 685, 686, 690, 691, 693, 694, 699, 708, 711, 722, 723, 724, 725, 727, 733, 734, 735, 736, 742, 746, 761, 763, 767, 768, 769, 773, 775, 777, 780, 782, 784, 785, 786, 787, 788, 789, 792, 793, 794, 796, 798, 799, 803, 804, 808, 813, 816, 817, 819, 821, 822, 823, 824, 828, 829, 831, 832, 835, 838, 841, 842, 846, 858, 861, 865, 866, 867, 868, 894, 897, 902, 905, 917, 918, 919, 922, 923, 925, 927, 937, 954, 958, 961, 972, 979, 980, 981, 982, 983, 985, 986, 990, 996, 997, 998, 999, 1004, 1006, 1013, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1031, 1040, 1041, 1044, 1045, 1056, 1061, 1062, 1067, 1069, 1077, 1095, 1097, 1099, 1102, 1105, 1107, 1114, 1116, 1119, 1120, 1121, 1122, 1123, 1125, 1127, 1131, 1132, 1135, 1136, 1139, 1141, 1142, 1143, 1144, 1149, 1150, 1151, 1154, 1155, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1171, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1187, 1195, 1200, 1205, 1206, 1212, 1213, 1214, 1224, 1231, 1232], "primarili": 1, "intend": [1, 137, 138, 139, 140, 641, 1187], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 57, 59, 63, 64, 65, 66, 68, 69, 78, 85, 86, 87, 88, 104, 106, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 153, 154, 157, 163, 165, 171, 172, 173, 176, 183, 184, 185, 186, 187, 188, 196, 198, 200, 201, 202, 204, 207, 208, 210, 213, 215, 217, 218, 220, 221, 222, 231, 232, 233, 234, 235, 237, 238, 242, 245, 246, 247, 253, 254, 255, 256, 257, 261, 262, 264, 265, 266, 267, 270, 271, 274, 281, 295, 303, 305, 307, 309, 310, 320, 329, 330, 337, 341, 342, 357, 362, 363, 371, 375, 379, 381, 383, 388, 392, 393, 395, 396, 399, 407, 410, 412, 415, 416, 417, 418, 423, 424, 440, 441, 457, 473, 488, 501, 511, 512, 513, 516, 545, 553, 556, 558, 560, 561, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 581, 583, 584, 589, 591, 592, 594, 596, 599, 600, 601, 603, 604, 606, 607, 609, 610, 618, 622, 624, 626, 629, 630, 631, 632, 633, 634, 635, 638, 641, 660, 663, 664, 665, 666, 668, 674, 677, 678, 680, 681, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 699, 701, 708, 711, 712, 713, 716, 717, 719, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 737, 742, 745, 746, 757, 758, 761, 765, 768, 769, 772, 773, 777, 778, 779, 780, 782, 784, 785, 786, 788, 789, 790, 794, 796, 797, 803, 813, 815, 816, 820, 823, 824, 829, 831, 832, 834, 835, 839, 846, 858, 861, 865, 866, 867, 868, 886, 887, 895, 897, 903, 904, 917, 918, 922, 923, 932, 936, 943, 945, 948, 953, 957, 958, 960, 961, 964, 972, 975, 978, 981, 982, 983, 988, 989, 993, 996, 999, 1002, 1003, 1004, 1010, 1013, 1020, 1022, 1024, 1026, 1041, 1056, 1069, 1076, 1077, 1095, 1097, 1099, 1101, 1102, 1105, 1107, 1119, 1120, 1123, 1125, 1128, 1129, 1135, 1139, 1142, 1145, 1146, 1149, 1150, 1152, 1153, 1155, 1156, 1164, 1168, 1170, 1179, 1180, 1181, 1184, 1187, 1196, 1201, 1203, 1204, 1205, 1206, 1213, 1214, 1224, 1231, 1232], "librari": [1, 96, 116, 119, 511, 746, 1232], "author": 1, "domain": [1, 604, 1150], "specif": [1, 35, 39, 40, 103, 105, 107, 109, 114, 117, 118, 119, 123, 124, 125, 129, 143, 144, 157, 201, 295, 396, 399, 633, 634, 635, 638, 765, 858, 861, 961, 964, 1179, 1180, 1181, 1184, 1224, 1232], "capabl": [1, 40, 295], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 69, 78, 79, 80, 81, 82, 106, 114, 115, 116, 117, 118, 119, 128, 129, 130, 137, 138, 145, 147, 156, 157, 165, 170, 171, 183, 184, 185, 186, 187, 188, 194, 204, 231, 256, 260, 262, 266, 295, 305, 334, 389, 393, 396, 407, 421, 441, 443, 447, 450, 452, 453, 454, 501, 513, 522, 560, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 617, 690, 691, 693, 694, 695, 733, 734, 736, 746, 763, 765, 773, 775, 785, 786, 788, 789, 794, 813, 817, 828, 829, 838, 858, 867, 954, 958, 961, 972, 986, 987, 1003, 1007, 1012, 1016, 1017, 1018, 1019, 1069, 1105, 1123, 1163, 1205, 1224, 1232], "mai": [1, 39, 49, 59, 85, 86, 103, 105, 106, 107, 109, 114, 116, 118, 120, 123, 124, 129, 130, 131, 132, 134, 137, 139, 168, 170, 184, 204, 207, 231, 242, 257, 264, 265, 266, 295, 309, 357, 364, 365, 377, 389, 393, 407, 418, 476, 499, 501, 511, 513, 521, 565, 568, 569, 570, 571, 572, 574, 575, 576, 583, 609, 681, 682, 685, 686, 690, 691, 693, 694, 699, 721, 733, 734, 746, 768, 769, 777, 785, 794, 798, 799, 813, 820, 831, 837, 841, 846, 858, 867, 896, 897, 917, 925, 926, 938, 954, 958, 972, 980, 986, 999, 1044, 1077, 1095, 1128, 1155, 1181, 1205, 1224, 1232], "exist": [1, 38, 39, 40, 78, 118, 129, 144, 261, 265, 270, 271, 295, 304, 328, 331, 332, 366, 512, 746, 811, 831, 834, 835, 858, 861, 927, 1076, 1224], "belong": [1, 184, 295, 785, 858], "core": [1, 257, 295, 1232], "cannot": [1, 114, 115, 119, 120, 125, 148, 207, 234, 235, 281, 295, 329, 418, 488, 513, 579, 599, 624, 644, 711, 746, 821, 846, 858, 886, 1056, 1077, 1119, 1145, 1170, 1224], "overrid": [1, 40, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 123, 124, 125, 141, 142, 146, 148, 295, 512, 560, 746, 858, 1076, 1101, 1224], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 57, 58, 59, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 145, 146, 147, 150, 156, 157, 160, 162, 163, 164, 165, 166, 168, 169, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 187, 188, 190, 192, 196, 198, 199, 201, 203, 204, 208, 210, 212, 213, 214, 215, 218, 220, 222, 224, 226, 227, 229, 230, 231, 232, 233, 235, 239, 242, 244, 245, 246, 247, 249, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 303, 304, 328, 330, 331, 332, 336, 358, 361, 367, 389, 392, 393, 396, 399, 407, 418, 420, 424, 426, 430, 431, 434, 439, 441, 466, 467, 477, 478, 480, 494, 498, 501, 510, 513, 521, 523, 524, 526, 533, 534, 535, 536, 537, 542, 545, 549, 551, 553, 559, 560, 562, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 584, 591, 592, 642, 643, 644, 646, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 674, 677, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 742, 746, 753, 763, 765, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 782, 784, 785, 786, 788, 789, 791, 793, 794, 803, 804, 808, 810, 811, 812, 813, 817, 818, 820, 821, 822, 823, 828, 829, 830, 831, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 864, 891, 893, 918, 919, 928, 954, 957, 958, 961, 964, 972, 985, 989, 1035, 1036, 1037, 1048, 1069, 1086, 1087, 1095, 1100, 1101, 1120, 1123, 1124, 1188, 1191, 1201, 1202, 1203, 1212, 1224, 1228, 1231, 1232], "dt": [1, 78, 119, 125, 231, 295, 565, 695, 746, 755, 813, 858, 861, 1230], "attempt": [1, 256, 295], "do": [1, 40, 57, 58, 59, 78, 84, 85, 86, 114, 128, 137, 138, 139, 140, 170, 184, 185, 187, 188, 200, 204, 222, 231, 251, 261, 264, 295, 357, 473, 545, 565, 628, 629, 630, 719, 722, 737, 746, 768, 769, 775, 785, 786, 788, 789, 794, 798, 799, 808, 813, 821, 858, 861, 867, 917, 986, 1041, 1174, 1175, 1176, 1214, 1224], "so": [1, 116, 117, 128, 148, 182, 184, 185, 187, 188, 222, 231, 295, 320, 334, 441, 477, 501, 513, 565, 628, 629, 630, 746, 785, 786, 788, 789, 813, 858, 1045, 1174, 1175, 1176], "rais": [1, 20, 21, 25, 39, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 119, 125, 128, 137, 139, 152, 222, 232, 295, 329, 392, 393, 407, 476, 499, 521, 553, 596, 599, 617, 633, 634, 635, 638, 692, 708, 746, 886, 957, 958, 972, 1044, 1067, 1095, 1142, 1145, 1163, 1179, 1180, 1181, 1184, 1205, 1214, 1224], "an": [1, 35, 37, 38, 39, 40, 49, 57, 58, 79, 81, 82, 84, 85, 88, 93, 94, 96, 103, 114, 115, 116, 117, 118, 119, 121, 125, 126, 128, 130, 131, 142, 144, 146, 157, 158, 159, 168, 171, 176, 184, 185, 187, 188, 200, 201, 202, 204, 207, 218, 222, 228, 229, 231, 232, 251, 256, 261, 264, 265, 270, 281, 295, 304, 325, 329, 335, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 366, 367, 389, 392, 396, 410, 421, 423, 424, 430, 431, 434, 456, 468, 469, 473, 476, 477, 499, 500, 501, 510, 511, 513, 522, 532, 533, 552, 553, 561, 564, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 596, 599, 604, 606, 633, 634, 635, 638, 649, 655, 663, 669, 673, 690, 691, 693, 694, 696, 701, 705, 706, 708, 719, 721, 722, 725, 728, 733, 734, 736, 737, 742, 746, 758, 765, 766, 767, 768, 769, 775, 777, 780, 785, 786, 788, 789, 794, 799, 808, 813, 821, 831, 834, 836, 846, 858, 861, 883, 886, 891, 901, 903, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 927, 961, 975, 980, 987, 1013, 1025, 1036, 1037, 1041, 1044, 1045, 1067, 1068, 1077, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1120, 1123, 1142, 1145, 1150, 1152, 1179, 1180, 1181, 1184, 1205, 1214, 1224, 1231], "attributeerror": 1, "howev": [1, 106, 116, 168, 207, 256, 295, 980, 1224], "can": [1, 19, 32, 39, 40, 45, 48, 68, 69, 78, 87, 88, 94, 104, 106, 114, 115, 116, 119, 120, 125, 126, 128, 131, 133, 134, 142, 143, 144, 146, 148, 150, 156, 158, 165, 166, 176, 183, 184, 185, 186, 187, 188, 196, 198, 200, 207, 218, 222, 231, 234, 237, 245, 256, 260, 261, 264, 270, 281, 295, 305, 309, 348, 351, 357, 385, 386, 389, 392, 407, 421, 441, 456, 473, 501, 513, 521, 529, 532, 534, 535, 536, 537, 545, 551, 553, 558, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 581, 584, 586, 589, 592, 608, 628, 629, 630, 633, 646, 672, 699, 701, 711, 736, 742, 745, 746, 757, 763, 768, 773, 775, 777, 785, 786, 788, 789, 813, 815, 817, 823, 828, 834, 837, 858, 861, 868, 897, 917, 918, 950, 951, 954, 957, 958, 972, 987, 1003, 1041, 1069, 1077, 1082, 1095, 1099, 1101, 1120, 1123, 1125, 1129, 1132, 1135, 1143, 1144, 1151, 1154, 1174, 1175, 1176, 1179, 1181, 1205, 1224, 1231], "other": [1, 25, 39, 40, 45, 68, 85, 114, 115, 116, 128, 137, 138, 139, 140, 165, 167, 170, 177, 203, 204, 213, 214, 232, 234, 237, 238, 265, 268, 270, 271, 293, 295, 302, 306, 308, 320, 340, 361, 413, 414, 428, 433, 435, 441, 446, 459, 466, 471, 479, 489, 490, 491, 492, 497, 502, 508, 517, 520, 528, 530, 540, 541, 544, 560, 592, 645, 653, 655, 662, 664, 666, 675, 676, 677, 684, 688, 690, 713, 717, 725, 728, 730, 746, 758, 769, 773, 793, 794, 803, 804, 815, 816, 831, 834, 835, 836, 858, 861, 867, 902, 921, 979, 986, 1011, 1034, 1039, 1047, 1057, 1058, 1059, 1060, 1065, 1070, 1122, 1207, 1215, 1223, 1224], "onli": [1, 15, 18, 25, 35, 37, 40, 57, 63, 65, 69, 78, 83, 86, 88, 114, 115, 118, 120, 122, 126, 128, 129, 131, 132, 133, 134, 144, 146, 150, 153, 165, 170, 184, 187, 189, 201, 203, 204, 207, 208, 210, 215, 222, 231, 233, 234, 247, 253, 255, 256, 265, 266, 281, 295, 303, 305, 307, 309, 320, 334, 339, 340, 389, 397, 418, 427, 436, 456, 513, 532, 534, 535, 536, 537, 545, 551, 558, 568, 569, 570, 571, 572, 574, 575, 576, 646, 657, 690, 691, 711, 746, 768, 773, 785, 786, 788, 789, 790, 793, 794, 797, 813, 831, 846, 858, 865, 866, 867, 899, 902, 918, 954, 986, 992, 997, 1013, 1077, 1095, 1099, 1200, 1203, 1224, 1231, 1232], "gener": [1, 116, 117, 135, 141, 142, 143, 144, 146, 152, 161, 222, 235, 254, 256, 261, 295, 488, 579, 585, 669, 690, 693, 705, 706, 722, 733, 734, 746, 858, 1056, 1119, 1131, 1201, 1224, 1232], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 759, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 992, 993, 994, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1030, 1031, 1038, 1040, 1041, 1042, 1046, 1048, 1050, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1066, 1068, 1069, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1127, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1161, 1162, 1164, 1165, 1168, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1224, 1231, 1232], "register_expr_namespac": [1, 79, 81, 82], "greet": 1, "def": [1, 69, 79, 80, 81, 82, 142, 143, 144, 146, 150, 221, 261, 295, 302, 549, 604, 630, 662, 710, 746, 769, 807, 858, 861, 1150, 1232], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 1231], "self": [1, 64, 65, 66, 68, 79, 80, 81, 82, 84, 85, 158, 159, 162, 170, 190, 192, 193, 194, 206, 208, 210, 212, 213, 215, 219, 220, 222, 224, 225, 227, 228, 229, 235, 243, 244, 246, 247, 249, 254, 261, 263, 266, 267, 268, 272, 273, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 527, 528, 529, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 742, 746, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 858, 867, 868, 891, 905, 986, 990, 1000, 1075, 1076, 1077, 1088, 1092, 1093, 1098, 1101, 1120, 1123, 1125, 1137, 1211, 1215, 1224], "_expr": [1, 80], "hello": [1, 25, 64, 67, 628, 629, 630, 1048, 1174, 1175, 1176], "return": [1, 10, 11, 35, 37, 40, 41, 42, 43, 44, 57, 58, 59, 63, 67, 69, 78, 79, 80, 81, 82, 83, 84, 85, 95, 97, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 143, 153, 156, 158, 161, 164, 166, 168, 169, 170, 171, 172, 175, 176, 178, 179, 182, 183, 184, 186, 187, 190, 192, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 216, 217, 218, 220, 221, 222, 231, 232, 233, 234, 235, 248, 249, 250, 256, 257, 260, 261, 262, 266, 270, 271, 279, 281, 284, 289, 295, 305, 307, 311, 312, 313, 314, 315, 316, 319, 320, 325, 328, 330, 331, 332, 333, 343, 344, 345, 346, 358, 359, 364, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 420, 431, 432, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 460, 461, 464, 465, 467, 474, 476, 477, 478, 480, 482, 483, 488, 498, 499, 500, 507, 512, 522, 524, 529, 549, 553, 555, 559, 560, 561, 563, 579, 580, 586, 587, 588, 595, 597, 598, 600, 602, 603, 604, 605, 608, 609, 610, 611, 612, 614, 615, 616, 620, 622, 623, 624, 625, 641, 648, 650, 651, 652, 654, 655, 657, 658, 659, 662, 663, 667, 669, 670, 671, 672, 673, 689, 690, 691, 692, 693, 694, 695, 701, 703, 705, 706, 708, 709, 710, 711, 719, 722, 725, 728, 731, 732, 733, 734, 736, 737, 746, 763, 766, 768, 769, 774, 775, 777, 783, 785, 786, 788, 789, 790, 796, 797, 799, 807, 808, 813, 817, 821, 826, 827, 828, 829, 834, 835, 838, 844, 849, 854, 858, 865, 866, 867, 875, 876, 878, 879, 883, 885, 887, 890, 894, 897, 901, 918, 919, 925, 929, 930, 931, 933, 935, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 958, 959, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 979, 980, 985, 986, 994, 996, 998, 999, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1025, 1027, 1028, 1032, 1033, 1035, 1042, 1044, 1045, 1046, 1048, 1050, 1051, 1056, 1066, 1067, 1068, 1075, 1076, 1077, 1082, 1089, 1095, 1101, 1102, 1103, 1104, 1105, 1119, 1121, 1122, 1132, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1166, 1168, 1169, 1170, 1171, 1187, 1195, 1197, 1208, 1210, 1211, 1212, 1215, 1224, 1231, 1232], "lit": [1, 304, 328, 441, 456, 532, 681, 685, 699, 719, 722, 737, 746, 989, 1224], "alia": [1, 17, 78, 80, 82, 184, 206, 222, 231, 263, 270, 295, 302, 306, 328, 330, 331, 332, 333, 347, 348, 349, 350, 351, 358, 360, 364, 365, 366, 367, 370, 372, 373, 374, 377, 378, 382, 384, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 426, 428, 433, 435, 439, 441, 445, 449, 456, 459, 460, 461, 508, 513, 517, 518, 519, 520, 522, 525, 528, 530, 532, 540, 541, 544, 546, 550, 553, 556, 558, 560, 578, 580, 596, 598, 601, 603, 604, 609, 610, 622, 623, 624, 625, 626, 631, 632, 642, 643, 644, 645, 653, 654, 655, 661, 662, 669, 670, 671, 674, 675, 676, 677, 690, 695, 696, 699, 700, 710, 711, 721, 722, 728, 733, 736, 746, 785, 791, 797, 813, 830, 834, 858, 918, 926, 928, 934, 954, 957, 961, 963, 1028, 1041, 1095, 1100, 1149, 1150, 1170, 1171, 1224], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 64, 67, 628, 629, 630, 639, 1048, 1174, 1175, 1176, 1185], "select": [1, 13, 38, 63, 64, 65, 78, 79, 80, 81, 113, 114, 115, 116, 117, 118, 120, 122, 126, 128, 134, 143, 199, 200, 204, 207, 218, 221, 232, 238, 244, 258, 263, 266, 295, 301, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 338, 339, 343, 344, 345, 346, 357, 359, 360, 361, 362, 363, 365, 366, 367, 376, 377, 378, 385, 386, 389, 392, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 425, 427, 429, 432, 436, 438, 439, 440, 442, 443, 447, 455, 456, 457, 458, 460, 473, 474, 501, 504, 505, 506, 507, 511, 513, 514, 515, 516, 527, 529, 531, 532, 538, 539, 542, 543, 544, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 573, 577, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 603, 604, 605, 633, 642, 644, 647, 651, 652, 654, 656, 657, 658, 659, 660, 663, 665, 668, 670, 671, 672, 673, 674, 676, 678, 679, 680, 683, 695, 697, 698, 699, 700, 701, 703, 707, 712, 714, 715, 716, 718, 721, 722, 726, 727, 728, 729, 731, 735, 742, 746, 770, 794, 807, 816, 817, 822, 830, 836, 858, 861, 882, 884, 957, 993, 1030, 1031, 1041, 1120, 1123, 1136, 1154, 1179, 1196, 1224, 1231], "shapecolumn_0": [1, 207, 261, 295], "register_dataframe_namespac": [1, 80, 81, 82], "split": [1, 40, 79, 202, 295, 624, 625, 1170, 1171], "splitfram": [1, 79], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 64, 79, 80, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 128, 142, 144, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 742, 746, 785, 813, 817, 830, 831, 844, 846, 854, 858, 861, 882, 884, 895, 957, 1030, 1031, 1041, 1154, 1165, 1170, 1171, 1202, 1224, 1232], "_df": [1, 79], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 63, 67, 78, 79, 81, 84, 85, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 146, 160, 163, 166, 168, 169, 173, 181, 183, 184, 192, 201, 217, 220, 232, 233, 234, 237, 245, 252, 253, 261, 262, 263, 264, 270, 274, 275, 295, 303, 325, 326, 358, 420, 426, 431, 438, 446, 509, 511, 513, 522, 523, 545, 553, 559, 561, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 591, 592, 604, 623, 642, 644, 649, 653, 672, 676, 691, 694, 696, 704, 706, 708, 711, 726, 728, 734, 746, 770, 774, 776, 780, 784, 785, 815, 823, 829, 830, 834, 836, 839, 840, 858, 861, 883, 884, 900, 918, 980, 985, 990, 993, 995, 999, 1000, 1011, 1095, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1121, 1150, 1169, 1196, 1204, 1207, 1224, 1232], "with_row_count": [1, 295, 560, 568, 569, 571, 574, 575, 576, 746, 858, 1120, 1224], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 57, 64, 65, 66, 67, 68, 79, 80, 81, 82, 86, 92, 103, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 156, 157, 160, 163, 164, 165, 169, 173, 174, 175, 179, 180, 182, 183, 186, 199, 200, 201, 203, 204, 207, 209, 211, 213, 214, 216, 220, 222, 226, 232, 233, 234, 236, 237, 238, 245, 248, 252, 254, 256, 259, 260, 261, 262, 263, 264, 265, 270, 271, 272, 273, 274, 295, 304, 309, 328, 330, 331, 332, 358, 418, 441, 450, 452, 453, 454, 456, 501, 510, 513, 521, 523, 525, 545, 551, 553, 562, 592, 604, 605, 642, 644, 646, 663, 664, 665, 666, 668, 670, 671, 672, 675, 676, 677, 678, 680, 683, 684, 687, 688, 690, 697, 703, 704, 712, 713, 716, 717, 720, 722, 723, 724, 725, 728, 729, 730, 731, 733, 736, 742, 746, 763, 765, 770, 772, 773, 776, 780, 784, 787, 793, 794, 803, 804, 811, 814, 815, 816, 817, 823, 828, 829, 830, 831, 834, 835, 836, 837, 839, 858, 861, 864, 901, 918, 1069, 1095, 1100, 1149, 1150, 1151, 1164, 1188, 1191, 1201, 1202, 1206, 1224, 1231, 1232], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 57, 65, 66, 79, 80, 81, 82, 112, 114, 115, 128, 153, 158, 170, 178, 184, 190, 201, 202, 206, 207, 233, 234, 235, 241, 242, 246, 249, 250, 253, 255, 267, 279, 289, 295, 333, 357, 360, 365, 366, 373, 398, 410, 421, 432, 437, 461, 470, 478, 488, 489, 493, 498, 501, 546, 549, 559, 574, 576, 579, 582, 583, 589, 594, 609, 610, 618, 624, 625, 628, 629, 635, 648, 650, 654, 655, 660, 662, 678, 680, 690, 691, 692, 693, 694, 695, 701, 703, 719, 722, 723, 724, 727, 731, 735, 737, 746, 766, 768, 783, 785, 790, 797, 819, 820, 824, 826, 827, 832, 844, 854, 858, 861, 867, 890, 901, 917, 920, 926, 927, 934, 963, 975, 986, 987, 994, 998, 1028, 1038, 1046, 1056, 1057, 1061, 1066, 1069, 1091, 1114, 1116, 1119, 1127, 1128, 1135, 1139, 1155, 1156, 1164, 1170, 1171, 1181, 1195, 1197, 1203, 1208, 1213, 1224, 1231, 1232], "filter": [1, 79, 118, 128, 129, 134, 165, 196, 197, 198, 222, 281, 295, 521, 523, 601, 626, 661, 699, 736, 746, 773, 777, 791, 846, 858, 861, 1123, 1224], "col": [1, 17, 37, 40, 57, 78, 79, 80, 81, 107, 109, 128, 142, 144, 173, 183, 184, 197, 199, 205, 207, 218, 221, 222, 231, 232, 237, 245, 263, 264, 270, 274, 295, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 439, 440, 441, 442, 445, 446, 449, 450, 452, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 673, 675, 676, 677, 683, 695, 698, 699, 700, 701, 702, 707, 712, 716, 720, 721, 729, 736, 746, 767, 780, 784, 785, 791, 796, 807, 813, 815, 823, 830, 834, 836, 839, 858, 861, 882, 884, 895, 954, 957, 1030, 1031, 1041, 1102, 1120, 1123, 1154, 1179, 1224, 1232], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 59, 60, 63, 68, 78, 79, 80, 82, 86, 88, 104, 114, 115, 116, 117, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 136, 141, 142, 143, 144, 146, 152, 153, 155, 157, 158, 159, 161, 162, 163, 166, 167, 171, 172, 174, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 233, 234, 235, 236, 237, 242, 244, 245, 246, 247, 248, 250, 254, 255, 256, 257, 258, 261, 264, 266, 267, 270, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 301, 303, 304, 306, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 334, 335, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 371, 374, 375, 378, 379, 381, 382, 383, 388, 392, 394, 395, 402, 403, 405, 406, 407, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 427, 428, 433, 435, 436, 440, 443, 444, 447, 448, 450, 451, 452, 453, 454, 456, 457, 459, 464, 465, 468, 469, 471, 473, 476, 477, 479, 483, 485, 497, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 522, 527, 528, 530, 532, 538, 539, 540, 541, 543, 544, 546, 549, 550, 551, 553, 554, 555, 556, 560, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 586, 587, 588, 589, 593, 594, 597, 598, 603, 604, 607, 611, 612, 613, 614, 617, 620, 621, 627, 633, 635, 645, 646, 647, 649, 650, 651, 652, 653, 655, 660, 661, 663, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 685, 687, 688, 690, 692, 696, 699, 705, 706, 709, 711, 714, 715, 719, 720, 721, 722, 726, 732, 733, 734, 735, 736, 737, 742, 746, 762, 765, 766, 767, 772, 774, 778, 779, 782, 784, 785, 786, 787, 788, 789, 792, 793, 796, 798, 799, 802, 806, 808, 809, 810, 814, 815, 820, 821, 823, 824, 827, 832, 834, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 861, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 891, 896, 898, 899, 901, 903, 904, 906, 907, 908, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 932, 935, 936, 940, 941, 942, 943, 944, 945, 947, 948, 952, 953, 957, 958, 959, 960, 967, 968, 970, 971, 972, 978, 981, 982, 983, 988, 992, 997, 999, 1002, 1004, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1036, 1039, 1041, 1045, 1047, 1051, 1065, 1067, 1069, 1070, 1075, 1076, 1079, 1080, 1091, 1095, 1096, 1097, 1101, 1105, 1106, 1107, 1109, 1110, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1122, 1124, 1128, 1132, 1133, 1134, 1138, 1139, 1143, 1144, 1149, 1150, 1153, 1154, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1179, 1181, 1196, 1197, 1198, 1199, 1201, 1206, 1207, 1211, 1213, 1214, 1224, 1232], "drop": [1, 106, 164, 165, 207, 262, 270, 295, 360, 362, 363, 470, 472, 553, 746, 773, 829, 834, 858, 920, 922, 923, 1038, 1040, 1095, 1224], "aaa": [1, 40, 295, 596, 642, 644, 1142], "bbb": [1, 40, 295, 642, 644, 861], "ccc": [1, 40, 295, 642, 644], "ddd": [1, 40, 295, 642, 644], "eee": [1, 40, 295, 861], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 69, 78, 79, 86, 88, 90, 92, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 156, 157, 161, 163, 164, 165, 166, 169, 173, 174, 175, 179, 180, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 245, 246, 247, 248, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 274, 295, 304, 305, 307, 319, 325, 340, 346, 358, 366, 368, 369, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 394, 396, 397, 399, 408, 409, 411, 418, 420, 424, 426, 441, 456, 460, 466, 474, 476, 495, 499, 500, 501, 512, 513, 519, 521, 523, 532, 534, 535, 536, 537, 545, 551, 553, 557, 559, 560, 561, 565, 568, 569, 570, 571, 572, 574, 575, 576, 584, 591, 592, 595, 602, 624, 625, 633, 634, 635, 636, 638, 643, 646, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 763, 765, 772, 773, 774, 776, 780, 784, 785, 786, 787, 788, 789, 793, 794, 799, 800, 801, 802, 803, 805, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 846, 858, 861, 865, 866, 883, 894, 896, 902, 918, 929, 930, 931, 935, 937, 938, 942, 944, 947, 949, 952, 955, 956, 959, 961, 962, 964, 973, 974, 976, 985, 996, 1034, 1042, 1044, 1063, 1068, 1095, 1101, 1102, 1129, 1141, 1148, 1170, 1171, 1179, 1180, 1181, 1182, 1184, 1193, 1201, 1202, 1224, 1232], "txt": [1, 17, 128], "utf8": [1, 25, 39, 106, 114, 115, 128, 141, 143, 146, 157, 166, 168, 169, 176, 236, 256, 295, 330, 396, 399, 480, 560, 595, 600, 602, 603, 604, 605, 608, 622, 623, 624, 625, 633, 634, 635, 636, 638, 641, 677, 746, 765, 774, 776, 814, 858, 861, 961, 964, 1024, 1048, 1141, 1146, 1148, 1149, 1150, 1151, 1154, 1168, 1169, 1170, 1171, 1179, 1180, 1181, 1182, 1184, 1187, 1224], "register_lazyframe_namespac": [1, 79, 80, 82], "dtypeoper": [1, 81], "ldf": [1, 81, 839, 840, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853], "_ldf": [1, 81], "upcast_integer_typ": [1, 81], "with_column": [1, 17, 81, 184, 221, 231, 264, 271, 295, 302, 304, 320, 330, 335, 337, 340, 347, 348, 349, 350, 351, 358, 360, 364, 370, 372, 373, 374, 382, 384, 389, 390, 391, 392, 393, 394, 396, 398, 399, 408, 409, 413, 414, 422, 423, 428, 433, 435, 436, 440, 441, 445, 446, 449, 450, 452, 453, 454, 456, 459, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 508, 510, 513, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 545, 546, 549, 550, 551, 553, 556, 560, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 578, 582, 596, 598, 600, 601, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 639, 640, 641, 643, 645, 646, 653, 655, 662, 664, 666, 675, 677, 681, 682, 684, 691, 696, 706, 710, 713, 717, 726, 730, 734, 736, 742, 746, 785, 791, 807, 813, 835, 858, 861, 895, 918, 957, 1041, 1095, 1224], "tp": [1, 81], "cast": [1, 39, 80, 81, 103, 137, 138, 139, 140, 176, 184, 185, 187, 188, 221, 231, 257, 270, 295, 308, 337, 350, 351, 365, 396, 399, 544, 549, 558, 560, 565, 606, 607, 608, 641, 647, 653, 677, 726, 746, 785, 786, 788, 789, 807, 813, 834, 858, 861, 895, 897, 911, 912, 926, 961, 964, 1099, 1152, 1153, 1154, 1187, 1194, 1202, 1207, 1224], "int64": [1, 2, 39, 40, 43, 80, 81, 86, 114, 166, 176, 184, 185, 187, 188, 205, 221, 231, 236, 251, 257, 295, 322, 323, 324, 326, 350, 351, 400, 401, 402, 403, 404, 405, 406, 418, 549, 558, 565, 606, 647, 653, 669, 697, 705, 706, 708, 722, 728, 746, 767, 774, 785, 786, 788, 789, 791, 796, 807, 813, 814, 817, 858, 880, 881, 882, 884, 911, 912, 965, 966, 967, 968, 969, 970, 971, 979, 1099, 1122, 1194, 1205, 1206, 1207, 1224], "int8": [1, 81, 176, 295, 325, 350, 351, 500, 647, 719, 722, 737, 746, 883, 911, 912, 920, 1068, 1103, 1194, 1211, 1224], "int16": [1, 81, 350, 351, 647, 746, 861, 911, 912, 1194, 1203, 1224], "int32": [1, 81, 86, 103, 106, 119, 143, 144, 184, 185, 187, 188, 202, 231, 295, 335, 377, 411, 565, 653, 722, 746, 785, 786, 788, 789, 813, 858, 861, 938, 976, 1075, 1207, 1224], "b": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 81, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 178, 180, 181, 182, 183, 184, 189, 190, 192, 194, 196, 198, 199, 200, 201, 202, 203, 205, 208, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 241, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 304, 305, 307, 308, 321, 327, 328, 330, 331, 332, 335, 337, 346, 358, 361, 418, 420, 422, 423, 424, 426, 429, 436, 438, 440, 441, 443, 447, 450, 452, 453, 454, 456, 460, 466, 473, 480, 489, 490, 491, 492, 510, 513, 518, 529, 532, 533, 534, 535, 542, 543, 545, 549, 551, 553, 556, 562, 564, 584, 590, 592, 602, 606, 618, 643, 646, 657, 661, 663, 664, 665, 666, 668, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 696, 697, 698, 699, 700, 703, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 723, 724, 727, 728, 729, 730, 731, 735, 746, 761, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 793, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 814, 815, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 836, 837, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 864, 867, 894, 895, 896, 897, 918, 919, 921, 978, 979, 980, 986, 989, 1003, 1011, 1024, 1041, 1057, 1058, 1060, 1095, 1100, 1148, 1152, 1164, 1193, 1206, 1210, 1224, 1231], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 128, 146, 152, 154, 156, 157, 158, 159, 162, 165, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 217, 218, 220, 221, 222, 223, 227, 231, 233, 234, 240, 241, 245, 248, 249, 251, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 306, 308, 321, 322, 323, 324, 325, 327, 333, 335, 338, 339, 340, 346, 347, 348, 349, 350, 351, 357, 359, 361, 366, 370, 390, 391, 392, 393, 396, 399, 401, 404, 406, 407, 409, 413, 414, 419, 420, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 453, 454, 456, 459, 460, 461, 469, 470, 472, 473, 474, 476, 478, 488, 489, 490, 491, 492, 493, 494, 498, 500, 505, 508, 510, 513, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 547, 548, 549, 550, 551, 554, 556, 560, 561, 562, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 582, 586, 590, 591, 592, 593, 596, 598, 604, 609, 610, 615, 616, 618, 622, 623, 624, 625, 631, 632, 633, 641, 642, 644, 645, 646, 648, 653, 654, 655, 662, 664, 666, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 694, 696, 698, 699, 703, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 742, 746, 761, 763, 765, 766, 767, 768, 769, 773, 775, 776, 777, 778, 779, 781, 783, 784, 785, 790, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 813, 819, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 867, 870, 877, 880, 881, 882, 883, 890, 899, 900, 902, 917, 919, 921, 935, 942, 944, 947, 949, 950, 951, 952, 956, 957, 958, 961, 964, 966, 969, 971, 972, 973, 974, 979, 986, 988, 989, 993, 994, 998, 999, 1002, 1003, 1005, 1011, 1016, 1017, 1018, 1019, 1023, 1038, 1040, 1041, 1042, 1046, 1056, 1057, 1058, 1060, 1061, 1062, 1066, 1068, 1083, 1091, 1092, 1093, 1097, 1101, 1102, 1105, 1110, 1112, 1113, 1114, 1115, 1116, 1119, 1127, 1132, 1136, 1137, 1142, 1144, 1150, 1155, 1156, 1161, 1162, 1168, 1170, 1171, 1177, 1178, 1179, 1187, 1193, 1195, 1203, 1206, 1207, 1208, 1215, 1224, 1232], "c": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 79, 81, 86, 104, 106, 108, 110, 119, 128, 142, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 173, 176, 180, 181, 182, 183, 184, 190, 192, 194, 202, 203, 205, 208, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 224, 226, 229, 230, 232, 235, 236, 237, 244, 245, 246, 247, 249, 251, 254, 255, 256, 257, 258, 260, 261, 264, 265, 267, 268, 270, 274, 277, 278, 279, 280, 282, 283, 285, 288, 289, 295, 302, 304, 305, 307, 309, 327, 358, 441, 456, 466, 480, 510, 513, 532, 533, 545, 549, 553, 584, 624, 633, 657, 664, 666, 668, 674, 675, 677, 678, 679, 680, 681, 682, 684, 698, 699, 700, 703, 707, 710, 712, 713, 714, 715, 716, 717, 718, 727, 729, 730, 731, 735, 742, 746, 763, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 784, 785, 793, 796, 803, 806, 808, 811, 812, 814, 815, 821, 822, 823, 828, 831, 834, 836, 839, 842, 843, 844, 845, 847, 848, 850, 853, 854, 858, 861, 896, 918, 919, 1003, 1024, 1095, 1170, 1179, 1210, 1224], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 66, 68, 70, 78, 79, 81, 82, 86, 103, 106, 107, 108, 109, 110, 112, 114, 115, 128, 136, 137, 139, 144, 157, 158, 159, 162, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 190, 191, 194, 195, 197, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 213, 216, 217, 218, 220, 222, 223, 224, 227, 231, 234, 240, 241, 245, 248, 249, 251, 252, 253, 254, 256, 259, 264, 265, 266, 269, 270, 272, 274, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 303, 306, 333, 335, 337, 339, 340, 357, 358, 359, 360, 361, 366, 367, 392, 394, 396, 399, 400, 406, 414, 417, 418, 421, 423, 427, 428, 432, 433, 435, 437, 438, 441, 445, 449, 450, 452, 453, 454, 456, 459, 461, 469, 473, 474, 476, 478, 482, 485, 488, 489, 490, 491, 492, 493, 496, 498, 528, 530, 532, 541, 544, 545, 546, 547, 548, 549, 553, 554, 556, 561, 562, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 580, 586, 592, 598, 608, 609, 610, 645, 648, 654, 655, 668, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 690, 695, 696, 697, 698, 699, 703, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 727, 729, 730, 731, 735, 742, 746, 765, 766, 767, 768, 769, 775, 776, 777, 778, 779, 781, 783, 784, 785, 790, 792, 794, 795, 796, 797, 801, 802, 803, 808, 813, 819, 821, 822, 823, 824, 825, 826, 831, 833, 834, 837, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 867, 870, 874, 877, 890, 895, 900, 902, 909, 917, 918, 919, 920, 921, 927, 928, 929, 930, 931, 957, 959, 961, 962, 964, 965, 971, 973, 974, 979, 983, 986, 987, 998, 999, 1002, 1003, 1009, 1015, 1041, 1042, 1046, 1050, 1056, 1057, 1058, 1060, 1061, 1066, 1075, 1083, 1091, 1092, 1093, 1095, 1096, 1097, 1102, 1105, 1107, 1108, 1109, 1111, 1112, 1115, 1119, 1132, 1138, 1144, 1154, 1155, 1195, 1208, 1211, 1215, 1224, 1232], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 66, 68, 69, 70, 79, 81, 86, 87, 88, 103, 106, 107, 108, 109, 136, 157, 160, 163, 164, 165, 166, 167, 169, 170, 173, 178, 179, 180, 181, 182, 184, 190, 192, 194, 195, 197, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 241, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 263, 264, 266, 267, 268, 270, 272, 279, 288, 289, 295, 302, 306, 327, 335, 350, 351, 361, 366, 370, 384, 389, 390, 391, 408, 409, 412, 414, 422, 423, 429, 432, 437, 438, 440, 461, 462, 463, 474, 489, 490, 491, 492, 513, 541, 544, 552, 555, 556, 557, 561, 563, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 592, 598, 602, 609, 610, 645, 648, 662, 681, 682, 683, 696, 699, 710, 711, 729, 742, 746, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 785, 790, 792, 793, 795, 797, 799, 803, 806, 808, 811, 813, 814, 815, 817, 819, 821, 822, 823, 826, 830, 833, 834, 837, 844, 853, 854, 858, 861, 900, 906, 908, 911, 912, 921, 954, 974, 979, 999, 1030, 1031, 1042, 1057, 1058, 1060, 1083, 1097, 1102, 1104, 1110, 1112, 1114, 1116, 1144, 1148, 1155, 1194, 1224, 1231, 1232], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 79, 81, 86, 157, 160, 161, 162, 163, 164, 166, 167, 169, 173, 178, 180, 184, 190, 192, 195, 203, 208, 210, 212, 214, 215, 219, 222, 224, 226, 229, 231, 232, 234, 235, 236, 237, 241, 244, 246, 247, 248, 249, 255, 256, 257, 258, 264, 266, 267, 268, 295, 302, 306, 324, 351, 366, 370, 390, 392, 393, 407, 409, 419, 432, 437, 440, 461, 489, 490, 491, 492, 544, 556, 561, 565, 575, 592, 636, 648, 681, 682, 693, 699, 710, 711, 729, 746, 765, 770, 772, 774, 776, 780, 783, 785, 790, 792, 793, 797, 804, 806, 809, 811, 813, 814, 815, 819, 826, 858, 861, 874, 882, 927, 931, 938, 957, 958, 972, 974, 1025, 1057, 1058, 1060, 1102, 1115, 1182, 1224, 1232], "float32": [1, 15, 37, 57, 81, 157, 176, 255, 256, 295, 708, 765, 858, 861, 1006, 1075, 1224], "lazi": [1, 63, 64, 65, 66, 68, 81, 86, 128, 144, 204, 221, 222, 295, 513, 701, 719, 722, 737, 746, 793, 794, 836, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 861, 1231, 1232], "i16": [1, 81, 584, 746, 861, 1203, 1224, 1232], "i32": [1, 81, 103, 106, 110, 143, 144, 237, 295, 335, 377, 411, 563, 584, 736, 746, 815, 858, 938, 976, 1075, 1104, 1224, 1232], "f32": [1, 81, 157, 165, 255, 295, 584, 746, 765, 773, 858, 861, 1075, 1224], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 60, 63, 65, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 128, 156, 158, 159, 160, 163, 165, 166, 169, 170, 172, 173, 178, 179, 181, 182, 183, 184, 190, 192, 194, 196, 198, 200, 203, 204, 207, 208, 213, 214, 215, 220, 221, 222, 223, 226, 227, 229, 230, 231, 235, 237, 241, 244, 245, 247, 249, 252, 258, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 285, 288, 289, 295, 302, 304, 308, 322, 323, 324, 326, 327, 333, 337, 340, 347, 348, 349, 350, 351, 358, 360, 361, 373, 398, 400, 401, 402, 403, 404, 405, 406, 418, 420, 421, 423, 424, 425, 426, 428, 429, 431, 432, 434, 437, 438, 439, 440, 441, 445, 446, 449, 450, 452, 453, 454, 456, 458, 461, 464, 465, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 501, 503, 507, 510, 511, 513, 528, 529, 530, 532, 533, 534, 535, 536, 537, 545, 546, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 579, 581, 582, 584, 585, 586, 590, 591, 592, 618, 619, 641, 642, 644, 645, 646, 647, 648, 654, 655, 656, 658, 661, 669, 675, 677, 681, 682, 683, 684, 695, 696, 697, 698, 699, 703, 705, 706, 707, 708, 710, 711, 712, 713, 716, 717, 721, 725, 726, 729, 730, 731, 736, 742, 746, 763, 766, 768, 769, 771, 772, 773, 776, 777, 779, 780, 781, 783, 784, 785, 790, 793, 794, 795, 797, 799, 800, 803, 804, 805, 807, 808, 811, 812, 813, 815, 817, 819, 822, 823, 825, 826, 828, 829, 830, 831, 834, 837, 839, 840, 843, 844, 845, 846, 847, 850, 853, 854, 858, 861, 864, 867, 880, 881, 882, 884, 890, 895, 902, 905, 909, 910, 911, 912, 918, 919, 934, 963, 965, 966, 967, 968, 969, 970, 971, 986, 987, 989, 990, 993, 994, 998, 1011, 1038, 1040, 1041, 1042, 1046, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1066, 1069, 1077, 1082, 1095, 1100, 1101, 1102, 1104, 1108, 1111, 1115, 1119, 1120, 1123, 1127, 1131, 1132, 1136, 1137, 1193, 1195, 1202, 1208, 1209, 1215, 1224, 1231, 1232], "register_series_namespac": [1, 79, 80, 81], "math": [1, 15, 82, 359, 670, 671, 746, 906, 908, 1133, 1198, 1224], "mathshortcut": [1, 82], "": [1, 2, 16, 37, 40, 45, 57, 63, 66, 70, 82, 103, 104, 110, 114, 115, 116, 117, 119, 125, 129, 130, 133, 134, 146, 156, 157, 165, 168, 178, 183, 184, 186, 187, 194, 200, 203, 204, 213, 220, 222, 227, 229, 234, 237, 238, 245, 254, 260, 262, 263, 264, 265, 270, 271, 295, 373, 396, 399, 418, 457, 480, 511, 513, 522, 529, 538, 539, 545, 546, 558, 563, 592, 596, 603, 604, 605, 618, 622, 623, 625, 633, 634, 635, 638, 639, 642, 644, 663, 664, 665, 666, 672, 678, 683, 684, 687, 688, 697, 700, 701, 710, 711, 712, 713, 716, 717, 725, 726, 728, 729, 730, 736, 742, 746, 763, 765, 772, 773, 784, 785, 787, 788, 794, 803, 815, 816, 823, 828, 829, 830, 831, 834, 835, 841, 846, 858, 861, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 890, 891, 893, 894, 896, 897, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 920, 921, 922, 923, 925, 927, 931, 933, 934, 937, 939, 940, 944, 946, 950, 951, 955, 958, 959, 961, 964, 972, 974, 975, 976, 980, 981, 982, 983, 987, 988, 989, 990, 992, 993, 994, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1038, 1040, 1042, 1046, 1048, 1050, 1056, 1061, 1062, 1063, 1066, 1068, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1127, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1161, 1162, 1164, 1168, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1191, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1224], "_": [1, 78, 82, 222, 254, 295, 480, 604, 609, 610, 623, 624, 896, 1150, 1155, 1156, 1170, 1201, 1224], "squar": [1, 82, 281, 457, 593, 746, 846, 1026, 1138, 1224], "cube": [1, 82, 338, 550, 746, 898, 1224], "s2": [1, 69, 87, 88, 139, 140, 176, 295, 900, 921, 979, 1011, 1025, 1069, 1083, 1206, 1215, 1224], "renam": [1, 106, 114, 115, 153, 155, 174, 177, 185, 186, 187, 188, 193, 228, 237, 238, 250, 270, 271, 274, 276, 295, 304, 309, 352, 353, 354, 355, 356, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 525, 533, 534, 535, 551, 566, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 644, 646, 649, 650, 667, 687, 688, 709, 725, 728, 746, 762, 786, 787, 788, 789, 798, 810, 815, 816, 827, 834, 835, 838, 839, 841, 858, 864, 868, 913, 914, 915, 916, 918, 1008, 1014, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1095, 1106, 1122, 1124, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1191, 1196, 1197, 1202, 1224], "n2": 1, "in_plac": [1, 192, 243, 268, 295, 1098, 1130, 1137, 1224], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 65, 67, 84, 85, 86, 103, 104, 108, 110, 112, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 150, 152, 156, 157, 158, 159, 162, 167, 172, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 194, 196, 197, 198, 201, 204, 205, 210, 211, 217, 218, 220, 222, 223, 231, 232, 233, 234, 235, 237, 245, 248, 252, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 270, 275, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 303, 304, 305, 306, 307, 308, 309, 320, 328, 329, 331, 332, 335, 347, 348, 349, 350, 351, 358, 365, 367, 370, 373, 376, 378, 385, 386, 389, 390, 392, 393, 394, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 431, 433, 434, 435, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 476, 495, 499, 501, 508, 513, 517, 518, 519, 520, 521, 522, 524, 525, 540, 541, 542, 544, 547, 548, 553, 558, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 584, 589, 591, 592, 595, 596, 598, 599, 601, 606, 608, 617, 623, 624, 626, 633, 634, 635, 638, 642, 644, 656, 659, 662, 663, 664, 665, 666, 667, 669, 672, 673, 678, 679, 690, 691, 692, 693, 694, 699, 705, 706, 711, 719, 722, 728, 733, 734, 736, 737, 746, 763, 765, 766, 767, 768, 769, 775, 777, 779, 784, 785, 786, 787, 788, 789, 793, 794, 796, 798, 799, 803, 808, 813, 815, 817, 821, 823, 828, 829, 830, 831, 834, 840, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 861, 865, 866, 867, 868, 878, 886, 891, 894, 897, 900, 901, 918, 925, 926, 928, 931, 933, 934, 935, 937, 941, 942, 944, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 978, 979, 981, 982, 983, 990, 996, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1030, 1031, 1044, 1063, 1067, 1077, 1083, 1089, 1092, 1093, 1095, 1099, 1113, 1122, 1135, 1137, 1141, 1142, 1144, 1145, 1147, 1152, 1154, 1163, 1169, 1170, 1172, 1179, 1180, 1181, 1184, 1205, 1206, 1214, 1215, 1224, 1231, 1232], "s3": [1, 39, 118, 129, 130, 133, 134, 295, 1069, 1224], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 56, 57, 63, 68, 75, 77, 78, 79, 81, 82, 86, 136, 142, 157, 160, 161, 162, 163, 164, 165, 166, 167, 169, 173, 178, 180, 182, 190, 192, 200, 203, 207, 208, 210, 212, 215, 224, 226, 229, 232, 234, 235, 236, 237, 241, 244, 246, 247, 249, 255, 256, 257, 258, 264, 267, 268, 270, 295, 306, 308, 321, 346, 348, 351, 357, 366, 432, 440, 460, 470, 473, 483, 489, 490, 491, 492, 530, 544, 550, 561, 562, 567, 584, 590, 592, 611, 614, 615, 616, 633, 662, 668, 674, 678, 679, 680, 682, 684, 696, 698, 703, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 727, 730, 731, 735, 746, 765, 770, 772, 773, 774, 776, 780, 783, 790, 793, 797, 799, 808, 811, 814, 815, 819, 826, 834, 858, 861, 867, 908, 917, 938, 999, 1025, 1038, 1041, 1051, 1057, 1058, 1060, 1091, 1102, 1105, 1107, 1110, 1112, 1114, 1116, 1157, 1160, 1161, 1162, 1179, 1224, 1232], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 63, 68, 78, 86, 136, 161, 162, 176, 185, 190, 195, 207, 231, 233, 234, 237, 248, 249, 264, 268, 270, 288, 295, 302, 306, 308, 321, 334, 346, 348, 351, 359, 366, 432, 440, 446, 456, 460, 470, 487, 495, 532, 544, 555, 561, 565, 567, 573, 575, 586, 590, 604, 636, 643, 676, 681, 682, 734, 746, 786, 790, 792, 797, 813, 815, 826, 834, 853, 858, 861, 919, 931, 942, 944, 952, 958, 972, 973, 1011, 1025, 1038, 1063, 1102, 1107, 1113, 1115, 1117, 1132, 1150, 1182, 1224], "27": [1, 82, 288, 351, 384, 391, 408, 746, 853, 1224, 1232], "16": [1, 40, 53, 72, 80, 136, 177, 184, 231, 270, 295, 348, 351, 440, 512, 530, 550, 565, 681, 695, 696, 699, 746, 785, 813, 821, 834, 858, 861, 958, 972, 1076, 1091, 1122, 1133, 1198, 1224], "64": [1, 52, 55, 74, 80, 82, 135, 152, 345, 530, 550, 746, 1091, 1224], "25": [1, 32, 40, 82, 110, 144, 162, 184, 204, 231, 266, 270, 295, 360, 370, 372, 390, 393, 407, 409, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 655, 690, 691, 693, 694, 695, 701, 711, 733, 734, 746, 785, 794, 801, 813, 832, 834, 858, 861, 919, 920, 933, 958, 972, 978, 999, 1091, 1095, 1224], "125": [1, 40, 82, 295, 302, 746, 1091, 1224], "arg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 173, 221, 257, 295, 549, 672, 700, 746, 780, 807, 858, 1077, 1205, 1206, 1224], "ani": [2, 3, 4, 5, 9, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 83, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 141, 143, 144, 146, 150, 153, 161, 165, 170, 172, 173, 176, 199, 201, 202, 207, 211, 220, 221, 232, 233, 234, 248, 252, 253, 256, 257, 262, 264, 265, 295, 302, 305, 306, 309, 335, 394, 413, 414, 423, 428, 431, 433, 435, 446, 459, 466, 473, 508, 509, 511, 512, 513, 525, 528, 530, 534, 535, 540, 541, 544, 545, 549, 551, 560, 561, 566, 567, 580, 595, 617, 629, 630, 631, 632, 633, 634, 635, 638, 645, 646, 649, 655, 662, 663, 666, 667, 678, 698, 707, 708, 711, 736, 746, 773, 779, 780, 807, 829, 831, 858, 861, 865, 867, 868, 921, 959, 986, 989, 993, 1011, 1025, 1034, 1041, 1076, 1077, 1101, 1102, 1106, 1107, 1120, 1121, 1124, 1141, 1163, 1179, 1180, 1181, 1184, 1196, 1204, 1205, 1206, 1224, 1231, 1232], "kwarg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 161, 173, 221, 257, 295, 549, 746, 780, 807, 858, 1206, 1224, 1231], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1224, 1231], "fix": [2, 15, 119, 142, 144, 410, 568, 569, 570, 571, 572, 574, 575, 576, 695, 746, 975], "length": [2, 60, 86, 114, 115, 128, 142, 182, 184, 185, 187, 188, 231, 244, 295, 357, 393, 407, 494, 501, 522, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 590, 609, 610, 612, 614, 615, 616, 620, 622, 641, 719, 722, 723, 724, 737, 746, 785, 786, 788, 789, 808, 813, 822, 858, 900, 917, 927, 958, 972, 1062, 1069, 1088, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1136, 1155, 1156, 1158, 1160, 1161, 1162, 1166, 1168, 1187, 1224], "inner": [2, 60, 143, 203, 265, 295, 322, 323, 324, 325, 326, 361, 480, 500, 559, 653, 746, 793, 817, 831, 858, 880, 881, 882, 883, 884, 921, 1048, 1068, 1207, 1224], "polarsdatatyp": [2, 60, 114, 115, 121, 127, 128, 141, 142, 143, 144, 146, 153, 157, 166, 207, 295, 309, 335, 418, 509, 511, 512, 513, 560, 606, 607, 667, 697, 708, 709, 710, 711, 719, 722, 737, 742, 746, 765, 774, 858, 861, 868, 891, 1076, 1077, 1101, 1152, 1153, 1224], "pythondatatyp": [2, 60], "none": [2, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 61, 63, 65, 66, 68, 78, 85, 88, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 158, 162, 165, 171, 172, 182, 184, 185, 187, 188, 189, 195, 199, 203, 204, 205, 207, 208, 210, 213, 215, 218, 219, 222, 231, 232, 235, 241, 242, 244, 245, 247, 252, 254, 257, 261, 262, 263, 264, 265, 266, 295, 305, 307, 308, 309, 321, 327, 340, 346, 348, 351, 358, 362, 363, 389, 392, 393, 407, 414, 415, 416, 417, 418, 421, 422, 423, 429, 436, 440, 441, 450, 452, 453, 454, 460, 462, 463, 472, 477, 482, 488, 489, 490, 491, 492, 494, 501, 509, 511, 512, 513, 521, 524, 526, 541, 542, 543, 546, 550, 553, 556, 557, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 582, 583, 584, 585, 586, 590, 591, 595, 596, 598, 600, 601, 604, 606, 607, 608, 609, 610, 613, 615, 616, 617, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 638, 641, 642, 643, 644, 653, 663, 664, 665, 666, 667, 675, 677, 679, 684, 690, 691, 692, 693, 694, 695, 697, 698, 707, 708, 709, 710, 711, 713, 717, 722, 723, 724, 727, 728, 730, 732, 733, 734, 735, 736, 746, 766, 767, 769, 773, 778, 779, 785, 786, 788, 789, 792, 793, 794, 796, 798, 799, 803, 806, 813, 817, 819, 820, 821, 822, 823, 829, 830, 831, 836, 838, 841, 846, 858, 861, 865, 866, 867, 868, 875, 876, 901, 902, 918, 919, 921, 922, 923, 939, 940, 941, 946, 957, 958, 972, 977, 978, 981, 982, 983, 987, 988, 989, 991, 997, 999, 1001, 1002, 1003, 1013, 1018, 1019, 1022, 1025, 1026, 1027, 1030, 1031, 1040, 1045, 1050, 1056, 1057, 1058, 1060, 1062, 1069, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1095, 1096, 1097, 1101, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1126, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1141, 1142, 1144, 1146, 1147, 1150, 1152, 1153, 1154, 1155, 1156, 1159, 1161, 1162, 1163, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1187, 1202, 1203, 1204, 1206, 1207, 1213, 1224, 1231], "width": [2, 31, 40, 114, 115, 128, 295, 322, 323, 324, 325, 326, 500, 858, 880, 881, 882, 883, 884, 1068], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 40, 45, 49, 57, 59, 65, 68, 80, 106, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 153, 156, 158, 168, 171, 172, 174, 178, 180, 182, 189, 190, 191, 193, 194, 199, 201, 202, 204, 206, 207, 208, 210, 215, 217, 218, 228, 229, 232, 235, 240, 241, 242, 244, 246, 247, 249, 250, 255, 258, 260, 264, 267, 269, 272, 279, 289, 295, 302, 327, 333, 357, 360, 415, 416, 417, 421, 422, 423, 429, 431, 432, 434, 436, 437, 461, 467, 470, 476, 477, 478, 488, 493, 494, 498, 499, 500, 501, 544, 546, 549, 550, 553, 556, 559, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 585, 590, 594, 603, 606, 607, 612, 615, 616, 617, 618, 620, 622, 624, 625, 636, 641, 648, 649, 650, 654, 660, 662, 669, 678, 679, 680, 689, 692, 695, 701, 703, 705, 706, 715, 718, 719, 722, 723, 724, 727, 728, 731, 732, 735, 737, 746, 763, 766, 777, 778, 779, 783, 790, 794, 797, 808, 819, 820, 822, 824, 826, 827, 828, 832, 833, 837, 844, 854, 858, 875, 876, 890, 891, 900, 901, 917, 920, 980, 981, 982, 983, 987, 988, 989, 993, 994, 997, 998, 999, 1025, 1027, 1028, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1056, 1061, 1062, 1066, 1067, 1068, 1069, 1079, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1094, 1095, 1097, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1127, 1128, 1131, 1136, 1139, 1149, 1152, 1153, 1158, 1161, 1162, 1163, 1164, 1166, 1168, 1170, 1171, 1182, 1187, 1194, 1195, 1196, 1197, 1203, 1208, 1213, 1224, 1231, 1232], "paramet": [2, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 78, 79, 80, 81, 82, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 156, 157, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 281, 287, 289, 295, 302, 304, 305, 306, 307, 308, 309, 319, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 340, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 373, 389, 392, 393, 394, 396, 398, 399, 407, 410, 412, 413, 414, 415, 416, 417, 418, 421, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 446, 457, 459, 461, 466, 467, 468, 469, 470, 473, 476, 477, 478, 480, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 524, 528, 530, 533, 534, 535, 540, 541, 544, 545, 546, 549, 550, 551, 553, 554, 556, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 644, 645, 646, 648, 649, 650, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 763, 765, 766, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 797, 798, 799, 803, 804, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 844, 846, 852, 854, 858, 861, 864, 865, 866, 867, 868, 877, 884, 885, 886, 887, 888, 889, 890, 891, 895, 901, 902, 903, 904, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 927, 928, 934, 954, 957, 958, 959, 961, 963, 964, 972, 975, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 993, 994, 997, 998, 999, 1002, 1003, 1013, 1021, 1022, 1026, 1028, 1034, 1035, 1036, 1037, 1038, 1041, 1044, 1045, 1046, 1048, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1069, 1071, 1076, 1077, 1091, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1131, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1187, 1188, 1191, 1195, 1196, 1197, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1212, 1213, 1214, 1215, 1224, 1231], "The": [2, 25, 38, 39, 40, 45, 59, 60, 63, 67, 69, 70, 78, 83, 84, 88, 103, 105, 106, 107, 109, 112, 114, 115, 116, 117, 119, 123, 124, 126, 128, 132, 134, 137, 138, 139, 140, 148, 162, 164, 165, 166, 169, 170, 173, 182, 183, 184, 187, 189, 195, 201, 204, 207, 214, 220, 231, 232, 233, 234, 237, 238, 256, 263, 266, 270, 271, 274, 281, 295, 304, 327, 328, 329, 330, 358, 362, 363, 370, 384, 389, 390, 393, 396, 407, 408, 418, 421, 424, 429, 436, 472, 476, 499, 511, 512, 513, 545, 553, 556, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 586, 589, 595, 599, 600, 603, 606, 607, 613, 615, 616, 621, 627, 628, 629, 630, 631, 632, 633, 697, 701, 711, 723, 724, 725, 728, 736, 738, 739, 741, 742, 746, 747, 748, 751, 753, 754, 755, 773, 776, 780, 785, 788, 790, 792, 794, 797, 799, 804, 808, 813, 815, 816, 817, 830, 834, 835, 839, 846, 858, 864, 867, 885, 886, 887, 901, 918, 919, 922, 923, 931, 949, 954, 955, 958, 961, 972, 973, 986, 987, 990, 997, 1040, 1044, 1076, 1077, 1095, 1097, 1101, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1132, 1135, 1141, 1145, 1146, 1152, 1153, 1159, 1161, 1162, 1167, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1230, 1232], "datatyp": [2, 37, 43, 57, 60, 76, 103, 105, 106, 107, 109, 111, 119, 121, 123, 124, 127, 132, 146, 166, 169, 176, 236, 295, 335, 418, 584, 653, 697, 708, 746, 758, 776, 814, 817, 858, 868, 891, 919, 1013, 1020, 1022, 1024, 1077, 1129, 1207, 1224], "valu": [2, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 57, 60, 61, 63, 67, 69, 76, 78, 86, 88, 106, 108, 114, 115, 116, 117, 119, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 162, 165, 167, 170, 171, 172, 173, 177, 182, 184, 187, 189, 190, 195, 199, 201, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 222, 223, 224, 226, 231, 232, 233, 234, 235, 241, 242, 245, 246, 247, 248, 249, 252, 253, 257, 260, 261, 264, 265, 266, 267, 277, 278, 280, 282, 283, 285, 286, 295, 301, 302, 303, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 357, 358, 360, 362, 363, 366, 370, 384, 390, 408, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 472, 475, 477, 478, 481, 482, 484, 485, 486, 488, 493, 496, 498, 501, 503, 505, 507, 508, 511, 512, 513, 514, 515, 516, 527, 528, 529, 530, 531, 538, 539, 540, 541, 543, 545, 546, 549, 550, 553, 554, 556, 559, 560, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 606, 607, 608, 615, 616, 618, 619, 622, 624, 625, 626, 641, 643, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 662, 663, 665, 668, 675, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 698, 699, 704, 707, 708, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 729, 730, 736, 746, 761, 762, 763, 773, 778, 779, 780, 785, 788, 791, 792, 794, 800, 801, 802, 803, 805, 806, 809, 811, 813, 817, 819, 820, 823, 824, 825, 828, 831, 832, 842, 843, 845, 847, 848, 850, 851, 858, 861, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 884, 886, 887, 888, 889, 895, 899, 902, 903, 904, 906, 907, 908, 917, 918, 919, 920, 922, 923, 927, 931, 949, 955, 973, 979, 980, 981, 982, 983, 986, 987, 988, 989, 992, 993, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1040, 1043, 1045, 1046, 1049, 1050, 1052, 1053, 1054, 1056, 1061, 1066, 1071, 1076, 1078, 1079, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1094, 1095, 1096, 1097, 1101, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1128, 1132, 1133, 1134, 1135, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1161, 1162, 1164, 1165, 1168, 1170, 1171, 1172, 1187, 1194, 1195, 1196, 1197, 1198, 1199, 1205, 1206, 1207, 1210, 1212, 1214, 1215, 1224, 1232], "within": [2, 60, 137, 138, 139, 140, 183, 184, 185, 186, 187, 188, 189, 204, 231, 266, 295, 436, 556, 565, 592, 746, 785, 786, 788, 789, 794, 813, 858, 997, 1224, 1231], "each": [2, 37, 40, 57, 60, 78, 115, 116, 132, 137, 138, 139, 140, 142, 182, 183, 184, 185, 186, 187, 188, 202, 204, 207, 220, 231, 235, 257, 263, 265, 266, 273, 274, 277, 279, 281, 289, 295, 358, 393, 407, 444, 445, 448, 449, 478, 482, 483, 488, 498, 506, 513, 553, 556, 564, 570, 572, 574, 576, 579, 585, 592, 604, 609, 610, 611, 614, 624, 625, 669, 672, 677, 705, 706, 728, 736, 746, 768, 785, 786, 788, 789, 794, 808, 813, 830, 831, 839, 841, 842, 844, 846, 854, 858, 900, 918, 958, 972, 1008, 1009, 1014, 1015, 1046, 1050, 1051, 1056, 1066, 1095, 1097, 1105, 1119, 1131, 1150, 1155, 1156, 1157, 1160, 1170, 1171, 1193, 1224, 1232], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 758, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 890, 891, 893, 894, 895, 896, 897, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 992, 993, 994, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1030, 1031, 1038, 1040, 1041, 1042, 1046, 1048, 1050, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1066, 1068, 1069, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1127, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1161, 1162, 1164, 1165, 1168, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1224, 1231], "dtype": [2, 15, 40, 48, 69, 81, 87, 88, 103, 105, 107, 109, 110, 114, 115, 116, 117, 123, 124, 125, 128, 141, 142, 143, 144, 146, 152, 157, 184, 185, 187, 188, 204, 231, 255, 256, 257, 264, 295, 309, 335, 336, 350, 351, 410, 418, 431, 466, 476, 499, 507, 509, 511, 512, 513, 558, 559, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 584, 606, 607, 633, 647, 649, 653, 658, 667, 669, 679, 697, 701, 705, 706, 708, 709, 710, 711, 719, 722, 728, 737, 746, 765, 785, 786, 788, 789, 794, 813, 858, 861, 880, 881, 883, 891, 893, 894, 896, 901, 911, 912, 919, 920, 975, 979, 980, 1004, 1006, 1010, 1013, 1020, 1022, 1024, 1034, 1044, 1068, 1075, 1076, 1101, 1103, 1122, 1129, 1152, 1153, 1179, 1194, 1203, 1205, 1206, 1207, 1211, 1224, 1232], "method": [2, 3, 4, 5, 9, 36, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 134, 141, 150, 153, 155, 165, 170, 174, 177, 183, 185, 186, 187, 188, 193, 195, 201, 207, 208, 210, 215, 218, 224, 228, 232, 233, 234, 241, 247, 250, 262, 270, 276, 281, 287, 295, 302, 305, 306, 309, 334, 340, 352, 353, 354, 355, 356, 396, 399, 413, 414, 421, 428, 433, 435, 440, 444, 448, 451, 456, 459, 468, 471, 479, 483, 493, 497, 502, 508, 509, 510, 512, 513, 528, 530, 532, 534, 535, 536, 537, 540, 541, 544, 550, 551, 554, 556, 566, 568, 569, 570, 571, 572, 574, 575, 576, 582, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 629, 630, 631, 632, 636, 641, 645, 646, 649, 650, 655, 657, 662, 678, 690, 711, 720, 722, 733, 738, 739, 741, 742, 746, 747, 748, 751, 752, 753, 754, 755, 758, 762, 769, 771, 773, 782, 786, 787, 788, 789, 792, 798, 809, 810, 819, 827, 829, 834, 838, 841, 846, 852, 858, 867, 868, 902, 913, 914, 915, 916, 961, 964, 986, 987, 1002, 1008, 1014, 1036, 1039, 1047, 1051, 1061, 1065, 1067, 1070, 1076, 1077, 1096, 1097, 1106, 1112, 1122, 1124, 1127, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1182, 1187, 1190, 1196, 1197, 1207, 1214, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1230], "attribut": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 141, 295, 738, 739, 741, 742, 747, 748, 751, 753, 754, 755, 858, 1216, 1218, 1220, 1225, 1228, 1229, 1230], "A": [5, 18, 37, 40, 57, 63, 66, 84, 85, 110, 114, 115, 116, 117, 128, 130, 135, 148, 176, 184, 203, 204, 209, 211, 216, 222, 248, 252, 264, 265, 266, 270, 271, 295, 301, 362, 363, 366, 413, 414, 421, 433, 435, 443, 447, 450, 452, 459, 501, 508, 511, 522, 540, 541, 562, 567, 568, 569, 570, 571, 572, 574, 575, 576, 596, 597, 598, 603, 604, 605, 608, 618, 619, 641, 676, 695, 696, 700, 746, 785, 793, 794, 811, 831, 834, 835, 858, 861, 922, 923, 927, 987, 1107, 1108, 1109, 1111, 1114, 1115, 1116, 1142, 1143, 1144, 1149, 1150, 1151, 1154, 1164, 1165, 1187, 1224, 1231], "encod": [5, 77, 114, 115, 128, 254, 295, 329, 430, 599, 643, 746, 886, 1145], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 57, 58, 59, 78, 79, 104, 106, 109, 114, 115, 116, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 160, 165, 175, 183, 184, 185, 186, 187, 188, 189, 201, 204, 208, 210, 211, 213, 215, 231, 235, 237, 244, 247, 248, 254, 256, 261, 262, 264, 270, 295, 305, 307, 309, 334, 340, 358, 410, 436, 446, 471, 476, 479, 488, 489, 490, 491, 492, 494, 497, 499, 501, 502, 512, 513, 549, 553, 560, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 585, 589, 590, 595, 613, 621, 622, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 659, 663, 665, 669, 673, 690, 691, 693, 694, 705, 706, 719, 722, 723, 724, 728, 733, 734, 736, 737, 746, 758, 768, 773, 775, 784, 785, 786, 787, 788, 789, 793, 794, 798, 799, 803, 813, 815, 817, 822, 829, 834, 838, 841, 846, 858, 865, 866, 867, 897, 902, 918, 975, 997, 1011, 1039, 1044, 1047, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1067, 1069, 1070, 1076, 1077, 1095, 1101, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1119, 1120, 1124, 1131, 1135, 1136, 1141, 1159, 1167, 1168, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1205, 1212, 1224, 1232], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 57, 63, 69, 77, 87, 88, 110, 114, 115, 116, 117, 128, 137, 138, 139, 140, 141, 142, 143, 146, 149, 156, 176, 182, 183, 184, 186, 204, 220, 222, 231, 234, 237, 238, 245, 255, 260, 261, 264, 266, 270, 271, 274, 295, 302, 331, 337, 389, 393, 396, 399, 407, 418, 420, 426, 430, 441, 480, 524, 545, 549, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 592, 595, 596, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 641, 643, 664, 666, 672, 675, 676, 677, 684, 688, 690, 691, 693, 694, 700, 713, 717, 725, 728, 730, 733, 734, 736, 746, 763, 775, 782, 784, 785, 787, 794, 813, 815, 816, 817, 823, 828, 834, 835, 838, 839, 858, 861, 888, 894, 895, 954, 958, 961, 964, 972, 985, 1003, 1048, 1101, 1140, 1141, 1142, 1144, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1185, 1186, 1187, 1203, 1224, 1232], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 430, 746, 771, 782, 810, 858], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 473, 604, 1041, 1150], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 78, 84, 85, 86, 87, 88, 103, 104, 108, 110, 114, 115, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 152, 156, 157, 158, 159, 167, 172, 173, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 197, 198, 204, 211, 220, 222, 231, 234, 235, 239, 243, 245, 248, 252, 254, 256, 257, 260, 261, 262, 263, 265, 266, 268, 270, 278, 280, 282, 285, 295, 304, 305, 306, 307, 308, 309, 319, 326, 328, 329, 331, 332, 335, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 376, 392, 394, 407, 412, 413, 414, 415, 416, 417, 433, 435, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 473, 476, 488, 495, 499, 503, 508, 509, 511, 513, 517, 518, 519, 520, 521, 524, 540, 541, 542, 544, 547, 548, 553, 556, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 581, 584, 589, 591, 592, 595, 596, 598, 599, 601, 617, 618, 619, 623, 624, 626, 633, 634, 635, 638, 644, 656, 659, 662, 663, 664, 665, 666, 667, 669, 672, 673, 678, 681, 685, 690, 691, 692, 693, 694, 705, 706, 708, 711, 719, 722, 728, 733, 734, 736, 737, 746, 763, 765, 766, 768, 769, 775, 777, 779, 780, 784, 785, 786, 787, 788, 789, 793, 794, 798, 799, 803, 808, 813, 818, 821, 823, 828, 829, 830, 831, 834, 843, 845, 847, 850, 858, 861, 865, 866, 867, 868, 877, 884, 886, 891, 894, 897, 901, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 937, 957, 959, 972, 978, 979, 981, 982, 983, 990, 996, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1030, 1031, 1035, 1036, 1037, 1041, 1044, 1056, 1063, 1067, 1071, 1077, 1089, 1092, 1093, 1095, 1097, 1098, 1099, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1122, 1123, 1124, 1125, 1130, 1135, 1137, 1141, 1142, 1144, 1145, 1147, 1163, 1164, 1165, 1169, 1170, 1172, 1179, 1180, 1181, 1184, 1204, 1205, 1206, 1209, 1212, 1214, 1224, 1231], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 57, 295, 577, 636, 746, 858, 1117, 1182, 1224], "temporari": 6, "remov": [6, 9, 89, 114, 115, 128, 152, 163, 208, 210, 215, 247, 254, 295, 309, 407, 418, 510, 513, 533, 613, 621, 627, 628, 629, 630, 631, 632, 697, 746, 772, 858, 867, 918, 958, 972, 1095, 1159, 1167, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1214, 1224], "onc": [6, 66, 114, 115, 119, 148, 207, 233, 235, 274, 295, 334, 488, 513, 579, 631, 632, 746, 764, 839, 858, 1056, 1077, 1119, 1177, 1178, 1224], "stabil": [6, 189, 295, 436, 746, 997, 1224], "current": [6, 7, 8, 10, 11, 35, 65, 104, 110, 116, 117, 133, 158, 159, 203, 204, 295, 372, 393, 501, 546, 746, 758, 766, 767, 768, 793, 794, 858, 861, 901, 905, 925, 933, 958, 1091, 1224, 1231], "consid": [6, 85, 87, 88, 114, 115, 128, 134, 137, 138, 139, 140, 165, 167, 177, 200, 207, 213, 233, 262, 264, 265, 295, 309, 340, 357, 393, 511, 513, 568, 569, 570, 571, 572, 574, 575, 576, 681, 699, 742, 746, 769, 773, 790, 797, 803, 829, 846, 858, 894, 897, 902, 917, 958, 979, 999, 1013, 1077, 1095, 1120, 1122, 1123, 1224], "beta": 6, "cfg": [7, 9, 22, 150], "previous": [7, 8], "save": [7, 8, 11, 184, 204, 231, 266, 295, 364, 372, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 742, 746, 758, 785, 794, 813, 858, 933, 954, 958, 972], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 78, 114, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 134, 136, 141, 142, 143, 144, 145, 146, 147, 184, 199, 204, 213, 252, 256, 261, 265, 295, 457, 566, 568, 569, 570, 571, 572, 574, 575, 576, 589, 622, 659, 708, 728, 736, 746, 758, 785, 793, 794, 803, 817, 831, 858, 861, 1022, 1026, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1135, 1168, 1202, 1212, 1224], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 40, 57, 63, 64, 65, 78, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 162, 163, 168, 170, 175, 182, 184, 187, 201, 202, 204, 205, 213, 222, 226, 231, 232, 234, 235, 237, 238, 254, 261, 262, 264, 265, 266, 295, 347, 358, 359, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 418, 430, 440, 457, 488, 501, 513, 538, 539, 541, 546, 549, 553, 555, 565, 567, 568, 569, 571, 574, 575, 576, 579, 592, 603, 604, 606, 607, 617, 629, 630, 631, 632, 633, 634, 635, 638, 657, 670, 671, 675, 689, 690, 691, 692, 693, 695, 722, 727, 732, 733, 734, 742, 745, 746, 765, 771, 772, 777, 782, 785, 788, 794, 803, 810, 811, 813, 815, 816, 829, 831, 836, 858, 861, 867, 918, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 980, 986, 1022, 1026, 1056, 1069, 1086, 1087, 1088, 1091, 1095, 1107, 1119, 1149, 1150, 1152, 1153, 1163, 1177, 1178, 1179, 1180, 1181, 1184, 1215, 1224, 1231, 1232], "json": [7, 8, 10, 11, 43, 44, 123, 124, 130, 132, 295, 430, 526, 606, 607, 608, 643, 746, 758, 771, 782, 810, 817, 838, 858, 1152, 1153, 1154], "produc": [7, 8, 143, 144, 146, 468, 469, 521, 710, 798, 799, 858, 1036, 1037], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 170, 295, 526, 771, 810, 817, 838, 858, 867, 986, 1224], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 295, 526, 581, 608, 746, 771, 810, 817, 821, 838, 858, 1125, 1154, 1224, 1232], "load": [8, 10, 11, 106, 108, 116, 118, 119, 125, 129, 130, 145, 147, 295, 746, 758, 790, 797, 858, 1232], "reset": [9, 150], "default": [9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 59, 78, 85, 86, 103, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 123, 124, 125, 126, 128, 137, 139, 141, 142, 143, 144, 145, 146, 150, 162, 165, 168, 183, 184, 185, 186, 187, 188, 189, 201, 203, 204, 211, 213, 220, 222, 231, 232, 233, 234, 235, 241, 246, 248, 254, 262, 264, 265, 267, 272, 295, 304, 305, 307, 337, 358, 392, 393, 407, 412, 414, 415, 416, 417, 436, 476, 488, 493, 494, 499, 501, 504, 512, 521, 538, 539, 541, 546, 553, 556, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 579, 582, 585, 594, 595, 603, 613, 617, 621, 622, 627, 628, 629, 630, 633, 634, 635, 638, 659, 660, 663, 665, 669, 673, 678, 680, 690, 691, 692, 693, 694, 701, 705, 706, 708, 719, 722, 727, 728, 733, 734, 735, 737, 746, 768, 769, 773, 775, 784, 785, 786, 787, 788, 789, 793, 794, 803, 813, 817, 819, 824, 829, 832, 838, 858, 865, 866, 867, 895, 902, 918, 919, 957, 958, 972, 978, 980, 981, 982, 983, 997, 1044, 1056, 1061, 1062, 1067, 1069, 1076, 1086, 1087, 1091, 1095, 1097, 1101, 1119, 1127, 1131, 1139, 1141, 1142, 1149, 1159, 1163, 1167, 1168, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1212, 1213, 1224, 1232], "state": [9, 84, 85, 96, 681, 685, 758, 768, 769, 775, 777, 808, 821, 858], "note": [9, 15, 25, 39, 40, 63, 67, 68, 69, 78, 85, 87, 88, 103, 104, 105, 107, 109, 110, 114, 116, 117, 118, 119, 123, 124, 126, 129, 130, 134, 137, 139, 142, 144, 146, 148, 150, 152, 156, 161, 162, 171, 184, 185, 187, 188, 189, 199, 200, 201, 203, 204, 207, 218, 221, 222, 231, 232, 233, 234, 241, 253, 256, 260, 261, 265, 266, 270, 295, 340, 350, 351, 362, 363, 385, 386, 389, 393, 407, 436, 441, 450, 452, 456, 473, 476, 493, 499, 501, 511, 513, 532, 534, 535, 536, 537, 551, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 589, 596, 603, 604, 605, 609, 610, 618, 628, 629, 630, 633, 641, 646, 647, 655, 681, 690, 691, 693, 694, 695, 699, 708, 719, 721, 722, 733, 734, 736, 737, 742, 746, 757, 763, 769, 777, 778, 785, 786, 788, 789, 790, 794, 797, 811, 813, 819, 821, 823, 828, 831, 834, 858, 902, 911, 912, 919, 922, 923, 950, 951, 954, 972, 996, 997, 1041, 1044, 1061, 1067, 1077, 1113, 1120, 1123, 1127, 1130, 1135, 1142, 1149, 1150, 1151, 1155, 1156, 1164, 1174, 1175, 1176, 1179, 1187, 1194, 1205, 1224, 1231], "oper": [9, 40, 69, 86, 88, 93, 94, 103, 105, 106, 107, 108, 109, 114, 116, 126, 153, 159, 170, 173, 176, 183, 186, 193, 194, 205, 207, 214, 218, 220, 221, 225, 229, 231, 234, 235, 241, 251, 256, 257, 261, 264, 273, 274, 295, 302, 303, 306, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 413, 414, 428, 433, 435, 456, 459, 488, 489, 490, 491, 492, 493, 501, 508, 525, 528, 530, 532, 534, 535, 540, 541, 544, 550, 551, 558, 565, 579, 582, 645, 646, 655, 662, 663, 665, 676, 677, 696, 746, 758, 767, 777, 784, 787, 790, 793, 797, 803, 804, 813, 819, 839, 858, 867, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 986, 1056, 1057, 1058, 1059, 1060, 1061, 1099, 1119, 1127, 1200, 1204, 1205, 1206, 1214, 1224], "environ": [9, 35, 133, 145, 148], "local": [9, 39, 116, 118, 129, 130, 133, 146, 295, 407, 547, 548, 746, 894, 896, 929, 930, 962, 972, 1092, 1093, 1224], "non": [9, 37, 39, 40, 49, 57, 78, 108, 135, 185, 188, 202, 213, 231, 237, 238, 241, 261, 265, 270, 271, 295, 340, 441, 501, 512, 546, 560, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 597, 598, 604, 609, 641, 664, 666, 675, 676, 677, 684, 688, 695, 713, 717, 723, 724, 725, 728, 730, 746, 786, 789, 803, 813, 815, 816, 819, 831, 834, 835, 858, 902, 1003, 1069, 1091, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1127, 1143, 1144, 1150, 1155, 1187, 1205, 1224], "env": [9, 147], "back": [9, 78, 170, 257, 295, 545, 639, 746, 817, 858, 867, 986, 1185, 1206, 1224], "contain": [10, 37, 38, 39, 40, 57, 78, 83, 104, 105, 108, 110, 116, 118, 129, 130, 137, 138, 143, 156, 165, 184, 187, 202, 218, 222, 260, 265, 295, 305, 307, 309, 331, 332, 446, 512, 513, 560, 595, 601, 603, 605, 608, 625, 626, 641, 663, 665, 711, 746, 763, 773, 785, 788, 808, 828, 831, 858, 861, 865, 866, 918, 1076, 1083, 1095, 1101, 1141, 1147, 1149, 1151, 1154, 1171, 1172, 1187, 1200, 1224], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 57, 58, 59, 295, 817, 838, 858], "leav": [11, 213, 295, 501, 803, 858], "directli": [11, 35, 65, 85, 116, 144, 146, 150, 234, 295, 415, 416, 417, 722, 746, 769, 858, 981, 982, 983, 1224, 1232], "json_fil": 11, "ascii": [12, 25, 609, 610, 612, 620, 641, 1155, 1156, 1158, 1166, 1187], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 57, 114, 115, 128, 295, 389, 602, 604, 609, 610, 612, 613, 614, 615, 616, 620, 621, 623, 624, 627, 628, 629, 630, 631, 632, 641, 808, 858, 861, 954, 1148, 1150, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1166, 1167, 1169, 1170, 1173, 1174, 1175, 1176, 1187], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 182, 295], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 64, 65, 66, 68, 103, 110, 114, 115, 118, 119, 128, 129, 130, 222, 251, 257, 264, 265, 295, 831, 858, 1206, 1224, 1231], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 78, 84, 85, 104, 108, 110, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 156, 157, 158, 159, 162, 167, 176, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 197, 198, 201, 204, 205, 210, 211, 217, 218, 220, 222, 223, 231, 232, 233, 234, 235, 239, 243, 245, 248, 252, 254, 256, 257, 260, 261, 262, 265, 266, 268, 270, 277, 278, 280, 282, 283, 285, 288, 295, 305, 306, 307, 309, 319, 326, 328, 331, 332, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 376, 392, 394, 407, 412, 413, 414, 415, 416, 417, 433, 435, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 473, 476, 488, 495, 499, 503, 508, 509, 511, 513, 517, 520, 522, 524, 540, 541, 542, 544, 547, 548, 553, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 581, 584, 589, 591, 592, 595, 596, 598, 601, 606, 617, 618, 619, 623, 624, 626, 633, 634, 635, 656, 659, 662, 663, 664, 665, 666, 669, 672, 673, 678, 681, 685, 690, 691, 692, 693, 694, 705, 706, 708, 719, 722, 728, 733, 734, 736, 737, 746, 763, 765, 766, 767, 768, 769, 775, 777, 784, 785, 786, 787, 788, 789, 793, 794, 796, 798, 799, 808, 813, 818, 821, 823, 828, 829, 831, 834, 842, 843, 845, 847, 848, 850, 853, 858, 861, 865, 866, 867, 877, 884, 891, 894, 897, 900, 901, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 937, 957, 959, 972, 978, 979, 981, 982, 983, 990, 996, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1026, 1030, 1031, 1041, 1044, 1056, 1063, 1067, 1071, 1083, 1089, 1092, 1093, 1095, 1097, 1098, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1122, 1125, 1130, 1135, 1137, 1141, 1142, 1144, 1147, 1152, 1163, 1164, 1165, 1169, 1170, 1172, 1179, 1180, 1181, 1205, 1206, 1209, 1212, 1214, 1215, 1224, 1231], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 110], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 57, 113, 114, 115, 116, 128, 134, 169, 182, 201, 213, 233, 234, 253, 293, 295, 393, 396, 399, 524, 633, 634, 635, 638, 695, 776, 782, 803, 817, 838, 858, 961, 964, 1179, 1180, 1181, 1184, 1223], "style": [12, 25, 40, 116, 126, 222, 295], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 302, 604, 618, 629, 746, 861, 1150, 1164], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 302, 598, 604, 746, 1144, 1150, 1202, 1224], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 60, 63, 78, 80, 82, 86, 104, 106, 134, 144, 158, 159, 161, 162, 163, 166, 171, 172, 176, 181, 182, 183, 184, 194, 195, 203, 204, 209, 210, 211, 212, 216, 222, 223, 224, 244, 245, 246, 248, 267, 270, 274, 278, 280, 282, 283, 284, 285, 287, 288, 295, 301, 304, 311, 312, 313, 314, 315, 316, 335, 338, 339, 343, 344, 345, 357, 358, 359, 362, 363, 394, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 427, 428, 433, 435, 440, 450, 452, 453, 454, 456, 457, 459, 473, 485, 504, 505, 506, 508, 514, 515, 516, 527, 530, 532, 538, 539, 540, 541, 546, 550, 553, 554, 555, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 593, 594, 651, 652, 655, 660, 670, 671, 674, 675, 676, 678, 680, 696, 697, 711, 714, 715, 726, 727, 735, 742, 746, 766, 772, 778, 779, 784, 785, 792, 793, 794, 801, 802, 809, 823, 824, 832, 834, 836, 839, 843, 845, 847, 848, 849, 850, 852, 853, 858, 861, 869, 870, 871, 872, 873, 874, 898, 899, 906, 907, 908, 917, 918, 919, 922, 923, 959, 981, 982, 983, 988, 992, 999, 1002, 1041, 1091, 1095, 1097, 1107, 1109, 1110, 1112, 1113, 1114, 1116, 1117, 1118, 1133, 1134, 1138, 1198, 1199, 1211, 1224, 1232], "multi": [13, 40, 114, 115, 295, 418, 603, 746, 1149], "automat": [13, 65, 68, 103, 105, 106, 107, 109, 110, 114, 115, 116, 117, 119, 123, 124, 128, 132, 144, 146, 148, 237, 270, 295, 334, 512, 560, 628, 629, 630, 746, 815, 834, 858, 1076, 1101, 1174, 1175, 1176, 1224, 1231], "turn": [13, 57, 58, 59, 84, 85, 114, 115, 128, 639, 768, 769, 775, 777, 798, 799, 808, 858, 1185], "struct": [13, 110, 218, 237, 259, 263, 270, 295, 358, 501, 553, 560, 563, 564, 605, 606, 624, 625, 659, 681, 682, 684, 685, 686, 710, 746, 815, 830, 834, 846, 858, 918, 1069, 1095, 1104, 1151, 1152, 1168, 1170, 1171, 1224], "v": [13, 14, 45, 65, 66, 168, 295, 580, 746, 1121, 1224], "v2": [13, 120, 131], "out": [13, 19, 57, 58, 59, 110, 136, 231, 234, 295, 329, 476, 477, 499, 596, 599, 736, 813, 858, 886, 1044, 1045, 1067, 1142, 1145], "separ": [14, 15, 29, 32, 37, 57, 112, 114, 115, 128, 220, 222, 254, 261, 263, 295, 309, 474, 480, 513, 602, 677, 681, 682, 685, 686, 746, 830, 858, 1042, 1048, 1148, 1193, 1201, 1224], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 59, 63, 115, 183, 184, 185, 186, 187, 188, 202, 218, 220, 222, 231, 234, 264, 266, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 303, 357, 420, 426, 431, 434, 473, 513, 521, 523, 545, 556, 564, 565, 591, 592, 596, 603, 604, 605, 618, 659, 711, 746, 784, 785, 786, 787, 788, 789, 813, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 917, 1041, 1105, 1142, 1149, 1150, 1151, 1164, 1212, 1224], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 861], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 114, 115, 137, 138, 139, 140, 184, 185, 187, 188, 203, 204, 231, 265, 295, 358, 415, 416, 417, 441, 489, 490, 491, 492, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 589, 620, 675, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 793, 794, 813, 831, 858, 918, 981, 982, 983, 1003, 1057, 1058, 1059, 1060, 1095, 1121, 1135, 1166, 1224], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 57, 295, 858], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 115, 136, 137, 139, 166, 182, 183, 202, 205, 255, 273, 295, 439, 524, 746, 768, 791, 858, 1011, 1203, 1224, 1232], "876": 14, "543": 14, "010": 14, "101": [14, 32, 366, 1232], "000": [14, 15, 32, 40, 295, 1232], "123": [14, 598, 604, 619, 641, 736, 861, 1144, 1150, 1165, 1187, 1202, 1224], "456": [14, 15, 366, 861, 927, 1202, 1224], "780": 14, "precis": [15, 16, 37, 39, 40, 48, 49, 57, 116, 201, 233, 234, 253, 295, 365, 636, 858, 861, 926, 1182], "control": [15, 16, 40, 68, 85, 86, 142, 295, 769, 775, 858], "number": [15, 16, 17, 18, 19, 22, 30, 37, 40, 45, 57, 59, 69, 78, 88, 97, 103, 105, 107, 109, 112, 114, 115, 117, 119, 123, 124, 125, 128, 132, 133, 135, 142, 144, 145, 147, 148, 156, 158, 168, 169, 171, 172, 182, 190, 201, 202, 205, 206, 217, 218, 235, 241, 242, 246, 249, 260, 264, 267, 277, 279, 289, 295, 320, 327, 333, 346, 357, 358, 360, 374, 377, 382, 384, 394, 408, 409, 411, 415, 416, 417, 421, 423, 429, 437, 450, 452, 460, 461, 470, 478, 482, 483, 488, 493, 498, 501, 549, 553, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 582, 583, 585, 594, 609, 610, 611, 614, 618, 624, 625, 636, 648, 654, 660, 678, 679, 680, 695, 703, 723, 724, 727, 731, 735, 746, 763, 766, 776, 777, 778, 779, 790, 797, 808, 819, 820, 824, 826, 828, 832, 842, 844, 854, 858, 890, 901, 917, 918, 920, 935, 938, 947, 949, 959, 973, 974, 976, 980, 981, 982, 983, 987, 989, 998, 1010, 1027, 1028, 1038, 1046, 1050, 1051, 1056, 1061, 1066, 1069, 1083, 1084, 1095, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1127, 1128, 1131, 1139, 1155, 1156, 1157, 1160, 1164, 1170, 1171, 1182, 1195, 1208, 1213, 1224, 1232], "place": [15, 16, 37, 57, 156, 164, 170, 192, 193, 194, 222, 227, 229, 234, 242, 245, 260, 268, 295, 319, 480, 583, 591, 746, 763, 820, 823, 828, 858, 867, 877, 986, 1048, 1098, 1128, 1137, 1224], "float": [15, 16, 37, 40, 51, 52, 57, 119, 134, 137, 138, 139, 140, 141, 144, 146, 152, 162, 168, 171, 204, 224, 235, 242, 287, 295, 339, 358, 362, 363, 394, 412, 413, 414, 415, 416, 417, 422, 427, 433, 435, 440, 443, 447, 450, 452, 453, 454, 459, 467, 488, 504, 508, 514, 527, 538, 539, 540, 541, 550, 553, 554, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 655, 674, 714, 715, 720, 722, 727, 735, 746, 778, 794, 809, 820, 821, 852, 858, 861, 891, 899, 918, 919, 921, 922, 923, 959, 978, 980, 981, 982, 983, 988, 992, 999, 1010, 1026, 1035, 1036, 1037, 1056, 1072, 1079, 1080, 1086, 1087, 1094, 1095, 1096, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1123, 1124, 1135, 1139, 1194, 1205, 1213, 1224, 1232], "point": [15, 16, 40, 51, 52, 144, 146, 171, 184, 187, 205, 295, 339, 358, 362, 394, 422, 427, 450, 452, 488, 513, 577, 579, 746, 778, 785, 788, 798, 799, 811, 858, 899, 918, 922, 959, 988, 992, 1010, 1056, 1095, 1117, 1119, 1205, 1224], "standard": [15, 40, 246, 256, 295, 377, 416, 574, 589, 594, 608, 727, 742, 746, 824, 858, 938, 982, 1135, 1139, 1154, 1224, 1232], "behaviour": [15, 78, 86, 165, 295, 596, 603, 604, 618, 655, 746, 773, 858, 1142, 1149, 1150, 1164], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 57, 59, 68, 69, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 119, 120, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 144, 146, 153, 156, 166, 168, 170, 172, 176, 184, 185, 187, 188, 203, 207, 221, 231, 232, 234, 237, 238, 241, 245, 254, 256, 260, 262, 265, 271, 295, 340, 415, 416, 417, 423, 493, 501, 512, 522, 549, 560, 564, 565, 582, 591, 592, 609, 610, 628, 629, 630, 633, 672, 681, 685, 699, 746, 763, 779, 785, 786, 788, 789, 793, 798, 799, 813, 815, 816, 819, 823, 828, 829, 831, 835, 858, 867, 902, 980, 981, 982, 983, 986, 989, 1061, 1076, 1101, 1105, 1120, 1123, 1127, 1155, 1156, 1174, 1175, 1176, 1179, 1201, 1224], "larger": [15, 57, 58, 59, 678, 768, 858], "should": [15, 38, 40, 57, 58, 59, 86, 103, 105, 107, 109, 118, 123, 124, 126, 128, 132, 134, 141, 142, 146, 156, 163, 201, 204, 207, 232, 233, 234, 253, 254, 260, 263, 281, 295, 303, 337, 357, 410, 418, 450, 452, 473, 513, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 580, 589, 659, 695, 697, 704, 708, 711, 723, 724, 736, 746, 763, 772, 777, 793, 794, 799, 817, 821, 823, 828, 830, 838, 858, 861, 895, 917, 975, 1041, 1077, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1121, 1135, 1212, 1224], "ensur": [15, 40, 117, 143, 144, 146, 183, 186, 220, 232, 295, 441, 746, 784, 787, 798, 799, 858, 861, 1205, 1224], "awar": [15, 201, 233, 234, 253, 295, 777, 858, 1181], "both": [15, 30, 37, 57, 69, 87, 88, 184, 185, 187, 188, 203, 204, 214, 231, 232, 265, 295, 308, 340, 358, 418, 441, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 742, 746, 757, 785, 786, 788, 789, 793, 794, 804, 813, 831, 858, 902, 1003, 1013, 1224], "limit": [15, 16, 59, 116, 117, 128, 172, 295, 327, 341, 342, 423, 429, 746, 779, 790, 858, 903, 904, 989, 1224], "represent": [15, 43, 44, 255, 295, 337, 370, 374, 377, 378, 380, 382, 384, 387, 390, 391, 394, 408, 409, 411, 653, 746, 775, 796, 858, 895, 896, 931, 935, 937, 938, 942, 944, 947, 949, 952, 955, 956, 959, 973, 974, 976, 1203, 1207, 1224], "look": [15, 184, 295, 328, 501, 511, 746, 785, 858, 885], "appli": [15, 25, 37, 40, 57, 63, 86, 128, 141, 144, 146, 176, 207, 221, 281, 295, 368, 369, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 394, 397, 408, 409, 411, 416, 417, 509, 511, 513, 549, 566, 568, 569, 571, 575, 618, 633, 634, 635, 638, 681, 682, 685, 686, 699, 709, 710, 711, 721, 736, 746, 790, 797, 798, 799, 807, 846, 858, 902, 929, 930, 931, 935, 937, 938, 942, 944, 947, 949, 952, 955, 956, 959, 962, 973, 974, 976, 982, 983, 1077, 1106, 1108, 1109, 1111, 1115, 1164, 1179, 1180, 1181, 1184, 1224], "float64": [15, 37, 40, 57, 106, 114, 144, 166, 168, 176, 236, 257, 270, 295, 311, 312, 313, 314, 315, 316, 335, 343, 344, 345, 359, 394, 418, 450, 452, 555, 587, 588, 651, 652, 697, 719, 722, 737, 746, 774, 814, 834, 858, 861, 959, 1206, 1211, 1224], "doe": [15, 37, 39, 57, 78, 86, 97, 103, 105, 106, 107, 109, 110, 114, 115, 116, 118, 119, 123, 124, 128, 129, 132, 134, 159, 170, 189, 202, 203, 232, 233, 234, 262, 270, 295, 334, 410, 436, 501, 512, 560, 629, 630, 657, 698, 707, 742, 746, 767, 777, 793, 799, 829, 834, 858, 867, 905, 975, 986, 996, 997, 1076, 1101, 1130, 1214, 1224], "cover": 15, "nativ": [15, 114, 116, 119, 120, 122, 126, 142, 201, 207, 233, 234, 253, 281, 295, 513, 711, 746, 752, 846, 1077, 1224, 1232], "level": [15, 40, 45, 59, 128, 131, 132, 133, 144, 176, 207, 218, 295, 424, 746, 790, 797, 858], "larg": [15, 16, 19, 39, 78, 116, 295], "maximum": [15, 31, 37, 57, 114, 115, 128, 134, 142, 143, 144, 146, 182, 184, 208, 209, 295, 464, 514, 538, 547, 556, 712, 713, 746, 785, 800, 858, 939, 1032, 1078, 1086, 1092, 1097, 1224], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 78, 103, 104, 107, 108, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 162, 163, 165, 182, 184, 202, 204, 213, 220, 222, 254, 256, 257, 264, 266, 295, 359, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 567, 568, 569, 571, 574, 575, 576, 670, 671, 690, 691, 693, 695, 733, 734, 742, 746, 758, 765, 769, 771, 772, 773, 785, 794, 799, 803, 817, 858, 906, 908, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 1007, 1012, 1016, 1017, 1022, 1107, 1133, 1198, 1224, 1232], "pi": [15, 359, 746, 906, 908, 1133, 1198, 1224], "e": [15, 36, 37, 39, 41, 42, 45, 57, 104, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 162, 182, 190, 200, 249, 251, 256, 264, 295, 302, 309, 412, 418, 441, 504, 513, 518, 519, 521, 522, 523, 524, 525, 560, 584, 589, 629, 630, 697, 711, 736, 746, 771, 796, 810, 811, 858, 861, 978, 979, 1003, 1101, 1122, 1135, 1205, 1224, 1232], "const": 15, "15": [15, 40, 136, 143, 184, 194, 207, 231, 295, 357, 360, 374, 382, 386, 393, 407, 549, 565, 575, 607, 682, 722, 733, 746, 785, 813, 858, 917, 920, 958, 972, 1153, 1224], "141592653589793": 15, "718281828459045": [15, 412, 504, 746, 978, 1072, 1224], "align": [15, 20, 21, 40, 78, 86, 295], "numer": [15, 21, 37, 40, 57, 157, 163, 204, 213, 222, 264, 295, 302, 340, 428, 441, 506, 528, 530, 550, 559, 584, 605, 641, 645, 655, 746, 758, 765, 772, 794, 803, 858, 861, 902, 919, 979, 1003, 1020, 1122, 1129, 1151, 1187, 1205, 1224, 1232], "order": [15, 40, 57, 58, 59, 63, 65, 78, 84, 106, 116, 135, 137, 138, 156, 165, 173, 183, 184, 185, 186, 187, 188, 203, 220, 221, 222, 231, 235, 239, 245, 256, 260, 262, 266, 295, 319, 326, 337, 362, 363, 424, 472, 488, 495, 503, 556, 565, 569, 570, 571, 572, 574, 576, 579, 580, 581, 591, 592, 629, 630, 631, 632, 644, 656, 657, 659, 672, 736, 746, 757, 763, 773, 780, 784, 785, 786, 787, 788, 789, 793, 803, 813, 818, 823, 828, 829, 858, 877, 884, 895, 897, 922, 923, 990, 1021, 1040, 1056, 1063, 1071, 1097, 1103, 1119, 1121, 1125, 1137, 1191, 1209, 1210, 1212, 1224, 1232], "cleanli": [15, 182, 295], "line": [15, 25, 40, 114, 115, 119, 128, 182, 196, 198, 295, 603, 1149], "up": [15, 40, 70, 114, 115, 117, 128, 201, 204, 233, 234, 253, 295, 309, 339, 513, 746, 793, 794, 799, 858, 861, 899, 1224], "xx": [15, 79, 81, 143, 146, 861], "yy": [15, 79, 81, 143, 146, 861], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 59, 104, 136, 144, 231, 295, 304, 385, 386, 389, 393, 407, 440, 546, 556, 565, 567, 575, 590, 662, 729, 734, 746, 768, 769, 790, 797, 808, 813, 826, 858, 861, 954, 958, 972, 1077, 1107, 1224], "111": 15, "100": [15, 22, 32, 40, 106, 109, 114, 115, 123, 128, 132, 241, 295, 560, 582, 606, 607, 636, 746, 819, 858, 1101, 1108, 1109, 1111, 1127, 1152, 1153, 1182, 1224, 1232], "988": 15, "44": [15, 214, 295, 361, 746, 804, 858], "444": 15, "23": [15, 136, 184, 231, 295, 366, 370, 374, 382, 390, 393, 409, 565, 568, 569, 571, 574, 575, 576, 692, 695, 732, 733, 734, 746, 785, 813, 858, 861, 927, 935, 1232], "789": [15, 861], "fmt": [16, 439, 700, 746, 791, 858], "floatfmt": 16, "mix": [16, 919, 1181, 1224], "how": [16, 39, 40, 78, 86, 106, 109, 117, 133, 165, 203, 222, 264, 265, 295, 337, 360, 392, 393, 407, 440, 468, 469, 470, 545, 559, 573, 606, 607, 633, 635, 692, 736, 746, 773, 793, 831, 858, 895, 920, 957, 958, 972, 1036, 1037, 1038, 1113, 1152, 1153, 1179, 1181, 1224], "full": [16, 48, 78, 83, 86, 114, 115, 118, 128, 129, 130, 134, 184, 185, 187, 188, 231, 295, 565, 633, 634, 635, 638, 746, 785, 786, 788, 789, 798, 799, 813, 858, 861, 1179, 1180, 1181, 1184, 1232], "scientif": 16, "notat": [16, 40, 295], "small": [16, 117, 143, 205, 295, 393, 777, 858, 1232], "2304980958725870923": 16, "1e6": 16, "1e": [16, 137, 138, 139, 140], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 405, 970], "00000001": [16, 662, 746], "plai": [17, 677], "sam": 17, "As": [17, 69, 87, 88, 103, 105, 106, 107, 109, 119, 123, 124, 132, 295, 501, 736, 858], "time": [17, 39, 48, 50, 63, 68, 83, 84, 85, 126, 128, 170, 184, 185, 187, 188, 204, 231, 266, 295, 333, 364, 365, 366, 367, 368, 372, 373, 389, 392, 393, 396, 398, 399, 407, 410, 466, 467, 501, 565, 568, 569, 570, 571, 572, 574, 575, 576, 585, 633, 635, 638, 653, 654, 676, 677, 690, 691, 692, 693, 694, 695, 701, 733, 734, 746, 768, 769, 785, 786, 788, 789, 794, 808, 813, 858, 861, 867, 890, 925, 926, 927, 928, 933, 934, 954, 957, 958, 961, 963, 964, 972, 975, 986, 1034, 1036, 1037, 1131, 1179, 1181, 1184, 1207, 1208, 1224, 1232], "goe": 17, "By": [17, 19, 35, 78, 114, 115, 128, 184, 204, 231, 241, 246, 265, 266, 267, 295, 389, 393, 407, 493, 565, 568, 569, 570, 571, 572, 574, 575, 576, 582, 594, 660, 678, 680, 690, 691, 693, 694, 695, 708, 727, 733, 734, 735, 746, 768, 785, 794, 813, 819, 824, 832, 858, 954, 958, 972, 1061, 1127, 1139, 1205, 1213, 1224], "begin": [17, 40, 295, 415, 416, 417, 603, 746, 981, 982, 983, 1149, 1224], "beauti": 17, "friendship": 17, "len_byt": [17, 610, 611, 1156, 1157], "len": [17, 40, 142, 144, 202, 295, 347, 483, 513, 746, 1051, 1067, 1224], "u32": [17, 63, 116, 154, 157, 219, 272, 277, 286, 288, 295, 303, 310, 317, 318, 319, 320, 321, 346, 347, 370, 374, 378, 382, 384, 390, 391, 394, 408, 409, 460, 464, 465, 469, 482, 531, 543, 556, 560, 564, 568, 569, 571, 574, 575, 576, 580, 598, 609, 610, 653, 657, 663, 668, 672, 673, 679, 718, 746, 761, 765, 806, 837, 842, 851, 853, 858, 877, 878, 879, 891, 896, 931, 935, 942, 944, 947, 949, 952, 955, 956, 959, 973, 974, 999, 1050, 1097, 1105, 1144, 1155, 1156, 1207, 1210, 1212, 1224], "37": 17, "beaut": 17, "48": [17, 231, 295, 565, 746, 813, 858], "fmt_str_length": 17, "50": [17, 32, 40, 162, 170, 182, 295, 340, 393, 407, 746, 902, 919, 972, 1224], "element": [18, 19, 30, 143, 146, 156, 199, 222, 232, 246, 260, 267, 295, 309, 311, 312, 313, 314, 315, 316, 333, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 362, 363, 419, 420, 424, 436, 446, 460, 468, 469, 471, 472, 473, 474, 479, 482, 483, 489, 490, 491, 492, 497, 502, 505, 506, 513, 545, 546, 556, 559, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 586, 587, 588, 593, 594, 624, 625, 636, 651, 652, 654, 660, 678, 680, 723, 724, 727, 735, 746, 763, 823, 824, 828, 832, 858, 868, 869, 870, 871, 872, 873, 874, 890, 898, 901, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 923, 984, 985, 990, 998, 1011, 1025, 1027, 1028, 1036, 1037, 1039, 1040, 1041, 1042, 1047, 1050, 1051, 1057, 1058, 1059, 1060, 1065, 1070, 1073, 1074, 1077, 1091, 1097, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1121, 1132, 1133, 1134, 1138, 1139, 1170, 1171, 1182, 1195, 1198, 1199, 1203, 1208, 1209, 1213, 1224], "empti": [18, 36, 37, 57, 94, 106, 114, 115, 119, 125, 128, 158, 159, 184, 197, 213, 295, 708, 725, 766, 767, 785, 803, 858, 861, 901, 905, 1006, 1224], "alwai": [18, 37, 39, 57, 63, 114, 137, 138, 139, 140, 143, 183, 186, 207, 281, 295, 521, 633, 690, 736, 799, 858, 867, 1077, 1179, 1224, 1231, 1232], "neg": [18, 49, 135, 184, 185, 187, 188, 190, 206, 231, 241, 242, 244, 249, 295, 493, 494, 549, 565, 582, 583, 590, 622, 746, 785, 786, 788, 789, 813, 819, 820, 822, 837, 858, 998, 1028, 1061, 1062, 1127, 1128, 1136, 1168, 1195, 1224], "result": [18, 37, 43, 44, 45, 57, 58, 59, 78, 86, 107, 109, 116, 117, 118, 119, 128, 131, 133, 134, 146, 170, 184, 187, 189, 203, 218, 222, 231, 234, 241, 242, 257, 266, 274, 295, 393, 396, 399, 407, 415, 416, 417, 421, 436, 457, 500, 501, 511, 513, 545, 553, 561, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 581, 582, 583, 623, 624, 635, 655, 681, 682, 685, 686, 690, 691, 692, 693, 694, 695, 710, 719, 722, 723, 724, 737, 746, 764, 785, 786, 788, 789, 793, 798, 799, 808, 813, 817, 819, 820, 838, 839, 858, 867, 918, 958, 961, 964, 972, 981, 982, 983, 986, 997, 1026, 1068, 1077, 1095, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1125, 1127, 1128, 1169, 1170, 1181, 1205, 1224, 1231, 1232], "being": [18, 85, 114, 115, 116, 128, 134, 157, 169, 254, 264, 265, 295, 309, 357, 393, 568, 569, 570, 571, 572, 574, 575, 576, 696, 746, 765, 769, 776, 777, 858, 897, 917, 958, 999, 1095, 1224, 1232], "content": [18, 585, 746, 1131, 1224], "final": [18, 40, 78, 133, 295, 415, 416, 417, 746, 777, 858, 981, 982, 983, 1224], "item": [18, 86, 115, 182, 232, 235, 295, 360, 420, 467, 470, 477, 480, 488, 579, 625, 746, 920, 985, 1035, 1038, 1045, 1048, 1056, 1119, 1171, 1224], "num": [18, 40, 259, 295, 441, 746, 1003, 1224], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 59, 63, 78, 86, 110, 117, 128, 136, 144, 146, 159, 170, 181, 182, 184, 190, 192, 194, 195, 200, 217, 221, 222, 223, 227, 229, 231, 237, 249, 270, 274, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 304, 308, 317, 318, 319, 321, 340, 346, 348, 351, 360, 364, 366, 372, 385, 386, 392, 393, 407, 410, 436, 437, 440, 446, 456, 460, 461, 470, 471, 478, 479, 494, 497, 498, 502, 505, 521, 523, 532, 546, 549, 560, 565, 590, 648, 662, 675, 681, 690, 693, 696, 699, 701, 703, 708, 710, 731, 734, 746, 768, 769, 785, 790, 792, 797, 807, 808, 813, 815, 825, 826, 834, 839, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 861, 902, 920, 925, 927, 933, 957, 972, 975, 978, 998, 1011, 1028, 1038, 1039, 1046, 1047, 1062, 1065, 1066, 1070, 1073, 1077, 1091, 1101, 1120, 1123, 1195, 1224, 1232], "size": [19, 45, 59, 114, 115, 116, 142, 143, 144, 146, 148, 168, 264, 295, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 669, 705, 706, 723, 724, 746, 768, 858, 980, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1224, 1232], "overwrit": [19, 38, 39, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 132, 152, 265, 295, 304, 746, 777, 858], "chunk": [19, 59, 112, 114, 115, 126, 128, 131, 132, 133, 144, 146, 170, 202, 217, 295, 308, 557, 746, 858, 867, 900, 986, 995, 1083, 1098, 1200, 1224], "stream": [19, 41, 42, 57, 58, 59, 84, 85, 122, 156, 183, 186, 203, 260, 262, 295, 763, 768, 769, 775, 777, 784, 787, 793, 798, 799, 803, 808, 821, 823, 828, 829, 858], "engin": [19, 38, 116, 117, 119, 148, 183, 186, 203, 207, 262, 281, 295, 784, 787, 793, 798, 799, 803, 829, 846, 858, 1077, 1224], "determin": [19, 37, 40, 57, 76, 78, 86, 106, 109, 114, 115, 116, 119, 125, 126, 128, 133, 135, 153, 163, 176, 184, 187, 201, 202, 207, 222, 231, 261, 266, 295, 337, 376, 392, 393, 407, 501, 512, 521, 553, 559, 560, 568, 569, 570, 571, 572, 574, 575, 576, 589, 606, 607, 633, 635, 636, 692, 719, 722, 737, 746, 785, 788, 813, 858, 895, 937, 957, 958, 972, 999, 1069, 1076, 1095, 1101, 1135, 1152, 1153, 1179, 1181, 1182, 1224], "schema": [19, 33, 36, 38, 39, 63, 79, 80, 81, 86, 98, 99, 101, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 133, 142, 144, 153, 158, 159, 166, 168, 202, 207, 214, 218, 256, 295, 322, 323, 324, 325, 326, 500, 501, 521, 606, 607, 662, 728, 746, 766, 767, 774, 798, 799, 804, 817, 841, 846, 858, 861, 882, 905, 1152, 1153, 1224], "thread": [19, 37, 57, 85, 112, 114, 115, 117, 148, 295, 309, 473, 513, 746, 769, 858, 1041], "pool": [19, 85, 148, 769, 858], "For": [19, 39, 40, 114, 115, 117, 118, 119, 128, 129, 130, 165, 170, 203, 204, 231, 281, 295, 415, 416, 417, 501, 513, 522, 558, 589, 596, 603, 604, 605, 618, 681, 685, 695, 699, 700, 742, 746, 773, 794, 813, 846, 858, 867, 981, 982, 983, 986, 1013, 1099, 1135, 1142, 1149, 1150, 1151, 1164, 1205, 1224], "some": [19, 35, 39, 40, 69, 88, 106, 114, 115, 116, 119, 128, 152, 165, 295, 742, 773, 858, 1011, 1224, 1232], "dataset": [19, 45, 114, 115, 126, 128, 134, 203, 295, 457, 746, 758, 793, 798, 799, 858, 1026, 1224], "esp": 19, "have": [19, 35, 39, 40, 48, 69, 78, 88, 104, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 144, 146, 170, 201, 225, 231, 233, 234, 253, 295, 357, 415, 416, 417, 513, 522, 556, 565, 605, 746, 771, 803, 810, 813, 821, 837, 858, 861, 867, 917, 981, 982, 983, 986, 996, 1097, 1181, 1224, 1232], "too": [19, 564, 746, 777, 858], "optimist": 19, "lead": [19, 45, 110, 134, 184, 185, 187, 188, 211, 231, 241, 248, 295, 431, 434, 493, 511, 513, 565, 581, 582, 613, 627, 628, 630, 649, 678, 746, 785, 786, 788, 789, 798, 799, 813, 819, 841, 846, 858, 1061, 1077, 1125, 1127, 1159, 1173, 1174, 1176, 1224], "memori": [19, 59, 86, 103, 104, 107, 108, 109, 114, 115, 116, 119, 120, 126, 128, 131, 132, 133, 152, 170, 207, 234, 243, 281, 295, 545, 557, 584, 746, 768, 858, 867, 986, 1077, 1098, 1129, 1130, 1224], "error": [19, 39, 85, 114, 115, 128, 157, 222, 232, 295, 304, 329, 335, 456, 476, 480, 499, 532, 596, 599, 603, 605, 606, 608, 633, 634, 635, 638, 746, 765, 769, 841, 846, 858, 886, 891, 1044, 1048, 1067, 1142, 1145, 1149, 1151, 1152, 1154, 1179, 1180, 1181, 1184, 1224], "row": [19, 25, 30, 37, 40, 43, 45, 57, 59, 78, 79, 81, 86, 95, 97, 102, 106, 107, 109, 110, 114, 115, 116, 119, 120, 122, 123, 126, 128, 131, 132, 133, 134, 137, 138, 142, 144, 153, 156, 158, 165, 170, 173, 176, 178, 182, 183, 184, 186, 189, 190, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 213, 218, 234, 235, 244, 249, 250, 253, 255, 260, 262, 264, 265, 272, 279, 281, 289, 295, 320, 420, 432, 436, 437, 461, 474, 501, 545, 546, 561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 590, 592, 602, 606, 607, 648, 650, 669, 672, 685, 686, 699, 703, 705, 706, 721, 723, 724, 731, 736, 746, 763, 766, 768, 773, 777, 780, 781, 783, 785, 790, 793, 794, 795, 797, 799, 803, 822, 826, 827, 828, 829, 831, 837, 844, 846, 854, 858, 867, 985, 986, 994, 998, 1042, 1091, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1136, 1148, 1152, 1153, 1195, 1197, 1224, 1232], "per": [19, 37, 40, 57, 142, 144, 156, 182, 218, 219, 238, 245, 260, 271, 284, 286, 287, 295, 309, 334, 473, 476, 477, 499, 513, 592, 659, 672, 746, 763, 816, 823, 828, 835, 849, 851, 852, 858, 1041, 1044, 1045, 1067, 1212, 1224], "everi": [19, 37, 57, 114, 115, 128, 178, 184, 187, 250, 253, 266, 295, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 393, 407, 420, 432, 464, 465, 470, 474, 477, 478, 489, 494, 498, 602, 650, 681, 682, 685, 686, 746, 777, 783, 785, 788, 827, 858, 909, 910, 911, 912, 913, 914, 915, 916, 917, 958, 972, 985, 994, 996, 1032, 1033, 1038, 1042, 1045, 1046, 1057, 1062, 1066, 1148, 1197, 1224], "process": [19, 37, 57, 58, 59, 114, 115, 116, 128, 148, 295, 768, 858], "liter": [20, 21, 25, 39, 63, 85, 116, 119, 125, 144, 145, 146, 147, 182, 201, 208, 210, 215, 217, 220, 232, 233, 237, 238, 241, 247, 252, 265, 270, 271, 295, 304, 328, 340, 366, 413, 414, 421, 428, 433, 435, 441, 459, 508, 512, 528, 530, 540, 541, 550, 560, 596, 598, 618, 619, 645, 655, 664, 666, 669, 673, 675, 676, 677, 684, 688, 689, 690, 691, 692, 693, 694, 705, 706, 708, 713, 717, 719, 722, 725, 728, 730, 732, 733, 734, 737, 746, 769, 779, 815, 816, 819, 831, 834, 835, 858, 861, 865, 866, 885, 902, 918, 927, 987, 1003, 1095, 1120, 1123, 1127, 1142, 1144, 1164, 1165, 1224, 1231], "left": [20, 21, 40, 65, 78, 137, 138, 139, 140, 184, 185, 187, 188, 203, 204, 231, 265, 295, 358, 415, 416, 417, 440, 441, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 612, 653, 675, 681, 682, 685, 686, 690, 691, 693, 694, 699, 721, 733, 734, 736, 746, 785, 786, 788, 789, 793, 794, 813, 831, 858, 918, 981, 982, 983, 1003, 1095, 1121, 1158, 1207, 1224], "center": [20, 21, 40, 295, 415, 416, 417, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 746, 981, 982, 983, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1224], "cell": [20, 21, 40, 295], "valueerror": [20, 25], "recognis": [20, 21, 25, 141], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 39, 40, 57, 78, 110, 119, 144, 157, 162, 182, 184, 185, 187, 188, 202, 204, 231, 266, 295, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 467, 565, 568, 569, 570, 571, 572, 574, 575, 576, 633, 635, 653, 690, 691, 693, 694, 695, 701, 708, 733, 734, 746, 765, 785, 786, 788, 789, 794, 813, 858, 861, 924, 925, 926, 927, 928, 929, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 1022, 1035, 1036, 1037, 1086, 1087, 1120, 1124, 1179, 1181, 1207, 1224], "date": [21, 40, 48, 78, 114, 115, 117, 119, 125, 128, 134, 137, 138, 139, 140, 144, 157, 162, 182, 184, 185, 187, 188, 202, 204, 231, 295, 365, 366, 367, 370, 373, 376, 377, 378, 384, 385, 386, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 467, 565, 568, 569, 570, 571, 572, 574, 575, 576, 633, 634, 653, 690, 691, 693, 694, 701, 708, 732, 746, 765, 785, 786, 788, 789, 794, 813, 858, 861, 926, 927, 928, 931, 934, 935, 937, 938, 939, 940, 941, 942, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 1022, 1035, 1036, 1037, 1086, 1087, 1120, 1124, 1179, 1180, 1207, 1224], "333": [21, 578, 746, 1118, 1224], "mno": [21, 25], "2023": [21, 40, 110, 136, 202, 295, 366, 695, 708, 861, 927], "29": [21, 144, 364, 385, 925, 950], "2001": [21, 365, 370, 373, 374, 376, 382, 384, 389, 390, 391, 393, 398, 407, 408, 409, 410, 568, 569, 571, 574, 575, 576, 633, 746, 861, 926, 931, 934, 935, 937, 939, 940, 941, 942, 944, 946, 947, 949, 952, 954, 955, 956, 958, 963, 972, 973, 974, 975, 976, 1179], "null": [21, 37, 39, 57, 65, 78, 86, 106, 114, 115, 124, 128, 134, 152, 156, 158, 162, 165, 167, 172, 176, 177, 195, 203, 210, 211, 212, 219, 222, 224, 241, 242, 245, 246, 247, 248, 252, 257, 260, 263, 265, 267, 270, 277, 295, 305, 307, 308, 309, 319, 327, 329, 340, 346, 348, 351, 360, 362, 363, 389, 400, 401, 402, 403, 404, 405, 406, 414, 415, 416, 417, 418, 421, 422, 423, 429, 440, 450, 452, 453, 454, 460, 462, 463, 470, 472, 475, 476, 477, 481, 482, 489, 490, 491, 492, 493, 499, 501, 513, 541, 542, 543, 546, 557, 560, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 583, 584, 586, 591, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 615, 616, 617, 622, 624, 625, 626, 641, 642, 643, 644, 653, 663, 664, 665, 666, 675, 676, 677, 679, 684, 697, 708, 713, 717, 723, 724, 728, 730, 736, 746, 763, 766, 773, 779, 792, 793, 806, 817, 819, 820, 823, 828, 830, 831, 834, 836, 842, 858, 865, 866, 868, 877, 886, 901, 902, 920, 922, 923, 965, 966, 967, 968, 969, 970, 971, 979, 981, 982, 983, 987, 989, 996, 1002, 1018, 1019, 1027, 1030, 1031, 1038, 1040, 1044, 1050, 1058, 1060, 1061, 1067, 1069, 1077, 1090, 1091, 1101, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1122, 1127, 1128, 1132, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1161, 1162, 1163, 1168, 1170, 1171, 1172, 1187, 1203, 1205, 1206, 1207, 1214, 1224, 1231, 1232], "07": [21, 366, 392, 393, 407, 633, 690, 693, 701, 861, 927, 957, 1179], "05": [21, 134, 137, 138, 139, 140, 144, 157, 204, 266, 295, 366, 367, 392, 394, 396, 399, 400, 690, 693, 765, 794, 858, 861, 927, 928, 929, 930, 957, 958, 961, 962, 964, 965, 972], "visibl": [22, 168, 295, 980, 1224], "eg": [22, 30, 40, 86, 117, 150, 295, 393, 633, 635, 655, 746, 996, 1179, 1181, 1224], "low": [22, 116, 148, 553, 746, 1095, 1224], "rang": [22, 40, 116, 117, 162, 168, 184, 202, 295, 359, 370, 384, 390, 391, 393, 407, 408, 440, 669, 676, 689, 690, 691, 692, 693, 694, 705, 706, 732, 733, 734, 746, 785, 858, 919, 931, 949, 955, 956, 958, 972, 973, 980, 1091, 1224], "98": [22, 194, 295, 333, 431, 434, 591, 636, 654, 746, 1182], "99": [22, 40, 171, 172, 194, 197, 265, 295, 303, 333, 421, 423, 431, 434, 591, 654, 736, 746, 778, 779, 831, 858, 978, 987, 1224], "tbl_col": 22, "95": [22, 303, 746], "96": [22, 303, 746], "97": [22, 194, 295, 303, 746], "move": [23, 234, 295, 415, 416, 417, 568, 569, 571, 575, 746, 981, 982, 983, 1108, 1109, 1111, 1115, 1224], "inlin": [23, 234, 295, 596, 603, 604, 618, 1142, 1149, 1150, 1164], "parenthes": 23, "inform": [24, 28, 39, 83, 118, 129, 130, 133, 137, 139, 161, 295, 457, 589, 596, 603, 604, 618, 746, 808, 858, 896, 1026, 1135, 1142, 1149, 1150, 1164, 1224], "below": [24, 39, 118, 129, 130, 165, 184, 222, 295, 423, 690, 691, 693, 694, 733, 734, 736, 742, 746, 773, 785, 858], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 78, 110], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 334, 603, 608, 746, 1149, 1154], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 57, 83, 116, 118, 129, 130, 144, 156, 162, 168, 220, 234, 260, 261, 264, 265, 295, 358, 394, 441, 553, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 623, 624, 628, 629, 681, 685, 723, 724, 746, 763, 828, 831, 858, 861, 918, 919, 959, 980, 1003, 1095, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1169, 1170, 1174, 1214, 1224], "divid": [25, 358, 393, 407, 415, 416, 417, 457, 553, 746, 918, 958, 972, 981, 982, 983, 1026, 1095, 1224], "same": [25, 39, 40, 67, 69, 78, 84, 85, 86, 87, 88, 120, 128, 137, 138, 139, 140, 142, 150, 183, 207, 222, 234, 245, 262, 270, 271, 274, 281, 295, 301, 308, 325, 362, 363, 431, 434, 500, 517, 520, 545, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 592, 609, 644, 746, 768, 769, 784, 798, 799, 823, 829, 834, 835, 839, 858, 863, 867, 868, 883, 918, 922, 923, 927, 1068, 1077, 1095, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1155, 1215, 1224], "dens": [25, 182, 295, 556, 746, 1097, 1224], "space": [25, 184, 295, 785, 858], "horizont": [25, 86, 176, 192, 208, 209, 210, 211, 215, 216, 247, 248, 264, 295, 664, 666, 676, 677, 681, 682, 684, 685, 686, 688, 696, 699, 713, 717, 721, 730], "markdown": 25, "compat": [25, 40, 45, 59, 295, 596, 597, 598, 603, 604, 605, 618, 619, 858, 861, 1142, 1143, 1144, 1149, 1150, 1151, 1164, 1165], "No": [25, 639, 1185], "round": [25, 40, 80, 110, 116, 295, 339, 345, 427, 578, 651, 746, 899, 992, 1118, 1224], "corner": [25, 40, 110, 295], "op": [25, 146, 295, 559, 746, 858, 1181, 1224], "one": [25, 37, 38, 40, 57, 68, 78, 95, 103, 105, 106, 107, 108, 109, 114, 115, 119, 123, 124, 125, 128, 145, 146, 147, 150, 172, 173, 182, 183, 184, 185, 187, 188, 201, 213, 222, 231, 232, 233, 239, 241, 256, 259, 275, 295, 303, 358, 423, 431, 434, 493, 501, 506, 565, 582, 591, 604, 711, 726, 736, 742, 746, 779, 780, 784, 785, 786, 788, 789, 803, 813, 818, 819, 836, 840, 858, 867, 918, 989, 1022, 1061, 1069, 1074, 1095, 1127, 1150, 1188, 1224], "more": [25, 40, 43, 45, 59, 68, 78, 86, 87, 88, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 137, 139, 144, 146, 150, 161, 162, 200, 201, 205, 207, 213, 218, 232, 233, 235, 256, 262, 281, 295, 306, 309, 326, 457, 488, 503, 506, 511, 513, 544, 579, 589, 604, 609, 633, 634, 635, 656, 726, 736, 746, 803, 829, 858, 861, 868, 884, 896, 919, 1022, 1026, 1056, 1071, 1077, 1119, 1135, 1150, 1155, 1179, 1180, 1181, 1209, 1224, 1232], "semigraph": 25, "box": [25, 207, 295], "draw": [25, 30, 143, 1232], "found": [25, 37, 40, 57, 65, 90, 99, 101, 106, 110, 166, 295, 580, 608, 631, 632, 633, 635, 746, 858, 1121, 1154, 1177, 1178, 1179, 1181, 1224, 1231], "unicod": 25, "block": [25, 85, 183, 186, 262, 295, 736, 769, 784, 787, 811, 829, 837, 846, 858, 1120, 1123, 1224], "http": [25, 40, 41, 42, 104, 116, 117, 152, 161, 295, 603, 605, 1149, 1151], "en": [25, 40, 295], "wikipedia": 25, "org": [25, 41, 42, 104, 116, 117, 152, 161, 295], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 295], "etc": [26, 39, 40, 114, 118, 120, 122, 126, 129, 130, 131, 295, 746, 861, 1120, 1123, 1224], "between": [29, 86, 141, 142, 144, 146, 161, 224, 287, 295, 335, 360, 361, 441, 470, 471, 479, 480, 489, 490, 491, 492, 497, 502, 546, 553, 554, 572, 595, 670, 671, 678, 680, 720, 723, 724, 746, 809, 852, 858, 891, 896, 920, 921, 1003, 1038, 1039, 1047, 1048, 1057, 1058, 1059, 1060, 1065, 1070, 1091, 1095, 1096, 1112, 1141, 1224], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 59, 63, 148, 162, 172, 183, 209, 222, 231, 295, 341, 348, 353, 423, 501, 545, 556, 565, 568, 581, 625, 713, 726, 746, 779, 784, 813, 858, 903, 909, 913, 919, 989, 1069, 1097, 1108, 1125, 1171, 1224], "tbl_row": 30, "also": [32, 37, 40, 57, 68, 69, 106, 116, 119, 125, 128, 142, 143, 144, 145, 146, 150, 166, 183, 184, 185, 187, 188, 214, 218, 231, 233, 237, 245, 265, 270, 295, 348, 351, 389, 392, 441, 513, 556, 568, 569, 570, 571, 572, 574, 575, 576, 592, 628, 629, 681, 682, 685, 686, 690, 699, 701, 721, 736, 745, 746, 752, 784, 785, 786, 788, 789, 804, 813, 815, 823, 831, 834, 836, 858, 861, 957, 1003, 1097, 1143, 1144, 1174, 1224], "char": [32, 604, 1150], "omit": [32, 106, 110, 142, 144, 146, 150, 218, 234, 295, 733, 734, 861], "set_decimal_separ": 32, "x": [32, 65, 66, 78, 86, 104, 110, 114, 115, 117, 128, 142, 144, 152, 168, 192, 196, 198, 203, 213, 222, 233, 234, 264, 295, 302, 304, 306, 359, 413, 414, 428, 433, 435, 436, 459, 466, 480, 506, 508, 510, 511, 513, 528, 530, 533, 534, 535, 536, 537, 540, 541, 544, 550, 551, 559, 564, 586, 589, 624, 645, 646, 653, 655, 662, 664, 666, 670, 671, 681, 682, 684, 699, 708, 710, 713, 717, 721, 730, 736, 746, 793, 799, 803, 822, 858, 861, 896, 989, 1024, 1077, 1132, 1135, 1170, 1207, 1224, 1231], "1234567": 32, "987654": [32, 861], "10101": 32, "y": [32, 78, 86, 104, 110, 142, 144, 152, 168, 196, 198, 203, 213, 222, 233, 234, 264, 295, 302, 304, 306, 396, 399, 413, 414, 433, 435, 459, 466, 480, 508, 510, 513, 533, 534, 535, 536, 537, 540, 541, 544, 551, 559, 564, 633, 634, 635, 646, 655, 662, 664, 666, 670, 671, 684, 695, 708, 713, 717, 730, 746, 793, 803, 822, 858, 861, 896, 961, 964, 1179, 1180, 1181], "1234": [32, 578, 746, 1118, 1224], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 144, 184, 204, 266, 295, 364, 365, 367, 372, 374, 378, 382, 385, 386, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 568, 569, 571, 574, 575, 576, 633, 635, 638, 693, 695, 733, 734, 746, 785, 794, 858, 861, 925, 926, 928, 929, 930, 933, 934, 935, 941, 942, 947, 950, 951, 952, 954, 957, 958, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 975, 1179, 1181, 1184], "321": [32, 1232], "strip": [33, 613, 621, 628, 629, 630, 631, 632, 1159, 1167, 1174, 1175, 1176], "trail": [33, 182, 295, 621, 627, 628, 629, 1167, 1173, 1174, 1175], "zero": [33, 40, 103, 104, 113, 114, 115, 120, 122, 126, 143, 152, 172, 201, 232, 251, 256, 257, 295, 423, 501, 506, 580, 589, 641, 655, 746, 766, 779, 858, 901, 989, 1069, 1135, 1187, 1200, 1205, 1206, 1224], "enabl": [33, 34, 69, 87, 88, 137, 138, 139, 140, 149, 237, 270, 295, 305, 307, 581, 659, 742, 746, 768, 815, 834, 858, 865, 866, 1125, 1212, 1224], "d": [33, 36, 37, 39, 40, 41, 42, 45, 106, 134, 162, 182, 184, 189, 190, 194, 203, 249, 251, 264, 268, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 302, 304, 373, 396, 399, 441, 549, 584, 598, 604, 624, 633, 634, 635, 675, 695, 701, 746, 785, 793, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 896, 934, 961, 964, 1003, 1144, 1150, 1170, 1179, 1180, 1181, 1224], "01": [33, 78, 144, 157, 162, 182, 184, 231, 266, 295, 364, 365, 366, 367, 373, 374, 377, 378, 382, 384, 385, 386, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 565, 568, 569, 571, 574, 575, 576, 633, 634, 635, 638, 690, 691, 693, 695, 746, 765, 785, 813, 858, 861, 926, 927, 928, 929, 930, 934, 935, 941, 942, 947, 950, 951, 952, 954, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 1179, 1180, 1181, 1184], "6789": 33, "scale": [33, 49, 168, 295, 513, 549, 636, 746, 980, 1182, 1224], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 106, 118, 119, 129, 130, 142, 163, 165, 169, 183, 186, 220, 237, 238, 239, 245, 263, 270, 271, 274, 295, 302, 372, 418, 421, 545, 592, 596, 603, 604, 618, 672, 675, 676, 677, 697, 725, 728, 746, 772, 776, 784, 787, 815, 816, 818, 823, 830, 834, 835, 839, 858, 925, 933, 987, 1142, 1149, 1150, 1164, 1224], "verbos": [34, 137, 139, 150, 604, 1150], "debug": [34, 768, 777, 798, 799, 858, 1232], "log": [34, 80, 333, 412, 506, 530, 550, 654, 746, 890, 978, 1208, 1224], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 66, 79, 81, 83, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 175, 201, 220, 226, 232, 233, 234, 236, 252, 253, 261, 295, 512, 560, 564, 746, 811, 814, 858, 1076, 1101, 1224], "show": [35, 40, 67, 165, 182, 205, 219, 295, 773, 808, 821, 858], "variabl": [35, 60, 65, 133, 145, 148, 213, 254, 295, 803, 858, 1201, 1224, 1231], "chang": [35, 78, 85, 114, 115, 116, 134, 264, 265, 266, 295, 309, 357, 358, 360, 393, 512, 513, 546, 553, 568, 569, 570, 571, 572, 574, 575, 576, 746, 769, 858, 867, 896, 897, 917, 918, 958, 999, 1076, 1091, 1095, 1130, 1224], "restrict": [35, 625, 1171], "dictionari": [35, 40, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 201, 220, 232, 233, 234, 252, 253, 295, 512, 746, 858, 1076, 1224], "those": [35, 40, 114, 119, 234, 265, 295, 556, 603, 711, 746, 831, 858, 861, 1097, 1149, 1224], "been": [35, 40, 152, 153, 155, 174, 177, 185, 186, 187, 188, 193, 228, 250, 276, 295, 309, 334, 352, 353, 354, 355, 356, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 513, 551, 556, 566, 568, 569, 570, 571, 572, 574, 575, 576, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 646, 649, 650, 667, 687, 688, 709, 746, 762, 786, 787, 788, 789, 798, 810, 827, 838, 841, 858, 868, 913, 914, 915, 916, 1008, 1014, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1097, 1106, 1122, 1124, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1196, 1197, 1224], "set_fmt_float": 35, "via": [35, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 201, 233, 295, 309, 513, 605, 746, 771, 810, 858, 1151], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 113, 114, 119, 120, 121, 122, 125, 126, 127, 295], "bytesio": [36, 37, 40, 41, 42, 45, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 295, 771, 810, 858], "compress": [36, 41, 42, 45, 58, 59, 295, 858], "avrocompress": [36, 295], "uncompress": [36, 41, 42, 45, 59, 120, 131, 295, 858], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 57, 58, 59, 115, 120, 150, 295, 340, 526, 746, 796, 821, 858, 902, 1224], "apach": [36, 41, 42, 45, 113, 116, 117, 130, 295, 758], "avro": [36, 113, 295, 758], "writeabl": [36, 37, 41, 42, 43, 44, 45, 295], "like": [36, 37, 39, 41, 42, 43, 44, 45, 85, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 184, 196, 198, 203, 256, 295, 346, 364, 460, 473, 482, 525, 556, 603, 629, 630, 659, 742, 746, 769, 771, 785, 810, 858, 867, 925, 1027, 1041, 1050, 1097, 1149, 1212, 1224], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 86, 104, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 142, 144, 146, 152, 183, 184, 186, 187, 204, 205, 231, 234, 256, 257, 295, 690, 691, 693, 694, 708, 733, 734, 758, 771, 785, 786, 788, 789, 794, 810, 813, 858, 861, 892, 924, 1029, 1140, 1190, 1200, 1224], "snappi": [36, 45, 59, 295, 858], "deflat": [36, 295], "pathlib": [36, 37, 41, 42, 45, 128, 295], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 167, 170, 173, 176, 179, 180, 181, 189, 190, 191, 192, 194, 195, 197, 203, 207, 208, 209, 210, 211, 212, 215, 216, 219, 222, 224, 226, 227, 229, 232, 235, 236, 237, 240, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 267, 268, 269, 273, 295, 336, 358, 389, 432, 437, 439, 461, 517, 520, 521, 522, 523, 524, 525, 553, 561, 595, 598, 600, 602, 604, 605, 623, 625, 628, 629, 630, 631, 632, 637, 640, 648, 668, 674, 678, 679, 680, 698, 702, 703, 707, 712, 714, 715, 716, 718, 720, 725, 727, 731, 735, 736, 742, 746, 765, 770, 772, 773, 774, 780, 791, 792, 793, 806, 811, 814, 815, 829, 830, 833, 836, 858, 861, 893, 918, 954, 1048, 1095, 1102, 1144, 1146, 1148, 1150, 1151, 1171, 1177, 1178, 1183, 1186, 1224], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 167, 170, 173, 176, 179, 180, 181, 190, 192, 194, 195, 197, 203, 207, 208, 209, 210, 211, 212, 215, 216, 219, 222, 224, 226, 227, 229, 232, 235, 236, 237, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 262, 263, 267, 268, 273, 295, 336, 439, 517, 518, 519, 520, 521, 522, 523, 524, 525, 589, 598, 600, 602, 604, 605, 623, 625, 631, 632, 668, 674, 678, 679, 680, 698, 703, 707, 712, 714, 715, 716, 718, 725, 727, 731, 735, 736, 742, 746, 765, 770, 772, 773, 774, 780, 791, 792, 793, 806, 811, 814, 815, 829, 830, 833, 858, 861, 893, 1048, 1135, 1144, 1146, 1148, 1150, 1151, 1171, 1177, 1178, 1224], "ham": [36, 37, 39, 41, 42, 45, 157, 160, 161, 163, 164, 165, 166, 167, 173, 180, 189, 190, 192, 203, 208, 210, 212, 215, 219, 224, 226, 229, 232, 235, 236, 237, 244, 246, 247, 249, 254, 255, 256, 257, 258, 262, 267, 268, 295, 336, 524, 765, 770, 772, 773, 774, 780, 793, 806, 811, 814, 815, 829, 836, 858, 893], "dirpath": [36, 37, 41, 42, 45, 128, 295], "new_fil": [36, 37, 41, 42, 45, 295], "include_bom": [37, 57, 295, 858], "include_head": [37, 40, 57, 115, 261, 295, 858], "line_termin": [37, 57, 295, 858], "quote_char": [37, 57, 114, 115, 128, 295, 858], "batch_siz": [37, 57, 114, 115, 116, 132, 134, 295, 858], "1024": [37, 45, 57, 59, 114, 115, 116, 132, 295, 858], "datetime_format": [37, 57, 295, 858], "date_format": [37, 57, 295, 858], "time_format": [37, 57, 295, 858], "null_valu": [37, 57, 114, 115, 128, 295, 858], "quote_styl": [37, 57, 295, 858], "csvquotestyl": [37, 57, 295, 858], "textiowrapp": [37, 295], "comma": [37, 295], "csv": [37, 57, 58, 59, 114, 115, 119, 128, 295, 758, 858], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 59, 63, 69, 83, 85, 86, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 145, 152, 153, 156, 165, 170, 182, 184, 185, 187, 188, 190, 199, 200, 201, 204, 206, 207, 211, 218, 222, 231, 233, 234, 235, 241, 244, 248, 249, 253, 254, 256, 260, 261, 262, 264, 265, 295, 305, 307, 309, 366, 385, 386, 424, 457, 488, 493, 494, 501, 511, 513, 524, 545, 553, 556, 558, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 582, 585, 589, 590, 595, 604, 605, 606, 607, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 633, 634, 635, 638, 641, 659, 663, 665, 667, 669, 673, 678, 679, 681, 690, 691, 693, 694, 695, 699, 705, 706, 708, 711, 719, 722, 723, 724, 728, 733, 734, 736, 737, 746, 763, 768, 769, 773, 775, 785, 786, 788, 789, 793, 794, 799, 803, 811, 813, 817, 819, 822, 828, 829, 831, 838, 841, 846, 858, 861, 865, 866, 867, 868, 902, 918, 927, 950, 951, 986, 996, 998, 999, 1025, 1026, 1028, 1056, 1061, 1062, 1069, 1077, 1095, 1097, 1099, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1121, 1125, 1127, 1131, 1135, 1136, 1141, 1150, 1151, 1152, 1153, 1159, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1184, 1187, 1195, 1200, 1205, 1212, 1214, 1224, 1231], "instead": [37, 43, 44, 63, 67, 78, 85, 86, 114, 115, 116, 119, 125, 126, 128, 134, 144, 182, 184, 200, 201, 207, 218, 220, 232, 233, 234, 237, 238, 241, 242, 257, 270, 271, 295, 319, 341, 342, 358, 371, 375, 379, 381, 383, 388, 392, 395, 407, 418, 493, 511, 553, 582, 583, 609, 610, 613, 621, 627, 628, 629, 630, 631, 632, 633, 635, 641, 669, 673, 674, 690, 691, 692, 693, 694, 695, 705, 706, 719, 722, 728, 733, 734, 737, 746, 769, 778, 785, 815, 816, 817, 819, 820, 831, 834, 835, 838, 858, 861, 877, 903, 904, 918, 932, 936, 943, 945, 948, 953, 957, 960, 972, 1004, 1010, 1013, 1020, 1022, 1024, 1061, 1095, 1120, 1123, 1127, 1128, 1155, 1156, 1159, 1167, 1173, 1174, 1175, 1176, 1179, 1181, 1187, 1206, 1224, 1231], "whether": [37, 57, 107, 109, 146, 149, 156, 167, 177, 200, 239, 260, 295, 305, 307, 376, 394, 462, 463, 518, 519, 581, 746, 763, 798, 799, 818, 823, 828, 858, 861, 865, 866, 894, 897, 937, 959, 979, 1030, 1031, 1122, 1224, 1231], "utf": [37, 57, 77, 295, 858], "bom": [37, 57, 295, 858], "header": [37, 40, 45, 57, 59, 110, 114, 115, 119, 128, 166, 222, 261, 295, 858], "field": [37, 39, 57, 70, 99, 101, 106, 256, 263, 295, 501, 560, 563, 604, 605, 606, 624, 625, 644, 681, 682, 685, 686, 710, 728, 746, 830, 858, 918, 1069, 1095, 1104, 1151, 1168, 1170, 1171, 1191, 1193, 1224], "symbol": [37, 57, 114, 115, 128, 295, 746, 858], "end": [37, 40, 57, 114, 115, 126, 128, 184, 295, 328, 331, 332, 364, 393, 418, 441, 494, 596, 601, 604, 615, 622, 626, 629, 632, 669, 690, 691, 693, 694, 697, 705, 706, 733, 734, 736, 746, 785, 790, 797, 808, 858, 861, 888, 925, 958, 1003, 1062, 1147, 1150, 1161, 1168, 1172, 1224], "byte": [37, 45, 57, 59, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 168, 295, 609, 611, 858, 980, 1155, 1157, 1224], "quot": [37, 38, 57, 114, 115, 128, 295, 858], "specifi": [37, 40, 57, 78, 90, 99, 101, 119, 125, 144, 156, 157, 163, 168, 169, 172, 183, 184, 185, 186, 187, 188, 203, 220, 231, 232, 234, 237, 238, 239, 241, 245, 260, 263, 270, 271, 274, 295, 340, 415, 416, 417, 418, 423, 545, 559, 560, 568, 569, 570, 571, 572, 574, 575, 576, 582, 592, 672, 675, 676, 677, 690, 691, 693, 694, 697, 725, 728, 733, 734, 746, 763, 765, 772, 776, 779, 784, 785, 786, 787, 788, 789, 793, 813, 815, 816, 818, 819, 823, 828, 830, 834, 835, 839, 858, 902, 980, 981, 982, 983, 989, 1101, 1127, 1224], "defin": [37, 40, 48, 57, 116, 141, 142, 144, 153, 157, 165, 169, 184, 185, 187, 188, 207, 218, 221, 231, 265, 276, 281, 295, 309, 441, 476, 499, 513, 549, 553, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 667, 690, 691, 693, 694, 708, 711, 728, 733, 734, 746, 765, 773, 776, 785, 786, 788, 789, 807, 813, 831, 841, 846, 858, 861, 868, 1003, 1044, 1077, 1095, 1105, 1224], "chrono": [37, 57, 295, 396, 399, 633, 634, 635, 638, 858, 961, 964, 1179, 1180, 1181, 1184], "rust": [37, 45, 57, 96, 116, 120, 122, 126, 207, 281, 295, 605, 858, 1077, 1151, 1224], "crate": [37, 57, 295, 596, 597, 598, 603, 604, 605, 618, 619, 633, 634, 635, 638, 858, 861, 1142, 1143, 1144, 1149, 1150, 1151, 1164, 1165, 1179, 1180, 1181, 1184], "fraction": [37, 57, 137, 138, 139, 140, 235, 295, 394, 488, 546, 579, 633, 635, 746, 858, 959, 1056, 1091, 1119, 1179, 1181, 1224], "second": [37, 57, 137, 138, 139, 140, 143, 184, 204, 231, 266, 295, 389, 393, 406, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 633, 635, 690, 691, 692, 693, 694, 695, 732, 733, 734, 736, 746, 785, 794, 813, 858, 861, 954, 958, 971, 972, 1179, 1181, 1232], "infer": [37, 57, 103, 105, 106, 107, 108, 109, 114, 115, 116, 119, 123, 124, 128, 132, 133, 153, 207, 295, 407, 561, 606, 607, 633, 634, 635, 636, 638, 722, 746, 858, 958, 972, 1102, 1152, 1153, 1179, 1180, 1181, 1182, 1184, 1224], "timeunit": [37, 48, 50, 57, 295, 365, 366, 398, 410, 635, 690, 691, 692, 693, 694, 695, 858, 861, 926, 927, 963, 975, 1181], "frame": [37, 38, 40, 57, 63, 64, 65, 66, 67, 68, 78, 85, 86, 106, 115, 119, 125, 137, 138, 144, 157, 158, 201, 202, 207, 214, 218, 221, 232, 233, 234, 257, 264, 265, 295, 765, 766, 804, 807, 831, 858, 861, 901, 1224, 1231, 1232], "repres": [37, 40, 57, 61, 76, 103, 105, 107, 108, 109, 116, 119, 246, 267, 273, 295, 450, 452, 511, 594, 660, 663, 678, 680, 695, 697, 708, 710, 711, 723, 724, 727, 735, 742, 746, 824, 832, 858, 1120, 1124, 1139, 1213, 1224], "necessari": [37, 57, 69, 88, 119, 295, 858], "non_numer": [37, 57, 295, 858], "never": [37, 57, 116, 232, 295, 858], "strategi": [37, 57, 78, 86, 114, 141, 142, 143, 144, 146, 172, 184, 187, 203, 204, 217, 265, 295, 309, 423, 501, 513, 746, 779, 785, 788, 793, 794, 831, 858, 989, 1069, 1224], "put": [37, 57, 295, 858], "around": [37, 57, 295, 858], "thei": [37, 39, 40, 57, 69, 85, 86, 87, 88, 106, 128, 150, 205, 234, 295, 629, 630, 746, 769, 858, 861], "record": [37, 42, 57, 122, 134, 204, 256, 295, 794, 858], "termin": [37, 57, 295, 858], "indistinguish": [37, 57, 295, 858], "even": [37, 57, 114, 295, 549, 553, 746, 858, 1095, 1224], "invalid": [37, 57, 114, 115, 128, 295, 606, 608, 655, 746, 858, 1152, 1154], "g": [37, 57, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 134, 152, 200, 256, 264, 295, 302, 309, 418, 513, 584, 697, 746, 771, 810, 811, 858, 979, 1122, 1205, 1224, 1232], "pars": [37, 57, 63, 114, 115, 119, 124, 128, 131, 132, 156, 183, 186, 237, 238, 241, 245, 260, 270, 271, 274, 295, 340, 441, 512, 545, 560, 592, 606, 607, 617, 636, 664, 666, 672, 675, 676, 677, 684, 688, 701, 713, 717, 725, 726, 728, 730, 736, 746, 763, 784, 787, 815, 816, 819, 823, 828, 834, 835, 839, 858, 902, 1003, 1127, 1152, 1153, 1163, 1181, 1182, 1224], "valid": [37, 40, 48, 57, 63, 116, 120, 122, 126, 146, 150, 168, 203, 295, 357, 596, 597, 598, 603, 604, 605, 608, 618, 619, 736, 746, 793, 858, 861, 917, 980, 996, 1142, 1143, 1144, 1149, 1150, 1151, 1154, 1164, 1165, 1224], "integ": [37, 39, 40, 53, 54, 55, 56, 57, 72, 73, 74, 75, 135, 142, 144, 145, 147, 165, 184, 231, 254, 295, 306, 339, 394, 427, 428, 544, 553, 558, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 617, 662, 669, 701, 705, 706, 722, 746, 773, 785, 813, 858, 861, 899, 959, 992, 1013, 1095, 1099, 1113, 1120, 1124, 1163, 1224, 1231, 1232], "aren": [37, 57, 295, 858], "t": [37, 57, 65, 66, 86, 114, 119, 125, 128, 184, 207, 221, 262, 264, 295, 309, 357, 364, 372, 392, 412, 415, 416, 417, 473, 513, 545, 549, 603, 630, 633, 635, 736, 746, 785, 807, 829, 858, 861, 917, 957, 978, 979, 981, 982, 983, 1041, 1077, 1122, 1149, 1175, 1176, 1179, 1181, 1205, 1214, 1224], "strictli": [37, 57, 69, 88, 295, 777, 858], "table_nam": [38, 40, 295], "connect": [38, 114, 116, 117, 120, 122, 126, 131, 133, 134, 295, 759], "if_exist": [38, 295], "dbwritemod": [38, 295], "fail": [38, 39, 104, 118, 120, 124, 129, 133, 137, 138, 152, 262, 295, 320, 397, 501, 633, 634, 635, 638, 746, 829, 858, 1077, 1179, 1180, 1181, 1184, 1224], "dbwriteengin": [38, 295], "sqlalchemi": [38, 116, 136, 295], "databas": [38, 116, 117, 295, 758], "qualifi": [38, 295], "creat": [38, 40, 69, 88, 103, 107, 109, 116, 117, 129, 130, 142, 143, 144, 145, 146, 147, 158, 159, 184, 185, 188, 219, 222, 231, 266, 270, 295, 366, 393, 407, 501, 557, 565, 568, 569, 571, 574, 575, 576, 622, 676, 689, 690, 691, 692, 693, 694, 695, 732, 733, 734, 742, 746, 766, 767, 775, 785, 786, 789, 813, 834, 858, 901, 905, 918, 927, 958, 972, 1088, 1095, 1098, 1168, 1205, 1224, 1231, 1232], "append": [38, 39, 144, 170, 203, 204, 295, 557, 736, 746, 793, 794, 858, 986, 1224], "your": [38, 40, 69, 78, 88, 114, 115, 116, 119, 134, 201, 207, 233, 234, 237, 253, 270, 274, 281, 295, 309, 513, 605, 633, 634, 635, 641, 711, 746, 790, 797, 799, 815, 834, 839, 846, 858, 1077, 1151, 1179, 1180, 1181, 1187, 1224, 1232], "special": [38, 114, 115, 128, 295, 567, 604, 746, 868, 1077, 1107, 1150, 1224], "uri": [38, 39, 116, 117, 118, 129, 130, 295], "postgresql": [38, 116, 117, 295, 545, 746], "user": [38, 116, 117, 153, 207, 221, 276, 281, 295, 309, 511, 513, 549, 581, 667, 711, 746, 807, 841, 846, 858, 868, 1077, 1125, 1224], "pass": [38, 39, 40, 45, 66, 78, 105, 116, 117, 119, 128, 133, 134, 137, 139, 142, 144, 146, 156, 161, 163, 183, 184, 187, 190, 206, 220, 221, 231, 237, 241, 245, 249, 260, 266, 270, 274, 295, 309, 373, 389, 392, 421, 439, 493, 512, 513, 545, 549, 565, 568, 569, 570, 571, 572, 574, 575, 576, 582, 592, 628, 629, 630, 663, 672, 690, 701, 728, 736, 742, 746, 763, 772, 784, 785, 786, 788, 789, 791, 798, 799, 807, 813, 815, 819, 821, 823, 828, 834, 839, 846, 858, 868, 934, 957, 987, 998, 1028, 1061, 1076, 1077, 1127, 1174, 1175, 1176, 1195, 1224], "server": [38, 116, 117, 295], "port": [38, 114, 116, 117, 120, 122, 126, 131, 295], "sqlite": [38, 116, 295], "db": [38, 117, 295], "replac": [38, 39, 114, 115, 128, 171, 172, 228, 229, 261, 270, 271, 295, 366, 392, 511, 512, 619, 746, 778, 834, 835, 858, 927, 957, 1076, 1120, 1123, 1124, 1165, 1224], "insert": [38, 114, 115, 120, 122, 126, 128, 131, 132, 133, 193, 194, 227, 261, 263, 295, 580, 595, 641, 746, 830, 858, 1121, 1141, 1187, 1224], "mode": [38, 39, 57, 58, 59, 63, 137, 139, 222, 295, 604, 719, 722, 737, 746, 768, 858, 1150, 1224, 1231], "new": [38, 39, 40, 119, 128, 150, 178, 192, 193, 194, 207, 218, 219, 226, 227, 250, 261, 263, 264, 265, 270, 271, 295, 304, 366, 420, 432, 440, 510, 533, 618, 619, 624, 625, 642, 644, 650, 742, 746, 758, 783, 811, 827, 830, 831, 834, 835, 841, 846, 858, 864, 927, 985, 994, 1088, 1100, 1164, 1165, 1170, 1171, 1188, 1191, 1197, 1202, 1224, 1231], "alreadi": [38, 39, 295, 357, 473, 659, 746, 917, 1041, 1212, 1224], "adbc": [38, 116, 117, 295], "deltalak": [39, 118, 129, 136, 295], "deltat": [39, 295], "ignor": [39, 143, 144, 146, 210, 211, 247, 248, 265, 295, 305, 307, 360, 392, 415, 416, 417, 470, 538, 539, 595, 663, 665, 746, 865, 866, 920, 957, 981, 982, 983, 1038, 1086, 1087, 1141, 1224], "overwrite_schema": [39, 295], "storage_opt": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 295], "delta_write_opt": [39, 295], "delta": [39, 50, 118, 129, 246, 267, 295, 574, 576, 594, 660, 678, 680, 723, 724, 727, 735, 746, 758, 824, 832, 858, 1114, 1116, 1139, 1213, 1224], "handl": [39, 86, 110, 114, 115, 128, 134, 295, 360, 470, 641, 746, 768, 858, 920, 1038, 1187, 1224], "throw": [39, 157, 295, 335, 606, 608, 746, 765, 858, 891, 1152, 1154, 1224], "add": [39, 40, 115, 170, 184, 187, 207, 270, 271, 272, 295, 358, 534, 535, 551, 553, 646, 695, 699, 736, 746, 785, 788, 793, 834, 835, 836, 837, 858, 867, 986, 1224], "anyth": [39, 232, 295], "updat": [39, 295, 858], "extra": [39, 45, 59, 114, 115, 118, 119, 120, 122, 126, 128, 129, 130, 131, 170, 184, 295, 746, 785, 858, 867, 986, 1224], "storag": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 295], "backend": [39, 116, 117, 118, 129, 130, 295], "cloud": [39, 116, 118, 129, 130, 133, 134, 295], "configur": [39, 118, 129, 130, 150, 295], "authent": [39, 118, 129, 130, 295], "see": [39, 40, 41, 42, 48, 116, 117, 118, 119, 129, 130, 133, 137, 138, 139, 140, 144, 146, 161, 184, 203, 221, 222, 295, 340, 423, 457, 511, 589, 596, 603, 604, 618, 690, 691, 693, 694, 721, 733, 734, 742, 746, 768, 785, 858, 861, 896, 902, 1026, 1135, 1142, 1149, 1150, 1164, 1224, 1232], "here": [39, 40, 45, 103, 105, 106, 107, 109, 116, 117, 118, 123, 124, 129, 130, 132, 133, 142, 144, 146, 295, 513, 605, 608, 746, 858, 1154], "gc": [39, 118, 129, 130, 295], "azur": [39, 118, 129, 130, 133, 295], "keyword": [39, 66, 118, 126, 129, 161, 221, 232, 237, 238, 270, 271, 274, 295, 549, 725, 728, 736, 746, 807, 815, 816, 834, 835, 839, 858, 1224], "argument": [39, 45, 88, 114, 118, 126, 128, 129, 161, 163, 169, 183, 184, 185, 186, 187, 188, 208, 210, 215, 220, 221, 222, 231, 237, 238, 239, 245, 247, 257, 263, 266, 270, 271, 274, 295, 393, 407, 418, 441, 545, 549, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 592, 628, 629, 630, 663, 670, 671, 672, 675, 676, 677, 690, 697, 722, 725, 728, 733, 736, 746, 772, 776, 784, 785, 786, 787, 788, 789, 807, 813, 815, 816, 818, 823, 830, 834, 835, 839, 858, 867, 958, 972, 1003, 1101, 1174, 1175, 1176, 1206, 1224], "while": [39, 85, 115, 118, 119, 129, 144, 146, 150, 201, 213, 261, 265, 295, 610, 769, 803, 831, 858, 996, 1156, 1224], "lake": [39, 118, 129, 295, 758], "typeerror": [39, 295], "unsupport": [39, 295], "arrowinvaliderror": [39, 295], "could": [39, 76, 91, 157, 295, 335, 681, 685, 695, 699, 746, 765, 773, 858, 891, 996, 1224], "primit": [39, 295, 446, 746, 1205, 1224], "categor": [39, 69, 87, 88, 104, 137, 138, 139, 140, 203, 254, 255, 295, 336, 337, 358, 553, 560, 653, 746, 861, 892, 893, 894, 895, 896, 897, 918, 1095, 1101, 1207, 1224], "protocol": [39, 104, 117, 152, 295], "associ": [39, 40, 64, 66, 78, 117, 143, 234, 295], "affect": [39, 295], "follow": [39, 40, 45, 83, 114, 115, 118, 128, 129, 130, 137, 184, 204, 207, 221, 231, 266, 295, 389, 393, 407, 549, 556, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 644, 655, 690, 691, 693, 694, 711, 733, 734, 736, 738, 739, 741, 746, 747, 748, 751, 753, 754, 755, 785, 794, 807, 813, 858, 954, 958, 972, 1097, 1120, 1123, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1230, 1232], "unsign": [39, 72, 73, 74, 75, 295, 558, 746, 861, 1013, 1099, 1224], "millisecond": [39, 184, 204, 231, 266, 295, 389, 393, 403, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 861, 954, 958, 968, 972], "nanosecond": [39, 184, 204, 231, 266, 295, 389, 393, 394, 405, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 954, 958, 959, 970, 972], "zone": [39, 48, 295, 364, 367, 392, 635, 690, 691, 692, 693, 694, 861, 925, 928, 957, 1181], "binari": [39, 41, 116, 119, 295, 328, 330, 331, 332, 861, 885, 888, 889], "nullabl": [39, 295], "To": [39, 85, 171, 208, 210, 215, 247, 295, 340, 362, 363, 423, 560, 596, 603, 604, 618, 629, 630, 631, 632, 639, 746, 778, 858, 902, 922, 923, 996, 1142, 1149, 1150, 1164, 1185, 1205, 1224], "pyarrow": [39, 45, 103, 104, 108, 114, 117, 118, 120, 122, 126, 129, 134, 136, 251, 256, 257, 295, 759, 1200, 1204, 1205, 1206, 1224], "ha": [39, 40, 78, 85, 116, 119, 128, 152, 153, 155, 174, 177, 184, 185, 186, 187, 188, 193, 228, 231, 250, 266, 276, 295, 309, 333, 334, 352, 353, 354, 355, 356, 357, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 522, 551, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 646, 649, 650, 654, 667, 687, 688, 709, 742, 746, 762, 769, 785, 786, 787, 788, 789, 798, 810, 813, 827, 838, 841, 846, 858, 868, 890, 901, 913, 914, 915, 916, 917, 919, 996, 1008, 1010, 1014, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1106, 1122, 1124, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1196, 1197, 1208, 1224], "last": [39, 137, 138, 139, 140, 156, 190, 204, 206, 222, 234, 245, 249, 260, 262, 289, 295, 319, 357, 370, 385, 390, 408, 448, 449, 456, 477, 498, 501, 532, 534, 535, 536, 537, 551, 591, 625, 646, 648, 731, 746, 763, 794, 823, 826, 828, 829, 854, 858, 861, 877, 917, 931, 950, 955, 973, 998, 1014, 1015, 1028, 1045, 1066, 1171, 1195, 1224], "filesystem": [39, 118, 129, 130, 295], "table_path": [39, 118, 129, 130, 295], "match": [39, 40, 48, 86, 97, 103, 105, 106, 107, 109, 123, 124, 132, 137, 138, 139, 140, 172, 204, 232, 265, 295, 519, 573, 596, 597, 598, 601, 603, 604, 606, 608, 618, 619, 626, 633, 634, 635, 736, 746, 779, 794, 831, 858, 861, 1013, 1022, 1113, 1142, 1143, 1144, 1147, 1149, 1150, 1152, 1154, 1164, 1165, 1172, 1179, 1180, 1181, 1224], "version": [39, 83, 88, 118, 119, 129, 136, 152, 153, 155, 174, 177, 184, 185, 186, 187, 188, 189, 193, 208, 210, 215, 228, 242, 247, 250, 276, 295, 309, 334, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 385, 386, 388, 392, 395, 407, 436, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 551, 566, 583, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 633, 635, 646, 649, 650, 667, 674, 687, 688, 690, 692, 709, 721, 722, 733, 746, 762, 782, 785, 786, 787, 788, 789, 798, 810, 820, 827, 838, 841, 858, 867, 868, 903, 904, 913, 914, 915, 916, 918, 932, 936, 943, 945, 948, 950, 951, 953, 957, 958, 960, 972, 997, 1004, 1008, 1010, 1013, 1014, 1020, 1022, 1024, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1095, 1106, 1122, 1124, 1128, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1179, 1181, 1196, 1197, 1214, 1224], "old": [39, 226, 295, 811, 858], "existing_table_path": [39, 295], "store": [39, 114, 126, 130, 170, 201, 233, 295, 336, 867, 893, 986, 1224], "bucket": [39, 118, 129, 130, 133, 295, 393, 407, 958, 972, 999, 1224], "prefix": [39, 150, 295, 304, 332, 510, 533, 535, 536, 537, 626, 630, 631, 641, 646, 746, 861, 889, 1172, 1177, 1187], "aws_region": [39, 129, 133, 295], "the_aws_region": [39, 295], "aws_access_key_id": [39, 118, 129, 133, 295], "the_aws_access_key_id": [39, 118, 129, 130, 295], "aws_secret_access_kei": [39, 118, 129, 133, 295], "the_aws_secret_access_kei": [39, 118, 129, 130, 295], "pa": [39, 103, 134, 295], "workbook": [40, 119, 295], "worksheet": [40, 119, 125, 295], "posit": [40, 163, 169, 183, 186, 220, 237, 238, 239, 241, 245, 263, 270, 271, 274, 295, 415, 416, 417, 418, 493, 545, 553, 582, 592, 605, 617, 670, 671, 672, 675, 676, 677, 697, 725, 728, 746, 772, 776, 784, 787, 815, 816, 818, 819, 823, 830, 834, 835, 839, 858, 981, 982, 983, 1061, 1095, 1127, 1151, 1163, 1224], "tupl": [40, 117, 119, 125, 153, 201, 207, 232, 233, 234, 240, 273, 295, 561, 746, 808, 821, 858, 861, 1102, 1224], "a1": [40, 79, 81, 295], "table_styl": [40, 295], "column_format": [40, 295], "columnformatdict": [40, 295], "dtype_format": [40, 295], "oneormoredatatyp": [40, 142, 295, 1022, 1224], "conditional_format": [40, 295], "conditionalformatdict": [40, 295], "header_format": [40, 295], "column_tot": [40, 295], "columntotalsdefinit": [40, 295], "column_width": [40, 295], "columnwidthsdefinit": [40, 295], "row_tot": [40, 295], "rowtotalsdefinit": [40, 295], "row_height": [40, 295], "sparklin": [40, 295], "sequenc": [40, 70, 78, 84, 85, 103, 105, 106, 107, 109, 114, 115, 116, 119, 123, 124, 125, 128, 132, 142, 143, 144, 156, 162, 169, 170, 203, 204, 213, 218, 220, 221, 222, 234, 245, 254, 260, 264, 265, 266, 295, 358, 446, 501, 509, 511, 549, 553, 592, 631, 632, 644, 667, 672, 681, 682, 685, 686, 699, 701, 709, 710, 711, 721, 726, 746, 763, 776, 793, 794, 803, 807, 823, 828, 831, 858, 867, 918, 919, 921, 986, 1069, 1095, 1120, 1124, 1191, 1224], "formula": [40, 295, 412, 746, 978, 1224], "autofilt": [40, 295], "autofit": [40, 295], "hidden_column": [40, 295], "selectortyp": [40, 295, 861], "hide_gridlin": [40, 295], "sheet_zoom": [40, 295], "freeze_pan": [40, 295], "excel": [40, 119, 295], "open": [40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 133, 295, 771, 810, 858], "xlsxwriter": [40, 136, 295], "close": [40, 116, 184, 185, 187, 188, 231, 295, 358, 441, 506, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 589, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 813, 858, 918, 1003, 1095, 1135, 1224], "xlsx": [40, 119, 295], "work": [40, 49, 104, 115, 134, 227, 238, 271, 295, 305, 307, 309, 326, 339, 340, 418, 427, 473, 503, 513, 545, 564, 609, 610, 656, 746, 816, 835, 858, 861, 865, 866, 884, 899, 902, 992, 1041, 1071, 1155, 1156, 1209, 1224], "directori": [40, 45, 126, 295], "sheet1": [40, 295], "medium": [40, 295], "kei": [40, 78, 83, 86, 130, 133, 184, 201, 203, 204, 214, 220, 222, 226, 230, 233, 234, 265, 295, 513, 728, 746, 777, 785, 793, 794, 804, 811, 812, 831, 858], "first_column": [40, 295], "last_column": [40, 295], "banded_column": [40, 295], "banded_row": [40, 295], "sheet": [40, 119, 125, 295], "chart": [40, 295, 808, 858], "subsequ": [40, 68, 225, 257, 295, 501, 736, 775, 858], "colnam": [40, 128, 144, 166, 295, 736, 774, 858], "given": [40, 63, 64, 78, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 123, 124, 125, 128, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 153, 156, 168, 169, 171, 184, 185, 187, 188, 199, 207, 220, 221, 231, 232, 234, 241, 242, 245, 260, 265, 295, 340, 364, 367, 396, 398, 399, 412, 441, 467, 493, 501, 504, 513, 545, 549, 556, 559, 560, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 582, 583, 604, 605, 615, 616, 633, 635, 641, 644, 667, 697, 709, 710, 711, 722, 723, 724, 746, 763, 776, 785, 786, 788, 789, 798, 799, 807, 813, 819, 820, 823, 828, 831, 841, 846, 858, 861, 868, 902, 925, 928, 961, 963, 964, 978, 980, 999, 1003, 1025, 1035, 1061, 1069, 1072, 1075, 1077, 1088, 1097, 1101, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1121, 1127, 1128, 1150, 1151, 1161, 1162, 1179, 1181, 1187, 1211, 1215, 1224, 1231, 1232], "dd": [40, 295], "mm": [40, 295], "yyyi": [40, 295], "overridden": [40, 103, 105, 107, 109, 123, 124, 148, 295, 560, 746, 858, 1101, 1224], "basi": [40, 144, 295], "param": [40, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 143, 144, 146, 232, 295, 858], "It": [40, 69, 88, 214, 221, 281, 295, 334, 521, 564, 742, 746, 798, 799, 804, 846, 858, 1120, 1123, 1224], "float_dtyp": [40, 295], "simplifi": [40, 57, 58, 59, 84, 85, 295, 768, 769, 775, 777, 808, 821, 858], "uniform": [40, 295, 553, 746, 1095, 1224], "condit": [40, 165, 173, 232, 295, 601, 626, 673, 699, 736, 773, 780, 858], "suppli": [40, 103, 105, 106, 107, 109, 116, 123, 124, 132, 173, 232, 295, 549, 746, 780, 858], "typenam": [40, 295], "3_color_scal": [40, 295], "data_bar": [40, 295], "make": [40, 70, 86, 103, 108, 114, 115, 120, 122, 126, 131, 214, 218, 225, 266, 295, 416, 417, 536, 537, 545, 559, 624, 746, 804, 858, 982, 983, 999, 1170, 1224, 1232], "icon": [40, 295], "multipl": [40, 66, 84, 85, 86, 114, 115, 119, 125, 128, 131, 132, 133, 142, 146, 156, 163, 168, 170, 173, 183, 184, 192, 202, 220, 222, 234, 237, 239, 245, 260, 265, 270, 274, 295, 476, 499, 518, 522, 529, 530, 545, 560, 561, 564, 568, 569, 570, 571, 572, 574, 575, 576, 592, 672, 685, 686, 699, 709, 710, 712, 716, 721, 726, 729, 736, 742, 746, 763, 768, 769, 772, 780, 784, 785, 815, 818, 823, 828, 831, 834, 839, 846, 858, 867, 980, 986, 1044, 1067, 1082, 1101, 1102, 1224], "singl": [40, 64, 78, 85, 86, 114, 115, 116, 117, 119, 126, 128, 133, 142, 157, 163, 164, 165, 170, 179, 189, 199, 203, 207, 220, 232, 234, 245, 295, 309, 340, 389, 424, 431, 434, 436, 468, 469, 476, 499, 511, 513, 557, 560, 561, 592, 595, 661, 667, 672, 676, 677, 706, 710, 711, 726, 734, 746, 765, 768, 772, 773, 793, 823, 858, 867, 902, 954, 986, 997, 1036, 1037, 1044, 1098, 1101, 1102, 1141, 1200, 1224], "across": [40, 78, 189, 209, 211, 216, 248, 295, 436, 664, 666, 681, 682, 684, 688, 713, 717, 730, 746, 997, 1224], "effect": [40, 176, 184, 187, 256, 295, 372, 513, 690, 691, 746, 785, 788, 837, 858, 925, 933], "heatmap": [40, 295], "min": [40, 45, 59, 162, 172, 216, 222, 231, 295, 342, 349, 354, 423, 545, 556, 565, 571, 717, 725, 746, 779, 813, 858, 904, 910, 914, 919, 989, 1097, 1111, 1224, 1232], "entir": [40, 295, 768, 858], "made": [40, 116, 295, 1205, 1224], "abov": [40, 137, 222, 295, 736], "than": [40, 57, 58, 59, 102, 107, 109, 114, 115, 116, 119, 125, 128, 134, 144, 146, 158, 183, 186, 201, 204, 207, 220, 232, 233, 235, 264, 281, 295, 433, 435, 459, 488, 508, 513, 524, 553, 564, 579, 589, 609, 615, 616, 625, 641, 678, 690, 711, 746, 768, 784, 787, 794, 846, 858, 1056, 1077, 1095, 1105, 1119, 1135, 1155, 1161, 1162, 1171, 1187, 1224, 1232], "bold": [40, 295], "font_color": [40, 295], "702963": [40, 295], "total": [40, 168, 295, 371, 375, 379, 381, 383, 388, 395, 400, 401, 402, 403, 404, 405, 406, 932, 936, 943, 945, 948, 953, 960, 965, 966, 967, 968, 969, 970, 971, 980, 1224], "export": [40, 201, 202, 233, 234, 253, 256, 295, 742], "sum": [40, 63, 168, 176, 183, 184, 199, 222, 231, 248, 274, 295, 350, 351, 356, 412, 424, 501, 513, 521, 523, 524, 525, 565, 575, 661, 663, 681, 683, 684, 685, 687, 688, 699, 711, 721, 730, 746, 768, 769, 771, 775, 777, 784, 785, 806, 808, 813, 817, 821, 839, 858, 861, 911, 912, 916, 978, 980, 1115, 1224], "must": [40, 104, 105, 118, 129, 130, 134, 162, 169, 184, 185, 187, 188, 204, 214, 231, 232, 295, 358, 501, 511, 553, 560, 565, 568, 569, 570, 571, 572, 574, 575, 576, 736, 746, 776, 785, 786, 788, 789, 794, 798, 799, 804, 813, 858, 918, 919, 1095, 1224], "funcnam": [40, 295], "averag": [40, 295, 415, 416, 417, 556, 746, 981, 982, 983, 1097, 1224], "count_num": [40, 295], "count": [40, 63, 114, 115, 120, 122, 126, 128, 131, 132, 133, 134, 154, 155, 162, 184, 204, 218, 219, 222, 231, 261, 265, 266, 272, 281, 286, 295, 310, 347, 352, 389, 460, 468, 469, 513, 521, 523, 531, 543, 565, 568, 569, 570, 571, 572, 574, 575, 576, 597, 598, 657, 659, 668, 718, 746, 761, 762, 785, 794, 806, 813, 837, 846, 851, 858, 919, 954, 999, 1036, 1037, 1084, 1090, 1143, 1144, 1210, 1212, 1224], "std_dev": [40, 295], "var": [40, 147, 295, 576, 746, 858, 1224], "pixel": [40, 295], "unit": [40, 48, 50, 137, 138, 139, 140, 144, 146, 168, 295, 365, 366, 373, 398, 410, 507, 522, 633, 635, 658, 690, 691, 692, 693, 694, 695, 701, 746, 808, 858, 861, 926, 927, 934, 963, 975, 980, 1075, 1179, 1181, 1211, 1224, 1232], "hand": [40, 114, 115, 128, 295, 489, 490, 491, 492, 1057, 1058, 1059, 1060], "side": [40, 184, 185, 187, 188, 231, 295, 441, 489, 490, 491, 492, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 813, 858, 1003, 1057, 1058, 1059, 1060, 1121, 1224], "call": [40, 67, 69, 88, 115, 116, 137, 138, 139, 140, 144, 146, 150, 183, 184, 187, 205, 207, 231, 294, 295, 309, 348, 351, 456, 513, 532, 534, 535, 536, 537, 551, 585, 646, 742, 746, 759, 784, 785, 786, 788, 789, 813, 857, 858, 861, 868, 1077, 1131, 1224], "ad": [40, 106, 119, 184, 187, 261, 265, 270, 271, 295, 308, 421, 681, 682, 685, 686, 746, 785, 788, 831, 834, 835, 858, 918, 987, 1095, 1224], "wise": [40, 78, 116, 176, 295, 311, 312, 313, 314, 315, 316, 343, 344, 345, 419, 505, 586, 587, 588, 651, 652, 685, 686, 699, 721, 746, 869, 870, 871, 872, 873, 874, 906, 907, 908, 984, 1073, 1074, 1132, 1133, 1134, 1198, 1199, 1224], "particip": [40, 295], "distinct": [40, 146, 220, 295, 326, 444, 445, 448, 449, 503, 556, 695, 746, 884, 1008, 1009, 1014, 1015, 1071, 1097, 1224, 1232], "referenc": [40, 295, 644], "differ": [40, 114, 134, 137, 139, 170, 184, 189, 201, 231, 233, 234, 253, 261, 295, 360, 370, 389, 390, 392, 408, 414, 436, 470, 489, 491, 497, 501, 513, 538, 539, 541, 633, 657, 698, 701, 707, 746, 775, 785, 813, 858, 861, 867, 896, 920, 931, 954, 955, 957, 973, 979, 986, 997, 1038, 1057, 1059, 1065, 1077, 1086, 1087, 1122, 1179, 1224], "row_index": [40, 295], "height": [40, 165, 295], "provid": [40, 66, 114, 115, 117, 118, 128, 129, 130, 133, 144, 146, 173, 199, 295, 329, 330, 418, 501, 511, 513, 599, 600, 603, 606, 608, 629, 630, 631, 632, 701, 728, 746, 758, 780, 858, 886, 887, 999, 1025, 1077, 1145, 1146, 1149, 1152, 1154, 1224, 1231, 1232], "intersect": [40, 295, 490, 861, 1058], "bodi": [40, 295], "start": [40, 113, 114, 115, 116, 117, 120, 122, 125, 126, 128, 131, 132, 133, 148, 183, 184, 186, 187, 205, 244, 266, 272, 295, 328, 331, 332, 370, 384, 390, 393, 407, 408, 418, 441, 494, 568, 569, 571, 574, 575, 576, 590, 596, 601, 604, 616, 622, 626, 630, 631, 641, 669, 681, 685, 690, 691, 693, 694, 697, 699, 705, 706, 733, 734, 736, 746, 784, 785, 787, 788, 808, 822, 837, 858, 861, 889, 926, 928, 931, 934, 935, 942, 944, 947, 949, 952, 955, 958, 963, 972, 973, 1003, 1062, 1136, 1147, 1150, 1162, 1168, 1172, 1187, 1224, 1232], "unless": [40, 78, 105, 257, 295, 628, 629, 722, 858, 1174, 1206, 1214, 1224], "marker": [40, 295], "compliant": [40, 295], "case": [40, 69, 78, 85, 103, 105, 106, 107, 109, 116, 123, 124, 132, 133, 148, 153, 170, 184, 185, 187, 188, 201, 207, 231, 233, 234, 253, 295, 364, 510, 511, 521, 522, 533, 565, 596, 604, 618, 746, 769, 785, 786, 788, 789, 813, 858, 861, 867, 925, 986, 1142, 1150, 1164, 1224], "three": [40, 259, 295, 358, 553, 580, 746, 918, 1069, 1095, 1224], "avail": [40, 112, 116, 117, 118, 129, 130, 142, 150, 222, 294, 295, 556, 738, 739, 741, 745, 746, 747, 748, 751, 752, 753, 754, 755, 758, 759, 777, 857, 858, 861, 1097, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1230], "insert_befor": [40, 295], "insert_aft": [40, 295], "respect": [40, 295, 861], "direct": [40, 117, 126, 130, 133, 137, 241, 264, 295, 493, 582, 746, 819, 858, 1061, 1127, 1224], "far": [40, 295], "strongli": [40, 148, 207, 232, 281, 295, 513, 746, 1077, 1224], "advis": [40, 69, 88, 205, 295], "structur": [40, 94, 98, 100, 170, 221, 234, 256, 295, 549, 746, 807, 858, 867, 986, 1224], "wherev": [40, 207, 281, 295, 513, 746, 1077, 1224], "possibl": [40, 114, 156, 183, 186, 201, 207, 233, 260, 262, 281, 295, 507, 513, 521, 567, 625, 658, 746, 763, 784, 787, 823, 828, 829, 858, 1077, 1107, 1171, 1224], "simpl": [40, 146, 218, 295], "colx": [40, 68, 295, 536, 537, 861, 1232], "coli": [40, 295, 536, 537, 861, 1232], "after": [40, 68, 86, 106, 113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 170, 263, 294, 295, 418, 512, 545, 556, 641, 746, 830, 858, 867, 986, 1076, 1097, 1187, 1224], "befor": [40, 114, 116, 119, 128, 134, 137, 138, 139, 140, 148, 150, 170, 184, 187, 204, 263, 295, 350, 351, 357, 512, 545, 546, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 641, 647, 723, 724, 746, 785, 788, 791, 794, 830, 858, 867, 911, 912, 917, 986, 1076, 1091, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1187, 1194, 1224], "most": [40, 65, 103, 114, 115, 117, 128, 137, 138, 139, 140, 295, 522, 529, 546, 625, 746, 1082, 1091, 1171, 1224, 1231], "mandatori": [40, 295], "return_dtyp": [40, 153, 207, 295, 309, 509, 511, 512, 513, 560, 667, 709, 710, 711, 746, 868, 1076, 1077, 1101, 1224], "latter": [40, 170, 295, 867, 986, 1224], "appropri": [40, 134, 256, 295, 556, 746, 1097, 1224], "pure": [40, 295, 1205, 1224], "actual": [40, 106, 144, 146, 234, 295, 1130, 1224], "indic": [40, 113, 114, 115, 116, 120, 122, 126, 128, 141, 142, 146, 184, 185, 187, 188, 231, 234, 239, 241, 254, 295, 320, 431, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 476, 493, 499, 517, 520, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 582, 586, 649, 672, 673, 746, 785, 786, 788, 789, 813, 818, 819, 858, 861, 993, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1044, 1061, 1067, 1120, 1121, 1124, 1127, 1132, 1196, 1201, 1224, 1232], "calcul": [40, 78, 184, 246, 267, 295, 360, 415, 416, 417, 457, 470, 489, 507, 573, 589, 594, 658, 660, 678, 680, 723, 724, 727, 735, 746, 785, 824, 832, 858, 920, 981, 982, 983, 1026, 1038, 1057, 1113, 1135, 1139, 1213, 1224], "individu": [40, 59, 144, 150, 231, 256, 295, 513, 604, 746, 768, 813, 858, 900, 1150, 1224], "gridlin": [40, 295], "zoom": [40, 295], "freez": [40, 295], "pane": [40, 295], "top": [40, 156, 260, 295, 763, 828, 858], "index": [40, 104, 108, 111, 136, 152, 174, 180, 184, 185, 187, 188, 193, 194, 199, 201, 204, 222, 228, 229, 231, 232, 233, 241, 244, 256, 258, 265, 266, 272, 295, 303, 317, 318, 319, 321, 389, 431, 434, 464, 465, 476, 477, 493, 494, 499, 501, 565, 568, 569, 570, 571, 572, 574, 575, 576, 580, 582, 590, 603, 622, 649, 746, 785, 786, 788, 789, 794, 813, 819, 822, 831, 837, 858, 875, 876, 877, 878, 879, 954, 993, 1025, 1032, 1033, 1044, 1045, 1061, 1062, 1067, 1069, 1088, 1120, 1121, 1124, 1127, 1136, 1149, 1168, 1196, 1224], "thu": [40, 170, 295, 678, 867, 986, 1224], "altern": [40, 295, 742], "a2": [40, 79, 81, 295], "occur": [40, 84, 85, 295, 468, 469, 529, 556, 746, 768, 769, 775, 777, 808, 821, 858, 1036, 1037, 1082, 1097, 1224], "equival": [40, 103, 105, 106, 107, 109, 118, 123, 124, 132, 184, 199, 218, 295, 302, 306, 413, 414, 428, 433, 435, 459, 508, 528, 530, 540, 541, 544, 550, 610, 645, 655, 662, 746, 785, 858, 1025, 1156, 1183, 1185, 1186, 1224], "top_row": [40, 295], "top_col": [40, 295], "base": [40, 46, 165, 173, 184, 185, 187, 188, 231, 295, 364, 372, 412, 415, 416, 417, 504, 505, 553, 565, 617, 746, 773, 780, 785, 786, 788, 789, 813, 858, 861, 925, 933, 978, 981, 982, 983, 999, 1072, 1073, 1095, 1163, 1215, 1224, 1232], "scroll": [40, 295], "region": [40, 130, 295], "initit": [40, 295], "5th": [40, 295], "properti": [40, 152, 160, 166, 175, 191, 236, 240, 269, 295, 770, 774, 814, 833, 858, 861, 1232], "readthedoc": [40, 295], "io": [40, 130, 295, 771, 817, 858], "html": [40, 41, 42, 104, 116, 152, 161, 295], "definit": [40, 142, 295, 457, 746, 1026, 1224], "take": [40, 119, 125, 144, 150, 176, 178, 184, 187, 211, 214, 221, 222, 250, 256, 295, 389, 431, 432, 476, 592, 650, 690, 691, 696, 698, 707, 746, 783, 785, 788, 804, 827, 858, 954, 993, 994, 1044, 1197, 1215, 1224], "care": [40, 295, 309, 513, 581, 746, 1125, 1224], "rel": [40, 117, 118, 129, 130, 137, 138, 139, 140, 295, 389, 415, 416, 417, 570, 572, 574, 576, 746, 954, 981, 982, 983, 1224], "working_with_conditional_format": [40, 295], "similarli": [40, 106, 184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "well": [40, 114, 115, 116, 128, 222, 295, 441, 746, 1003, 1224], "adjac": [40, 295], "two": [40, 68, 69, 87, 88, 105, 107, 109, 117, 176, 213, 214, 222, 259, 275, 281, 295, 303, 361, 366, 431, 434, 501, 553, 591, 670, 671, 678, 680, 723, 724, 746, 803, 804, 840, 846, 858, 921, 927, 1069, 1095, 1224], "help": [40, 137, 138, 139, 140, 295, 777, 858], "where": [40, 63, 78, 116, 117, 143, 165, 170, 184, 201, 213, 233, 246, 265, 267, 295, 320, 409, 412, 414, 541, 559, 580, 589, 592, 594, 660, 673, 678, 680, 723, 724, 727, 735, 736, 746, 773, 785, 803, 824, 831, 832, 858, 867, 878, 974, 978, 986, 1121, 1135, 1139, 1213, 1215, 1224, 1231], "appear": [40, 106, 295, 657, 746, 1210, 1224], "working_with_sparklin": [40, 295], "inject": [40, 78, 295], "locat": [40, 170, 228, 229, 258, 263, 295, 580, 746, 830, 858, 867, 986, 993, 1120, 1121, 1124, 1196, 1224], "syntax": [40, 173, 207, 218, 295, 596, 603, 604, 618, 742, 780, 821, 858, 1142, 1149, 1150, 1164, 1224], "correctli": [40, 119, 295], "microsoft": [40, 295], "com": [40, 117, 295, 415, 416, 417, 603, 604, 605, 746, 981, 982, 983, 1149, 1150, 1151, 1224], "u": [40, 48, 50, 66, 133, 295, 365, 366, 373, 398, 410, 633, 635, 690, 691, 692, 693, 694, 695, 701, 861, 926, 927, 934, 963, 975, 1179, 1181], "offic": [40, 295], "f5ed2452": [40, 295], "2337": [40, 295], "4f71": [40, 295], "bed3": [40, 295], "c8ae6d2b276": [40, 295], "instanti": [40, 116, 237, 270, 295, 815, 834, 858], "basic": [40, 295, 1232], "random": [40, 41, 135, 142, 144, 146, 189, 235, 295, 436, 488, 556, 579, 585, 659, 746, 758, 997, 1056, 1097, 1119, 1131, 1212, 1224], "dtm": [40, 295, 366, 861, 927], "500": [40, 201, 265, 295, 777, 831, 858, 942, 944, 952, 1108, 1109, 1111, 1224], "val": [40, 230, 295, 337, 513, 549, 653, 736, 746, 812, 858, 895], "10_000": [40, 295], "20_000": [40, 295], "30_000": [40, 295], "increas": [40, 78, 114, 126, 133, 295, 357, 746, 917, 1224], "b4": [40, 295], "light": [40, 295], "twice": [40, 119, 295], "titl": [40, 63, 295], "explicit": [40, 116, 128, 142, 265, 295, 721, 831, 858], "integr": [40, 295, 1232], "multi_fram": [40, 295], "wb": [40, 295], "coordin": [40, 295], "advanc": [40, 119, 222, 295, 501, 1069, 1232], "min_color": [40, 295], "76933c": [40, 295], "mid_color": [40, 295], "c4d79b": [40, 295], "max_color": [40, 295], "ebf1d": [40, 295], "data_bar_2010": [40, 295], "bar_color": [40, 295], "9bbb59": [40, 295], "bar_negative_color_sam": [40, 295], "bar_negative_border_color_sam": [40, 295], "white": [40, 295], "w": [40, 65, 66, 184, 187, 234, 295, 598, 603, 605, 664, 666, 785, 788, 858, 861, 1144, 1149, 1151, 1175], "get_worksheet_by_nam": [40, 295], "fmt_titl": [40, 295], "add_format": [40, 295], "4f6228": [40, 295], "font_siz": [40, 295], "12": [40, 78, 110, 143, 144, 155, 184, 200, 204, 231, 242, 266, 295, 304, 341, 342, 350, 364, 366, 370, 374, 382, 384, 385, 386, 389, 390, 391, 393, 407, 408, 409, 456, 510, 546, 551, 555, 565, 575, 583, 584, 598, 612, 620, 636, 646, 674, 682, 689, 690, 691, 692, 693, 694, 710, 733, 734, 746, 762, 782, 785, 790, 794, 797, 810, 813, 820, 821, 826, 838, 858, 861, 903, 904, 925, 927, 949, 958, 972, 1077, 1117, 1128, 1144, 1158, 1166, 1182, 1224, 1232], "ital": [40, 295], "customis": [40, 295], "trend": [40, 295], "win_loss": [40, 295], "subtl": [40, 295], "tone": [40, 295], "hidden": [40, 295], "id": [40, 86, 130, 261, 281, 295, 564, 618, 619, 657, 746, 846, 1105, 1210, 1224, 1232], "q1": [40, 295], "55": [40, 80, 295], "20": [40, 144, 170, 192, 194, 214, 221, 223, 227, 229, 295, 317, 318, 319, 360, 393, 407, 436, 440, 549, 560, 568, 569, 571, 701, 708, 733, 746, 804, 807, 858, 861, 920, 958, 972, 1101, 1224], "35": [40, 295, 360, 746, 920, 1224], "q2": [40, 295], "30": [40, 170, 184, 192, 221, 227, 229, 252, 270, 295, 317, 318, 319, 360, 366, 374, 382, 384, 385, 391, 392, 393, 400, 407, 408, 436, 584, 708, 733, 746, 785, 807, 834, 858, 861, 920, 927, 950, 957, 958, 965, 972, 1224, 1232], "60": [40, 170, 295, 394, 406, 575, 633, 746, 955, 959, 971, 1179], "q3": [40, 295], "40": [40, 136, 170, 221, 295, 393, 407, 436, 636, 746, 807, 858, 938, 972, 1182], "80": [40, 295], "q4": [40, 295], "75": [40, 162, 295, 306, 544, 553, 568, 569, 570, 571, 574, 575, 576, 711, 746, 919, 999, 1095, 1224, 1232], "account": [40, 110, 117, 130, 295, 389, 415, 416, 417, 746, 954, 981, 982, 983, 1224], "flavour": [40, 116, 295], "integer_dtyp": [40, 237, 295, 815, 858, 861], "0_": [40, 295], "just": [40, 128, 213, 295, 803, 858], "unifi": [40, 295, 861], "2_color_scal": [40, 295], "95b3d7": [40, 295], "ffffff": [40, 295], "standardis": [40, 295], "z": [40, 65, 86, 110, 142, 144, 168, 196, 198, 203, 213, 233, 234, 264, 295, 302, 304, 306, 337, 436, 466, 510, 513, 533, 534, 535, 536, 537, 544, 551, 559, 604, 633, 635, 646, 664, 666, 684, 713, 717, 722, 730, 746, 793, 803, 822, 858, 861, 895, 989, 1150, 1179, 1181, 1224, 1231], "score": [40, 295], "conjunct": [40, 87, 119, 125, 295], "a123": [40, 295], "b345": [40, 295], "c567": [40, 295], "d789": [40, 295], "e101": [40, 295], "45": [40, 136, 231, 295, 366, 374, 382, 393, 407, 565, 575, 598, 604, 643, 670, 671, 708, 733, 746, 813, 858, 861, 927, 958, 972, 1144, 1150, 1232], "85": [40, 295, 1232], "font": [40, 295], "consola": [40, 295], "stdev": [40, 295], "ipccompress": [41, 42, 295], "arrow": [41, 42, 58, 103, 104, 116, 117, 120, 122, 131, 201, 233, 234, 251, 253, 295, 858, 1200, 1205, 1224], "ipc": [41, 42, 58, 120, 121, 122, 131, 134, 295, 758, 858], "feather": [41, 120, 131, 295, 758], "access": [41, 79, 80, 81, 82, 130, 133, 152, 201, 232, 233, 295, 605, 836, 858, 1151, 1232], "doc": [41, 42, 117, 137, 139, 161, 295], "python": [41, 42, 62, 104, 114, 115, 116, 136, 137, 139, 152, 201, 207, 233, 234, 253, 281, 295, 309, 366, 509, 511, 513, 605, 690, 691, 693, 694, 733, 734, 736, 746, 752, 846, 868, 927, 939, 940, 941, 946, 1077, 1151, 1204, 1224], "lz4": [41, 42, 45, 58, 59, 295, 858], "zstd": [41, 42, 45, 58, 59, 295, 858], "batch": [42, 112, 115, 116, 122, 132, 134, 295, 768, 798, 799, 858], "pretti": [43, 295], "row_ori": [43, 295], "iobas": [43, 44, 123, 124, 295, 526, 771, 810, 817, 838, 858], "serial": [43, 44, 295, 771, 838, 858], "orient": [43, 79, 81, 107, 109, 295, 858], "slower": [43, 107, 109, 119, 183, 186, 207, 220, 266, 281, 295, 513, 711, 746, 784, 787, 846, 858, 1077, 1224], "common": [43, 78, 84, 85, 86, 265, 295, 510, 533, 746, 752, 768, 769, 775, 777, 808, 821, 831, 858], "write_ndjson": [43, 295], "bit_set": [43, 295, 817, 858], "newlin": [44, 124, 132, 295], "delimit": [44, 57, 124, 132, 222, 254, 295, 595, 858, 1141, 1201, 1224], "parquetcompress": [45, 295], "compression_level": [45, 59, 295, 858], "statist": [45, 59, 114, 115, 126, 133, 162, 295, 416, 417, 457, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 746, 858, 919, 982, 983, 1026, 1113, 1135, 1224], "row_group_s": [45, 59, 295, 858], "data_page_s": [45, 295], "use_pyarrow": [45, 114, 120, 122, 126, 295, 1204, 1205, 1224], "pyarrow_opt": [45, 118, 126, 129, 295], "parquet": [45, 59, 126, 127, 133, 295, 758, 858], "gzip": [45, 59, 295, 858], "lzo": [45, 59, 295, 858], "brotli": [45, 59, 295, 858], "choos": [45, 58, 59, 184, 222, 295, 785, 858], "good": [45, 58, 59, 201, 295, 858], "perform": [45, 58, 59, 78, 94, 104, 114, 115, 116, 120, 126, 128, 131, 132, 133, 152, 156, 183, 184, 185, 186, 187, 188, 204, 207, 208, 210, 215, 225, 231, 234, 247, 260, 281, 295, 309, 501, 513, 545, 565, 609, 610, 633, 634, 635, 746, 763, 785, 786, 788, 789, 794, 813, 823, 828, 837, 858, 1077, 1155, 1156, 1179, 1180, 1181, 1224], "fast": [45, 58, 59, 145, 147, 295, 421, 581, 746, 858, 987, 1125, 1224, 1232], "decompress": [45, 58, 59, 295, 858], "backward": [45, 59, 172, 204, 295, 327, 386, 423, 746, 779, 794, 858, 951, 989, 1224], "guarante": [45, 59, 104, 114, 115, 189, 262, 295, 436, 746, 777, 829, 858, 996, 997, 1224], "deal": [45, 59, 201, 295, 305, 307, 392, 393, 407, 556, 633, 635, 663, 665, 692, 746, 858, 865, 866, 957, 958, 972, 1097, 1179, 1181, 1224], "older": [45, 59, 295, 858], "reader": [45, 59, 112, 114, 115, 120, 122, 126, 295, 759, 858], "higher": [45, 59, 224, 287, 295, 554, 572, 720, 746, 809, 852, 858, 1096, 1112, 1224], "mean": [45, 59, 114, 115, 120, 126, 128, 162, 172, 183, 184, 204, 211, 222, 231, 266, 274, 295, 389, 393, 407, 420, 423, 565, 568, 569, 570, 571, 572, 574, 575, 576, 589, 603, 674, 690, 691, 693, 694, 695, 733, 734, 736, 746, 779, 784, 785, 794, 798, 799, 813, 839, 858, 919, 954, 958, 972, 985, 989, 996, 1109, 1135, 1149, 1224], "smaller": [45, 59, 168, 295, 777, 858, 980, 1224], "disk": [45, 57, 58, 59, 120, 295, 821, 858], "22": [45, 59, 143, 295, 370, 390, 393, 407, 409, 410, 567, 568, 569, 571, 574, 575, 576, 633, 746, 858, 861, 958, 972, 975, 1107, 1179, 1224, 1232], "comput": [45, 59, 84, 86, 91, 168, 183, 204, 257, 262, 274, 287, 295, 301, 311, 312, 313, 314, 315, 316, 322, 323, 324, 338, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 412, 419, 457, 471, 479, 484, 485, 486, 489, 490, 491, 492, 497, 502, 504, 505, 506, 529, 545, 546, 552, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 586, 587, 588, 589, 593, 651, 652, 659, 664, 666, 670, 671, 672, 678, 680, 696, 723, 724, 736, 746, 768, 784, 791, 793, 794, 829, 836, 839, 852, 858, 863, 869, 870, 871, 872, 873, 874, 880, 881, 882, 898, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 978, 980, 984, 1026, 1039, 1047, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1065, 1070, 1072, 1073, 1074, 1082, 1091, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1132, 1133, 1134, 1135, 1138, 1198, 1199, 1206, 1212, 1224], "512": [45, 116, 295, 550, 746, 1091, 1224], "page": [45, 59, 120, 126, 131, 133, 295, 746, 758, 858, 1224], "implement": [45, 104, 116, 152, 189, 207, 281, 295, 436, 456, 513, 532, 534, 535, 536, 537, 551, 646, 711, 746, 846, 997, 1077, 1120, 1123, 1224], "At": [45, 295], "moment": [45, 161, 295, 457, 589, 746, 1026, 1135, 1224], "write_t": [45, 295], "partition_col": [45, 117, 295], "write_to_dataset": [45, 295], "similar": [45, 148, 176, 204, 241, 295, 396, 399, 493, 545, 564, 582, 736, 746, 777, 794, 819, 858, 961, 964, 1061, 1105, 1127, 1224], "spark": [45, 295], "partit": [45, 117, 118, 126, 129, 133, 134, 202, 220, 295], "we": [45, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 184, 204, 231, 266, 295, 389, 393, 407, 473, 501, 511, 513, 565, 568, 569, 570, 571, 572, 574, 575, 576, 605, 617, 690, 691, 693, 694, 708, 733, 734, 736, 746, 771, 785, 794, 798, 799, 810, 813, 858, 868, 954, 958, 972, 999, 1041, 1077, 1151, 1163, 1224], "use_pyarrow_write_to_dataset": [45, 295], "first": [45, 78, 114, 115, 119, 123, 128, 132, 137, 138, 139, 140, 143, 153, 182, 184, 187, 190, 204, 206, 207, 217, 221, 222, 249, 254, 255, 261, 262, 266, 279, 295, 319, 321, 357, 360, 386, 389, 393, 437, 444, 445, 461, 470, 473, 477, 478, 501, 512, 522, 549, 560, 580, 592, 603, 606, 608, 618, 619, 675, 681, 699, 703, 736, 746, 768, 785, 788, 790, 794, 797, 807, 829, 836, 844, 858, 861, 877, 917, 919, 920, 951, 954, 958, 998, 1008, 1009, 1028, 1038, 1041, 1045, 1046, 1069, 1076, 1121, 1149, 1151, 1152, 1154, 1164, 1165, 1195, 1203, 1224, 1232], "watermark": [45, 295], "partitioned_object": [45, 295], "calendar": [47, 48, 184, 204, 231, 266, 295, 377, 389, 393, 407, 411, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 938, 954, 958, 972, 976], "time_unit": [48, 50, 365, 366, 373, 398, 410, 635, 690, 691, 692, 693, 694, 695, 701, 861, 926, 927, 934, 963, 975, 1181], "time_zon": [48, 367, 392, 635, 690, 691, 692, 693, 694, 861, 925, 928, 933, 957, 1181], "timezon": [48, 861], "m": [48, 50, 66, 203, 295, 364, 365, 366, 372, 373, 396, 398, 399, 410, 603, 633, 634, 635, 638, 690, 691, 692, 693, 694, 695, 701, 793, 858, 861, 925, 926, 927, 933, 934, 961, 963, 964, 975, 1149, 1179, 1180, 1181, 1184], "zoneinfo": [48, 861], "run": [48, 57, 58, 59, 84, 85, 145, 147, 183, 186, 205, 207, 222, 238, 262, 271, 281, 295, 309, 357, 473, 513, 563, 564, 610, 725, 746, 768, 769, 775, 777, 784, 787, 798, 799, 803, 808, 816, 821, 829, 835, 858, 861, 917, 1041, 1077, 1104, 1105, 1156, 1224, 1231, 1232], "available_timezon": [48, 861], "check": [48, 114, 115, 128, 137, 138, 139, 140, 149, 167, 177, 184, 185, 187, 188, 197, 199, 203, 231, 295, 328, 331, 332, 441, 446, 467, 565, 596, 601, 626, 746, 785, 786, 788, 789, 793, 798, 799, 813, 858, 885, 888, 889, 979, 1004, 1006, 1010, 1011, 1013, 1020, 1021, 1022, 1024, 1025, 1035, 1122, 1142, 1147, 1172, 1224], "128": [49, 80, 1091, 1224], "bit": [49, 51, 52, 53, 54, 55, 56, 72, 73, 74, 75, 558, 596, 746, 1099, 1142, 1224], "experiment": [49, 85, 134, 264, 265, 295, 357, 393, 513, 568, 569, 570, 571, 572, 574, 575, 576, 746, 769, 858, 897, 917, 958, 999, 1095, 1224], "progress": 49, "expect": [49, 95, 97, 102, 114, 116, 128, 501, 513, 708, 746, 796, 798, 799, 858], "32": [51, 54, 73, 80, 199, 231, 295, 530, 565, 584, 746, 813, 858, 921, 955, 1091, 1112, 1224], "sign": [53, 54, 55, 56, 389, 558, 641, 746, 861, 954, 1013, 1099, 1187, 1224], "maintain_ord": [57, 58, 59, 156, 183, 186, 220, 222, 260, 262, 266, 275, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 303, 326, 431, 434, 503, 513, 656, 679, 746, 763, 769, 775, 777, 784, 787, 808, 821, 823, 828, 829, 840, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 884, 1071, 1209, 1224], "type_coercion": [57, 58, 59, 84, 85, 768, 769, 775, 777, 808, 821, 858], "predicate_pushdown": [57, 58, 59, 84, 85, 768, 769, 775, 777, 798, 799, 808, 821, 858], "projection_pushdown": [57, 58, 59, 84, 85, 768, 769, 775, 777, 798, 799, 808, 821, 858], "simplify_express": [57, 58, 59, 84, 85, 768, 769, 775, 777, 808, 821, 858], "slice_pushdown": [57, 58, 59, 84, 85, 768, 769, 775, 777, 798, 799, 808, 821, 858], "no_optim": [57, 58, 59, 84, 85, 768, 769, 777, 798, 799, 808, 858], "evalu": [57, 58, 59, 171, 173, 204, 295, 306, 320, 357, 439, 462, 463, 501, 544, 560, 663, 665, 669, 673, 690, 691, 693, 694, 696, 705, 706, 719, 722, 728, 733, 734, 736, 737, 746, 768, 780, 791, 793, 794, 858, 878, 917, 1030, 1031, 1101, 1215, 1224], "queri": [57, 58, 59, 63, 65, 84, 85, 116, 117, 120, 128, 131, 132, 133, 170, 205, 221, 295, 511, 513, 560, 608, 746, 768, 769, 775, 777, 790, 797, 808, 821, 837, 841, 846, 858, 867, 986, 1077, 1101, 1154, 1224, 1231], "ram": [57, 58, 59, 858], "maintain": [57, 58, 59, 156, 260, 295, 326, 503, 580, 656, 746, 763, 823, 828, 858, 884, 1071, 1121, 1209, 1224], "slightli": [57, 58, 59, 119, 858], "faster": [57, 58, 59, 116, 170, 256, 264, 295, 309, 513, 657, 746, 858, 867, 868, 986, 1077, 1224], "coercion": [57, 58, 59, 84, 85, 559, 746, 768, 769, 775, 777, 808, 821, 858], "optim": [57, 58, 59, 84, 85, 126, 128, 131, 132, 133, 201, 205, 221, 225, 233, 262, 295, 768, 769, 775, 777, 798, 799, 808, 821, 829, 837, 846, 858, 898, 1120, 1224], "predic": [57, 58, 59, 84, 85, 128, 131, 132, 133, 134, 173, 199, 232, 295, 424, 661, 699, 736, 746, 768, 769, 775, 777, 780, 798, 799, 808, 811, 821, 837, 858, 990, 1120, 1123, 1224], "pushdown": [57, 58, 59, 84, 85, 768, 769, 775, 777, 798, 799, 808, 811, 821, 837, 858, 1120, 1123, 1224], "project": [57, 58, 59, 84, 85, 128, 130, 131, 132, 133, 309, 591, 592, 746, 768, 769, 775, 777, 798, 799, 808, 811, 817, 821, 858], "slice": [57, 58, 59, 79, 84, 85, 168, 190, 202, 249, 295, 478, 498, 513, 521, 523, 566, 568, 569, 570, 571, 572, 574, 575, 576, 746, 768, 769, 775, 777, 798, 799, 808, 821, 858, 980, 998, 1046, 1066, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1195, 1224], "off": [57, 58, 59, 84, 85, 114, 115, 128, 768, 769, 775, 777, 798, 799, 808, 858], "certain": [57, 58, 59, 85, 93, 118, 129, 193, 194, 266, 295, 629, 630, 768, 769, 808, 858, 1224], "lf": [57, 58, 59, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 836, 837, 858, 1231, 1232], "scan_csv": [57, 58, 59, 114, 115, 858], "my_larger_than_ram_fil": [57, 58, 59, 858], "data_pagesize_limit": [59, 858], "reduc": [59, 114, 115, 126, 128, 131, 132, 133, 282, 283, 285, 288, 584, 682, 699, 746, 847, 848, 850, 853, 858, 1079, 1094, 1129, 1194, 1224], "pressur": [59, 114, 115, 126, 128, 132, 133, 584, 746, 858, 1129, 1224], "improv": [59, 120, 131, 858], "speed": [59, 309, 513, 746, 858, 1232], "integer_list": 60, "float_list": 60, "wrap": [62, 110, 441, 746], "arbitrari": [62, 144, 861], "eager": [63, 64, 65, 66, 67, 68, 184, 222, 264, 295, 365, 367, 370, 373, 378, 385, 386, 389, 390, 392, 393, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 568, 569, 571, 574, 575, 576, 669, 673, 690, 691, 693, 694, 701, 705, 706, 719, 722, 728, 733, 734, 737, 745, 746, 785, 799, 858, 925, 926, 928, 931, 933, 934, 935, 941, 942, 944, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1231], "against": [63, 116, 473, 858, 1041, 1231, 1232], "eagerli": [63, 501], "unset": [63, 143, 392, 501, 957], "init": [63, 150], "eager_execut": [63, 1231], "itself": [63, 142, 513, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 723, 724, 746, 796, 858, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1224, 1231], "impact": [63, 184, 187, 295, 785, 788, 858, 1231], "declar": [63, 103, 105, 106, 107, 109, 116, 123, 124, 132, 295, 858], "godfath": 63, "1972": 63, "6_000_000": 63, "134_821_952": 63, "dark": 63, "knight": 63, "2008": 63, "185_000_000": 63, "533_316_061": 63, "schindler": 63, "1993": 63, "22_000_000": 63, "96_067_179": 63, "pulp": 63, "fiction": 63, "1994": 63, "8_000_000": 63, "107_930_000": 63, "shawshank": 63, "redempt": 63, "25_000_000": 63, "28_341_469": 63, "release_year": 63, "budget": 63, "gross": 63, "imdb_scor": 63, "ctx": [63, 64, 65, 66, 67, 68], "film": 63, "1990": 63, "BY": [63, 65], "desc": [63, 65], "AS": [63, 726, 1231], "decad": 63, "total_gross": 63, "n_film": 63, "2000": [63, 376, 378, 385, 386, 389, 394, 861, 937, 950, 951, 954, 959], "533316061": 63, "232338648": 63, "1970": [63, 134], "134821952": 63, "register_glob": [64, 66, 68, 1231], "register_mani": [64, 65, 68], "unregist": [64, 65, 66, 1231], "frame_data": [64, 67], "execut": [64, 65, 67, 69, 86, 116, 205, 295, 334, 473, 659, 746, 764, 798, 799, 808, 858, 1041, 1212, 1224, 1231], "collect": [64, 65, 68, 81, 84, 85, 128, 129, 130, 134, 144, 146, 163, 165, 205, 222, 251, 262, 263, 295, 334, 418, 446, 513, 676, 697, 701, 728, 746, 761, 763, 765, 769, 771, 772, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 792, 793, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 815, 817, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 836, 837, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 861, 1011, 1224, 1231, 1232], "global": [65, 69, 87, 88, 135, 144, 149, 256, 295, 560, 746, 894, 896, 1101, 1224, 1231], "scope": [65, 68, 150, 757, 861, 1231], "map": [65, 66, 105, 106, 114, 115, 116, 117, 120, 121, 126, 127, 128, 131, 157, 166, 175, 201, 207, 226, 232, 233, 234, 252, 295, 304, 393, 407, 510, 511, 512, 513, 532, 545, 560, 564, 659, 710, 746, 765, 774, 811, 858, 861, 919, 958, 972, 1076, 1077, 1101, 1105, 1212, 1224, 1231], "recent": [65, 137, 138, 139, 140, 546, 746, 1091, 1224, 1231], "df1": [65, 67, 68, 78, 86, 137, 138, 167, 170, 214, 257, 268, 295, 804, 858], "df2": [65, 67, 68, 78, 86, 137, 138, 167, 170, 257, 268, 295], "join": [65, 69, 78, 84, 85, 86, 88, 204, 265, 295, 440, 545, 746, 768, 769, 775, 777, 794, 808, 821, 831, 836, 858], "named_fram": [66, 1231], "lf1": [66, 68], "o": [66, 120, 131, 333, 357, 602, 654, 746, 890, 917, 1148, 1174, 1208, 1224], "lf2": [66, 68, 858], "p": [66, 80, 221, 295, 549, 728, 746, 807, 858], "q": [66, 234, 295, 728], "r": [66, 114, 115, 128, 549, 598, 602, 603, 604, 605, 618, 746, 861, 1144, 1148, 1149, 1150, 1151, 1164], "lf3": [66, 858], "lf4": [66, 858], "either": [66, 144, 199, 204, 205, 208, 210, 215, 220, 231, 232, 247, 256, 295, 553, 565, 633, 663, 672, 728, 746, 794, 796, 813, 858, 861, 1095, 1179, 1224, 1232], "tbl1": [66, 68], "tbl2": [66, 68], "tbl3": 66, "tbl4": 66, "statement": [67, 736], "hello_world": 67, "baz": [67, 194, 195, 222, 263, 295, 605, 623, 625, 742, 792, 830, 858, 861, 1151, 1171], "hello_data": 67, "foo_bar": [67, 517, 520, 623, 708], "registr": [68, 758], "lifetim": [68, 150, 757], "context": [68, 69, 87, 88, 148, 218, 277, 295, 303, 309, 334, 346, 424, 460, 473, 482, 511, 513, 521, 591, 592, 659, 667, 679, 698, 701, 707, 711, 722, 725, 745, 746, 757, 758, 836, 842, 858, 1027, 1041, 1050, 1212, 1224, 1231], "manag": [68, 69, 87, 88, 757, 758, 1231], "often": [68, 150, 184, 185, 187, 188, 231, 295, 468, 469, 559, 565, 746, 785, 786, 788, 789, 813, 858, 1036, 1037], "want": [68, 85, 106, 170, 207, 218, 295, 424, 511, 513, 564, 568, 569, 570, 571, 572, 574, 575, 576, 609, 681, 690, 699, 719, 722, 737, 746, 769, 790, 797, 858, 861, 867, 986, 1077, 1105, 1155, 1224], "df0": [68, 214, 295, 804, 858], "exit": [68, 69, 87, 150, 1231], "construct": [68, 69, 87, 88, 103, 105, 106, 107, 108, 109, 116, 295, 430, 560, 719, 722, 737, 742, 746, 771, 782, 810, 858, 894, 1224], "persist": [68, 858], "through": [68, 104, 116, 742, 861, 1224], "tbl0": 68, "remain": [68, 114, 115, 128, 165, 168, 173, 295, 362, 363, 424, 472, 560, 624, 625, 746, 773, 780, 798, 799, 858, 922, 923, 980, 990, 1040, 1101, 1170, 1171, 1224], "text": [68, 116, 609, 610, 618, 619, 726, 1155, 1156, 1232], "misc": 68, "testing1234": 68, "test1": 68, "test2": 68, "test3": 68, "disabl": [69, 87, 88, 201, 295, 768, 858], "cach": [69, 84, 85, 87, 88, 120, 128, 131, 133, 137, 138, 139, 140, 149, 560, 568, 569, 570, 571, 572, 574, 575, 576, 633, 634, 635, 638, 746, 757, 768, 769, 775, 777, 808, 821, 858, 894, 1101, 1179, 1180, 1181, 1184, 1224], "under": [69, 79, 80, 81, 82, 87, 88, 738, 739, 741, 742, 747, 748, 751, 753, 754, 755, 1216, 1218, 1220, 1225, 1228, 1229, 1230], "physic": [69, 88, 114, 115, 204, 295, 337, 653, 746, 764, 793, 794, 858, 895, 896, 1207, 1224], "equal": [69, 88, 114, 115, 116, 128, 137, 138, 139, 140, 156, 177, 184, 187, 204, 214, 260, 295, 334, 358, 407, 413, 414, 433, 459, 501, 541, 553, 559, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 615, 616, 641, 723, 724, 736, 742, 746, 763, 785, 788, 794, 804, 823, 828, 858, 918, 958, 1069, 1095, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1122, 1161, 1162, 1187, 1224, 1232], "concaten": [69, 86, 87, 88, 176, 221, 295, 549, 676, 677, 746, 807, 858, 900, 1083, 1224], "introduc": [69, 88, 633, 634, 635, 1179, 1180, 1181], "overhead": [69, 88, 128, 131, 132, 133], "amount": [69, 88, 309, 513, 695, 746], "depend": [69, 83, 88, 116, 136, 464, 465, 513, 521, 553, 556, 695, 698, 701, 707, 746, 1032, 1033, 1095, 1097, 1224, 1232], "categori": [69, 88, 254, 295, 336, 337, 358, 553, 746, 893, 895, 918, 999, 1095, 1224], "nest": [69, 110, 126, 168, 295, 758, 980, 1224, 1231, 1232], "clear": [69, 87, 159, 295, 767, 858, 905, 1224], "outermost": 69, "s1": [69, 87, 88, 139, 140, 176, 295, 979, 1025, 1069, 1206, 1215, 1224], "color": [69, 87, 88, 281, 328, 330, 331, 332, 659, 746, 846, 1212, 1224], "red": [69, 87, 88, 281, 659, 746, 846, 1212, 1224], "green": [69, 87, 88, 281, 659, 746, 846, 1212, 1224], "blue": [69, 87, 88, 328, 330, 331, 332, 659, 746, 1212, 1224], "concat": [69, 87, 88, 115, 900, 1083, 1224], "cat": [69, 87, 88, 255, 295, 358, 553, 596, 598, 637, 640, 653, 677, 741, 746, 861, 918, 999, 1095, 1142, 1144, 1183, 1186, 1220, 1224], "decor": [69, 79, 80, 81, 82, 144, 146, 207, 295, 513, 746, 757, 758, 1077, 1224], "dure": [69, 114, 115, 128, 150, 170, 295, 867, 986, 1224], "afterward": [69, 736], "construct_categor": 69, "composit": [70, 143, 1232], "schemadict": [70, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 125, 128, 236, 295, 728, 798, 799, 814, 841, 846, 858], "struct_seri": [70, 846], "dai": [71, 184, 187, 202, 204, 231, 266, 295, 385, 386, 389, 390, 393, 400, 407, 409, 565, 568, 569, 570, 571, 572, 574, 575, 576, 689, 690, 691, 692, 693, 694, 695, 733, 734, 746, 785, 788, 794, 813, 858, 861, 950, 951, 954, 955, 958, 965, 972, 974], "static": [76, 841, 846], "frametyp": [78, 1231], "joinstrategi": [78, 203, 295, 793, 858], "outer": [78, 86, 203, 265, 295, 793, 831, 858], "descend": [78, 156, 239, 245, 260, 295, 319, 495, 556, 581, 591, 592, 659, 672, 746, 763, 818, 823, 828, 858, 877, 1021, 1063, 1097, 1125, 1137, 1212, 1224], "fill": [78, 86, 158, 171, 172, 241, 242, 264, 295, 327, 348, 351, 422, 423, 429, 440, 568, 569, 571, 575, 582, 583, 612, 620, 700, 719, 722, 737, 746, 778, 779, 819, 820, 836, 858, 988, 989, 1002, 1088, 1108, 1109, 1111, 1114, 1115, 1116, 1127, 1128, 1158, 1166, 1224], "sort": [78, 79, 137, 138, 143, 156, 184, 185, 187, 188, 204, 214, 221, 222, 231, 239, 260, 266, 279, 289, 295, 319, 337, 424, 513, 545, 565, 568, 569, 570, 571, 572, 574, 575, 576, 581, 592, 659, 661, 672, 711, 746, 763, 775, 785, 786, 788, 789, 794, 804, 807, 808, 813, 818, 821, 828, 844, 854, 858, 861, 877, 895, 1021, 1125, 1209, 1212, 1224, 1232], "origin": [78, 114, 115, 128, 165, 173, 262, 295, 362, 363, 392, 393, 407, 424, 456, 472, 512, 532, 545, 558, 559, 560, 561, 597, 598, 603, 608, 670, 671, 746, 773, 780, 829, 858, 918, 922, 923, 957, 958, 972, 990, 1040, 1076, 1095, 1101, 1102, 1143, 1144, 1149, 1154, 1224], "In": [78, 85, 116, 118, 129, 130, 133, 144, 146, 150, 168, 170, 184, 185, 187, 188, 207, 218, 231, 256, 295, 513, 565, 690, 746, 769, 785, 786, 788, 789, 813, 858, 867, 980, 986, 1098, 1224], "duplic": [78, 92, 196, 203, 204, 262, 265, 295, 304, 442, 456, 532, 553, 746, 793, 794, 829, 831, 858, 1005, 1095, 1224], "suitabl": [78, 86, 116, 142, 207, 295, 513, 580, 746, 1077, 1121, 1224, 1232], "get": [78, 85, 111, 121, 127, 134, 148, 156, 160, 166, 175, 179, 181, 184, 185, 187, 188, 190, 191, 196, 198, 199, 206, 209, 216, 217, 222, 231, 232, 236, 240, 244, 249, 260, 269, 279, 289, 295, 303, 317, 318, 319, 321, 326, 336, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 425, 431, 437, 455, 458, 461, 475, 481, 503, 514, 515, 516, 521, 523, 527, 538, 539, 547, 548, 554, 563, 565, 590, 594, 647, 648, 656, 660, 698, 703, 707, 711, 712, 713, 714, 715, 716, 717, 727, 731, 735, 746, 763, 769, 770, 774, 781, 785, 786, 788, 789, 790, 795, 797, 813, 814, 822, 826, 828, 833, 844, 854, 858, 875, 876, 877, 878, 879, 884, 893, 900, 909, 910, 911, 912, 913, 914, 915, 916, 934, 995, 998, 1003, 1005, 1023, 1028, 1043, 1049, 1071, 1078, 1080, 1081, 1083, 1086, 1087, 1092, 1093, 1096, 1104, 1136, 1139, 1195, 1200, 1201, 1209, 1213, 1214, 1224], "speedup": [78, 201, 207, 295, 513, 746, 1077, 1224], "receiv": [78, 116, 128, 207, 221, 281, 295, 513, 549, 746, 807, 858, 1232], "now": [78, 231, 295, 334, 407, 746, 813, 858, 958, 972, 1181], "One": [78, 162, 218, 222, 295, 306, 544, 726, 746, 861, 919, 1224], "whose": [78, 204, 222, 295, 418, 697, 746, 794, 858, 861], "uniqu": [78, 141, 142, 143, 146, 154, 155, 198, 203, 218, 222, 234, 286, 295, 310, 321, 358, 455, 531, 553, 633, 634, 635, 638, 657, 659, 668, 718, 746, 761, 762, 793, 851, 858, 879, 918, 919, 1023, 1084, 1095, 1179, 1180, 1181, 1184, 1210, 1212, 1224], "post": 78, "constrain": [78, 165, 295, 773, 858], "newli": 78, "boolean": [78, 156, 173, 176, 205, 245, 260, 295, 305, 306, 307, 328, 331, 332, 376, 424, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 467, 542, 544, 547, 548, 592, 606, 661, 662, 672, 673, 728, 736, 746, 763, 767, 780, 796, 823, 828, 858, 861, 865, 866, 878, 885, 887, 937, 990, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1030, 1031, 1035, 1089, 1092, 1093, 1123, 1142, 1205, 1215, 1224], "know": [78, 116, 222, 295, 501, 1214, 1224], "2022": [78, 157, 162, 182, 295, 366, 374, 382, 393, 407, 633, 690, 691, 693, 695, 701, 765, 858, 861, 927, 938, 958, 972, 1179], "df3": [78, 295], "set_tbl_format": 78, "09": [78, 144, 231, 295, 366, 385, 386, 565, 636, 690, 734, 746, 813, 858, 861, 1182], "02": [78, 157, 182, 184, 231, 266, 295, 365, 366, 373, 385, 386, 389, 392, 398, 401, 404, 406, 410, 565, 568, 569, 571, 574, 575, 576, 577, 633, 634, 635, 638, 690, 691, 693, 695, 746, 765, 785, 813, 858, 861, 926, 927, 929, 930, 934, 935, 941, 942, 947, 950, 951, 952, 957, 958, 962, 963, 966, 969, 971, 972, 1069, 1179, 1180, 1181, 1184], "03": [78, 110, 157, 184, 231, 266, 295, 365, 366, 367, 373, 385, 386, 389, 392, 393, 394, 396, 398, 399, 400, 401, 404, 406, 407, 410, 565, 568, 569, 571, 574, 575, 576, 634, 638, 690, 691, 693, 695, 746, 765, 785, 813, 858, 926, 927, 928, 934, 935, 941, 942, 950, 951, 952, 957, 958, 961, 963, 964, 965, 966, 969, 971, 1180, 1184], "af1": 78, "af2": 78, "af3": 78, "keep": [78, 114, 115, 128, 262, 265, 266, 295, 456, 512, 525, 533, 560, 675, 746, 829, 831, 858, 1076, 1101, 1224], "easili": [78, 116, 237, 270, 274, 295, 728, 815, 834, 839, 858], "dot": [78, 746, 821, 858, 1224], "product": [78, 161, 295, 350, 355, 361, 746, 777, 858, 911, 915, 921, 1224], "fill_nul": [78, 171, 295, 746, 778, 836, 858, 1224], "sum_horizont": [78, 247, 295, 729], "167": 78, "47": 78, "callabl": [79, 80, 81, 82, 128, 153, 176, 207, 221, 276, 281, 295, 309, 501, 509, 510, 511, 513, 533, 549, 566, 567, 667, 681, 682, 685, 686, 699, 709, 710, 711, 721, 746, 798, 799, 807, 841, 846, 858, 868, 1069, 1077, 1106, 1107, 1224], "by_first_letter_of_column_nam": 79, "f": [79, 115, 162, 182, 202, 251, 261, 264, 295, 302, 501, 584, 602, 633, 635, 667, 676, 709, 746, 1069, 1148, 1179, 1181], "fromkei": [79, 81], "by_first_letter_of_column_valu": 79, "starts_with": [79, 328, 331, 596, 601, 861, 1147], "to_seri": [79, 179, 295, 633, 673, 722, 1179], "xy": [79, 81], "yz": [79, 81], "b1": [79, 81], "b2": [79, 81], "pow_n": 80, "powersofn": 80, "next": [80, 184, 204, 231, 266, 295, 327, 389, 393, 407, 556, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972, 1097, 1224], "ceil": [80, 746, 1224], "previou": [80, 150, 534, 535, 546, 551, 644, 646, 746, 867, 1091, 1224], "floor": [80, 746, 1224], "nearest": [80, 204, 224, 287, 295, 339, 427, 440, 554, 572, 720, 746, 794, 809, 852, 858, 899, 992, 1002, 1096, 1112, 1224], "24": [80, 168, 184, 204, 207, 231, 266, 295, 350, 357, 370, 389, 390, 393, 401, 407, 409, 530, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 917, 954, 958, 966, 972, 1025, 1224], "001": [80, 378, 402, 403, 405, 641, 695, 967, 968, 970, 1187], "next_pow2": 80, "prev_pow2": 80, "nearest_pow2": 80, "split_by_column_dtyp": 81, "collect_al": [81, 85, 768, 769, 858], "31": [82, 144, 366, 370, 374, 382, 385, 389, 400, 633, 689, 692, 701, 708, 861, 925, 927, 931, 950, 965, 1179, 1232], "42": [82, 189, 214, 231, 295, 565, 746, 804, 813, 858, 997, 1224], "961": 82, "1764": 82, "4160": 82, "build": [83, 104, 861, 1232], "wa": [83, 137], "compil": [83, 464, 465, 1032, 1033], "gate": 83, "info": [83, 118, 129, 130, 136], "otherwis": [83, 116, 119, 143, 148, 207, 214, 234, 237, 281, 295, 329, 340, 358, 415, 416, 417, 501, 513, 521, 549, 553, 558, 569, 570, 571, 572, 574, 576, 596, 599, 663, 711, 736, 746, 804, 815, 846, 858, 886, 902, 918, 981, 982, 983, 1069, 1077, 1095, 1099, 1120, 1123, 1142, 1145, 1224], "host": [83, 114, 120, 122, 126, 131, 133], "git": 83, "lazy_fram": [84, 85], "comm_subplan_elim": [84, 85, 768, 769, 775, 777, 808, 821, 858], "comm_subexpr_elim": [84, 85, 334, 746, 768, 769, 775, 777, 808, 821, 858], "graph": [84, 205, 295, 768, 791, 836, 858], "parallel": [84, 86, 112, 117, 126, 133, 184, 187, 204, 205, 221, 238, 271, 295, 357, 473, 659, 736, 746, 758, 785, 788, 793, 794, 816, 835, 846, 858, 917, 1041, 1212, 1224], "threadpool": [84, 148], "Will": [84, 85, 768, 769, 775, 777, 808, 821, 858, 1224], "try": [84, 85, 98, 100, 114, 115, 120, 126, 128, 131, 133, 768, 769, 775, 777, 808, 821, 858], "branch": [84, 85, 768, 769, 775, 777, 808, 821, 858], "subplan": [84, 85, 768, 769, 775, 777, 808, 821, 858], "union": [84, 85, 86, 492, 768, 769, 775, 777, 808, 821, 858, 861, 1060], "subexpress": [84, 85, 768, 769, 775, 777, 808, 821, 858], "reus": [84, 85, 768, 769, 775, 777, 808, 821, 858], "part": [84, 85, 103, 119, 144, 604, 624, 625, 769, 775, 777, 808, 821, 836, 858, 1150, 1170, 1171], "fashion": [84, 85, 203, 295, 769, 775, 777, 808, 821, 858], "alpha": [84, 85, 309, 415, 416, 417, 746, 768, 769, 775, 777, 808, 821, 858, 981, 982, 983, 1224], "gevent": [85, 136, 769, 858], "_geventdataframeresult": [85, 769, 858], "await": [85, 769, 858], "asynchron": [85, 769, 858], "them": [85, 103, 105, 106, 107, 109, 123, 124, 125, 128, 132, 133, 169, 170, 184, 204, 214, 231, 266, 295, 441, 480, 538, 539, 545, 565, 676, 690, 691, 693, 694, 733, 734, 746, 769, 776, 785, 794, 804, 813, 858, 861, 867, 986, 1048, 1086, 1087, 1224], "schedul": [85, 769, 858], "insid": [85, 769, 858], "almost": [85, 207, 281, 295, 633, 634, 635, 769, 858, 1077, 1179, 1180, 1181, 1224], "instantli": [85, 769, 858], "asyncio": [85, 769, 858], "releas": [85, 309, 513, 746, 769, 858, 1232], "greenlet": [85, 769, 858], "task": [85, 769, 858], "wrapper": [85, 769, 858], "event": [85, 769, 858], "asyncresult": [85, 769, 858], "timeout": [85, 769, 858], "break": [85, 134, 264, 265, 295, 309, 357, 358, 393, 568, 569, 570, 571, 572, 574, 575, 576, 746, 769, 858, 897, 917, 918, 958, 999, 1095, 1224], "collect_async": [85, 858], "set_except": [85, 769, 858], "futur": [85, 152, 208, 210, 215, 247, 295, 690, 769, 858, 1214, 1224], "rerais": [85, 769, 858], "iter": [86, 103, 116, 145, 147, 156, 173, 183, 184, 185, 186, 187, 188, 200, 201, 202, 231, 232, 233, 234, 237, 238, 239, 245, 260, 261, 270, 271, 273, 274, 295, 357, 545, 592, 664, 666, 672, 675, 676, 677, 684, 688, 713, 717, 725, 728, 730, 736, 742, 746, 763, 780, 784, 785, 786, 787, 788, 789, 813, 815, 816, 818, 823, 828, 834, 835, 839, 858, 917, 1224, 1232], "polarstyp": 86, "concatmethod": 86, "vertic": [86, 170, 208, 210, 215, 247, 264, 268, 295, 595, 1141], "rechunk": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 170, 295, 746, 867, 900, 986, 1083, 1224], "combin": [86, 98, 100, 173, 184, 189, 204, 231, 266, 295, 306, 320, 407, 544, 565, 613, 621, 627, 628, 629, 630, 690, 691, 693, 694, 733, 734, 736, 746, 785, 794, 813, 821, 858, 958, 972, 1159, 1167, 1173, 1174, 1175, 1176], "vertical_relax": 86, "diagon": [86, 261, 295], "diagonal_relax": 86, "vstack": [86, 170, 295], "addition": [86, 232, 295], "coerc": [86, 559, 746], "supertyp": [86, 172, 295, 308, 746, 779, 858], "mismatch": [86, 98, 124, 137, 139], "find": [86, 174, 180, 295, 580, 746, 1121, 1224], "miss": [86, 114, 115, 128, 171, 295, 327, 415, 416, 417, 429, 450, 452, 501, 746, 778, 858, 981, 982, 983, 1214, 1224], "stack": [86, 192, 268, 295], "don": [86, 184, 207, 262, 264, 295, 309, 357, 473, 513, 545, 746, 785, 829, 858, 861, 917, 979, 1041, 1077, 1122, 1214, 1224], "auto": [86, 103, 105, 106, 107, 109, 123, 124, 126, 132, 133, 261, 295, 407, 858, 958, 972, 1232], "logic": [86, 137, 138, 139, 140, 207, 281, 295, 305, 307, 513, 653, 663, 665, 711, 746, 771, 782, 793, 810, 817, 838, 846, 858, 865, 866, 1077, 1207, 1224], "align_fram": 86, "pattern": [86, 114, 115, 128, 131, 132, 133, 201, 295, 519, 596, 597, 598, 603, 604, 605, 618, 619, 846, 861, 1120, 1123, 1142, 1143, 1144, 1149, 1150, 1151, 1164, 1165, 1224], "collis": 86, "need": [86, 110, 114, 115, 117, 184, 185, 187, 188, 231, 234, 243, 256, 295, 501, 560, 565, 584, 636, 695, 719, 722, 737, 746, 785, 786, 788, 789, 813, 858, 1101, 1129, 1182, 1224, 1232], "sure": [86, 103, 108, 114, 115, 120, 122, 126, 184, 185, 187, 188, 225, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "contigu": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 225, 295], "relev": 86, "df_h1": 86, "l1": 86, "l2": 86, "df_h2": 86, "r1": 86, "r2": 86, "r3": 86, "df_d1": 86, "df_d2": 86, "df_a1": 86, "df_a2": 86, "df_a3": 86, "enable_string_cach": 87, "stringcach": [87, 88, 203, 295, 758, 894, 896], "reliabl": [87, 88], "wai": [87, 88, 103, 105, 106, 107, 109, 123, 124, 132, 183, 202, 221, 245, 274, 295, 545, 549, 592, 603, 742, 746, 784, 807, 823, 839, 846, 858, 1149], "until": [87, 205, 295, 615, 616, 641, 1161, 1162, 1187], "deprec": [88, 89, 153, 155, 174, 177, 184, 185, 186, 187, 188, 193, 208, 210, 215, 228, 242, 247, 250, 276, 295, 309, 334, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 388, 392, 395, 407, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 551, 566, 583, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 633, 635, 646, 649, 650, 667, 674, 687, 688, 690, 692, 709, 722, 733, 746, 762, 782, 785, 786, 787, 788, 789, 798, 810, 820, 827, 838, 841, 858, 867, 868, 903, 904, 913, 914, 915, 916, 918, 932, 936, 943, 945, 948, 953, 957, 958, 960, 972, 1004, 1008, 1010, 1013, 1014, 1020, 1022, 1024, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1095, 1106, 1122, 1124, 1128, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1179, 1181, 1196, 1197, 1214, 1224], "sinc": [88, 118, 129, 153, 155, 156, 174, 177, 184, 185, 186, 187, 188, 193, 208, 210, 215, 228, 242, 247, 250, 260, 276, 295, 309, 334, 341, 342, 352, 353, 354, 355, 356, 371, 373, 375, 379, 381, 383, 388, 392, 395, 407, 444, 448, 451, 456, 468, 471, 479, 483, 497, 502, 509, 510, 512, 551, 566, 583, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 633, 635, 646, 649, 650, 667, 674, 687, 688, 690, 692, 701, 709, 722, 733, 746, 762, 763, 782, 785, 786, 787, 788, 789, 798, 810, 820, 823, 827, 828, 838, 841, 858, 867, 868, 903, 904, 913, 914, 915, 916, 918, 932, 934, 936, 943, 945, 948, 953, 957, 958, 960, 972, 1004, 1008, 1010, 1013, 1014, 1020, 1022, 1024, 1036, 1039, 1047, 1051, 1065, 1067, 1070, 1076, 1095, 1106, 1122, 1124, 1128, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1179, 1181, 1196, 1197, 1214, 1224], "19": [88, 119, 136, 153, 174, 177, 184, 185, 186, 187, 188, 193, 204, 208, 210, 215, 228, 231, 242, 247, 250, 276, 295, 309, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 388, 392, 393, 395, 407, 444, 448, 451, 456, 468, 483, 509, 510, 512, 551, 565, 566, 569, 571, 583, 597, 607, 611, 612, 613, 614, 617, 620, 621, 627, 633, 635, 636, 646, 649, 650, 667, 687, 688, 690, 692, 709, 746, 785, 786, 787, 788, 789, 794, 798, 813, 820, 827, 841, 858, 868, 903, 904, 913, 914, 915, 916, 918, 932, 936, 943, 945, 948, 953, 957, 958, 960, 972, 1004, 1008, 1010, 1013, 1014, 1020, 1022, 1024, 1036, 1051, 1067, 1076, 1095, 1106, 1122, 1124, 1128, 1143, 1153, 1157, 1158, 1159, 1160, 1163, 1166, 1167, 1173, 1179, 1181, 1182, 1196, 1197, 1214, 1224], "longer": [88, 114, 128], "accept": [88, 113, 114, 115, 118, 120, 122, 126, 156, 183, 186, 237, 238, 241, 245, 260, 270, 271, 274, 295, 302, 340, 418, 441, 512, 545, 560, 592, 662, 664, 666, 672, 675, 676, 677, 684, 688, 697, 713, 717, 725, 728, 730, 736, 746, 763, 784, 787, 815, 816, 819, 823, 828, 834, 835, 839, 858, 902, 1003, 1127, 1224], "disable_string_cach": 88, "finish": [91, 170, 295, 867, 986, 1224], "least": [95, 144, 546, 746, 1091, 1224], "unexpect": [96, 295, 511, 513, 746, 1077, 1224], "caus": [96, 104, 114, 115, 128, 137, 152, 170, 295, 867, 986, 1224], "panic": 96, "incompat": 100, "arrai": [103, 107, 114, 115, 126, 168, 251, 256, 257, 295, 322, 323, 324, 325, 326, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 466, 484, 485, 486, 487, 496, 500, 505, 568, 569, 571, 575, 581, 696, 746, 858, 880, 881, 882, 883, 884, 903, 904, 909, 910, 911, 912, 913, 914, 915, 916, 921, 980, 1034, 1052, 1053, 1054, 1055, 1063, 1064, 1068, 1073, 1074, 1108, 1109, 1111, 1114, 1115, 1116, 1125, 1130, 1200, 1205, 1206, 1214, 1224], "chunkedarrai": [103, 217, 295, 921, 1224], "recordbatch": [103, 202, 295], "schemadefinit": [103, 105, 106, 107, 109, 123, 124, 132, 295, 858], "schema_overrid": [103, 105, 106, 107, 108, 109, 116, 117, 119, 123, 124, 125, 202, 256, 295, 858, 861, 884], "copi": [103, 104, 152, 158, 159, 202, 251, 256, 257, 270, 295, 421, 746, 766, 767, 834, 858, 901, 905, 987, 1200, 1205, 1206, 1224], "closest": 103, "pair": [103, 105, 106, 107, 109, 123, 124, 132, 143, 226, 295, 811, 858, 1232], "sever": [103, 105, 106, 107, 109, 123, 124, 132, 295, 858, 1232], "form": [103, 105, 106, 107, 109, 123, 124, 132, 201, 233, 264, 295, 546, 746, 858, 1091, 1224], "dimens": [103, 105, 107, 109, 123, 124, 132, 295, 561, 746, 858, 1102, 1224], "supportsinterchang": 104, "allow_copi": [104, 152], "interchang": [104, 152], "__dataframe__": 104, "convers": [104, 119, 152, 201, 202, 233, 234, 253, 257, 295, 633, 634, 635, 638, 758, 996, 1179, 1180, 1181, 1184, 1204, 1205, 1206, 1224], "detail": [104, 116, 117, 137, 139, 152, 295, 858, 1232], "latest": [104, 118, 129, 152, 392, 393, 407, 429, 522, 633, 635, 692, 746, 957, 958, 972, 1179, 1181], "from_panda": 104, "from_arrow": 104, "effici": [104, 116, 119, 200, 202, 295], "reli": 104, "therefor": [104, 168, 295, 513, 736, 746, 980, 1224], "becaus": [104, 124, 168, 184, 187, 205, 207, 264, 281, 295, 473, 785, 788, 846, 858, 868, 980, 1041, 1077, 1224], "convert": [104, 108, 118, 119, 125, 129, 152, 252, 253, 254, 255, 256, 259, 295, 325, 359, 367, 396, 399, 500, 501, 510, 533, 555, 605, 617, 633, 634, 635, 636, 638, 643, 746, 782, 858, 883, 896, 928, 961, 964, 1068, 1069, 1151, 1163, 1179, 1180, 1181, 1182, 1184, 1193, 1203, 1204, 1205, 1206, 1214, 1224], "panda": [104, 108, 136, 184, 257, 295, 385, 386, 653, 746, 785, 858, 950, 951, 1206, 1207, 1224], "pd": [104, 108, 653, 746, 1206, 1207, 1224], "df_pd": 104, "dfi": [104, 152], "clone": [105, 106, 107, 108, 109, 158, 256, 257, 295, 766, 858, 901, 1204, 1205, 1206, 1214, 1224], "dimension": [105, 107, 109, 256, 295, 858, 1224], "infer_schema_length": [106, 109, 114, 115, 119, 123, 128, 132, 295, 606, 607, 858, 1152, 1153], "NOT": [106, 200, 295, 501, 520, 1231], "typic": [106, 116, 133, 207, 295, 372, 861, 933, 1077, 1224], "clearer": 106, "partial": [106, 114, 128, 295, 858], "mani": [106, 109, 116, 117, 170, 295, 606, 607, 867, 986, 1152, 1153, 1224], "scan": [106, 109, 114, 115, 128, 129, 130, 131, 132, 133, 134, 184, 185, 187, 188, 231, 295, 565, 746, 777, 785, 786, 788, 789, 790, 797, 813, 858], "slow": [106, 109, 114, 115, 128, 309, 357, 513, 567, 746, 846, 917, 1107, 1224], "present": [106, 144, 446, 512, 629, 630, 746, 777, 858, 1076, 1214, 1224], "np": [107, 173, 256, 295, 431, 649, 746, 780, 858, 993, 1007, 1012, 1016, 1017, 1196, 1224], "ndarrai": [107, 173, 256, 295, 431, 649, 746, 780, 858, 921, 993, 1120, 1121, 1124, 1196, 1205, 1224], "numpi": [107, 136, 161, 201, 233, 234, 253, 256, 257, 295, 538, 539, 567, 746, 858, 1007, 1012, 1016, 1017, 1086, 1087, 1107, 1205, 1206, 1214, 1224], "columnar": [107, 109, 201, 233, 295], "interpret": [107, 109, 114, 115, 128, 295, 858], "yield": [107, 109, 114, 115, 116, 128, 168, 170, 261, 295, 545, 746, 858, 867, 980, 986, 1224], "conclus": [107, 109, 295, 858], "nan_to_nul": [108, 295, 858, 1224], "include_index": 108, "instal": [108, 114, 115, 117, 120, 122, 126, 161, 256, 257, 295, 821, 858, 1206, 1224], "nan": [108, 137, 138, 139, 140, 144, 152, 171, 257, 295, 362, 363, 413, 414, 422, 433, 435, 440, 450, 452, 453, 454, 459, 508, 514, 527, 538, 539, 540, 541, 567, 655, 678, 746, 778, 858, 870, 874, 922, 923, 988, 1016, 1017, 1086, 1087, 1107, 1205, 1206, 1224, 1232], "pd_df": 108, "pd_seri": 108, "tbl": [110, 112, 115], "reconstruct": 110, "repr": [110, 144, 146], "trim": 110, "whitespac": [110, 613, 621, 627, 628, 629, 630, 1159, 1167, 1173, 1174, 1175, 1176], "prompt": 110, "extract": [110, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 390, 391, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 549, 604, 605, 606, 607, 608, 624, 746, 929, 930, 931, 932, 935, 936, 938, 942, 943, 944, 945, 947, 948, 949, 952, 953, 955, 956, 959, 960, 962, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 1150, 1151, 1152, 1153, 1154], "to_init_repr": [110, 295, 1224], "truncat": [110, 114, 128, 182, 184, 187, 201, 233, 234, 253, 295, 785, 788, 808, 858], "identifi": [110, 213, 220, 262, 295, 803, 829, 858], "compound": [110, 234, 295, 861], "neither": [110, 119, 125, 235, 295, 501, 1069], "source_ac": 110, "source_cha": 110, "ident": [110, 158, 159, 295, 396, 563, 564, 746, 766, 767, 858, 901, 905, 961, 1104, 1105, 1224], "timestamp": [110, 184, 187, 295, 392, 393, 407, 701, 785, 788, 858, 957, 958, 972], "tor_id": 110, "nnel_id": 110, "\u03bc": [110, 144, 184, 201, 204, 231, 233, 234, 253, 266, 295, 364, 365, 366, 367, 372, 374, 378, 382, 385, 386, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 565, 568, 569, 571, 574, 575, 576, 633, 635, 693, 695, 701, 746, 785, 794, 813, 858, 861, 925, 926, 927, 928, 929, 930, 933, 934, 935, 941, 942, 947, 950, 951, 952, 954, 957, 958, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 975, 1179, 1181], "asia": [110, 861, 929, 930, 962], "tokyo": [110, 861], "123456780": 110, "9876543210": 110, "56": [110, 651, 746], "59": [110, 143, 366, 374, 382, 394, 692, 732, 733, 734, 861, 927, 947, 959], "663053": 110, "jst": [110, 861], "803065983": 110, "2055938745": 110, "38": [110, 144], "18": [110, 155, 214, 231, 295, 334, 351, 393, 407, 410, 440, 456, 471, 479, 497, 502, 532, 565, 674, 690, 733, 746, 762, 782, 804, 808, 810, 813, 838, 858, 861, 867, 975, 1039, 1047, 1065, 1070, 1181, 1224], "050545": 110, "source_actor_id": 110, "source_channel_id": 110, "to_list": [110, 231, 295, 1142, 1224], "datatypeclass": 111, "uint32": [111, 136, 157, 168, 295, 319, 370, 374, 378, 380, 382, 384, 387, 390, 391, 394, 408, 409, 431, 434, 464, 465, 482, 559, 597, 598, 609, 610, 649, 653, 746, 765, 858, 861, 878, 891, 931, 935, 942, 944, 947, 949, 952, 955, 956, 959, 973, 974, 979, 980, 1013, 1032, 1033, 1050, 1122, 1143, 1144, 1155, 1156, 1207, 1224], "regular": [111, 201, 232, 233, 266, 295, 346, 418, 460, 482, 596, 597, 598, 603, 604, 605, 618, 619, 697, 746, 861, 1027, 1050, 1142, 1143, 1144, 1149, 1150, 1151, 1164, 1165, 1224], "uint64": [111, 189, 295, 436, 464, 465, 558, 746, 997, 1032, 1033, 1099, 1224], "bigidx": 111, "read": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 170, 295, 430, 511, 736, 746, 771, 777, 782, 810, 858, 867, 986, 1224], "over": [112, 114, 115, 116, 118, 128, 144, 153, 170, 200, 201, 202, 207, 232, 233, 234, 261, 273, 276, 281, 295, 309, 357, 423, 510, 511, 513, 521, 523, 524, 525, 533, 556, 568, 569, 570, 571, 572, 574, 575, 576, 667, 681, 682, 685, 686, 699, 709, 710, 711, 721, 746, 841, 846, 861, 867, 868, 917, 986, 1077, 1108, 1109, 1111, 1115, 1224], "fetch": [112, 128, 205, 295, 766, 768, 790, 797, 858], "ideal": 112, "read_csv_batch": [112, 759], "tpch": [112, 115], "tables_scale_100": [112, 115], "lineitem": [112, 115, 117], "try_parse_d": [112, 114, 115, 128], "n_row": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 202, 295, 777, 858], "handler": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 771, 810, 858], "builtin": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 771, 810, 858], "stop": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 568, 569, 571, 574, 575, 576, 746, 926, 928, 934, 935, 942, 944, 947, 952, 958, 963], "textio": 114, "has_head": [114, 115, 119, 128], "new_column": [114, 115, 119, 128, 227, 228, 295], "comment_prefix": [114, 115, 128], "skip_row": [114, 115, 128], "missing_utf8_is_empty_str": [114, 115, 128], "ignore_error": [114, 115, 124, 128], "n_thread": [114, 115], "8192": 114, "csvencod": [114, 115, 128], "low_memori": [114, 115, 126, 128, 132, 133], "skip_rows_after_head": [114, 115, 128], "row_count_nam": [114, 115, 120, 122, 126, 128, 131, 132, 133], "row_count_offset": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sample_s": [114, 115], "eol_char": [114, 115, 128], "raise_if_empti": [114, 115, 119, 125, 128], "truncate_ragged_lin": [114, 128], "fsspec": [114, 115, 120, 122, 126, 129, 130, 131, 133, 136], "remot": [114, 115, 120, 122, 126], "autogener": [114, 115, 128], "column_x": [114, 115, 128], "enumer": [114, 115, 128, 202, 295], "shorter": [114, 115, 128, 501], "comment": [114, 115, 128], "instanc": [114, 115, 128, 133, 144, 146, 150, 157, 170, 176, 295, 335, 522, 568, 569, 570, 571, 572, 574, 575, 576, 681, 685, 699, 742, 746, 765, 799, 837, 858, 867, 891, 986, 1224], "escap": [114, 115, 128], "doesn": [114, 128, 184, 295, 412, 746, 785, 858, 978, 1214, 1224], "complet": [114, 116, 128, 1205, 1224], "wherea": [114, 116, 128, 231, 295, 393, 407, 538, 539, 565, 746, 790, 797, 813, 858, 958, 972, 1086, 1087, 1224], "would": [114, 115, 128, 319, 477, 513, 521, 556, 672, 746, 877, 1045, 1097, 1205, 1224], "prefer": [114, 115, 118, 128, 147, 170, 201, 207, 232, 233, 281, 295, 418, 513, 746, 858, 867, 986, 1077, 1224, 1232], "treat": [114, 115, 128, 346, 460, 482, 596, 598, 618, 619, 736, 746, 1027, 1050, 1142, 1144, 1164, 1165, 1224], "10000": [114, 202, 295], "might": [114, 115, 128, 148, 156, 256, 260, 295, 309, 513, 657, 746, 763, 823, 828, 858, 1206, 1224], "issu": [114, 115, 119, 128, 350, 351, 647, 746, 911, 912, 1194, 1224], "iso8601": [114, 115, 128], "succe": [114, 115, 128], "cpu": [114, 115], "system": [114, 115], "wrongli": 114, "done": [114, 115, 128, 134, 150, 154, 157, 204, 295, 308, 310, 335, 545, 668, 746, 761, 765, 794, 858, 891, 1224], "buffer": [114, 115, 116, 168, 201, 295, 980, 1224], "modifi": [114, 115, 128, 148, 150, 170, 192, 200, 201, 268, 295, 320, 392, 410, 596, 603, 604, 618, 746, 867, 957, 975, 986, 1142, 1149, 1150, 1164, 1183, 1185, 1186, 1224], "upper": [114, 115, 116, 168, 184, 187, 295, 340, 341, 441, 501, 658, 669, 690, 691, 693, 694, 705, 706, 733, 734, 746, 785, 788, 858, 902, 903, 980, 1003, 1075, 1211, 1224], "bound": [114, 115, 168, 184, 187, 295, 340, 341, 342, 441, 476, 477, 499, 501, 507, 658, 669, 690, 691, 693, 694, 705, 706, 733, 734, 746, 785, 788, 858, 902, 903, 904, 980, 1003, 1044, 1045, 1067, 1075, 1190, 1211, 1224], "lossi": [114, 115, 128], "decod": [114, 115, 606], "expens": [114, 115, 126, 128, 132, 133, 145, 147, 184, 185, 187, 188, 201, 207, 231, 232, 233, 234, 261, 262, 295, 309, 513, 565, 746, 785, 786, 788, 789, 813, 829, 858, 867, 986, 1077, 1224, 1232], "aggreg": [114, 115, 126, 176, 183, 184, 186, 187, 208, 210, 212, 215, 218, 222, 223, 224, 231, 246, 247, 264, 267, 274, 275, 278, 280, 295, 303, 424, 438, 509, 511, 513, 545, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 663, 664, 665, 666, 681, 682, 683, 684, 685, 686, 687, 688, 699, 704, 712, 713, 716, 717, 721, 729, 730, 746, 785, 786, 788, 789, 799, 800, 801, 802, 805, 806, 809, 813, 824, 825, 832, 839, 840, 843, 845, 858, 1000, 1106, 1107, 1108, 1109, 1111, 1114, 1115, 1116, 1224], "parser": 114, "regard": [114, 678], "sens": [114, 120, 122, 126, 131, 214, 266, 295, 545, 746, 804, 858], "particular": [114, 120, 122, 126, 131, 168, 295, 980, 1224], "usernam": [114, 117, 120, 122, 126, 131], "password": [114, 117, 120, 122, 126, 131], "skip": [114, 115, 119, 126, 128, 133, 264, 295, 868, 1077, 1224], "offset": [114, 115, 119, 120, 122, 126, 128, 131, 132, 133, 184, 185, 187, 188, 231, 244, 266, 272, 295, 364, 372, 385, 386, 389, 393, 407, 494, 565, 590, 622, 746, 785, 786, 788, 789, 813, 822, 837, 858, 925, 933, 950, 951, 954, 958, 972, 1062, 1136, 1168, 1181, 1224], "row_count": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sampl": [114, 115, 281, 295, 589, 746, 846, 1135, 1224], "estim": [114, 115, 154, 168, 295, 310, 416, 417, 457, 668, 746, 761, 858, 980, 982, 983, 1026, 1224], "alloc": [114, 115, 168, 225, 295, 746, 980, 1224], "encount": [114, 115, 128, 184, 187, 295, 538, 539, 606, 608, 678, 681, 699, 746, 785, 788, 858, 1086, 1087, 1152, 1154, 1224], "window": [114, 115, 128, 184, 185, 187, 188, 231, 295, 357, 393, 407, 415, 416, 417, 511, 513, 545, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 676, 723, 724, 746, 785, 786, 788, 789, 813, 858, 917, 958, 972, 981, 982, 983, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1224], "rn": [114, 115, 128], "go": [114, 115, 128, 601, 1147], "nodataerror": [114, 115, 119, 125, 128, 758], "lazili": [114, 115, 128, 129, 130, 131, 132, 133, 560, 746, 769, 858, 1101, 1224], "glob": [114, 115, 128, 131, 132, 133], "continu": [114, 126, 358, 553, 589, 746, 918, 1095, 1135, 1224], "benchmark": [114, 126], "50000": 115, "batchedcsvread": [115, 758], "upon": 115, "creation": 115, "gather": [115, 178, 250, 295, 432, 649, 650, 746, 783, 827, 858, 994, 1196, 1197, 1224], "next_batch": 115, "big": 115, "interest": 115, "seen_group": 115, "big_fil": 115, "df_current_batch": 115, "partition_df": 115, "partition_bi": [115, 202, 295], "as_dict": [115, 220, 295], "fh": 115, "write_csv": [115, 128, 295], "els": [115, 736], "connectionorcursor": 116, "iter_batch": 116, "cursor": 116, "client": 116, "odbc": 116, "driver": [116, 117], "packag": [116, 119], "establish": 116, "resultset": 116, "manner": 116, "veri": [116, 201, 261, 295, 513, 746, 846], "poor": 116, "trip": 116, "still": [116, 117], "intern": [116, 135, 201, 295], "exact": [116, 142, 144, 146, 243, 295, 631, 632, 633, 634, 635, 655, 746, 1179, 1180, 1181], "incom": 116, "execute_opt": 116, "read_arrow_batches_from_odbc": 116, "read_database_uri": 116, "wide": [116, 182, 213, 264, 295, 803, 858], "snowflak": [116, 117], "variou": [116, 295, 746, 858, 861, 1224], "facil": 116, "initialis": [116, 150, 858, 1231], "flight": 116, "flightsql": 116, "flight_sql": 116, "about": [116, 589, 596, 603, 604, 618, 746, 1135, 1142, 1149, 1150, 1164, 1224, 1232], "notabl": 116, "dremio": 116, "influxdb": 116, "notic": [116, 295, 858, 1224], "dbapi2": 116, "connectorx": [116, 117, 136], "optimis": [116, 207, 234, 281, 295, 858, 1077, 1123, 1224, 1232], "translat": 116, "conn": 116, "url": [116, 133, 603, 605, 1149, 1151], "test_data": 116, "user_conn": 116, "normalised_scor": 116, "uint8": [116, 141, 143, 157, 255, 256, 264, 295, 350, 351, 560, 647, 662, 746, 765, 858, 861, 911, 912, 1101, 1194, 1224, 1232], "parameteris": 116, "metric": 116, "alchemy_conn": 116, "qmark": 116, "variad": 116, "1000": [116, 119, 168, 255, 295, 378, 402, 967, 1203, 1224, 1232], "localhost": 116, "5432": 116, "uid": 116, "usr": 116, "pwd": 116, "max_text_s": 116, "max_binary_s": 116, "do_someth": 116, "partition_on": 117, "partition_rang": 117, "partition_num": 117, "dbreadengin": 117, "raw": 117, "warehous": 117, "role": 117, "transfer": 117, "document": [117, 119, 396, 399, 608, 633, 634, 635, 638, 742, 896, 961, 964, 1154, 1179, 1180, 1181, 1184], "redshift": 117, "mysql": 117, "mariadb": 117, "clickhous": 117, "oracl": 117, "bigqueri": 117, "pleas": [117, 184, 295, 690, 695, 785, 858], "github": 117, "sfu": 117, "connector": 117, "destin": 117, "develop": [117, 144, 146], "read_databas": 117, "explicitli": [117, 142, 144, 150, 728, 757], "test_tabl": 117, "compani": 117, "testdb": 117, "public": [117, 295, 746, 758, 858, 1224], "myrol": 117, "delta_table_opt": [118, 129], "root": [118, 129, 338, 456, 510, 523, 532, 533, 534, 535, 536, 537, 551, 593, 646, 745, 746, 898, 1138, 1224], "absolut": [118, 129, 130, 137, 138, 139, 140, 301, 415, 416, 417, 746, 863, 981, 982, 983, 1224], "avoid": [118, 233, 295, 304, 746], "year": [118, 129, 184, 204, 231, 266, 295, 376, 377, 389, 390, 393, 407, 408, 565, 568, 569, 570, 571, 572, 574, 575, 576, 689, 690, 691, 692, 693, 694, 733, 734, 746, 785, 794, 813, 858, 937, 938, 954, 955, 958, 972, 973], "2021": [118, 129, 157, 162, 182, 184, 266, 295, 633, 708, 765, 785, 858, 861, 929, 930, 938, 962, 1022, 1179, 1224], "aw": [118, 129, 133], "googl": [118, 129, 130], "service_account": [118, 129], "service_account_json_absolute_path": [118, 129], "az": [118, 129, 130], "adl": [118, 129, 130], "abf": [118, 129, 130], "azure_storage_account_nam": [118, 129, 130], "azure_storage_account_kei": [118, 129, 130], "without_fil": [118, 129, 130], "track": [118, 129, 130, 207, 295, 501, 1231], "sheet_id": [119, 125], "sheet_nam": [119, 125], "xlsx2csv": [119, 136], "openpyxl": [119, 136], "pyxlsb": [119, 136], "xlsx2csv_option": 119, "read_csv_opt": 119, "noreturn": [119, 125], "spreadsheet": [119, 125, 222, 295, 758], "xlsb": 119, "sheetnam": [119, 125], "nor": [119, 125, 235, 295], "fastest": 119, "read_csv": [119, 128], "refin": 119, "significantli": [119, 207, 281, 295, 1077, 1224, 1232], "potenti": [119, 128, 131, 132, 201, 232, 234, 295, 532], "unabl": 119, "julian": 119, "skip_empty_lin": 119, "influenc": [119, 777, 799, 858], "pipelin": 119, "correct": [119, 125, 416, 417, 457, 569, 570, 571, 572, 573, 574, 576, 589, 746, 798, 799, 858, 982, 983, 1026, 1113, 1135, 1224], "known": [119, 144, 501, 568, 569, 570, 571, 572, 574, 575, 576, 746, 841, 846, 1069], "better": [119, 207, 256, 281, 295, 513, 610, 746, 846, 1120, 1123, 1156, 1224], "detect": 119, "memory_map": [120, 126, 131], "greatli": [120, 131], "repeat": [120, 131, 557, 559, 719, 737, 746], "give": [120, 122, 126, 131, 132, 133, 213, 262, 295, 373, 457, 559, 655, 746, 758, 803, 829, 858, 934, 1026, 1224], "That": [120, 798, 799, 858], "filenam": 120, "my_fil": 120, "write_ipc": [120, 295], "read_ndjson": 123, "openoffic": 125, "od": 125, "parallelstrategi": [126, 133], "use_statist": [126, 133], "stabl": [126, 156, 161, 189, 235, 260, 295, 436, 506, 746, 763, 803, 823, 828, 858, 997, 1224], "row_group": [126, 133], "read_tabl": 126, "scan_parquet": [126, 134], "scan_pyarrow_dataset": [126, 133], "hive": [126, 133], "contribut": [126, 570, 572, 574, 576, 746], "with_column_nam": 128, "push": [128, 131, 132, 133, 134], "down": [128, 131, 132, 133, 134, 427, 746, 992, 1224], "therebi": [128, 131, 132], "realloc": [128, 131, 132, 170, 295, 867, 986, 1224], "headerless": 128, "my_long_fil": 128, "thing": [128, 135, 698, 707], "less": [128, 204, 295, 459, 508, 625, 746, 794, 858, 1171, 1232], "breezah": 128, "languag": [128, 184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "hard": [128, 798, 799, 858], "mydf": 128, "lambda": [128, 153, 176, 207, 221, 222, 281, 295, 309, 415, 416, 417, 501, 509, 510, 511, 513, 533, 681, 682, 699, 710, 711, 721, 746, 798, 799, 807, 846, 858, 868, 981, 982, 983, 1069, 1077, 1224], "lower": [128, 184, 187, 224, 287, 295, 340, 342, 441, 507, 510, 533, 554, 558, 572, 669, 690, 691, 693, 694, 705, 706, 720, 733, 734, 746, 785, 788, 809, 852, 858, 902, 904, 1003, 1075, 1096, 1099, 1112, 1211, 1224], "simpli": [128, 545, 681, 699, 746], "idx": [128, 184, 202, 295, 501, 785, 858, 1069], "uint16": [128, 350, 351, 647, 746, 861, 911, 912, 1194, 1224], "u16": [128, 144, 1232], "eu": [129, 130], "central": [129, 130, 457, 589, 746, 1026, 1135, 1224], "iceberg": [130, 758], "pyiceberg": [130, 136], "metadata": [130, 184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "secret": [130, 133], "adlf": 130, "my": [130, 134, 639, 1185], "gcp": [130, 133], "oauth": 130, "token": 130, "ya29": 130, "dr": 130, "afm": 130, "py": 130, "impl": 130, "fsspecfileio": 130, "hive_partit": 133, "retri": 133, "prune": [133, 799, 858], "read_parquet": 133, "east": 133, "allow_pyarrow_filt": 134, "comparison": 134, "dset": 134, "folder": 134, "04": [134, 157, 184, 266, 295, 366, 367, 385, 386, 392, 393, 396, 399, 400, 401, 404, 406, 410, 633, 693, 695, 765, 785, 858, 861, 928, 942, 947, 950, 951, 952, 957, 961, 964, 965, 966, 969, 971, 975, 1179], "seed": [135, 189, 235, 295, 436, 488, 556, 579, 585, 746, 997, 1056, 1097, 1119, 1131, 1224], "shuffl": [135, 235, 281, 295, 488, 579, 746, 846, 1056, 1119, 1224], "stdout": [136, 150, 182, 295, 524], "platform": 136, "maco": 136, "14": [136, 144, 174, 193, 207, 208, 210, 215, 228, 247, 250, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 352, 353, 354, 355, 356, 364, 440, 556, 617, 649, 650, 687, 688, 733, 746, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 861, 913, 914, 915, 916, 925, 958, 1004, 1024, 1067, 1124, 1163, 1196, 1197, 1214, 1224], "arm64": 136, "arm": 136, "64bit": [136, 558, 746, 1099, 1224], "main": [136, 769, 858], "oct": 136, "13": [136, 144, 158, 159, 171, 172, 181, 194, 205, 217, 231, 270, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 304, 371, 375, 379, 381, 383, 388, 395, 521, 523, 565, 636, 676, 681, 684, 699, 730, 735, 746, 766, 767, 778, 779, 796, 813, 834, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 932, 936, 943, 945, 948, 953, 958, 960, 972, 973, 1010, 1013, 1020, 1022, 1077, 1182, 1224], "54": [136, 419, 746, 1232], "clang": 136, "1500": [136, 145], "adbc_driver_manag": 136, "cloudpickl": 136, "matplotlib": [136, 808, 821, 858], "26": [136, 372, 408, 933], "pydant": 136, "check_row_ord": [137, 138], "check_column_ord": [137, 138], "check_dtyp": [137, 138, 139, 140], "check_exact": [137, 138, 139, 140], "rtol": [137, 138, 139, 140], "atol": [137, 138, 139, 140], "08": [137, 138, 139, 140, 144, 231, 295, 366, 393, 565, 633, 693, 695, 746, 813, 858, 861, 958, 972, 1179], "categorical_as_str": [137, 138, 139, 140], "nans_compare_equ": [137, 138, 139, 140], "assert": [137, 138, 139, 140, 142, 144, 146, 231, 295, 758, 861], "assertionerror": [137, 138, 139, 140], "compar": [137, 138, 139, 140, 167, 177, 295, 413, 414, 433, 435, 459, 508, 540, 541, 746, 896, 979, 1122, 1224], "unsort": [137, 138], "exactli": [137, 138, 139, 140, 143, 144, 146, 624, 625, 631, 632, 695, 1130, 1170, 1171, 1177, 1178, 1224], "toler": [137, 138, 139, 140, 204, 295, 794, 858], "inexact": [137, 138, 139, 140], "share": [137, 138, 139, 140, 168, 295, 746, 980, 1224], "assert_series_equ": [137, 140, 979, 1224, 1232], "assert_frame_not_equ": [137, 140], "pytest": [137, 139], "worthwhil": [137, 139], "shorten": [137, 139], "traceback": [137, 138, 139, 140], "tb": [137, 139, 168, 295, 980, 1224], "short": [137, 139], "tend": [137, 139], "unhelpfulli": [137, 139], "assert_frame_equ": [138, 139, 167, 295, 1232], "assert_series_not_equ": [138, 139], "check_nam": [139, 140], "searchstrategi": [141, 143, 144, 146], "null_prob": [141, 144, 146], "percentag": [141, 144, 146, 546, 746, 1091, 1224], "chanc": [141, 144, 146, 1232], "independ": [141, 142, 144, 146], "flag": [141, 295, 581, 596, 603, 604, 618, 746, 775, 798, 799, 858, 1125, 1142, 1149, 1150, 1164, 1224], "hypothesi": [141, 142, 143, 144, 145, 146, 1232], "sampled_from": [141, 1232], "unique_small_int": 141, "ccy": [141, 1232], "gbp": [141, 1232], "eur": [141, 162, 182, 295, 1232], "jpy": [141, 1232], "min_col": [142, 144], "max_col": [142, 144], "standalon": [142, 144, 861], "mincol": 142, "assign": [142, 184, 295, 501, 545, 556, 624, 625, 746, 785, 858, 1069, 1097, 1170, 1171, 1224], "minimum": [142, 143, 144, 146, 176, 215, 216, 295, 415, 416, 417, 527, 539, 548, 556, 716, 717, 746, 805, 858, 946, 981, 982, 983, 1087, 1093, 1097, 1224, 1232], "especi": [142, 564, 746, 777, 858, 1105, 1224], "test_unique_xyz": 142, "assert_someth": 142, "punctuat": 142, "test_special_char_colname_init": 142, "inner_dtyp": [143, 146], "select_from": [143, 146], "min_siz": [143, 144, 146, 1232], "max_siz": [143, 144, 146, 1232], "anoth": [143, 167, 177, 183, 295, 357, 365, 476, 499, 517, 520, 560, 746, 784, 836, 858, 917, 926, 979, 986, 1044, 1101, 1122, 1224], "randomli": 143, "innermost": 143, "2x": 143, "lst": 143, "11330": 143, "24030": 143, "116": 143, "zz": [143, 146], "uint8_pair": [143, 1232], "uint": [143, 1232], "zip": [143, 1232], "131": 143, "176": 143, "149": [143, 1232], "max_data_s": [144, 146], "include_col": 144, "allow_infin": [144, 146], "allowed_dtyp": [144, 146, 1232], "excluded_dtyp": [144, 146], "describ": [144, 182, 295, 1224], "desir": [144, 501, 1069], "n_chunk": [144, 146, 295, 867, 986, 1224], "randomis": 144, "onto": 144, "pct": 144, "preced": [144, 861], "disallow": [144, 146], "inf": [144, 146, 316, 358, 443, 447, 553, 655, 746, 874, 908, 918, 999, 1007, 1012, 1075, 1091, 1095, 1211, 1224], "exclud": [144, 146, 184, 295, 348, 351, 441, 746, 785, 858, 1003, 1022, 1224], "usag": [144, 146, 243, 295, 861, 1130, 1224], "deploi": [144, 146], "characterist": [144, 146], "concret": [144, 146], "test_repr": 144, "isinst": [144, 146, 295], "0x11f561580": 144, "0565": 144, "34715": 144, "5844": 144, "33": [144, 214, 295, 577, 746, 804, 858, 1112, 1224], "076854": 144, "3382": 144, "17": [144, 274, 567, 577, 701, 722, 733, 746, 839, 906, 908, 958, 1107, 1224, 1232], "48662": 144, "7540": 144, "836271": 144, "4063": 144, "06": [144, 157, 266, 295, 366, 384, 391, 392, 393, 407, 408, 765, 858, 861, 957, 958, 972], "39092": 144, "1889": 144, "41": [144, 575, 746, 1232], "874455": 144, "15836": 144, "1755e": 144, "575050513": 144, "profil": [145, 147, 768, 858], "balanc": [145, 147, 1232], "set_environ": 145, "polars_hypothesis_profil": [145, 147], "constructor": 146, "normal": [146, 184, 295, 412, 457, 589, 746, 785, 858, 978, 1026, 1135, 1224], "test_repr_is_valid_str": 146, "experi": 146, "create_list_strategi": [146, 1232], "polars_max_thread": 148, "behind": 148, "lock": 148, "reason": [148, 501, 511, 746], "temporarili": [148, 150, 184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "pyspark": 148, "udf": [148, 153, 207, 221, 276, 281, 295, 309, 513, 549, 667, 711, 746, 807, 841, 846, 858, 868, 1077, 1224], "recommend": [148, 201, 221, 295, 861], "easi": [150, 1232], "restor": 150, "restore_default": 150, "relat": [150, 861], "set_tbl_row": 150, "initi": [150, 681, 685, 699, 736], "whatev": 150, "were": [150, 208, 210, 215, 247, 295, 742], "enter": 150, "advantag": [150, 221, 295], "set_": 150, "set_verbos": 150, "do_various_th": 150, "cleaner": 150, "breviti": 150, "vein": 150, "durat": [150, 204, 266, 295, 364, 371, 372, 375, 379, 381, 383, 388, 395, 400, 401, 402, 403, 404, 405, 406, 410, 653, 690, 691, 693, 694, 733, 734, 746, 794, 858, 861, 925, 932, 933, 936, 943, 945, 948, 953, 960, 965, 966, 967, 968, 969, 970, 971, 975, 1207, 1224], "set_ascii_t": 150, "write_ascii_frame_to_stdout": 150, "sy": 150, "nan_as_nul": 152, "polarsdatafram": 152, "notimplementederror": 152, "num_row": 152, "get_column": [152, 258, 295], "dtypekind": 152, "inference_s": [153, 207, 295], "256": [153, 207, 295, 1091, 1224], "map_row": [153, 295], "tri": [153, 207, 295], "approxim": [154, 155, 295, 310, 668, 746, 761, 762, 858, 1232], "hyperloglog": [154, 295, 310, 668, 746, 761, 858], "algorithm": [154, 295, 310, 668, 746, 761, 858], "cardin": [154, 295, 310, 668, 746, 761, 858], "approx_n_uniqu": [155, 295, 746, 762, 858], "k": [156, 234, 260, 295, 333, 337, 457, 654, 746, 763, 828, 858, 890, 895, 1026, 1208, 1224], "intoexpr": [156, 183, 184, 185, 186, 187, 188, 231, 237, 238, 241, 245, 260, 270, 271, 274, 295, 308, 328, 331, 332, 441, 468, 469, 471, 479, 480, 489, 490, 491, 492, 497, 502, 545, 580, 582, 583, 592, 623, 624, 625, 631, 632, 664, 666, 672, 675, 676, 677, 678, 680, 681, 684, 685, 688, 692, 699, 713, 717, 722, 725, 728, 730, 746, 763, 784, 785, 786, 787, 788, 789, 813, 815, 816, 819, 823, 828, 834, 835, 839, 858, 885, 888, 889, 1003, 1048, 1127, 1169, 1170, 1171, 1177, 1178, 1224], "nulls_last": [156, 245, 260, 295, 319, 591, 746, 763, 823, 828, 858, 877, 1224], "smallest": [156, 260, 295, 333, 746, 763, 828, 858, 890, 1224], "largest": [156, 260, 295, 654, 746, 763, 828, 858, 1208, 1224], "wors": [156, 260, 295, 763, 823, 828, 858], "search": [156, 204, 260, 295, 501, 763, 794, 823, 828, 858], "top_k": [156, 295, 333, 746, 763, 858, 890, 1224], "columnnameorselector": [157, 163, 165, 213, 220, 222, 234, 254, 262, 263, 264, 295, 765, 772, 773, 803, 829, 830, 858], "strict": [157, 295, 329, 335, 596, 599, 617, 633, 634, 635, 638, 746, 765, 858, 886, 891, 979, 1122, 1142, 1145, 1163, 1179, 1180, 1181, 1184, 1224], "due": [157, 184, 204, 231, 234, 266, 295, 304, 335, 372, 389, 393, 407, 456, 532, 534, 535, 536, 537, 551, 565, 568, 569, 570, 571, 572, 574, 575, 576, 646, 690, 691, 693, 694, 733, 734, 746, 765, 785, 794, 813, 858, 891, 933, 954, 958, 972, 1224], "overflow": [157, 295, 335, 350, 351, 617, 647, 746, 765, 858, 891, 911, 912, 1163, 1194, 1224], "2020": [157, 162, 182, 231, 295, 367, 372, 378, 392, 396, 399, 400, 401, 402, 403, 404, 405, 406, 565, 633, 634, 635, 746, 765, 813, 858, 861, 928, 933, 957, 961, 964, 965, 966, 967, 968, 969, 970, 971, 1179, 1180, 1181], "u8": [157, 254, 255, 264, 295, 560, 662, 746, 765, 858, 861, 1101, 1201, 1224, 1232], "to_dict": [157, 295, 765, 858], "as_seri": [157, 252, 295, 765, 858, 918, 1095, 1224], "tempor": [157, 184, 185, 187, 188, 201, 231, 233, 234, 253, 295, 340, 441, 565, 568, 569, 570, 571, 572, 574, 575, 576, 746, 758, 765, 785, 786, 788, 789, 813, 858, 861, 902, 1003, 1022, 1224], "greater": [158, 204, 295, 433, 435, 589, 615, 616, 625, 641, 746, 794, 858, 1135, 1161, 1162, 1171, 1187, 1224], "cheap": [158, 159, 238, 271, 295, 766, 767, 816, 835, 858, 867, 901, 905, 1224], "deepcopi": [158, 295, 766, 858, 901, 1224], "appl": [160, 192, 203, 226, 229, 252, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 562, 601, 626, 746, 793, 811, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 1147, 1172], "banana": [160, 252, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 562, 601, 626, 746, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853], "orang": [160, 277, 278, 280, 282, 283, 285, 287, 288, 295, 842, 843, 845, 847, 848, 850, 852, 853], "pairwis": [161, 295], "pearson": [161, 295, 457, 589, 678, 746, 1026, 1135, 1224], "correl": [161, 295, 678, 723], "coeffici": [161, 295, 589, 746, 1135, 1224], "corrcoef": [161, 295], "percentil": [162, 295, 919, 1224], "summari": [162, 295, 919, 1224], "glimps": [162, 190, 295], "median": [162, 222, 295, 423, 570, 746, 836, 858, 919, 1110, 1224], "usd": [162, 182, 295, 1232], "null_count": [162, 165, 295, 357, 746, 858, 917, 919, 996, 1224], "266667": [162, 295], "666667": [162, 195, 267, 283, 295, 415, 746, 792, 832, 848, 858, 981, 1224], "std": [162, 295, 574, 746, 858, 919, 1114, 1224], "101514": [162, 295], "707107": [162, 295, 416, 574, 746, 982, 1224], "57735": [162, 295], "more_column": [163, 169, 239, 263, 295, 418, 697, 746, 772, 776, 818, 830, 858], "subset": [165, 218, 262, 295, 773, 829, 858], "preserv": [165, 173, 183, 186, 203, 207, 256, 257, 295, 362, 363, 424, 472, 586, 746, 773, 780, 793, 858, 922, 923, 990, 1040, 1132, 1206, 1224], "behavior": [165, 295, 476, 499, 512, 746, 773, 858, 867, 918, 1044, 1067, 1076, 1095, 1224], "all_horizont": [165, 295, 663, 773, 858], "is_nul": [165, 295, 746, 773, 858, 1224], "null_equ": [167, 177, 295, 979, 1122, 1224], "sizeunit": [168, 295, 980, 1224], "heap": [168, 295, 746, 980, 1224], "its": [168, 295, 366, 393, 407, 592, 736, 746, 896, 927, 958, 972, 980, 1224], "bitmap": [168, 295, 980, 1224], "structarrai": [168, 295, 980, 1224], "constant": [168, 231, 295, 364, 421, 746, 813, 858, 925, 980, 987, 1224], "unchang": [168, 295, 512, 560, 653, 746, 798, 799, 841, 846, 858, 980, 1076, 1101, 1207, 1224], "capac": [168, 243, 295, 980, 1130, 1224], "ffi": [168, 295, 980, 1224], "kb": [168, 295, 980, 1224], "mb": [168, 295, 980, 1224], "gb": [168, 295, 980, 1224], "revers": [168, 295, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 510, 533, 534, 535, 551, 646, 746, 858, 909, 910, 911, 912, 913, 914, 915, 916, 1224], "1_000_000": [168, 295, 980, 1224], "25888898": [168, 295], "689577102661133": [168, 295], "long": [169, 213, 264, 295, 776, 803, 858], "letter": [169, 279, 289, 295, 418, 604, 697, 746, 776, 844, 854, 858, 861, 1150], "onlin": [170, 295, 867, 986, 1224], "rerun": [170, 295, 867, 986, 1224], "conveni": [170, 295, 867, 986, 1224], "Not": [171, 295, 450, 452, 746, 778, 858], "fillnullstrategi": [172, 295, 423, 746, 779, 858, 989, 1224], "matches_supertyp": [172, 295, 779, 858], "forward": [172, 204, 241, 295, 385, 423, 429, 493, 582, 746, 779, 794, 819, 858, 950, 989, 1061, 1127, 1224], "consecut": [172, 295, 327, 423, 429, 595, 746, 779, 858, 989, 1141, 1224], "fill_nan": [172, 295, 746, 858, 1224], "intoexprcolumn": [173, 295, 333, 340, 341, 342, 488, 493, 546, 579, 582, 628, 629, 630, 654, 669, 690, 691, 693, 694, 705, 706, 733, 734, 736, 746, 780, 819, 858, 890, 902, 903, 904, 1056, 1061, 1091, 1174, 1175, 1176, 1208, 1224], "constraint": [173, 295, 456, 532, 534, 535, 536, 537, 551, 646, 736, 746, 780, 858], "is_in": [173, 295, 746, 1224], "get_column_index": [174, 295], "reduct": [176, 295], "supercast": [176, 295], "parent": [176, 295], "rule": [176, 295], "arithmet": [176, 295], "zip_with": [176, 295, 1224], "foo11": [176, 295], "bar22": [176, 295], "nth": [178, 250, 295, 432, 625, 650, 746, 783, 827, 858, 994, 1171, 1197, 1224], "th": [178, 250, 295, 432, 489, 589, 650, 746, 783, 827, 858, 994, 1057, 1135, 1197, 1224], "retriev": [179, 295, 464, 465, 642, 1032, 1033, 1188], "max_items_per_column": [182, 295], "max_colname_length": [182, 295], "return_as_str": [182, 295, 524], "preview": [182, 295], "few": [182, 295], "exce": [182, 295], "ellipsi": [182, 295], "head": [182, 206, 249, 295, 308, 461, 746, 797, 858, 1028, 1195, 1224], "tail": [182, 190, 295, 308, 589, 746, 858, 998, 1135, 1224], "more_bi": [183, 186, 220, 245, 295, 592, 746, 784, 787, 823, 858], "groupbi": [183, 222, 295, 309, 513, 667, 711, 746, 858], "consist": [183, 186, 220, 295, 633, 784, 787, 858, 867, 986, 1179, 1224], "regardless": [183, 186, 295, 608, 736, 1154], "agg": [183, 184, 187, 222, 231, 295, 303, 424, 426, 431, 434, 513, 591, 592, 661, 679, 711, 746, 768, 769, 775, 777, 784, 785, 786, 788, 789, 808, 813, 817, 821, 858, 861], "Or": [183, 184, 204, 231, 245, 266, 274, 295, 545, 565, 592, 690, 691, 693, 694, 733, 734, 736, 746, 784, 785, 794, 813, 823, 839, 858], "index_column": [184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "timedelta": [184, 185, 187, 188, 204, 231, 266, 295, 370, 389, 390, 393, 407, 409, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 794, 813, 858, 861, 939, 941, 946, 954, 958, 972, 1086, 1087, 1224], "period": [184, 185, 187, 188, 231, 295, 393, 407, 415, 416, 417, 546, 565, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 813, 858, 958, 972, 981, 982, 983, 1091, 1224], "include_boundari": [184, 187, 295, 785, 788, 858], "closedinterv": [184, 185, 187, 188, 231, 295, 441, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 813, 858, 1003, 1224], "label": [184, 295, 358, 553, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 746, 785, 808, 858, 918, 1095, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1224], "start_bi": [184, 187, 295, 785, 788, 858], "startbi": [184, 187, 295, 785, 788, 858], "check_sort": [184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "dynamicgroupbi": [184, 187, 295], "member": [184, 295, 785, 858, 1011, 1224], "descript": [184, 295, 785, 858], "ascend": [184, 185, 187, 188, 231, 295, 565, 569, 570, 571, 572, 574, 576, 746, 785, 786, 788, 789, 813, 858], "dynam": [184, 187, 295, 501, 568, 569, 570, 571, 572, 574, 575, 576, 746, 785, 788, 858, 1069], "matter": [184, 185, 187, 188, 201, 231, 233, 234, 253, 295, 565, 629, 630, 746, 785, 786, 788, 789, 813, 858], "interv": [184, 185, 187, 188, 231, 266, 295, 358, 393, 407, 441, 553, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 786, 788, 789, 813, 858, 918, 931, 934, 935, 942, 944, 947, 949, 952, 955, 956, 958, 963, 972, 973, 1003, 1095, 1224], "_lower_boundari": [184, 295, 785, 858], "_upper_boundari": [184, 295, 785, 858], "harder": [184, 187, 295, 785, 788, 858], "inclus": [184, 185, 187, 188, 231, 295, 441, 565, 568, 569, 570, 571, 572, 574, 575, 576, 623, 624, 669, 690, 691, 693, 694, 705, 706, 733, 734, 746, 785, 786, 788, 789, 813, 858, 1003, 1169, 1170, 1224], "datapoint": [184, 187, 295, 785, 788, 858], "boundari": [184, 295, 340, 341, 342, 746, 785, 858, 902, 903, 904, 999, 1224], "mondai": [184, 187, 295, 407, 409, 785, 788, 858, 972, 974], "tuesdai": [184, 187, 295, 785, 788, 858], "wednesdai": [184, 187, 295, 785, 788, 858], "thursdai": [184, 187, 295, 785, 788, 858], "fridai": [184, 187, 295, 785, 788, 858], "saturdai": [184, 187, 295, 785, 788, 858], "sundai": [184, 187, 295, 409, 785, 788, 858, 974], "earliest": [184, 187, 295, 392, 393, 407, 633, 635, 692, 785, 788, 858, 957, 958, 972, 1179, 1181], "weekli": [184, 187, 295, 407, 785, 788, 858, 972], "week": [184, 187, 204, 231, 266, 295, 389, 393, 407, 409, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 788, 794, 813, 858, 861, 954, 958, 972, 974], "sorted": [184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "verifi": [184, 185, 187, 188, 231, 295, 565, 746, 785, 786, 788, 789, 813, 858], "incorrectli": [184, 185, 187, 188, 231, 295, 501, 565, 746, 785, 786, 788, 789, 813, 858], "incorrect": [184, 185, 187, 188, 231, 295, 410, 565, 581, 746, 785, 786, 788, 789, 813, 841, 846, 858, 975, 1125, 1224], "roll": [184, 185, 188, 295, 385, 386, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 676, 723, 724, 746, 785, 786, 789, 858, 950, 951, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1224], "re": [184, 200, 256, 295, 385, 386, 785, 858, 950, 951, 1231], "come": [184, 295, 385, 386, 457, 501, 746, 759, 785, 857, 858, 950, 951, 1026, 1224], "1d": [184, 204, 231, 266, 295, 365, 389, 393, 401, 404, 407, 410, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 708, 733, 734, 746, 785, 794, 813, 858, 861, 926, 934, 941, 954, 958, 963, 966, 969, 972], "set_index": [184, 295, 785, 858], "resampl": [184, 295, 785, 858], "reset_index": [184, 295, 785, 858], "though": [184, 295, 742, 785, 858], "unlik": [184, 295, 785, 858], "evenli": [184, 295, 785, 858], "upsampl": [184, 295, 785, 858], "1n": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "1u": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "microsecond": [184, 201, 204, 231, 233, 234, 253, 266, 295, 389, 393, 402, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 785, 794, 808, 813, 858, 861, 954, 958, 967, 972], "1m": [184, 204, 231, 266, 295, 378, 389, 393, 402, 403, 405, 406, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 967, 968, 970, 971, 972], "minut": [184, 204, 231, 266, 295, 389, 393, 404, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 785, 794, 813, 858, 861, 954, 958, 969, 972], "1h": [184, 204, 231, 266, 295, 372, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 933, 935, 954, 958, 972], "hour": [184, 204, 231, 266, 295, 389, 393, 401, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 785, 794, 813, 858, 861, 954, 958, 966, 972], "1w": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "1mo": [184, 204, 231, 266, 295, 367, 385, 386, 389, 392, 393, 400, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 928, 949, 950, 951, 954, 955, 956, 957, 958, 965, 972, 973], "month": [184, 204, 231, 266, 295, 370, 385, 386, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 689, 690, 691, 692, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 931, 950, 951, 954, 958, 972], "1q": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "quarter": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "1y": [184, 204, 231, 266, 295, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 954, 958, 972], "1i": [184, 204, 231, 266, 295, 389, 565, 568, 569, 570, 571, 572, 574, 575, 576, 746, 785, 794, 813, 858, 954], "3d12h4m25": [184, 204, 231, 266, 295, 393, 407, 565, 690, 691, 693, 694, 733, 734, 746, 785, 794, 813, 858, 958, 972], "correspond": [184, 204, 231, 256, 266, 295, 377, 389, 393, 407, 513, 556, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 733, 734, 746, 768, 785, 794, 813, 858, 938, 954, 958, 972, 1097, 1105, 1224], "daylight": [184, 204, 231, 266, 295, 364, 372, 389, 393, 407, 565, 568, 569, 570, 571, 572, 574, 575, 576, 690, 691, 693, 694, 695, 733, 734, 746, 785, 794, 813, 858, 933, 954, 958, 972], "10i": [184, 231, 295, 565, 746, 785, 813, 858], "datetime_rang": [184, 295, 365, 367, 378, 385, 386, 389, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 410, 568, 569, 571, 574, 575, 576, 690, 746, 785, 858, 925, 926, 928, 933, 934, 935, 941, 942, 944, 947, 950, 951, 952, 954, 957, 958, 963, 965, 966, 967, 968, 969, 970, 971, 972], "30m": [184, 295, 393, 407, 785, 858, 958, 972], "lower_bound": [184, 295, 340, 342, 441, 746, 785, 858, 902, 904, 1003, 1211, 1224], "upper_bound": [184, 295, 340, 341, 441, 501, 746, 785, 858, 902, 903, 1003, 1075, 1224], "bys": [184, 295, 785, 858], "int_rang": [184, 264, 281, 295, 669, 785, 799, 846, 858], "2i": [184, 295, 785, 858], "3i": [184, 295, 785, 858], "a_agg_list": [184, 295, 785, 858], "rollinggroupbi": [185, 188, 231, 295], "group_bi": [186, 218, 222, 294, 295, 303, 424, 426, 431, 434, 511, 513, 591, 592, 661, 679, 711, 746, 768, 769, 775, 777, 787, 808, 821, 857, 858, 861], "group_by_dynam": [187, 231, 295, 788, 813, 858], "_lower_bound": [187, 295, 788, 858], "_upper_bound": [187, 295, 788, 858], "seed_1": [189, 295, 436, 746, 997, 1224], "seed_2": [189, 295, 436, 746, 997, 1224], "seed_3": [189, 295, 436, 746, 997, 1224], "hash": [189, 295, 746, 1224], "Its": [189, 295, 436, 746, 997, 1224], "u64": [189, 295, 436, 558, 746, 808, 858, 997, 1224], "10783150408545073287": [189, 295], "1438741209321515184": [189, 295], "10047419486152048166": [189, 295], "2047317070637311557": [189, 295], "ab": [190, 206, 249, 270, 295, 642, 644, 746, 834, 858, 998, 1028, 1195, 1224], "grown": [192, 295], "insert_column": [193, 295], "intermedi": [195, 295, 792, 858, 1232], "linear": [195, 224, 287, 295, 440, 466, 516, 554, 572, 676, 677, 720, 746, 792, 809, 852, 858, 1002, 1034, 1096, 1112, 1224], "333333": [195, 295, 456, 532, 746, 792, 858, 1091, 1116, 1224], "mask": [196, 198, 295, 329, 442, 444, 445, 448, 449, 455, 547, 548, 596, 599, 746, 886, 990, 996, 1003, 1005, 1008, 1009, 1014, 1015, 1023, 1092, 1093, 1123, 1142, 1145, 1215, 1224], "visual": [196, 198, 295], "scalar": [199, 207, 232, 295, 580, 667, 708, 711, 746, 1025, 1121, 1224], "With": [199, 241, 295, 493, 568, 569, 570, 571, 572, 574, 575, 576, 582, 746, 819, 858, 1025, 1061, 1127, 1224], "buffer_s": [201, 295], "fit": [201, 243, 264, 295, 584, 722, 746, 1129, 1130, 1224], "signific": [201, 207, 295, 309, 513, 578, 746, 1077, 1118, 1224], "4x": [201, 295], "materialis": [201, 202, 232, 233, 234, 295], "rows_by_kei": [201, 233, 295], "iter_row": [202, 232, 233, 234, 295], "17_500": [202, 295], "klmnoopqrstuvwxyz": [202, 295], "__name__": [202, 295], "7500": [202, 295], "15_000": [202, 295], "record_batch": [202, 295], "to_arrow": [202, 295, 1224], "to_batch": [202, 295], "date32": [202, 295], "large_str": [202, 251, 257, 295], "15000": [202, 295], "2500": [202, 295], "left_on": [203, 204, 265, 295, 793, 794, 831, 858], "right_on": [203, 204, 265, 295, 793, 794, 831, 858], "suffix": [203, 204, 237, 270, 274, 295, 304, 331, 450, 452, 453, 454, 510, 533, 534, 536, 537, 545, 551, 562, 601, 629, 632, 746, 793, 794, 815, 834, 836, 839, 858, 861, 888, 1147, 1178], "_right": [203, 204, 295, 793, 794, 858], "joinvalid": [203, 295, 793, 858], "semi": [203, 295, 793, 858], "anti": [203, 295, 793, 846, 858, 1120, 1123, 1224], "cross": [203, 295, 793, 858], "many_to_mani": [203, 295, 793, 858], "one_to_on": [203, 295, 793, 858], "one_to_mani": [203, 295, 793, 858], "many_to_on": [203, 295, 793, 858], "join_asof": [203, 295, 793, 858], "other_df": [203, 295], "by_left": [204, 295, 794, 858], "by_right": [204, 295, 794, 858], "asofjoinstrategi": [204, 295, 794, 858], "allow_parallel": [204, 295, 793, 794, 858], "force_parallel": [204, 295, 793, 794, 858], "asof": [204, 295, 794, 858], "rather": [204, 295, 524, 553, 564, 641, 746, 794, 858, 1095, 1105, 1187, 1224], "asof_join": [204, 295], "distanc": [204, 295, 794, 858, 999, 1224], "plan": [204, 205, 295, 764, 768, 771, 775, 782, 793, 794, 810, 817, 821, 838, 858], "forc": [204, 207, 281, 295, 501, 793, 794, 846, 858, 1077, 1224], "gdp": [204, 295, 794, 858], "2016": [204, 295, 794, 858], "2017": [204, 295, 794, 858], "2018": [204, 295, 392, 794, 858, 957], "2019": [204, 295, 794, 858], "jan": [204, 295, 794, 858], "1st": [204, 295, 794, 858], "4164": [204, 295, 794, 858], "4411": [204, 295, 794, 858], "4566": [204, 295, 794, 858], "4696": [204, 295, 794, 858], "set_sort": [204, 231, 266, 295, 565, 746, 794, 813, 858, 1224], "popul": [204, 295, 794, 858], "12th": [204, 295, 794, 858], "82": [204, 295, 794, 858], "66": [204, 265, 295, 575, 662, 746, 794, 831, 858, 1112, 1224], "83": [204, 295, 794, 858], "52": [204, 270, 295, 408, 577, 746, 794, 834, 858], "request": [205, 295], "describe_plan": [205, 295], "unoptim": [205, 295], "describe_optimized_plan": [205, 295], "show_graph": [205, 295, 858], "un": [205, 295], "graphviz": [205, 295, 821, 858], "much": [207, 264, 281, 295, 357, 476, 499, 513, 609, 610, 711, 746, 846, 917, 1044, 1067, 1077, 1155, 1156, 1224], "intens": [207, 281, 295, 545, 746, 1077, 1224], "materi": [207, 281, 295, 768, 808, 846, 858, 861, 1077, 1224], "parallelis": [207, 281, 295, 1077, 1224], "achiev": [207, 281, 295, 513, 610, 746, 918, 1077, 1095, 1156, 1224], "best": [207, 281, 295, 513, 746, 1077, 1224], "black": [207, 295, 328, 330, 331, 332], "arbitrarili": [207, 295], "rearrang": [207, 295], "transform": [207, 295, 511, 637, 639, 640, 746], "lru_cach": [207, 295, 513, 746, 1077, 1224], "column_1": [207, 261, 295], "axi": [208, 210, 213, 215, 247, 295, 670, 671, 803, 858], "max_horizont": [208, 295, 712], "null_strategi": [210, 247, 295], "nullstrategi": [210, 247, 295], "mean_horizont": [210, 295], "propag": [210, 247, 295, 414, 538, 539, 541, 595, 746, 1086, 1087, 1141, 1224], "spam": [210, 295, 604, 1150], "ignore_nul": [211, 248, 265, 295, 305, 307, 415, 416, 417, 595, 663, 665, 746, 865, 866, 981, 982, 983, 1141, 1214, 1224], "id_var": [213, 295, 803, 858], "value_var": [213, 295, 803, 858], "variable_nam": [213, 295, 803, 858], "value_nam": [213, 295, 803, 858], "unpivot": [213, 295, 803, 858], "massag": [213, 295, 803, 858], "measur": [213, 295, 803, 858], "merg": [214, 295, 804, 858], "caller": [214, 295, 501, 799, 804, 841, 846, 858], "respons": [214, 295, 804, 858], "steve": [214, 295, 804, 858], "elis": [214, 295, 804, 858], "bob": [214, 295, 804, 858], "ag": [214, 295, 804, 858], "anna": [214, 295, 804, 858], "megan": [214, 295, 804, 858], "thoma": [214, 295, 804, 858], "21": [214, 247, 295, 568, 569, 571, 574, 575, 576, 701, 746, 804, 858, 861], "min_horizont": [215, 295, 716, 725], "what": [218, 295, 1214, 1224], "pack": [218, 295], "expr_unique_subset": [218, 295], "df_nuniqu": [218, 295], "df_agg_nuniqu": [218, 295], "include_kei": [220, 234, 295], "offer": [221, 295, 549, 746, 807, 858], "fulli": [221, 235, 295], "cast_str_to_int": [221, 295, 807, 858], "col_nam": [221, 295, 807, 858], "tdf": [221, 295, 807, 858], "aggregate_funct": [222, 295], "pivotagg": [222, 295], "sort_column": [222, 295], "section": [222, 295, 596, 603, 604, 618, 690, 691, 693, 694, 733, 734, 1142, 1149, 1150, 1164], "predefin": [222, 295], "predict": [222, 225, 266, 295], "transpos": [222, 295], "discoveri": [222, 295], "col1": [222, 261, 295, 858, 1232], "col2": [222, 261, 295, 858, 1232], "col3": [222, 295, 1232], "tanh": [222, 295, 746, 1224], "998347": [222, 295], "964028": [222, 295], "999954": [222, 295], "unique_column_valu": [222, 295], "interpol": [224, 287, 295, 423, 516, 554, 572, 720, 746, 809, 852, 858, 1096, 1112, 1224], "rollinginterpolationmethod": [224, 287, 295, 554, 572, 720, 746, 809, 852, 858, 1096, 1112, 1224], "midpoint": [224, 287, 295, 554, 572, 720, 746, 809, 852, 858, 1096, 1112, 1224], "replace_column": [228, 295], "t_0": [231, 295, 565, 568, 569, 570, 571, 572, 574, 575, 576, 746, 813, 858], "t_1": [231, 295, 565, 568, 569, 570, 571, 572, 574, 575, 576, 746, 813, 858], "t_n": [231, 295, 565, 568, 569, 570, 571, 572, 574, 575, 576, 746, 813, 858], "43": [231, 295, 351, 565, 575, 746, 813, 858], "strptime": [231, 295, 392, 565, 746, 813, 858, 957], "2d": [231, 256, 295, 389, 565, 708, 746, 813, 858, 925, 931], "sum_a": [231, 295, 565, 746, 813, 858], "min_a": [231, 295, 565, 746, 813, 858], "max_a": [231, 295, 565, 746, 813, 858], "by_pred": [232, 295], "accord": [232, 295, 512, 553, 560, 690, 691, 693, 694, 733, 734, 746, 938, 1095, 1101, 1224], "mutual": [232, 295], "exclus": [232, 295, 662, 669, 705, 706, 746], "clariti": [232, 295], "toomanyrowsreturnederror": [232, 295, 758], "norowsreturnederror": [232, 295, 758], "inherit": [232, 295], "rowserror": [232, 295, 758], "high": [234, 295, 553, 746, 1095, 1224], "cost": [234, 295], "reoconstruct": [234, 295], "defaultdict": [234, 295], "assum": [234, 295, 798, 799, 841, 846, 858], "with_replac": [235, 295, 488, 579, 746, 1056, 1119, 1224], "ordereddict": [236, 295, 728, 814, 858], "named_expr": [237, 238, 270, 271, 295, 725, 728, 815, 816, 834, 835, 858], "threshold": [237, 295, 815, 858], "set_auto_structifi": [237, 270, 295, 815, 834, 858], "auto_structifi": [237, 270, 295, 815, 834, 858], "is_odd": [237, 295, 815, 858], "_is_odd": [237, 295, 815, 858], "sequenti": [238, 271, 295, 816, 835, 858], "fill_valu": [241, 242, 264, 295, 582, 583, 746, 819, 820, 858, 1127, 1128, 1224], "opposit": [241, 295, 493, 582, 746, 819, 858, 1061, 1127, 1224], "lag": [241, 295, 493, 582, 676, 746, 819, 858, 1061, 1127, 1224], "shift": [242, 295, 360, 470, 546, 583, 676, 746, 820, 858, 920, 1038, 1091, 1128, 1224], "shrink": [243, 295, 584, 746, 1129, 1130, 1224], "hold": [243, 295], "ddof": [246, 267, 295, 574, 576, 594, 660, 678, 680, 723, 724, 727, 735, 746, 824, 832, 858, 1114, 1116, 1139, 1213, 1224], "deviat": [246, 295, 416, 574, 594, 727, 746, 824, 858, 982, 1139, 1224], "degre": [246, 267, 295, 555, 574, 576, 594, 660, 671, 678, 680, 723, 724, 727, 735, 746, 824, 832, 858, 1114, 1116, 1139, 1213, 1224], "freedom": [246, 267, 295, 574, 576, 594, 660, 678, 680, 723, 724, 727, 735, 746, 824, 832, 858, 1114, 1116, 1139, 1213, 1224], "divisor": [246, 267, 295, 574, 576, 594, 660, 678, 680, 723, 724, 727, 735, 746, 824, 832, 858, 1114, 1116, 1139, 1213, 1224], "816497": [246, 295], "gather_everi": [250, 295, 650, 746, 827, 858, 1197, 1224], "mostli": [251, 295, 424, 746], "categoricaltyp": [251, 295], "fruit": [252, 295, 562, 601, 626, 746, 1147, 1172], "car": [252, 295, 562, 746], "beetl": [252, 295, 562, 746], "audi": [252, 295, 562, 746], "28": [252, 295, 302, 392, 410, 746, 957, 975, 1232], "300": [252, 295, 1108, 1109, 1111, 1224], "drop_first": [254, 295], "dummi": [254, 295, 1201, 1224], "foo_1": [254, 295], "foo_2": [254, 295], "bar_3": [254, 295], "bar_4": [254, 295], "ham_a": [254, 295], "ham_b": [254, 295], "instantiat": [255, 295, 1203, 1224], "from_repr": [255, 295, 1203, 1224], "df_from_str_repr": [255, 295], "eval": [255, 295, 696, 1203, 1224], "indexord": [256, 295], "fortran": [256, 295], "downstream": [256, 295, 581, 746, 1125, 1224], "applic": [256, 295, 513, 568, 569, 570, 571, 572, 574, 575, 576, 746], "prevent": [256, 295, 304, 350, 351, 456, 532, 647, 746, 858, 911, 912, 1194, 1224], "reshap": [256, 295, 474, 746, 1042, 1224], "ll": [256, 295], "u1": [256, 295], "f4": [256, 295], "view": [256, 295, 513, 746, 1205, 1224], "recarrai": [256, 295], "rec": [256, 295], "use_pyarrow_extension_arrai": [257, 295, 1206, 1224], "extens": [257, 295, 1206, 1224], "trigger": [257, 295, 746, 1206, 1224], "sent": [257, 295, 1205, 1206, 1224], "pandas_df1": [257, 295], "pandas_df2": [257, 295], "pandas_df2_pa": [257, 295], "na": [257, 295, 626, 1206, 1224], "four": [259, 295], "five": [259, 295, 1232], "bottom_k": [260, 295, 654, 746, 828, 858, 1208, 1224], "header_nam": [261, 295], "column_nam": [261, 295], "perhap": [261, 295], "column_2": [261, 295], "name_gener": [261, 295], "base_nam": [261, 295], "my_column_": [261, 295], "my_column_0": [261, 295], "my_column_1": [261, 295], "my_column_2": [261, 295], "new_id": [261, 295], "uniquekeepstrategi": [262, 295, 829, 858], "kept": [262, 295, 829, 858], "decompos": [263, 295, 830, 858], "t_a": [263, 295, 830, 858], "t_b": [263, 295, 830, 858], "t_c": [263, 295, 830, 858], "t_d": [263, 295, 830, 858], "womp": [263, 295, 830, 858], "t_": [263, 295, 830, 858], "t_struct": [263, 295, 830, 858], "step": [264, 295, 669, 705, 706], "unstackdirect": [264, 295], "pivot": [264, 295], "phase": [264, 295], "subject": [264, 295], "ascii_uppercas": [264, 295], "h": [264, 295, 302, 396, 399, 584, 633, 635, 638, 746, 1179, 1181, 1184], "x_0": [264, 295, 415, 416, 417, 746, 981, 982, 983, 1224], "x_1": [264, 295], "y_0": [264, 295, 415, 416, 417, 746, 981, 982, 983, 1224], "y_1": [264, 295], "z_0": [264, 295], "z_1": [264, 295], "include_nul": [265, 295, 831, 858], "syntact": [265, 295, 663, 665, 683, 697, 698, 702, 707, 712, 716, 719, 720, 725, 729, 737, 831, 858, 1138, 1224], "sugar": [265, 295, 663, 665, 683, 697, 698, 702, 707, 712, 716, 719, 720, 725, 729, 737, 831, 858, 1138, 1224], "coalesc": [265, 295, 633, 831, 858, 1179], "400": [265, 295, 831, 858, 1108, 1109, 1111, 1224], "600": [265, 295, 831, 858, 861], "700": [265, 295, 831, 858], "new_df": [265, 295, 831, 858], "time_column": [266, 295], "frequenc": [266, 295], "date_rang": [266, 295, 370, 373, 390, 398, 409, 931, 949, 955, 956, 973, 974], "forward_fil": [266, 295, 348, 351, 746], "varianc": [267, 295, 417, 457, 576, 660, 735, 746, 832, 858, 983, 1026, 1116, 1213, 1224], "grow": [268, 295], "not_": [270, 295, 451, 746, 834, 858, 1224], "not_c": [270, 295, 834, 858], "diff": [270, 295, 400, 401, 402, 403, 404, 405, 406, 489, 746, 834, 858, 965, 966, 967, 968, 969, 970, 971, 1057, 1224], "_diff": [270, 295, 834, 858], "row_nr": [272, 295, 560, 568, 569, 571, 574, 575, 576, 746, 837, 858, 1120, 1224], "named_agg": [274, 839], "_sum": [274, 839], "_mean_squar": [274, 839], "b_sum": [274, 839], "c_mean_squar": [274, 839], "sub": [276, 281, 322, 323, 324, 746, 880, 881, 882], "map_group": [276, 667, 841], "deem": [277, 679, 842], "nr": [279, 289, 844, 854], "triangl": [281, 846], "group_df": [281, 846], "maxim": [282, 317, 746, 847, 875, 1224], "833333": [283, 848], "minim": [285, 318, 465, 584, 592, 746, 850, 876, 1033, 1081, 1129, 1224], "overview": [295, 746, 758, 858, 1224, 1232], "frameinittyp": [295, 858], "entri": [295, 858, 1231], "mydatafram": 295, "df4": 295, "df5": 295, "df6": 295, "approx_uniqu": [295, 858], "corr": 295, "drop_in_plac": 295, "drop_nul": [295, 362, 746, 858, 922, 1224], "estimated_s": [295, 1224], "explod": [295, 426, 545, 561, 746, 858, 1102, 1224], "find_idx_by_nam": 295, "fold": [295, 522, 675, 681, 682, 685, 686, 721], "frame_equ": 295, "group_by_rol": [295, 858], "groupby_dynam": [295, 858], "groupby_rol": [295, 858], "hash_row": 295, "hstack": 295, "insert_at_idx": 295, "is_dupl": [295, 746, 1224], "is_empti": [295, 1224], "is_uniqu": [295, 746, 1224], "iter_column": 295, "iter_slic": 295, "melt": [295, 858], "merge_sort": [295, 858], "n_uniqu": [295, 746, 1224], "pipe": [295, 746, 858], "quantil": [295, 553, 572, 746, 858, 1095, 1112, 1224], "replace_at_idx": 295, "select_seq": [295, 858], "shift_and_fil": [295, 746, 858, 1224], "shrink_to_fit": [295, 1224], "take_everi": [295, 746, 858, 1224], "to_dummi": [295, 1224], "to_numpi": [295, 511, 746, 1224], "to_panda": [295, 1224], "to_struct": [295, 604], "unnest": [295, 358, 553, 563, 604, 605, 624, 625, 644, 746, 858, 918, 1069, 1095, 1104, 1170, 1171, 1224], "unstack": 295, "with_columns_seq": [295, 858], "write_avro": 295, "write_databas": 295, "write_delta": 295, "write_excel": 295, "write_ipc_stream": 295, "write_json": [295, 858], "write_parquet": 295, "cum_prod": [302, 355, 746, 915, 1224], "ghi": [302, 604, 746, 861, 1150], "94": [303, 746], "to_uppercas": [304, 536, 605, 746], "confus": [305, 450, 452, 746], "kleen": [305, 307, 663, 665, 746, 865, 866, 1224], "bitwis": [306, 544, 662, 663, 664, 665, 666, 746], "upcast": [308, 746], "skip_nul": [309, 513, 746, 868, 1077, 1224], "pass_nam": [309, 513, 746], "mapelementsstrategi": [309, 513, 746], "thread_loc": [309, 513, 746], "map_el": [309, 511, 662, 746, 868, 1224], "unknown": [309, 513, 603, 708, 746, 1149], "stage": [309, 746], "code": [309, 328, 330, 331, 332, 513, 581, 746, 777, 796, 858, 1125, 1224], "gil": [309, 513, 746], "invers": [311, 312, 313, 314, 315, 316, 746, 869, 870, 871, 872, 873, 874, 1224], "cosin": [311, 312, 343, 344, 511, 746, 869, 870, 906, 907, 1224], "570796": [311, 313, 746, 869, 871, 1224], "hyperbol": [312, 314, 316, 344, 588, 652, 746, 870, 872, 874, 907, 1134, 1199, 1224], "sine": [313, 314, 511, 587, 588, 746, 871, 872, 1133, 1134, 1224], "881374": [314, 746, 872, 1224], "tangent": [315, 316, 651, 652, 746, 873, 874, 1198, 1199, 1224], "785398": [315, 670, 671, 746, 873, 1224], "arg_wher": [320, 746], "i8": [325, 500, 584, 719, 722, 737, 746, 883, 920, 1068, 1103, 1211, 1224], "seen": [327, 429, 746], "substr": [328, 331, 332, 596, 601, 618, 619, 623, 624, 625, 626, 861, 885, 888, 889, 1142, 1147, 1164, 1165, 1169, 1170, 1171, 1172], "ends_with": [328, 332, 596, 626, 861, 1172], "yellow": [328, 330, 331, 332], "x00": [328, 330, 331, 332], "xff": [328, 330, 331, 332], "contains_with_lit": 328, "contains_with_expr": 328, "transferencod": [329, 330, 599, 600, 886, 887, 1145, 1146], "hex": [329, 330, 599, 600, 886, 887, 1145, 1146], "base64": [329, 330, 599, 600, 886, 887, 1145, 1146], "code_encoded_hex": 330, "000000": 330, "ffff00": 330, "0000ff": 330, "anywher": [331, 332, 633, 634, 635, 1179, 1180, 1181], "ends_with_lit": 331, "ends_with_expr": 331, "starts_with_lit": 332, "starts_with_expr": 332, "complex": [333, 357, 654, 746, 890, 917, 1208, 1224], "frac": [333, 415, 416, 417, 589, 654, 746, 890, 981, 982, 983, 1135, 1208, 1224], "supersed": [334, 746], "to_fram": [336, 373, 393, 398, 407, 633, 918, 1095, 1120, 1123, 1170, 1171, 1179, 1224], "categoricalord": [337, 895], "lexic": [337, 861, 895, 897], "259921": [338, 746, 898, 1224], "587401": [338, 746], "numericliter": [340, 341, 342, 746, 902, 903, 904, 1224], "temporalliter": [340, 341, 342, 746, 902, 903, 904, 1224], "outsid": [340, 746, 902, 1224], "clip": [341, 342, 746, 903, 904, 1224], "543081": [344, 746, 907, 1224], "cotang": [345, 746, 908, 1224], "cumul": [347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 681, 682, 683, 684, 685, 686, 687, 688, 746, 909, 910, 911, 912, 913, 914, 915, 916, 1224], "cum_count_revers": [347, 746], "cum_max_revers": [348, 746], "cum_max_all_fil": [348, 746], "cum_min_revers": [349, 746], "cum_prod_revers": [350, 746], "cum_sum_revers": [351, 746], "value_cum_sum": [351, 746], "value_cum_sum_all_fil": [351, 746], "cum_count": [352, 746], "cum_max": [353, 746, 913, 1224], "cum_min": [354, 746, 914, 1224], "cum_sum": [356, 439, 645, 684, 687, 746, 791, 858, 916, 1025, 1224], "min_period": [357, 415, 416, 417, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 723, 724, 746, 917, 981, 982, 983, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1224], "slide": [357, 746, 917, 1224], "slot": [357, 360, 470, 746, 917, 920, 1038, 1224], "realli": [357, 746, 917, 1224], "visit": [357, 746, 917, 1224], "left_clos": [358, 553, 746, 918, 1095, 1224], "include_break": [358, 553, 746, 918, 1095, 1224], "bin": [358, 553, 662, 739, 746, 918, 999, 1095, 1218, 1224], "discret": [358, 360, 412, 470, 489, 553, 746, 918, 920, 978, 999, 1038, 1057, 1095, 1224], "plu": [358, 506, 746, 918, 1074, 1095, 1224], "endpoint": [358, 553, 568, 569, 570, 571, 572, 574, 575, 576, 746, 918, 1095, 1224], "observ": [358, 415, 416, 417, 553, 746, 918, 981, 982, 983, 1095, 1224], "fall": [358, 553, 564, 746, 918, 1003, 1095, 1105, 1224], "qcut": [358, 746, 918, 1224], "breakpoint": [358, 553, 746, 918, 1095, 1224], "brk": [358, 553, 746], "foo_bin": [358, 553, 746], "radian": [359, 670, 746], "720": [359, 555, 746], "540": [359, 555, 746], "360": [359, 555, 746], "180": [359, 555, 746], "null_behavior": [360, 470, 746, 920, 1038, 1224], "nullbehavior": [360, 470, 746, 920, 1038, 1224], "drop_nan": [363, 746, 923, 1224], "utc": [364, 367, 372, 392, 633, 635, 861, 925, 928, 933, 957, 1179, 1181], "usual": [364, 925], "vari": [364, 925, 1232], "rare": [364, 925], "countri": [364, 925], "switch": [364, 925], "samoa": [364, 925], "apia": [364, 925], "did": [364, 925], "2011": [364, 925], "dst_offset": [364, 925], "2012": [364, 925], "replace_time_zon": [364, 372, 929, 930, 962], "pacif": [364, 925], "11h": [364, 925], "13h": [364, 925], "lose": [365, 926], "time_unit_m": [365, 926], "time_unit_n": [365, 926], "naiv": [366, 927, 1181], "compon": [366, 394, 633, 635, 695, 927, 959, 1179, 1181], "resolv": 366, "tm": [366, 861], "456000": [366, 927], "101000": 366, "d1": 366, "d2": 366, "d3": 366, "europ": [367, 372, 392, 928, 933, 957], "london": [367, 372, 392, 928, 933, 957], "gmt": [367, 372, 392, 928, 933, 957], "bst": [367, 372, 392, 928, 933, 957], "weekdai": [370, 390], "ordinal_dai": [370, 409], "day_of_month": [370, 390, 409], "day_of_year": [370, 390, 409], "356": [370, 390, 409], "357": [370, 390, 409], "358": [370, 390, 409], "359": [370, 390, 409], "total_dai": [371, 932], "base_utc_offset": [372, 933], "0m": [372, 933], "epochtimeunit": [373, 701, 934], "unix": [373, 701, 934], "epoch_n": [373, 934], "epoch_": [373, 934], "978307200000000": [373, 398, 934, 963], "978307200": [373, 934], "978393600000000": [373, 398, 934, 963], "978393600": [373, 934], "978480000000000": [373, 398, 934, 963], "978480000": [373, 934], "2010": [374, 382, 861], "total_hour": [375, 936], "leap": [376, 389, 937, 954], "2002": [376, 389, 937, 954, 976], "iso": [377, 408, 409, 938, 973, 974], "1977": [377, 411], "1978": [377, 411], "1979": [377, 411], "calendar_year": [377, 411], "1976": [377, 411], "1_001": [378, 402, 403, 405], "002": [378, 402, 403, 405, 695, 967, 968, 970], "003": [378, 402, 403, 405], "3000": 378, "997": [378, 402, 403, 405], "997000": 378, "998": [378, 402, 403, 405], "998000": 378, "999": [378, 402, 403, 405, 861, 1232], "999000": [378, 861], "total_microsecond": [379, 943], "total_millisecond": [381, 945], "total_minut": [383, 948], "think": [385, 386, 950, 951], "vectoris": [385, 386, 950, 951], "tseri": [385, 386, 950, 951], "monthend": [385, 950], "rollforward": [385, 950], "monthbegin": [386, 951], "rollback": [386, 951], "total_nanosecond": [388, 953], "minu": [389, 954], "dictat": [389, 746, 954], "2005": [389, 954], "date_plus_1i": [389, 954], "1y2mo": [389, 954], "date_min": 389, "1998": [389, 954], "1999": [389, 861, 954], "2003": [389, 701, 954], "2004": [389, 954], "2006": [389, 954], "new_dat": 389, "ordin": [390, 556, 746, 955, 1097, 1224], "366": [390, 955], "use_earliest": [392, 407, 633, 635, 692, 957, 972, 1179, 1181], "ambigu": [392, 393, 407, 633, 635, 692, 957, 958, 972, 1179, 1181], "convert_time_zon": [392, 957], "london_timezon": [392, 957], "amsterdam": [392, 957], "london_to_amsterdam": [392, 957], "cet": [392, 957], "cest": [392, 957], "ts_local": [392, 957], "brussel": [392, 957], "half": [393, 415, 416, 417, 746, 958, 981, 982, 983, 1224], "localis": [393, 407, 958, 972], "dst": [393, 407, 958, 972], "cst": [393, 407, 958, 972], "cdt": [393, 407, 958, 972], "225": [393, 407], "10m": [393, 407, 958, 972], "milli": [394, 959], "micro": [394, 959], "456789": [394, 861, 959], "111110": [394, 959], "765431": [394, 959], "11111": [394, 959], "total_second": [395, 960], "to_str": [396, 961], "datetime_str": [396, 399], "timestamp_n": [398, 963], "timestamp_m": 398, "978307200000": 398, "978393600000": 398, "978480000000": 398, "strftime": [399, 964], "days_diff": 400, "hours_diff": 401, "microseconds_diff": 402, "milliseconds_diff": 403, "minutes_diff": 404, "1440": [404, 969], "nanoseconds_diff": 405, "seconds_diff": 406, "safe": [407, 558, 746, 958, 972, 1099, 1181, 1205, 1224], "truncate_str": 407, "truncate_td": 407, "53": [408, 973], "time_unit_u": 410, "32971": [410, 975], "32974": [410, 975], "32976": [410, 975], "iso_year": 411, "pk": [412, 746, 978, 1224], "probabl": [412, 553, 746, 978, 1095, 1224], "459148": [412, 746], "754888": [412, 746], "eq": [414, 746, 1224], "span": [415, 416, 417, 746, 981, 982, 983, 1224], "half_lif": [415, 416, 417, 746, 981, 982, 983, 1224], "adjust": [415, 416, 417, 589, 746, 981, 982, 983, 1135, 1224], "exponenti": [415, 416, 417, 419, 550, 746, 981, 982, 983, 984, 1224], "weight": [415, 416, 417, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 589, 746, 981, 982, 983, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1135, 1224], "decai": [415, 416, 417, 746, 981, 982, 983, 1224], "term": [415, 416, 417, 746, 981, 982, 983, 1224], "mass": [415, 416, 417, 746, 981, 982, 983, 1224], "gamma": [415, 416, 417, 746, 981, 982, 983, 1224], "foral": [415, 416, 417, 746, 981, 982, 983, 1224], "geq": [415, 416, 417, 746, 981, 982, 983, 1224], "theta": [415, 416, 417, 746, 981, 982, 983, 1224], "life": [415, 416, 417, 746, 981, 982, 983, 1224], "exp": [415, 416, 417, 746, 981, 982, 983, 1224], "ln": [415, 416, 417, 746, 981, 982, 983, 1224], "smooth": [415, 416, 417, 746, 981, 982, 983, 1224], "factor": [415, 416, 417, 653, 746, 981, 982, 983, 1207, 1224], "leq": [415, 416, 417, 746, 981, 982, 983, 1224], "imbal": [415, 416, 417, 746, 981, 982, 983, 1224], "ew": [415, 416, 417, 746, 981, 982, 983, 1224], "w_i": [415, 416, 417, 746, 981, 982, 983, 1224], "recurs": [415, 416, 417, 746, 981, 982, 983, 1224], "y_t": [415, 416, 417, 746, 981, 982, 983, 1224], "y_": [415, 416, 417, 746, 981, 982, 983, 1224], "x_t": [415, 416, 417, 746, 981, 982, 983, 1224], "x_2": [415, 416, 417, 746, 981, 982, 983, 1224], "428571": [415, 746, 981, 1224], "bia": [416, 417, 457, 573, 589, 746, 982, 983, 1026, 1113, 1135, 1224], "unbias": [416, 417, 746, 982, 983, 1224], "963624": [416, 746, 982, 1224], "928571": [417, 746, 983, 1224], "wildcard": [418, 681, 682, 685, 686, 699, 721, 746], "regex": [418, 519, 596, 597, 598, 601, 603, 604, 605, 618, 619, 626, 697, 746, 861, 1142, 1143, 1144, 1147, 1149, 1150, 1151, 1164, 1165, 1172], "aa": [418, 596, 697, 746, 1142], "ba": [418, 626, 697, 746, 861], "cc": [418, 697, 746], "718282": [419, 746], "389056": [419, 746], "59815": [419, 746], "expand": [420, 518, 519, 559, 746, 861, 985, 1224], "pythonliter": [421, 746, 987, 1078, 1081, 1224], "extrem": [421, 567, 746, 987, 1107, 1224], "group_col": [424, 661, 746], "g1": [424, 661, 746], "g2": [424, 661, 746], "lt": [424, 661, 746, 1224], "gte": [424, 661, 746], "exprlistnamespac": [426, 746], "divis": [428, 655, 746], "truediv": [428, 746], "9774092659964970114": [436, 746], "13614470193936745724": [436, 746], "1101441246220388612": [436, 746], "11638928888656214026": [436, 746], "13382926553367784577": [436, 746], "interpolationmethod": [440, 746, 1002, 1224], "regrid": [440, 746], "grid": [440, 746], "df_original_grid": [440, 746], "grid_point": [440, 746], "df_new_grid": [440, 746], "conflat": [441, 746], "finit": [443, 655, 678, 746, 1007, 1224], "occurr": [444, 445, 448, 449, 659, 746, 999, 1008, 1009, 1014, 1015, 1212, 1224], "is_first_distinct": [444, 746, 1008, 1224], "optional_memb": [446, 746, 1011, 1224], "infinit": [447, 655, 746, 1012, 1224], "is_last_distinct": [448, 746, 1014, 1224], "_isnan": [450, 746], "b_isnan": [450, 746], "negat": [451, 542, 746, 1089, 1224], "_is_not_nan": [452, 746], "b_is_not_nan": [452, 746], "_not_nul": [453, 746], "a_not_nul": [453, 746], "b_not_nul": [453, 746], "_isnul": [454, 746], "a_isnul": [454, 746], "b_isnul": [454, 746], "chain": [456, 532, 534, 535, 536, 537, 551, 646, 736, 746], "undo": [456, 525, 532, 534, 535, 551, 646, 746], "fisher": [457, 589, 746, 1026, 1135, 1224], "fourth": [457, 746, 1026, 1224], "subtract": [457, 645, 746, 1026, 1224], "distribut": [457, 589, 746, 1026, 1135, 1224], "elimin": [457, 746, 1026, 1224], "bias": [457, 589, 746, 1026, 1135, 1224], "scipi": [457, 589, 746, 1026, 1135, 1224], "stat": [457, 589, 746, 1026, 1135, 1224], "153061": [457, 746], "sublist": [464, 465, 467, 470, 475, 476, 477, 478, 480, 481, 489, 494, 498, 499, 501, 1011, 1032, 1033, 1035, 1038, 1043, 1044, 1045, 1046, 1048, 1049, 1057, 1062, 1066, 1067, 1069, 1224], "membership": [467, 1035], "number_of_two": 469, "set_differ": [471, 1039], "blindli": [473, 1041], "worth": [473, 1041], "enough": [473, 589, 746, 1041, 1135, 1224], "rank": [473, 678, 696, 746, 1041, 1224], "concat_list": [473, 696, 1041], "exprnamespac": 474, "flat": [474, 561, 746, 1042, 1102, 1224], "null_on_oob": [476, 499, 1044, 1067], "cheaper": [476, 499, 1044, 1067], "set_intersect": [479, 1047], "x_y": 480, "symmetr": [491, 497, 1059, 1065], "sdiff": 491, "taken": [494, 622, 1062, 1168], "set_symmetric_differ": [497, 1065], "n_field_strategi": [501, 1069], "tostructstrategi": [501, 1069], "first_non_nul": [501, 1069], "max_width": [501, 1069], "field_0": [501, 1069], "field_1": [501, 1069], "field_n": [501, 1069], "pre": [501, 513, 553, 719, 722, 737, 746, 1095, 1224], "obtain": 501, "ok": 501, "longest": 501, "n0": 501, "n1": 501, "set_union": [502, 1070], "logarithm": [504, 505, 506, 746, 1072, 1073, 1074, 1224], "584963": [504, 746], "30103": [505, 746], "60206": [505, 746], "natur": [506, 746, 1074, 1224], "693147": [506, 746], "098612": [506, 746], "386294": [506, 746], "lowest": [507, 746], "9223372036854775808": [507, 746], "agg_list": [509, 511, 746], "map_batch": [509, 709, 746, 798, 858], "keep_nam": [510, 746], "a_revers": [510, 533, 535, 562, 646, 746], "b_revers": [510, 533, 535, 562, 646, 746], "rstrip": [510, 533, 746], "_revers": [510, 533, 535, 562, 646, 746], "whole": [511, 591, 592, 603, 746, 846, 858, 1149], "elementwis": [511, 566, 567, 568, 569, 571, 575, 746, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1224], "third": [511, 746], "parti": [511, 746], "book": [511, 746], "bug": [511, 513, 746, 798, 799, 841, 846, 858, 1077, 1224], "func": [511, 746], "argmax": [511, 746], "remap": [512, 746, 1076, 1224], "lookup": [512, 560, 742, 746, 1076, 1101, 1224], "discourag": [513, 746], "loop": [513, 746], "a_times_2": [513, 746], "tip": [513, 746], "again": [513, 746], "behav": [513, 629, 630, 746, 867, 1224], "exprmetanamespac": [517, 520], "foo_bar2": [517, 520], "raise_if_undetermin": 521, "computeerror": [521, 617, 758, 1163], "e_filt": [521, 523], "e_sum_ov": [521, 523], "e_sum_slic": [521, 523], "tree": 524, "modulu": [528, 746], "xlog2": [530, 550, 746], "reverse_": [534, 551, 746], "reverse_a": [534, 551, 746], "reverse_b": [534, 551, 746], "lowercas": [536, 637, 1183], "uppercas": [537, 640, 1186], "to_lowercas": 537, "poison": [538, 539, 746, 1086, 1087, 1224], "nanmax": [538, 539, 746, 1086, 1087, 1224], "inequ": [540, 746], "ne": [541, 746, 1224], "more_expr": [545, 672, 675, 676, 677, 746], "mapping_strategi": [545, 746], "windowmappingstrategi": [545, 746], "group_to_row": [545, 746], "outcom": [545, 746], "group_dtyp": [545, 746], "warn": [545, 568, 569, 570, 571, 572, 574, 575, 576, 746], "flatten": [545, 746], "_max": [545, 746], "c_max": [545, 746], "_min": [545, 746], "c_min": [545, 746], "percent": [546, 746, 1091, 1224], "090909": [546, 746], "peak": [547, 548, 746, 1092, 1093, 1224], "extract_numb": [549, 746], "digit": [549, 577, 578, 604, 746, 1117, 1118, 1144, 1150, 1224, 1232], "scale_negative_even": [549, 746], "expon": [550, 746, 1224], "allow_dupl": [553, 746, 1095, 1224], "duplicateerror": [553, 746, 758, 1095, 1224], "happen": [553, 746, 1095, 1224], "cut": [553, 746, 1095, 1224], "566371": [555, 746], "424778": [555, 746], "283185": [555, 746], "141593": [555, 746, 869, 1224], "rankmethod": [556, 746, 1097, 1224], "ti": [556, 746, 1097, 1224], "competit": [556, 746, 1097, 1224], "highest": [556, 658, 678, 746, 858, 1097, 1224], "immedi": [556, 669, 673, 690, 691, 693, 694, 705, 706, 719, 722, 728, 733, 734, 737, 746, 1097, 1224], "_nodefault": [560, 746, 1101, 1224], "no_default": [560, 746, 1101, 1224], "country_cod": [560, 746, 1101, 1224], "fr": [560, 746, 1101, 1224], "de": [560, 746, 1101, 1224], "country_code_map": [560, 746, 1101, 1224], "ca": [560, 746, 1101, 1224], "canada": [560, 746, 1101, 1224], "germani": [560, 746, 1101, 1224], "franc": [560, 746, 1101, 1224], "unspecifi": [560, 746, 1101, 1224], "fruits_revers": [562, 746], "cars_revers": [562, 746], "rle": [564, 746, 1105, 1224], "themselv": [564, 746, 1105, 1224], "a_r": [564, 746], "ab_r": [564, 746], "window_s": [566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 723, 724, 746, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1224], "rolling_map": [566, 746, 1106, 1224], "multipli": [566, 567, 568, 569, 571, 574, 575, 576, 746, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1224], "rolling_sum": [567, 746, 1107, 1224], "nansum": [567, 746, 1107, 1224], "warn_if_unsort": [568, 569, 570, 571, 572, 574, 575, 576, 746], "travers": [568, 569, 571, 575, 746, 1108, 1109, 1111, 1114, 1115, 1116, 1224], "vector": [568, 569, 571, 575, 746, 1108, 1109, 1111, 1114, 1115, 1116, 1224], "5h": [568, 569, 570, 571, 572, 574, 575, 576, 746], "df_tempor": [568, 569, 571, 574, 575, 576, 746], "closur": [568, 569, 574, 575, 576, 746], "rolling_row_max": [568, 746], "2h": [568, 569, 571, 574, 575, 576, 746], "rolling_row_mean": [569, 746], "rolling_row_min": [571, 746], "625": [572, 746], "skew": [573, 746, 1113, 1224], "381802": [573, 746, 1113, 1224], "47033": [573, 746, 1113, 1224], "38180177416060584": [573, 746, 1113, 1224], "47033046033698594": [573, 746, 1113, 1224], "433013": [574, 746, 824, 858], "rolling_row_std": [574, 746], "rolling_row_sum": [575, 746], "39": [575, 701, 746], "63": [575, 746], "69": [575, 746], "1875": [576, 746, 832, 858], "rolling_row_var": [576, 746], "figur": [578, 746, 821, 858, 1118, 1224], "01234": [578, 746, 1118, 1224], "012": [578, 746, 1118, 1224], "1200": [578, 746, 1118, 1224], "searchsortedsid": [580, 746, 1121, 1224], "leftmost": [580, 746, 1121, 1224], "rightmost": [580, 746, 1121, 1224], "six": [580, 746], "extrema": [584, 746, 1129, 1224], "112": [584, 746, 1232], "129": [584, 746], "8589934592": [584, 746], "1073741824": [584, 746], "175201": [588, 746, 1134, 1224], "unimod": [589, 746, 1135, 1224], "skewtest": [589, 746, 1135, 1224], "speak": [589, 746, 1135, 1224], "g_1": [589, 746, 1135, 1224], "m_3": [589, 746, 1135, 1224], "m_2": [589, 746, 1135, 1224], "m_i": [589, 746, 1135, 1224], "sum_": [589, 746, 1135, 1224], "texttt": [589, 746, 1135, 1224], "k_3": [589, 746, 1135, 1224], "k_2": [589, 746, 1135, 1224], "sqrt": [589, 670, 671, 746, 1135, 1224], "343622": [589, 746], "value1": [592, 746], "value2": [592, 746], "attain": [592, 746], "414214": [593, 746, 1138, 1224], "sensit": [596, 604, 618, 1142, 1150, 1164], "ilmsuxu": [596, 603, 604, 618, 1142, 1149, 1150, 1164], "default_match": 596, "insensitive_match": 596, "crab": [596, 1142], "dog": [596, 637, 640, 677, 1142, 1183, 1186], "rab": [596, 1142], "success": [597, 598, 604, 1143, 1144, 1150], "overlap": [597, 598, 604, 1143, 1144, 1150], "bla": [598, 604, 1144, 1150], "asd": [598, 604, 1144, 1150], "678": [598, 604, 1144, 1150], "910t": [598, 604, 1144, 1150], "count_digit": 598, "dbc": [598, 1144], "3xy": [598, 1144], "1zy3": [598, 1144], "strings_hex": 600, "666f6f": [600, 1146], "626172": [600, 1146], "mango": [601, 626, 1147, 1172], "has_suffix": 601, "le": [601, 746, 1224], "nu": 601, "group_index": [603, 1149], "captur": [603, 605, 1149, 1151], "nthose": [603, 1149], "nodd": [603, 1149], "nthe": [603, 1149], "odd": 603, "vote": [603, 605, 1149, 1151], "ballon_dor": [603, 605, 1149, 1151], "404": [603, 605, 1149, 1151], "ref": [603, 605, 1149, 1151], "candid": [603, 605, 1149, 1151], "messi": [603, 605, 1149, 1151], "ronaldo": [603, 1149], "haystack": [604, 1150], "email": [604, 1150], "real": [604, 1150], "some_account": [604, 1150], "somewher": [604, 1150], "net": [604, 1150], "jkl": [604, 1150], "uvw": [604, 1150], "co": [604, 746, 1150, 1224], "uk": [604, 1150], "address": 604, "xi": [604, 1150], "insensit": [604, 618, 861, 1142, 1150, 1164], "quantifi": [604, 1150], "email_part": [604, 1150], "extracted_nr": 604, "910": [604, 1150], "unnam": [605, 1151], "weghorst": [605, 1151], "candi": 605, "json_path_match": [606, 1152], "jsonpath": [606, 608, 1152, 1154], "json_decod": [607, 1153], "json_path": [608, 1154], "json_val": [608, 1154], "len_char": [609, 614, 1155, 1160], "_o": [609, 610, 1155, 1156], "caf\u00e9": [609, 610, 1155, 1156], "345": [609, 610, 1155, 1156], "\u6771\u4eac": [609, 610, 1155, 1156], "n_byte": [609, 610], "n_char": [609, 610], "fill_char": [612, 615, 616, 620, 1158, 1161, 1162, 1166], "justifi": [612, 620, 1158, 1166], "pad_end": [612, 616, 1158, 1162], "strip_chars_start": [613, 629, 631, 1159], "pad": [615, 616, 641, 1161, 1162, 1187], "reach": [615, 616, 641, 1161, 1162, 1187], "pad_start": [615, 620, 641, 1161, 1166, 1187], "cow": [615, 616, 1161, 1162], "monkei": [615, 616, 1161, 1162], "hippopotamu": [615, 616, 1161, 1162], "zfill": [616, 662, 746, 1162], "radix": [617, 1163], "parseerror": [617, 1163], "becom": 617, "to_integ": [617, 1163], "silent": [617, 1163], "replace_al": [618, 1164], "citi": 618, "philadelphia": 618, "season": 618, "spring": 618, "summer": 618, "autumn": 618, "winter": 618, "weather": [618, 1164], "raini": [618, 1164], "sunni": [618, 1164], "cloudi": 618, "snowi": 618, "foggi": [618, 1164], "123abc": [618, 1164], "abc456": [618, 1164], "abcabc": [619, 1165], "123a123": [619, 1165], "bc": [619, 729, 1165], "strip_chars_end": [621, 630, 632, 1167], "subslic": [622, 1168], "pear": [622, 1168], "papaya": [622, 1168], "dragonfruit": [622, 1168], "s_slice": 622, "ear": [622, 1168], "aya": [622, 1168], "uit": [622, 1168], "ya": [622, 1168], "onf": [622, 1168], "foo_bar_baz": 623, "split_inclus": 623, "foo_": [623, 700], "bar_": 623, "a_1": [624, 1170, 1201, 1224], "d_4": [624, 1170], "rename_field": [624, 625, 918, 1095, 1170, 1171, 1224], "first_part": [624, 625, 1170, 1171], "second_part": [624, 625, 1170, 1171], "remaind": [625, 1171], "app": [626, 1172], "has_prefix": 626, "strip_char": [627, 1173], "nworld": 628, "foo_strip": 628, "ow": 628, "hell": [628, 1174], "rld": [628, 630, 1176], "word": [629, 630], "strip_suffix": [629, 631], "foo_strip_end": 629, "oldw": 629, "he": 629, "abcdeff": 629, "fed": 629, "strip_prefix": [630, 632], "tworld": [630, 1174, 1176], "foo_strip_start": 630, "wod": [630, 1176], "aabcdef": 630, "cba": 630, "foobar": [631, 632, 1177, 1178], "foofoobar": [631, 1177], "foobarbar": [632, 1178], "polarstemporaltyp": [633, 1179], "penalti": [633, 634, 635, 1179, 1180, 1181], "clean": [633, 634, 635, 1179, 1180, 1181], "beforehand": [633, 634, 635, 1179, 1180, 1181], "certainli": [633, 634, 635, 1179, 1180, 1181], "3f": [633, 635, 1179, 1181], "00z": [633, 635, 1179, 1181], "sun": [633, 1179], "jul": [633, 1179], "34": [633, 1179], "inference_length": [636, 1182], "3420": [636, 1182], "120134": [636, 1182], "3212": [636, 1182], "90": [636, 1182], "143": [636, 1182, 1232], "numbers_decim": 636, "variant": [637, 639, 640, 1013, 1224], "foo_low": 637, "titlecas": [639, 1185], "sing": [639, 1185], "welcom": [639, 1185], "THERE": [639, 1185], "NO": [639, 861, 1185], "foo_titl": 639, "There": [639, 1185], "foo_upp": 640, "999999": [641, 692, 732, 733, 734, 861, 1187], "0123": [641, 1187], "cd": [642, 644], "struct_col": [642, 644], "www": 644, "xxx": 644, "yyi": 644, "zzz": 644, "obvious": 644, "structfieldnotfounderror": [644, 758], "761594": [652, 746, 1199, 1224], "replic": [653, 746, 1207, 1224], "vals_phys": [653, 746], "floordiv": [655, 746], "ieee": [655, 746], "754": [655, 746], "mathemat": [655, 696, 746], "undefin": [655, 746], "On": [655, 746], "operand": [655, 746], "infin": [655, 746], "value_count": [657, 746, 1224], "9223372036854775807": [658, 746], "binary_str": [662, 746], "250": [662, 746, 1109, 1224, 1232], "bin_x": [662, 746], "bin_i": [662, 746], "xor_xi": [662, 746], "bin_xor_xi": [662, 746], "00001010": [662, 746], "00001011": [662, 746], "00001000": [662, 746], "00000010": [662, 746], "11111010": [662, 746], "00000011": [662, 746], "249": [662, 746], "11111001": [662, 746], "01000010": [662, 746], "00000100": [662, 746], "70": [662, 746], "01000110": [662, 746], "AND": [663, 664, 861, 1205, 1224], "OR": [665, 666, 780, 858, 861], "any_horizont": 665, "returns_scalar": [667, 711, 746], "polarsintegertyp": [669, 705, 706], "arctan": [670, 671, 746, 1224], "angl": [670, 671], "plane": [670, 671], "rai": [670, 671], "tworoottwo": [670, 671], "arctan2d": 670, "atan2d": [670, 671], "atan2": [670, 671], "135": [670, 671], "356194": [670, 671], "arctan2": 671, "arg_tru": [673, 746, 1224], "mimic": 676, "a_lag_": 676, "a_rol": 676, "swim": 677, "walk": 677, "full_sent": 677, "correlationmethod": 678, "propagate_nan": 678, "spearman": 678, "544705": 678, "covari": [680, 724, 746], "acc": [681, 682, 685, 686, 699, 721], "include_init": [681, 685], "accumul": [681, 682, 685, 686, 699, 721], "fn": [681, 682, 685, 686, 699, 721], "new_valu": [681, 682, 685, 686, 699, 721], "cum_reduc": 681, "cumsum_horizont": 683, "cum_sum_horizont": 688, "granular": 690, "finer": 690, "permut": 690, "1985": [690, 693], "america": 693, "new_york": 693, "est": 693, "contrast": 695, "offset_bi": 695, "sometim": [695, 745], "tbl_width_char": 695, "120": 695, "add_week": 695, "add_dai": 695, "add_second": 695, "add_milli": 695, "add_hour": 695, "add_calendar_dai": 695, "add_calendar_month": 695, "mo": 695, "add_calendar_year": 695, "2024": [695, 861], "a_b_doubl": 696, "f_string": 700, "placehold": 700, "hello_": 700, "_world": 700, "_bar_": 700, "foo_a_bar_1": 700, "foo_b_bar_2": 700, "foo_c_bar_3": 700, "epoch": 701, "timestep": 701, "1666683077": 701, "1666683099": 701, "12345": [701, 899, 992, 1117, 1224], "12346": 701, "agg_group": [702, 746], "allow_object": 708, "valueexcept": 708, "test_func": 710, "list_of_seri": 711, "my_custom_aggreg": 711, "understood": 711, "power": [726, 1224], "a_a": 726, "a_txt": 726, "605551": 727, "605551275463989": 727, "my_struct": 728, "thens": 736, "elif": 736, "pick": 736, "met": 736, "implicitli": 736, "own": [736, 1232], "isn": 736, "arr": [738, 1205, 1216, 1224], "technic": 742, "further": [742, 1206, 1224], "columnfactori": 742, "more_nam": 742, "__call__": 742, "helper": 742, "__getattr__": 742, "idiomat": [742, 846], "quick": [742, 919, 1224, 1232], "prototyp": 742, "keystrok": 742, "drawback": 742, "readabl": 742, "modul": [745, 861, 1232], "and_": 746, "arcco": [746, 1224], "arccosh": [746, 1224], "arcsin": [746, 1224], "arcsinh": [746, 1224], "arctanh": [746, 1224], "arg_max": [746, 1224], "arg_min": [746, 1224], "arg_sort": [746, 1224], "arg_uniqu": [746, 1224], "backward_fil": 746, "cbrt": [746, 1224], "clip_max": [746, 1224], "clip_min": [746, 1224], "cosh": [746, 1224], "cot": [746, 1224], "cumcount": 746, "cummax": [746, 1224], "cummin": [746, 1224], "cumprod": [746, 1224], "cumsum": [746, 1224], "cumulative_ev": [746, 1224], "entropi": [746, 1224], "eq_miss": [746, 1224], "ewm_mean": [746, 1224], "ewm_std": [746, 1224], "ewm_var": [746, 1224], "extend_const": [746, 1224], "from_json": [746, 858], "ge": [746, 1224], "gt": [746, 1224], "implod": [746, 1224], "inspect": [746, 858], "is_between": [746, 1224], "is_finit": [746, 1224], "is_first": [746, 1224], "is_infinit": [746, 1224], "is_last": [746, 1224], "is_nan": [746, 1224], "is_not": 746, "is_not_nan": [746, 1224], "is_not_nul": [746, 1224], "kurtosi": [746, 1224], "log10": [746, 1224], "log1p": [746, 1224], "map_alia": 746, "map_dict": [746, 1224], "mod": 746, "mul": 746, "nan_max": [746, 1224], "nan_min": [746, 1224], "ne_miss": [746, 1224], "or_": 746, "pct_chang": [746, 1224], "peak_max": [746, 1224], "peak_min": [746, 1224], "pow": [746, 1224], "register_plugin": 746, "lib": [746, 1200, 1224], "is_elementwis": 746, "input_wildcard_expans": 746, "cast_to_supertyp": 746, "pass_name_to_appli": 746, "changes_length": 746, "plugin": 746, "highli": 746, "unsaf": 746, "unstabl": 746, "serializ": 746, "ran": 746, "reinterpret": [746, 1224], "repeat_bi": 746, "rle_id": [746, 1224], "rolling_appli": [746, 1224], "rolling_max": [746, 1224], "rolling_mean": [746, 1224], "rolling_median": [746, 1224], "rolling_min": [746, 1224], "rolling_quantil": [746, 1224], "rolling_skew": [746, 1224], "rolling_std": [746, 1224], "rolling_var": [746, 1224], "round_sig_fig": [746, 1224], "search_sort": [746, 1224], "shrink_dtyp": [746, 1224], "sin": [746, 1224], "sinh": [746, 1224], "sort_bi": 746, "tan": [746, 1224], "to_phys": [746, 896, 1224], "unique_count": [746, 1224], "xor": 746, "expos": 758, "miscellan": 758, "arrowerror": 758, "columnnotfounderror": 758, "invalidoperationerror": 758, "polarspanicerror": 758, "schemaerror": 758, "schemafieldnotfounderror": 758, "shapeerror": 758, "parametr": 758, "build_info": 758, "get_index_typ": 758, "show_vers": 758, "threadpool_s": 758, "sqlcontext": [758, 1231], "hit": [764, 858], "node": [764, 768, 791, 798, 799, 803, 808, 811, 858], "_eager": [768, 858], "explain": [768, 858], "purpos": [768, 777, 858], "set_streaming_chunk_s": [768, 858], "collect_all_async": [769, 858], "async": [769, 858], "stringio": [771, 782, 817, 858], "snippet": [773, 858], "Be": [777, 858], "fewer": [777, 858], "suscept": [777, 858], "deseri": [782, 810, 817, 858], "lazygroupbi": [784, 785, 786, 787, 788, 789, 813, 858], "other_lf": [793, 858], "validate_output_schema": [798, 799, 858], "streamabl": [798, 799, 803, 858], "past": [798, 799, 858], "paramount": [798, 799, 858], "elig": [798, 799, 858], "invari": [799, 858], "upheld": [799, 858], "100_000": [799, 858], "200000": [799, 858], "199998": [799, 858], "199996": [799, 858], "199994": [799, 858], "199992": [799, 858], "show_plot": [808, 858], "truncate_nod": [808, 858], "figsiz": [808, 821, 858], "gantt": [808, 858], "plot": [808, 821, 858], "group_by_partit": [808, 858], "470": [808, 858], "475": [808, 858], "1964": [808, 858], "swap": [811, 858], "dynamic_group_bi": [813, 858], "dataframescan": [817, 858], "output_schema": [817, 858], "run_parallel": [817, 858], "duplicate_check": [817, 858], "later": [817, 858], "output_path": [821, 858], "raw_output": [821, 858], "290994": [824, 858], "118034": [824, 858], "implicit": [831, 858], "new_lf": [831, 858], "extern": [836, 858], "lf_other": [836, 858], "afoo": [836, 858], "cfoo": [836, 858], "train_lf": [836, 858], "feature_0": [836, 858], "feature_1": [836, 858], "test_lf": [836, 858], "_train": [836, 858], "feature_0_train": [836, 858], "opaqu": 846, "my_column": 846, "lf5": 858, "lf6": 858, "read_json": 858, "sink_csv": 858, "sink_ipc": 858, "sink_ndjson": 858, "sink_json": 858, "sink_parquet": 858, "with_context": 858, "intuit": 861, "broadcast": 861, "emploi": 861, "complement": 861, "plenti": 861, "cde": 861, "fgg": 861, "jjk": 861, "lmn": 861, "opp": 861, "qqr": 861, "by_dtyp": 861, "as_expr": 861, "dispatch": 861, "1_234_500": 861, "5_000_555": 861, "1234500": 861, "5000555": 861, "by_nam": 861, "4_500_000": 861, "4500000": 861, "3265500": 861, "zap": 861, "2031": 861, "tstamp_tokyo": 861, "123465": 861, "tstamp_utc": 861, "2025": 861, "666000": 861, "tstamp": 861, "600000": 861, "123000": 861, "666": 861, "td1": 861, "987000": 861, "td2": 861, "td3": 861, "2m": [861, 947], "456m": 861, "7d": 861, "456789\u00b5": 861, "18d": 861, "999999\u00b5": 861, "23h": 861, "987m": 861, "14d": 861, "16h": 861, "39m": 861, "21d": 861, "456001\u00b5": 861, "expand_selector": 861, "colz": [861, 1232], "everyth": 861, "signed_integ": 861, "unsigned_integ": 861, "is_selector": 861, "obj": 861, "_selector_proxy_": 861, "include_categor": 861, "set_ord": [861, 897], "2345": 861, "3456": 861, "append_chunk": [867, 1224], "super": [867, 1224], "292432": [870, 1224], "549306": [874, 1224], "catnamespac": 892, "56789": [899, 992, 1117, 1224], "901234": [899, 992, 1117, 1224], "1232e": [906, 908, 1224], "1656e15": [908, 1224], "break_point_label": [918, 1095, 1224], "break_point": [918, 999, 1095, 1224], "category_label": [918, 1095, 1224], "series_num": [919, 1224], "581139": [919, 1224], "series_str": [919, 1224], "datetimeindex": [921, 1224], "datetimenamespac": 924, "ser": [929, 930, 962], "kathmandu": [929, 930, 962], "0545": [929, 930, 962], "500m": [942, 944, 952], "500000": 942, "500000000": 952, "date_minus_1y_2mon": 954, "165": [958, 972], "round_str": 958, "round_td": 958, "timestamp_u": 963, "978307200000000000": 963, "978393600000000000": 963, "978480000000000000": 963, "005": [978, 1224], "06293300616044681": [978, 1224], "65": [978, 1224], "8568409950394724": [978, 1224], "4000000": [980, 1224], "814697265625": [980, 1224], "bitmask": [996, 1224], "absenc": [996, 1224], "presenc": [996, 1205, 1224], "confirm": [996, 1224], "10734580197236529959": [997, 1224], "3022416320763508302": [997, 1224], "13756996518000038261": [997, 1224], "bin_count": [999, 1224], "a_count": [999, 1224], "is_signed_integ": [1013, 1224], "is_unsigned_integ": [1013, 1224], "listnamespac": 1029, "field_2": 1069, "n00": 1069, "n01": 1069, "n02": 1069, "2147483648": [1075, 1224], "166667": [1091, 1224], "142857": [1091, 1224], "200": [1108, 1109, 1111, 1224], "150": [1109, 1224], "350": [1109, 1224], "450": [1109, 1224], "dev": [1114, 1224], "527525": [1114, 1224], "57": [1117, 1224, 1232], "frequent": [1120, 1123, 1224], "scatter": [1124, 1224], "2246e": [1133, 1198, 1224], "stringnamespac": 1140, "orld": 1175, "tur": 1185, "structnamespac": 1190, "6331e16": [1198, 1224], "int64arrai": [1200, 1224], "a_2": [1201, 1224], "a_3": [1201, 1224], "s_from_str_repr": [1203, 1224], "zero_copy_onli": [1205, 1224], "writabl": [1205, 1224], "immut": [1205, 1224], "127": [1211, 1224], "seriesview": [1214, 1224], "arraylik": 1224, "dtype_if_empti": 1224, "position": 1224, "scenario": 1224, "chunk_length": 1224, "get_chunk": 1224, "has_valid": 1224, "hist": 1224, "is_boolean": 1224, "is_float": 1224, "is_integ": 1224, "is_numer": [1224, 1232], "is_sort": 1224, "is_tempor": 1224, "is_utf8": 1224, "new_from_index": 1224, "series_equ": 1224, "set_at_idx": 1224, "two_a": 1231, "__enter__": 1231, "__exit__": 1231, "exc_typ": 1231, "baseexcept": 1231, "exc_val": 1231, "exc_tb": 1231, "tracebacktyp": 1231, "primari": 1232, "guid": 1232, "machin": 1232, "xdist": 1232, "hardwar": 1232, "setup": 1232, "sec": 1232, "numeric_dtyp": 1232, "null_probabililti": 1232, "test_numer": 1232, "col0": 1232, "col4": 1232, "29096": 1232, "485": 1232, "2147483647": 1232, "8257e14": 1232, "7508": 1232, "37338": 1232, "7264": 1232, "16996": 1232, "121": 1232, "361": 1232, "63204": 1232, "1443e235": 1232, "conform": 1232, "ascii_lett": 1232, "id_char": 1232, "alphabet": 1232, "price": 1232, "min_valu": 1232, "max_valu": 1232, "test_price_calcul": 1232, "a101": 1232, "8nin": 1232, "qhoo": 1232, "714": 1232, "544": 1232, "i0e0": 1232, "0000": 1232, "test_miscellan": 1232, "235": 1232, "87": 1232, "186": 1232, "174": 1232, "179": 1232, "213": 1232, "221": 1232, "86": 1232, "255": 1232}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Float32"], [52, 0, 1, "", "Float64"], [53, 0, 1, "", "Int16"], [54, 0, 1, "", "Int32"], [55, 0, 1, "", "Int64"], [56, 0, 1, "", "Int8"], [60, 0, 1, "", "List"], [61, 0, 1, "", "Null"], [62, 0, 1, "", "Object"], [1231, 0, 1, "", "SQLContext"], [69, 0, 1, "", "StringCache"], [70, 0, 1, "", "Struct"], [71, 0, 1, "", "Time"], [72, 0, 1, "", "UInt16"], [73, 0, 1, "", "UInt32"], [74, 0, 1, "", "UInt64"], [75, 0, 1, "", "UInt8"], [76, 0, 1, "", "Unknown"], [77, 0, 1, "", "Utf8"], [78, 4, 1, "", "align_frames"], [663, 4, 1, "", "all"], [664, 4, 1, "", "all_horizontal"], [665, 4, 1, "", "any"], [666, 4, 1, "", "any_horizontal"], [667, 4, 1, "", "apply"], [668, 4, 1, "", "approx_n_unique"], [669, 4, 1, "", "arange"], [670, 4, 1, "", "arctan2"], [671, 4, 1, "", "arctan2d"], [672, 4, 1, "", "arg_sort_by"], [673, 4, 1, "", "arg_where"], [674, 4, 1, "", "avg"], [83, 4, 1, "", "build_info"], [675, 4, 1, "", "coalesce"], [84, 4, 1, "", "collect_all"], [85, 4, 1, "", "collect_all_async"], [86, 4, 1, "", "concat"], [676, 4, 1, "", "concat_list"], [677, 4, 1, "", "concat_str"], [678, 4, 1, "", "corr"], [679, 4, 1, "", "count"], [680, 4, 1, "", "cov"], [681, 4, 1, "", "cum_fold"], [682, 4, 1, "", "cum_reduce"], [683, 4, 1, "", "cum_sum"], [684, 4, 1, "", "cum_sum_horizontal"], [685, 4, 1, "", "cumfold"], [686, 4, 1, "", "cumreduce"], [687, 4, 1, "", "cumsum"], [688, 4, 1, "", "cumsum_horizontal"], [689, 4, 1, "", "date"], [690, 4, 1, "", "date_range"], [691, 4, 1, "", "date_ranges"], [692, 4, 1, "", "datetime"], [693, 4, 1, "", "datetime_range"], [694, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [695, 4, 1, "", "duration"], [696, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [697, 4, 1, "", "exclude"], [698, 4, 1, "", "first"], [699, 4, 1, "", "fold"], [700, 4, 1, "", "format"], [103, 4, 1, "", "from_arrow"], [104, 4, 1, "", "from_dataframe"], [105, 4, 1, "", "from_dict"], [106, 4, 1, "", "from_dicts"], [701, 4, 1, "", "from_epoch"], [107, 4, 1, "", "from_numpy"], [108, 4, 1, "", "from_pandas"], [109, 4, 1, "", "from_records"], [110, 4, 1, "", "from_repr"], [111, 4, 1, "", "get_index_type"], [702, 4, 1, "", "groups"], [703, 4, 1, "", "head"], [704, 4, 1, "", "implode"], [705, 4, 1, "", "int_range"], [706, 4, 1, "", "int_ranges"], [707, 4, 1, "", "last"], [708, 4, 1, "", "lit"], [709, 4, 1, "", "map"], [710, 4, 1, "", "map_batches"], [711, 4, 1, "", "map_groups"], [712, 4, 1, "", "max"], [713, 4, 1, "", "max_horizontal"], [714, 4, 1, "", "mean"], [715, 4, 1, "", "median"], [716, 4, 1, "", "min"], [717, 4, 1, "", "min_horizontal"], [718, 4, 1, "", "n_unique"], [719, 4, 1, "", "ones"], [720, 4, 1, "", "quantile"], [113, 4, 1, "", "read_avro"], [114, 4, 1, "", "read_csv"], [115, 4, 1, "", "read_csv_batched"], [116, 4, 1, "", "read_database"], [117, 4, 1, "", "read_database_uri"], [118, 4, 1, "", "read_delta"], [119, 4, 1, "", "read_excel"], [120, 4, 1, "", "read_ipc"], [121, 4, 1, "", "read_ipc_schema"], [122, 4, 1, "", "read_ipc_stream"], [123, 4, 1, "", "read_json"], [124, 4, 1, "", "read_ndjson"], [125, 4, 1, "", "read_ods"], [126, 4, 1, "", "read_parquet"], [127, 4, 1, "", "read_parquet_schema"], [721, 4, 1, "", "reduce"], [722, 4, 1, "", "repeat"], [723, 4, 1, "", "rolling_corr"], [724, 4, 1, "", "rolling_cov"], [128, 4, 1, "", "scan_csv"], [129, 4, 1, "", "scan_delta"], [130, 4, 1, "", "scan_iceberg"], [131, 4, 1, "", "scan_ipc"], [132, 4, 1, "", "scan_ndjson"], [133, 4, 1, "", "scan_parquet"], [134, 4, 1, "", "scan_pyarrow_dataset"], [725, 4, 1, "", "select"], [861, 6, 0, "-", "selectors"], [135, 4, 1, "", "set_random_seed"], [136, 4, 1, "", "show_versions"], [726, 4, 1, "", "sql_expr"], [727, 4, 1, "", "std"], [728, 4, 1, "", "struct"], [729, 4, 1, "", "sum"], [730, 4, 1, "", "sum_horizontal"], [731, 4, 1, "", "tail"], [148, 4, 1, "", "threadpool_size"], [732, 4, 1, "", "time"], [733, 4, 1, "", "time_range"], [734, 4, 1, "", "time_ranges"], [149, 4, 1, "", "using_string_cache"], [735, 4, 1, "", "var"], [736, 4, 1, "", "when"], [737, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[152, 1, 1, "", "__dataframe__"], [153, 1, 1, "", "apply"], [154, 1, 1, "", "approx_n_unique"], [155, 1, 1, "", "approx_unique"], [156, 1, 1, "", "bottom_k"], [157, 1, 1, "", "cast"], [158, 1, 1, "", "clear"], [159, 1, 1, "", "clone"], [160, 2, 1, "", "columns"], [161, 1, 1, "", "corr"], [162, 1, 1, "", "describe"], [163, 1, 1, "", "drop"], [164, 1, 1, "", "drop_in_place"], [165, 1, 1, "", "drop_nulls"], [166, 2, 1, "", "dtypes"], [167, 1, 1, "", "equals"], [168, 1, 1, "", "estimated_size"], [169, 1, 1, "", "explode"], [170, 1, 1, "", "extend"], [171, 1, 1, "", "fill_nan"], [172, 1, 1, "", "fill_null"], [173, 1, 1, "", "filter"], [174, 1, 1, "", "find_idx_by_name"], [175, 2, 1, "", "flags"], [176, 1, 1, "", "fold"], [177, 1, 1, "", "frame_equal"], [178, 1, 1, "", "gather_every"], [179, 1, 1, "", "get_column"], [180, 1, 1, "", "get_column_index"], [181, 1, 1, "", "get_columns"], [182, 1, 1, "", "glimpse"], [183, 1, 1, "", "group_by"], [184, 1, 1, "", "group_by_dynamic"], [185, 1, 1, "", "group_by_rolling"], [186, 1, 1, "", "groupby"], [187, 1, 1, "", "groupby_dynamic"], [188, 1, 1, "", "groupby_rolling"], [189, 1, 1, "", "hash_rows"], [190, 1, 1, "", "head"], [191, 2, 1, "", "height"], [192, 1, 1, "", "hstack"], [193, 1, 1, "", "insert_at_idx"], [194, 1, 1, "", "insert_column"], [195, 1, 1, "", "interpolate"], [196, 1, 1, "", "is_duplicated"], [197, 1, 1, "", "is_empty"], [198, 1, 1, "", "is_unique"], [199, 1, 1, "", "item"], [200, 1, 1, "", "iter_columns"], [201, 1, 1, "", "iter_rows"], [202, 1, 1, "", "iter_slices"], [203, 1, 1, "", "join"], [204, 1, 1, "", "join_asof"], [205, 1, 1, "", "lazy"], [206, 1, 1, "", "limit"], [207, 1, 1, "", "map_rows"], [208, 1, 1, "", "max"], [209, 1, 1, "", "max_horizontal"], [210, 1, 1, "", "mean"], [211, 1, 1, "", "mean_horizontal"], [212, 1, 1, "", "median"], [213, 1, 1, "", "melt"], [214, 1, 1, "", "merge_sorted"], [215, 1, 1, "", "min"], [216, 1, 1, "", "min_horizontal"], [217, 1, 1, "", "n_chunks"], [218, 1, 1, "", "n_unique"], [219, 1, 1, "", "null_count"], [220, 1, 1, "", "partition_by"], [221, 1, 1, "", "pipe"], [222, 1, 1, "", "pivot"], [223, 1, 1, "", "product"], [224, 1, 1, "", "quantile"], [225, 1, 1, "", "rechunk"], [226, 1, 1, "", "rename"], [227, 1, 1, "", "replace"], [228, 1, 1, "", "replace_at_idx"], [229, 1, 1, "", "replace_column"], [230, 1, 1, "", "reverse"], [231, 1, 1, "", "rolling"], [232, 1, 1, "", "row"], [233, 1, 1, "", "rows"], [234, 1, 1, "", "rows_by_key"], [235, 1, 1, "", "sample"], [236, 2, 1, "", "schema"], [237, 1, 1, "", "select"], [238, 1, 1, "", "select_seq"], [239, 1, 1, "", "set_sorted"], [240, 2, 1, "", "shape"], [241, 1, 1, "", "shift"], [242, 1, 1, "", "shift_and_fill"], [243, 1, 1, "", "shrink_to_fit"], [244, 1, 1, "", "slice"], [245, 1, 1, "", "sort"], [246, 1, 1, "", "std"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "sum_horizontal"], [249, 1, 1, "", "tail"], [250, 1, 1, "", "take_every"], [251, 1, 1, "", "to_arrow"], [252, 1, 1, "", "to_dict"], [253, 1, 1, "", "to_dicts"], [254, 1, 1, "", "to_dummies"], [255, 1, 1, "", "to_init_repr"], [256, 1, 1, "", "to_numpy"], [257, 1, 1, "", "to_pandas"], [258, 1, 1, "", "to_series"], [259, 1, 1, "", "to_struct"], [260, 1, 1, "", "top_k"], [261, 1, 1, "", "transpose"], [262, 1, 1, "", "unique"], [263, 1, 1, "", "unnest"], [264, 1, 1, "", "unstack"], [265, 1, 1, "", "update"], [266, 1, 1, "", "upsample"], [267, 1, 1, "", "var"], [268, 1, 1, "", "vstack"], [269, 2, 1, "", "width"], [270, 1, 1, "", "with_columns"], [271, 1, 1, "", "with_columns_seq"], [272, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Expr": [[301, 1, 1, "", "abs"], [302, 1, 1, "", "add"], [303, 1, 1, "", "agg_groups"], [304, 1, 1, "", "alias"], [305, 1, 1, "", "all"], [306, 1, 1, "", "and_"], [307, 1, 1, "", "any"], [308, 1, 1, "", "append"], [309, 1, 1, "", "apply"], [310, 1, 1, "", "approx_n_unique"], [311, 1, 1, "", "arccos"], [312, 1, 1, "", "arccosh"], [313, 1, 1, "", "arcsin"], [314, 1, 1, "", "arcsinh"], [315, 1, 1, "", "arctan"], [316, 1, 1, "", "arctanh"], [317, 1, 1, "", "arg_max"], [318, 1, 1, "", "arg_min"], [319, 1, 1, "", "arg_sort"], [320, 1, 1, "", "arg_true"], [321, 1, 1, "", "arg_unique"], [327, 1, 1, "", "backward_fill"], [333, 1, 1, "", "bottom_k"], [334, 1, 1, "", "cache"], [335, 1, 1, "", "cast"], [338, 1, 1, "", "cbrt"], [339, 1, 1, "", "ceil"], [340, 1, 1, "", "clip"], [341, 1, 1, "", "clip_max"], [342, 1, 1, "", "clip_min"], [343, 1, 1, "", "cos"], [344, 1, 1, "", "cosh"], [345, 1, 1, "", "cot"], [346, 1, 1, "", "count"], [347, 1, 1, "", "cum_count"], [348, 1, 1, "", "cum_max"], [349, 1, 1, "", "cum_min"], [350, 1, 1, "", "cum_prod"], [351, 1, 1, "", "cum_sum"], [352, 1, 1, "", "cumcount"], [353, 1, 1, "", "cummax"], [354, 1, 1, "", "cummin"], [355, 1, 1, "", "cumprod"], [356, 1, 1, "", "cumsum"], [357, 1, 1, "", "cumulative_eval"], [358, 1, 1, "", "cut"], [359, 1, 1, "", "degrees"], [360, 1, 1, "", "diff"], [361, 1, 1, "", "dot"], [362, 1, 1, "", "drop_nans"], [363, 1, 1, "", "drop_nulls"], [412, 1, 1, "", "entropy"], [413, 1, 1, "", "eq"], [414, 1, 1, "", "eq_missing"], [415, 1, 1, "", "ewm_mean"], [416, 1, 1, "", "ewm_std"], [417, 1, 1, "", "ewm_var"], [418, 1, 1, "", "exclude"], [419, 1, 1, "", "exp"], [420, 1, 1, "", "explode"], [421, 1, 1, "", "extend_constant"], [422, 1, 1, "", "fill_nan"], [423, 1, 1, "", "fill_null"], [424, 1, 1, "", "filter"], [425, 1, 1, "", "first"], [426, 1, 1, "", "flatten"], [427, 1, 1, "", "floor"], [428, 1, 1, "", "floordiv"], [429, 1, 1, "", "forward_fill"], [430, 1, 1, "", "from_json"], [431, 1, 1, "", "gather"], [432, 1, 1, "", "gather_every"], [433, 1, 1, "", "ge"], [434, 1, 1, "", "get"], [435, 1, 1, "", "gt"], [436, 1, 1, "", "hash"], [437, 1, 1, "", "head"], [438, 1, 1, "", "implode"], [439, 1, 1, "", "inspect"], [440, 1, 1, "", "interpolate"], [441, 1, 1, "", "is_between"], [442, 1, 1, "", "is_duplicated"], [443, 1, 1, "", "is_finite"], [444, 1, 1, "", "is_first"], [445, 1, 1, "", "is_first_distinct"], [446, 1, 1, "", "is_in"], [447, 1, 1, "", "is_infinite"], [448, 1, 1, "", "is_last"], [449, 1, 1, "", "is_last_distinct"], [450, 1, 1, "", "is_nan"], [451, 1, 1, "", "is_not"], [452, 1, 1, "", "is_not_nan"], [453, 1, 1, "", "is_not_null"], [454, 1, 1, "", "is_null"], [455, 1, 1, "", "is_unique"], [456, 1, 1, "", "keep_name"], [457, 1, 1, "", "kurtosis"], [458, 1, 1, "", "last"], [459, 1, 1, "", "le"], [460, 1, 1, "", "len"], [461, 1, 1, "", "limit"], [504, 1, 1, "", "log"], [505, 1, 1, "", "log10"], [506, 1, 1, "", "log1p"], [507, 1, 1, "", "lower_bound"], [508, 1, 1, "", "lt"], [509, 1, 1, "", "map"], [510, 1, 1, "", "map_alias"], [511, 1, 1, "", "map_batches"], [512, 1, 1, "", "map_dict"], [513, 1, 1, "", "map_elements"], [514, 1, 1, "", "max"], [515, 1, 1, "", "mean"], [516, 1, 1, "", "median"], [527, 1, 1, "", "min"], [528, 1, 1, "", "mod"], [529, 1, 1, "", "mode"], [530, 1, 1, "", "mul"], [531, 1, 1, "", "n_unique"], [538, 1, 1, "", "nan_max"], [539, 1, 1, "", "nan_min"], [540, 1, 1, "", "ne"], [541, 1, 1, "", "ne_missing"], [542, 1, 1, "", "not_"], [543, 1, 1, "", "null_count"], [544, 1, 1, "", "or_"], [545, 1, 1, "", "over"], [546, 1, 1, "", "pct_change"], [547, 1, 1, "", "peak_max"], [548, 1, 1, "", "peak_min"], [549, 1, 1, "", "pipe"], [550, 1, 1, "", "pow"], [551, 1, 1, "", "prefix"], [552, 1, 1, "", "product"], [553, 1, 1, "", "qcut"], [554, 1, 1, "", "quantile"], [555, 1, 1, "", "radians"], [556, 1, 1, "", "rank"], [557, 1, 1, "", "rechunk"], [558, 1, 1, "", "reinterpret"], [559, 1, 1, "", "repeat_by"], [560, 1, 1, "", "replace"], [561, 1, 1, "", "reshape"], [562, 1, 1, "", "reverse"], [563, 1, 1, "", "rle"], [564, 1, 1, "", "rle_id"], [565, 1, 1, "", "rolling"], [566, 1, 1, "", "rolling_apply"], [567, 1, 1, "", "rolling_map"], [568, 1, 1, "", "rolling_max"], [569, 1, 1, "", "rolling_mean"], [570, 1, 1, "", "rolling_median"], [571, 1, 1, "", "rolling_min"], [572, 1, 1, "", "rolling_quantile"], [573, 1, 1, "", "rolling_skew"], [574, 1, 1, "", "rolling_std"], [575, 1, 1, "", "rolling_sum"], [576, 1, 1, "", "rolling_var"], [577, 1, 1, "", "round"], [578, 1, 1, "", "round_sig_figs"], [579, 1, 1, "", "sample"], [580, 1, 1, "", "search_sorted"], [581, 1, 1, "", "set_sorted"], [582, 1, 1, "", "shift"], [583, 1, 1, "", "shift_and_fill"], [584, 1, 1, "", "shrink_dtype"], [585, 1, 1, "", "shuffle"], [586, 1, 1, "", "sign"], [587, 1, 1, "", "sin"], [588, 1, 1, "", "sinh"], [589, 1, 1, "", "skew"], [590, 1, 1, "", "slice"], [591, 1, 1, "", "sort"], [592, 1, 1, "", "sort_by"], [593, 1, 1, "", "sqrt"], [594, 1, 1, "", "std"], [645, 1, 1, "", "sub"], [646, 1, 1, "", "suffix"], [647, 1, 1, "", "sum"], [648, 1, 1, "", "tail"], [649, 1, 1, "", "take"], [650, 1, 1, "", "take_every"], [651, 1, 1, "", "tan"], [652, 1, 1, "", "tanh"], [653, 1, 1, "", "to_physical"], [654, 1, 1, "", "top_k"], [655, 1, 1, "", "truediv"], [656, 1, 1, "", "unique"], [657, 1, 1, "", "unique_counts"], [658, 1, 1, "", "upper_bound"], [659, 1, 1, "", "value_counts"], [660, 1, 1, "", "var"], [661, 1, 1, "", "where"], [662, 1, 1, "", "xor"]], "polars.Expr.arr": [[322, 1, 1, "", "max"], [323, 1, 1, "", "min"], [324, 1, 1, "", "sum"], [325, 1, 1, "", "to_list"], [326, 1, 1, "", "unique"]], "polars.Expr.bin": [[328, 1, 1, "", "contains"], [329, 1, 1, "", "decode"], [330, 1, 1, "", "encode"], [331, 1, 1, "", "ends_with"], [332, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[336, 1, 1, "", "get_categories"], [337, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[364, 1, 1, "", "base_utc_offset"], [365, 1, 1, "", "cast_time_unit"], [366, 1, 1, "", "combine"], [367, 1, 1, "", "convert_time_zone"], [368, 1, 1, "", "date"], [369, 1, 1, "", "datetime"], [370, 1, 1, "", "day"], [371, 1, 1, "", "days"], [372, 1, 1, "", "dst_offset"], [373, 1, 1, "", "epoch"], [374, 1, 1, "", "hour"], [375, 1, 1, "", "hours"], [376, 1, 1, "", "is_leap_year"], [377, 1, 1, "", "iso_year"], [378, 1, 1, "", "microsecond"], [379, 1, 1, "", "microseconds"], [380, 1, 1, "", "millisecond"], [381, 1, 1, "", "milliseconds"], [382, 1, 1, "", "minute"], [383, 1, 1, "", "minutes"], [384, 1, 1, "", "month"], [385, 1, 1, "", "month_end"], [386, 1, 1, "", "month_start"], [387, 1, 1, "", "nanosecond"], [388, 1, 1, "", "nanoseconds"], [389, 1, 1, "", "offset_by"], [390, 1, 1, "", "ordinal_day"], [391, 1, 1, "", "quarter"], [392, 1, 1, "", "replace_time_zone"], [393, 1, 1, "", "round"], [394, 1, 1, "", "second"], [395, 1, 1, "", "seconds"], [396, 1, 1, "", "strftime"], [397, 1, 1, "", "time"], [398, 1, 1, "", "timestamp"], [399, 1, 1, "", "to_string"], [400, 1, 1, "", "total_days"], [401, 1, 1, "", "total_hours"], [402, 1, 1, "", "total_microseconds"], [403, 1, 1, "", "total_milliseconds"], [404, 1, 1, "", "total_minutes"], [405, 1, 1, "", "total_nanoseconds"], [406, 1, 1, "", "total_seconds"], [407, 1, 1, "", "truncate"], [408, 1, 1, "", "week"], [409, 1, 1, "", "weekday"], [410, 1, 1, "", "with_time_unit"], [411, 1, 1, "", "year"]], "polars.Expr.list": [[462, 1, 1, "", "all"], [463, 1, 1, "", "any"], [464, 1, 1, "", "arg_max"], [465, 1, 1, "", "arg_min"], [466, 1, 1, "", "concat"], [467, 1, 1, "", "contains"], [468, 1, 1, "", "count_match"], [469, 1, 1, "", "count_matches"], [470, 1, 1, "", "diff"], [471, 1, 1, "", "difference"], [472, 1, 1, "", "drop_nulls"], [473, 1, 1, "", "eval"], [474, 1, 1, "", "explode"], [475, 1, 1, "", "first"], [476, 1, 1, "", "gather"], [477, 1, 1, "", "get"], [478, 1, 1, "", "head"], [479, 1, 1, "", "intersection"], [480, 1, 1, "", "join"], [481, 1, 1, "", "last"], [482, 1, 1, "", "len"], [483, 1, 1, "", "lengths"], [484, 1, 1, "", "max"], [485, 1, 1, "", "mean"], [486, 1, 1, "", "min"], [487, 1, 1, "", "reverse"], [488, 1, 1, "", "sample"], [489, 1, 1, "", "set_difference"], [490, 1, 1, "", "set_intersection"], [491, 1, 1, "", "set_symmetric_difference"], [492, 1, 1, "", "set_union"], [493, 1, 1, "", "shift"], [494, 1, 1, "", "slice"], [495, 1, 1, "", "sort"], [496, 1, 1, "", "sum"], [497, 1, 1, "", "symmetric_difference"], [498, 1, 1, "", "tail"], [499, 1, 1, "", "take"], [500, 1, 1, "", "to_array"], [501, 1, 1, "", "to_struct"], [502, 1, 1, "", "union"], [503, 1, 1, "", "unique"]], "polars.Expr.meta": [[517, 1, 1, "", "eq"], [518, 1, 1, "", "has_multiple_outputs"], [519, 1, 1, "", "is_regex_projection"], [520, 1, 1, "", "ne"], [521, 1, 1, "", "output_name"], [522, 1, 1, "", "pop"], [523, 1, 1, "", "root_names"], [524, 1, 1, "", "tree_format"], [525, 1, 1, "", "undo_aliases"], [526, 1, 1, "", "write_json"]], "polars.Expr.name": [[532, 1, 1, "", "keep"], [533, 1, 1, "", "map"], [534, 1, 1, "", "prefix"], [535, 1, 1, "", "suffix"], [536, 1, 1, "", "to_lowercase"], [537, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[595, 1, 1, "", "concat"], [596, 1, 1, "", "contains"], [597, 1, 1, "", "count_match"], [598, 1, 1, "", "count_matches"], [599, 1, 1, "", "decode"], [600, 1, 1, "", "encode"], [601, 1, 1, "", "ends_with"], [602, 1, 1, "", "explode"], [603, 1, 1, "", "extract"], [604, 1, 1, "", "extract_all"], [605, 1, 1, "", "extract_groups"], [606, 1, 1, "", "json_decode"], [607, 1, 1, "", "json_extract"], [608, 1, 1, "", "json_path_match"], [609, 1, 1, "", "len_bytes"], [610, 1, 1, "", "len_chars"], [611, 1, 1, "", "lengths"], [612, 1, 1, "", "ljust"], [613, 1, 1, "", "lstrip"], [614, 1, 1, "", "n_chars"], [615, 1, 1, "", "pad_end"], [616, 1, 1, "", "pad_start"], [617, 1, 1, "", "parse_int"], [618, 1, 1, "", "replace"], [619, 1, 1, "", "replace_all"], [620, 1, 1, "", "rjust"], [621, 1, 1, "", "rstrip"], [622, 1, 1, "", "slice"], [623, 1, 1, "", "split"], [624, 1, 1, "", "split_exact"], [625, 1, 1, "", "splitn"], [626, 1, 1, "", "starts_with"], [627, 1, 1, "", "strip"], [628, 1, 1, "", "strip_chars"], [629, 1, 1, "", "strip_chars_end"], [630, 1, 1, "", "strip_chars_start"], [631, 1, 1, "", "strip_prefix"], [632, 1, 1, "", "strip_suffix"], [633, 1, 1, "", "strptime"], [634, 1, 1, "", "to_date"], [635, 1, 1, "", "to_datetime"], [636, 1, 1, "", "to_decimal"], [637, 1, 1, "", "to_lowercase"], [638, 1, 1, "", "to_time"], [639, 1, 1, "", "to_titlecase"], [640, 1, 1, "", "to_uppercase"], [641, 1, 1, "", "zfill"]], "polars.Expr.struct": [[642, 1, 1, "", "field"], [643, 1, 1, "", "json_encode"], [644, 1, 1, "", "rename_fields"]], "polars.Float32": [[51, 1, 1, "", "__init__"]], "polars.Float64": [[52, 1, 1, "", "__init__"]], "polars.Int16": [[53, 1, 1, "", "__init__"]], "polars.Int32": [[54, 1, 1, "", "__init__"]], "polars.Int64": [[55, 1, 1, "", "__init__"]], "polars.Int8": [[56, 1, 1, "", "__init__"]], "polars.LazyFrame": [[761, 1, 1, "", "approx_n_unique"], [762, 1, 1, "", "approx_unique"], [763, 1, 1, "", "bottom_k"], [764, 1, 1, "", "cache"], [765, 1, 1, "", "cast"], [766, 1, 1, "", "clear"], [767, 1, 1, "", "clone"], [768, 1, 1, "", "collect"], [769, 1, 1, "", "collect_async"], [770, 2, 1, "", "columns"], [771, 1, 1, "", "deserialize"], [772, 1, 1, "", "drop"], [773, 1, 1, "", "drop_nulls"], [774, 2, 1, "", "dtypes"], [775, 1, 1, "", "explain"], [776, 1, 1, "", "explode"], [777, 1, 1, "", "fetch"], [778, 1, 1, "", "fill_nan"], [779, 1, 1, "", "fill_null"], [780, 1, 1, "", "filter"], [781, 1, 1, "", "first"], [782, 1, 1, "", "from_json"], [783, 1, 1, "", "gather_every"], [784, 1, 1, "", "group_by"], [785, 1, 1, "", "group_by_dynamic"], [786, 1, 1, "", "group_by_rolling"], [787, 1, 1, "", "groupby"], [788, 1, 1, "", "groupby_dynamic"], [789, 1, 1, "", "groupby_rolling"], [790, 1, 1, "", "head"], [791, 1, 1, "", "inspect"], [792, 1, 1, "", "interpolate"], [793, 1, 1, "", "join"], [794, 1, 1, "", "join_asof"], [795, 1, 1, "", "last"], [796, 1, 1, "", "lazy"], [797, 1, 1, "", "limit"], [798, 1, 1, "", "map"], [799, 1, 1, "", "map_batches"], [800, 1, 1, "", "max"], [801, 1, 1, "", "mean"], [802, 1, 1, "", "median"], [803, 1, 1, "", "melt"], [804, 1, 1, "", "merge_sorted"], [805, 1, 1, "", "min"], [806, 1, 1, "", "null_count"], [807, 1, 1, "", "pipe"], [808, 1, 1, "", "profile"], [809, 1, 1, "", "quantile"], [810, 1, 1, "", "read_json"], [811, 1, 1, "", "rename"], [812, 1, 1, "", "reverse"], [813, 1, 1, "", "rolling"], [814, 2, 1, "", "schema"], [815, 1, 1, "", "select"], [816, 1, 1, "", "select_seq"], [817, 1, 1, "", "serialize"], [818, 1, 1, "", "set_sorted"], [819, 1, 1, "", "shift"], [820, 1, 1, "", "shift_and_fill"], [821, 1, 1, "", "show_graph"], [57, 1, 1, "", "sink_csv"], [58, 1, 1, "", "sink_ipc"], [59, 1, 1, "", "sink_parquet"], [822, 1, 1, "", "slice"], [823, 1, 1, "", "sort"], [824, 1, 1, "", "std"], [825, 1, 1, "", "sum"], [826, 1, 1, "", "tail"], [827, 1, 1, "", "take_every"], [828, 1, 1, "", "top_k"], [829, 1, 1, "", "unique"], [830, 1, 1, "", "unnest"], [831, 1, 1, "", "update"], [832, 1, 1, "", "var"], [833, 2, 1, "", "width"], [834, 1, 1, "", "with_columns"], [835, 1, 1, "", "with_columns_seq"], [836, 1, 1, "", "with_context"], [837, 1, 1, "", "with_row_count"], [838, 1, 1, "", "write_json"]], "polars.List": [[60, 1, 1, "", "__init__"]], "polars.Null": [[61, 1, 1, "", "__init__"]], "polars.Object": [[62, 1, 1, "", "__init__"]], "polars.SQLContext": [[1231, 1, 1, "", "__enter__"], [1231, 1, 1, "", "__exit__"], [1231, 1, 1, "", "__init__"], [63, 1, 1, "", "execute"], [64, 1, 1, "", "register"], [65, 1, 1, "", "register_globals"], [66, 1, 1, "", "register_many"], [67, 1, 1, "", "tables"], [68, 1, 1, "", "unregister"]], "polars.Series": [[863, 1, 1, "", "abs"], [864, 1, 1, "", "alias"], [865, 1, 1, "", "all"], [866, 1, 1, "", "any"], [867, 1, 1, "", "append"], [868, 1, 1, "", "apply"], [869, 1, 1, "", "arccos"], [870, 1, 1, "", "arccosh"], [871, 1, 1, "", "arcsin"], [872, 1, 1, "", "arcsinh"], [873, 1, 1, "", "arctan"], [874, 1, 1, "", "arctanh"], [875, 1, 1, "", "arg_max"], [876, 1, 1, "", "arg_min"], [877, 1, 1, "", "arg_sort"], [878, 1, 1, "", "arg_true"], [879, 1, 1, "", "arg_unique"], [890, 1, 1, "", "bottom_k"], [891, 1, 1, "", "cast"], [892, 3, 1, "", "cat"], [898, 1, 1, "", "cbrt"], [899, 1, 1, "", "ceil"], [900, 1, 1, "", "chunk_lengths"], [901, 1, 1, "", "clear"], [902, 1, 1, "", "clip"], [903, 1, 1, "", "clip_max"], [904, 1, 1, "", "clip_min"], [905, 1, 1, "", "clone"], [906, 1, 1, "", "cos"], [907, 1, 1, "", "cosh"], [908, 1, 1, "", "cot"], [909, 1, 1, "", "cum_max"], [910, 1, 1, "", "cum_min"], [911, 1, 1, "", "cum_prod"], [912, 1, 1, "", "cum_sum"], [913, 1, 1, "", "cummax"], [914, 1, 1, "", "cummin"], [915, 1, 1, "", "cumprod"], [916, 1, 1, "", "cumsum"], [917, 1, 1, "", "cumulative_eval"], [918, 1, 1, "", "cut"], [919, 1, 1, "", "describe"], [920, 1, 1, "", "diff"], [921, 1, 1, "", "dot"], [922, 1, 1, "", "drop_nans"], [923, 1, 1, "", "drop_nulls"], [924, 3, 1, "", "dt"], [977, 3, 1, "", "dtype"], [978, 1, 1, "", "entropy"], [979, 1, 1, "", "equals"], [980, 1, 1, "", "estimated_size"], [981, 1, 1, "", "ewm_mean"], [982, 1, 1, "", "ewm_std"], [983, 1, 1, "", "ewm_var"], [984, 1, 1, "", "exp"], [985, 1, 1, "", "explode"], [986, 1, 1, "", "extend"], [987, 1, 1, "", "extend_constant"], [988, 1, 1, "", "fill_nan"], [989, 1, 1, "", "fill_null"], [990, 1, 1, "", "filter"], [991, 3, 1, "", "flags"], [992, 1, 1, "", "floor"], [993, 1, 1, "", "gather"], [994, 1, 1, "", "gather_every"], [995, 1, 1, "", "get_chunks"], [996, 1, 1, "", "has_validity"], [997, 1, 1, "", "hash"], [998, 1, 1, "", "head"], [999, 1, 1, "", "hist"], [1000, 1, 1, "", "implode"], [1001, 3, 1, "", "inner_dtype"], [1002, 1, 1, "", "interpolate"], [1003, 1, 1, "", "is_between"], [1004, 1, 1, "", "is_boolean"], [1005, 1, 1, "", "is_duplicated"], [1006, 1, 1, "", "is_empty"], [1007, 1, 1, "", "is_finite"], [1008, 1, 1, "", "is_first"], [1009, 1, 1, "", "is_first_distinct"], [1010, 1, 1, "", "is_float"], [1011, 1, 1, "", "is_in"], [1012, 1, 1, "", "is_infinite"], [1013, 1, 1, "", "is_integer"], [1014, 1, 1, "", "is_last"], [1015, 1, 1, "", "is_last_distinct"], [1016, 1, 1, "", "is_nan"], [1017, 1, 1, "", "is_not_nan"], [1018, 1, 1, "", "is_not_null"], [1019, 1, 1, "", "is_null"], [1020, 1, 1, "", "is_numeric"], [1021, 1, 1, "", "is_sorted"], [1022, 1, 1, "", "is_temporal"], [1023, 1, 1, "", "is_unique"], [1024, 1, 1, "", "is_utf8"], [1025, 1, 1, "", "item"], [1026, 1, 1, "", "kurtosis"], [1027, 1, 1, "", "len"], [1028, 1, 1, "", "limit"], [1029, 3, 1, "", "list"], [1072, 1, 1, "", "log"], [1073, 1, 1, "", "log10"], [1074, 1, 1, "", "log1p"], [1075, 1, 1, "", "lower_bound"], [1076, 1, 1, "", "map_dict"], [1077, 1, 1, "", "map_elements"], [1078, 1, 1, "", "max"], [1079, 1, 1, "", "mean"], [1080, 1, 1, "", "median"], [1081, 1, 1, "", "min"], [1082, 1, 1, "", "mode"], [1083, 1, 1, "", "n_chunks"], [1084, 1, 1, "", "n_unique"], [1085, 3, 1, "", "name"], [1086, 1, 1, "", "nan_max"], [1087, 1, 1, "", "nan_min"], [1088, 1, 1, "", "new_from_index"], [1089, 1, 1, "", "not_"], [1090, 1, 1, "", "null_count"], [1091, 1, 1, "", "pct_change"], [1092, 1, 1, "", "peak_max"], [1093, 1, 1, "", "peak_min"], [1094, 1, 1, "", "product"], [1095, 1, 1, "", "qcut"], [1096, 1, 1, "", "quantile"], [1097, 1, 1, "", "rank"], [1098, 1, 1, "", "rechunk"], [1099, 1, 1, "", "reinterpret"], [1100, 1, 1, "", "rename"], [1101, 1, 1, "", "replace"], [1102, 1, 1, "", "reshape"], [1103, 1, 1, "", "reverse"], [1104, 1, 1, "", "rle"], [1105, 1, 1, "", "rle_id"], [1106, 1, 1, "", "rolling_apply"], [1107, 1, 1, "", "rolling_map"], [1108, 1, 1, "", "rolling_max"], [1109, 1, 1, "", "rolling_mean"], [1110, 1, 1, "", "rolling_median"], [1111, 1, 1, "", "rolling_min"], [1112, 1, 1, "", "rolling_quantile"], [1113, 1, 1, "", "rolling_skew"], [1114, 1, 1, "", "rolling_std"], [1115, 1, 1, "", "rolling_sum"], [1116, 1, 1, "", "rolling_var"], [1117, 1, 1, "", "round"], [1118, 1, 1, "", "round_sig_figs"], [1119, 1, 1, "", "sample"], [1120, 1, 1, "", "scatter"], [1121, 1, 1, "", "search_sorted"], [1122, 1, 1, "", "series_equal"], [1123, 1, 1, "", "set"], [1124, 1, 1, "", "set_at_idx"], [1125, 1, 1, "", "set_sorted"], [1126, 3, 1, "", "shape"], [1127, 1, 1, "", "shift"], [1128, 1, 1, "", "shift_and_fill"], [1129, 1, 1, "", "shrink_dtype"], [1130, 1, 1, "", "shrink_to_fit"], [1131, 1, 1, "", "shuffle"], [1132, 1, 1, "", "sign"], [1133, 1, 1, "", "sin"], [1134, 1, 1, "", "sinh"], [1135, 1, 1, "", "skew"], [1136, 1, 1, "", "slice"], [1137, 1, 1, "", "sort"], [1138, 1, 1, "", "sqrt"], [1139, 1, 1, "", "std"], [1140, 3, 1, "", "str"], [1194, 1, 1, "", "sum"], [1195, 1, 1, "", "tail"], [1196, 1, 1, "", "take"], [1197, 1, 1, "", "take_every"], [1198, 1, 1, "", "tan"], [1199, 1, 1, "", "tanh"], [1200, 1, 1, "", "to_arrow"], [1201, 1, 1, "", "to_dummies"], [1202, 1, 1, "", "to_frame"], [1203, 1, 1, "", "to_init_repr"], [1204, 1, 1, "", "to_list"], [1205, 1, 1, "", "to_numpy"], [1206, 1, 1, "", "to_pandas"], [1207, 1, 1, "", "to_physical"], [1208, 1, 1, "", "top_k"], [1209, 1, 1, "", "unique"], [1210, 1, 1, "", "unique_counts"], [1211, 1, 1, "", "upper_bound"], [1212, 1, 1, "", "value_counts"], [1213, 1, 1, "", "var"], [1214, 1, 1, "", "view"], [1215, 1, 1, "", "zip_with"]], "polars.Series.arr": [[880, 1, 1, "", "max"], [881, 1, 1, "", "min"], [882, 1, 1, "", "sum"], [883, 1, 1, "", "to_list"], [884, 1, 1, "", "unique"]], "polars.Series.bin": [[885, 1, 1, "", "contains"], [886, 1, 1, "", "decode"], [887, 1, 1, "", "encode"], [888, 1, 1, "", "ends_with"], [889, 1, 1, "", "starts_with"]], "polars.Series.cat": [[893, 1, 1, "", "get_categories"], [894, 1, 1, "", "is_local"], [895, 1, 1, "", "set_ordering"], [896, 1, 1, "", "to_local"], [897, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[925, 1, 1, "", "base_utc_offset"], [926, 1, 1, "", "cast_time_unit"], [927, 1, 1, "", "combine"], [928, 1, 1, "", "convert_time_zone"], [929, 1, 1, "", "date"], [930, 1, 1, "", "datetime"], [931, 1, 1, "", "day"], [932, 1, 1, "", "days"], [933, 1, 1, "", "dst_offset"], [934, 1, 1, "", "epoch"], [935, 1, 1, "", "hour"], [936, 1, 1, "", "hours"], [937, 1, 1, "", "is_leap_year"], [938, 1, 1, "", "iso_year"], [939, 1, 1, "", "max"], [940, 1, 1, "", "mean"], [941, 1, 1, "", "median"], [942, 1, 1, "", "microsecond"], [943, 1, 1, "", "microseconds"], [944, 1, 1, "", "millisecond"], [945, 1, 1, "", "milliseconds"], [946, 1, 1, "", "min"], [947, 1, 1, "", "minute"], [948, 1, 1, "", "minutes"], [949, 1, 1, "", "month"], [950, 1, 1, "", "month_end"], [951, 1, 1, "", "month_start"], [952, 1, 1, "", "nanosecond"], [953, 1, 1, "", "nanoseconds"], [954, 1, 1, "", "offset_by"], [955, 1, 1, "", "ordinal_day"], [956, 1, 1, "", "quarter"], [957, 1, 1, "", "replace_time_zone"], [958, 1, 1, "", "round"], [959, 1, 1, "", "second"], [960, 1, 1, "", "seconds"], [961, 1, 1, "", "strftime"], [962, 1, 1, "", "time"], [963, 1, 1, "", "timestamp"], [964, 1, 1, "", "to_string"], [965, 1, 1, "", "total_days"], [966, 1, 1, "", "total_hours"], [967, 1, 1, "", "total_microseconds"], [968, 1, 1, "", "total_milliseconds"], [969, 1, 1, "", "total_minutes"], [970, 1, 1, "", "total_nanoseconds"], [971, 1, 1, "", "total_seconds"], [972, 1, 1, "", "truncate"], [973, 1, 1, "", "week"], [974, 1, 1, "", "weekday"], [975, 1, 1, "", "with_time_unit"], [976, 1, 1, "", "year"]], "polars.Series.list": [[1030, 1, 1, "", "all"], [1031, 1, 1, "", "any"], [1032, 1, 1, "", "arg_max"], [1033, 1, 1, "", "arg_min"], [1034, 1, 1, "", "concat"], [1035, 1, 1, "", "contains"], [1036, 1, 1, "", "count_match"], [1037, 1, 1, "", "count_matches"], [1038, 1, 1, "", "diff"], [1039, 1, 1, "", "difference"], [1040, 1, 1, "", "drop_nulls"], [1041, 1, 1, "", "eval"], [1042, 1, 1, "", "explode"], [1043, 1, 1, "", "first"], [1044, 1, 1, "", "gather"], [1045, 1, 1, "", "get"], [1046, 1, 1, "", "head"], [1047, 1, 1, "", "intersection"], [1048, 1, 1, "", "join"], [1049, 1, 1, "", "last"], [1050, 1, 1, "", "len"], [1051, 1, 1, "", "lengths"], [1052, 1, 1, "", "max"], [1053, 1, 1, "", "mean"], [1054, 1, 1, "", "min"], [1055, 1, 1, "", "reverse"], [1056, 1, 1, "", "sample"], [1057, 1, 1, "", "set_difference"], [1058, 1, 1, "", "set_intersection"], [1059, 1, 1, "", "set_symmetric_difference"], [1060, 1, 1, "", "set_union"], [1061, 1, 1, "", "shift"], [1062, 1, 1, "", "slice"], [1063, 1, 1, "", "sort"], [1064, 1, 1, "", "sum"], [1065, 1, 1, "", "symmetric_difference"], [1066, 1, 1, "", "tail"], [1067, 1, 1, "", "take"], [1068, 1, 1, "", "to_array"], [1069, 1, 1, "", "to_struct"], [1070, 1, 1, "", "union"], [1071, 1, 1, "", "unique"]], "polars.Series.str": [[1141, 1, 1, "", "concat"], [1142, 1, 1, "", "contains"], [1143, 1, 1, "", "count_match"], [1144, 1, 1, "", "count_matches"], [1145, 1, 1, "", "decode"], [1146, 1, 1, "", "encode"], [1147, 1, 1, "", "ends_with"], [1148, 1, 1, "", "explode"], [1149, 1, 1, "", "extract"], [1150, 1, 1, "", "extract_all"], [1151, 1, 1, "", "extract_groups"], [1152, 1, 1, "", "json_decode"], [1153, 1, 1, "", "json_extract"], [1154, 1, 1, "", "json_path_match"], [1155, 1, 1, "", "len_bytes"], [1156, 1, 1, "", "len_chars"], [1157, 1, 1, "", "lengths"], [1158, 1, 1, "", "ljust"], [1159, 1, 1, "", "lstrip"], [1160, 1, 1, "", "n_chars"], [1161, 1, 1, "", "pad_end"], [1162, 1, 1, "", "pad_start"], [1163, 1, 1, "", "parse_int"], [1164, 1, 1, "", "replace"], [1165, 1, 1, "", "replace_all"], [1166, 1, 1, "", "rjust"], [1167, 1, 1, "", "rstrip"], [1168, 1, 1, "", "slice"], [1169, 1, 1, "", "split"], [1170, 1, 1, "", "split_exact"], [1171, 1, 1, "", "splitn"], [1172, 1, 1, "", "starts_with"], [1173, 1, 1, "", "strip"], [1174, 1, 1, "", "strip_chars"], [1175, 1, 1, "", "strip_chars_end"], [1176, 1, 1, "", "strip_chars_start"], [1177, 1, 1, "", "strip_prefix"], [1178, 1, 1, "", "strip_suffix"], [1179, 1, 1, "", "strptime"], [1180, 1, 1, "", "to_date"], [1181, 1, 1, "", "to_datetime"], [1182, 1, 1, "", "to_decimal"], [1183, 1, 1, "", "to_lowercase"], [1184, 1, 1, "", "to_time"], [1185, 1, 1, "", "to_titlecase"], [1186, 1, 1, "", "to_uppercase"], [1187, 1, 1, "", "zfill"]], "polars.Series.struct": [[1188, 1, 1, "", "field"], [1189, 3, 1, "", "fields"], [1190, 3, 1, "", "json_encode"], [1191, 1, 1, "", "rename_fields"], [1192, 3, 1, "", "schema"], [1193, 1, 1, "", "unnest"]], "polars.StringCache": [[69, 1, 1, "", "__init__"]], "polars.Struct": [[70, 1, 1, "", "__init__"]], "polars.Time": [[71, 1, 1, "", "__init__"]], "polars.UInt16": [[72, 1, 1, "", "__init__"]], "polars.UInt32": [[73, 1, 1, "", "__init__"]], "polars.UInt64": [[74, 1, 1, "", "__init__"]], "polars.UInt8": [[75, 1, 1, "", "__init__"]], "polars.Unknown": [[76, 1, 1, "", "__init__"]], "polars.Utf8": [[77, 1, 1, "", "__init__"]], "polars.api": [[79, 4, 1, "", "register_dataframe_namespace"], [80, 4, 1, "", "register_expr_namespace"], [81, 4, 1, "", "register_lazyframe_namespace"], [82, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[273, 1, 1, "", "__iter__"], [274, 1, 1, "", "agg"], [275, 1, 1, "", "all"], [276, 1, 1, "", "apply"], [277, 1, 1, "", "count"], [278, 1, 1, "", "first"], [279, 1, 1, "", "head"], [280, 1, 1, "", "last"], [281, 1, 1, "", "map_groups"], [282, 1, 1, "", "max"], [283, 1, 1, "", "mean"], [284, 1, 1, "", "median"], [285, 1, 1, "", "min"], [286, 1, 1, "", "n_unique"], [287, 1, 1, "", "quantile"], [288, 1, 1, "", "sum"], [289, 1, 1, "", "tail"]], "polars.exceptions": [[89, 5, 1, "", "ArrowError"], [90, 5, 1, "", "ColumnNotFoundError"], [91, 5, 1, "", "ComputeError"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "NoDataError"], [95, 5, 1, "", "NoRowsReturnedError"], [96, 5, 1, "", "PolarsPanicError"], [97, 5, 1, "", "RowsError"], [98, 5, 1, "", "SchemaError"], [99, 5, 1, "", "SchemaFieldNotFoundError"], [100, 5, 1, "", "ShapeError"], [101, 5, 1, "", "StructFieldNotFoundError"], [102, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[112, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[839, 1, 1, "", "agg"], [840, 1, 1, "", "all"], [841, 1, 1, "", "apply"], [842, 1, 1, "", "count"], [843, 1, 1, "", "first"], [844, 1, 1, "", "head"], [845, 1, 1, "", "last"], [846, 1, 1, "", "map_groups"], [847, 1, 1, "", "max"], [848, 1, 1, "", "mean"], [849, 1, 1, "", "median"], [850, 1, 1, "", "min"], [851, 1, 1, "", "n_unique"], [852, 1, 1, "", "quantile"], [853, 1, 1, "", "sum"], [854, 1, 1, "", "tail"]], "polars.selectors": [[861, 4, 1, "", "all"], [861, 4, 1, "", "by_dtype"], [861, 4, 1, "", "by_name"], [861, 4, 1, "", "categorical"], [861, 4, 1, "", "contains"], [861, 4, 1, "", "date"], [861, 4, 1, "", "datetime"], [861, 4, 1, "", "duration"], [861, 4, 1, "", "ends_with"], [861, 4, 1, "", "expand_selector"], [861, 4, 1, "", "first"], [861, 4, 1, "", "float"], [861, 4, 1, "", "integer"], [861, 4, 1, "", "is_selector"], [861, 4, 1, "", "last"], [861, 4, 1, "", "matches"], [861, 4, 1, "", "numeric"], [861, 4, 1, "", "starts_with"], [861, 4, 1, "", "string"], [861, 4, 1, "", "temporal"], [861, 4, 1, "", "time"]], "polars.testing": [[137, 4, 1, "", "assert_frame_equal"], [138, 4, 1, "", "assert_frame_not_equal"], [139, 4, 1, "", "assert_series_equal"], [140, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[141, 0, 1, "", "column"], [142, 4, 1, "", "columns"], [143, 4, 1, "", "create_list_strategy"], [144, 4, 1, "", "dataframes"], [145, 4, 1, "", "load_profile"], [146, 4, 1, "", "series"], [147, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[141, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 170, 986], "api": [1, 79, 80, 81, 82, 758], "provid": 1, "new": 1, "function": [1, 150, 745, 757, 861], "avail": 1, "registr": 1, "exampl": [1, 861, 1232], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1232], "arrai": [2, 738, 1216], "binari": [3, 739, 752, 1218], "boolean": [4, 740, 1219], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 150], "activate_decim": 6, "load": [7, 150], "load_from_fil": 8, "restore_default": 9, "save": [10, 150], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 150], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 144, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 526, 838], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 368, 689, 929], "datetim": [48, 369, 692, 930], "decim": 49, "durat": [50, 695], "float32": 51, "float64": 52, "int16": 53, "int32": 54, "int64": 55, "int8": 56, "lazyfram": [57, 58, 59, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858], "sink_csv": 57, "sink_ipc": 58, "sink_parquet": 59, "list": [60, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 747, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1225], "null": 61, "object": 62, "sqlcontext": [63, 64, 65, 66, 67, 68], "execut": 63, "regist": 64, "register_glob": 65, "register_mani": 66, "tabl": 67, "unregist": 68, "stringcach": [69, 757], "struct": [70, 642, 643, 644, 728, 754, 1188, 1189, 1190, 1191, 1192, 1193, 1229], "time": [71, 397, 732, 962], "uint16": 72, "uint32": 73, "uint64": 74, "uint8": 75, "unknown": 76, "utf8": 77, "align_fram": 78, "register_dataframe_namespac": 79, "register_expr_namespac": 80, "register_lazyframe_namespac": 81, "register_series_namespac": 82, "build_info": 83, "collect_al": 84, "collect_all_async": 85, "concat": [86, 466, 595, 1034, 1141], "disable_string_cach": 87, "enable_string_cach": 88, "except": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 299], "arrowerror": 89, "columnnotfounderror": 90, "computeerror": 91, "duplicateerror": 92, "invalidoperationerror": 93, "nodataerror": 94, "norowsreturnederror": 95, "polarspanicerror": 96, "rowserror": 97, "schemaerror": 98, "schemafieldnotfounderror": 99, "shapeerror": 100, "structfieldnotfounderror": 101, "toomanyrowsreturnederror": 102, "from_arrow": 103, "from_datafram": 104, "from_dict": [105, 106], "from_numpi": 107, "from_panda": 108, "from_record": 109, "from_repr": 110, "get_index_typ": 111, "io": 112, "csv": [112, 759], "batched_read": 112, "batchedcsvread": [112, 759], "next_batch": 112, "read_avro": 113, "read_csv": 114, "read_csv_batch": 115, "read_databas": 116, "read_database_uri": 117, "read_delta": 118, "read_excel": 119, "read_ipc": 120, "read_ipc_schema": 121, "read_ipc_stream": 122, "read_json": [123, 810], "read_ndjson": 124, "read_od": 125, "read_parquet": 126, "read_parquet_schema": 127, "scan_csv": 128, "scan_delta": 129, "scan_iceberg": 130, "scan_ipc": 131, "scan_ndjson": 132, "scan_parquet": 133, "scan_pyarrow_dataset": 134, "set_random_se": 135, "show_vers": 136, "test": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 1232], "assert_frame_equ": 137, "assert_frame_not_equ": 138, "assert_series_equ": 139, "assert_series_not_equ": 140, "parametr": [141, 142, 143, 144, 145, 146, 147, 1232], "column": [141, 142, 160, 743, 770], "create_list_strategi": 143, "load_profil": 145, "seri": [146, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1224], "set_profil": 147, "threadpool_s": 148, "using_string_cach": 149, "option": 150, "current": 150, "us": 150, "context": 150, "manag": 150, "decor": 150, "aggreg": [151, 300, 760, 862], "__dataframe__": 152, "appli": [153, 276, 309, 667, 841, 868], "approx_n_uniqu": [154, 310, 668, 761], "approx_uniqu": [155, 762], "bottom_k": [156, 333, 763, 890], "cast": [157, 335, 765, 891], "clear": [158, 766, 901], "clone": [159, 767, 905], "corr": [161, 678], "describ": [162, 919], "drop": [163, 772], "drop_in_plac": 164, "drop_nul": [165, 363, 472, 773, 923, 1040], "dtype": [166, 774, 977], "equal": [167, 979], "estimated_s": [168, 980], "explod": [169, 420, 474, 602, 776, 985, 1042, 1148], "fill_nan": [171, 422, 778, 988], "fill_nul": [172, 423, 779, 989], "filter": [173, 424, 780, 990], "find_idx_by_nam": 174, "flag": [175, 991], "fold": [176, 699], "frame_equ": 177, "gather_everi": [178, 432, 783, 994], "get_column": [179, 181], "get_column_index": 180, "glimps": 182, "group_bi": [183, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 784, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854], "group_by_dynam": [184, 785], "group_by_rol": [185, 786], "groupbi": [186, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 787, 857], "groupby_dynam": [187, 788], "groupby_rol": [188, 789], "hash_row": 189, "head": [190, 279, 437, 478, 703, 790, 844, 998, 1046], "height": 191, "hstack": 192, "insert_at_idx": 193, "insert_column": 194, "interpol": [195, 440, 792, 1002], "is_dupl": [196, 442, 1005], "is_empti": [197, 1006], "is_uniqu": [198, 455, 1023], "item": [199, 1025], "iter_column": 200, "iter_row": 201, "iter_slic": 202, "join": [203, 480, 793, 1048], "join_asof": [204, 794], "lazi": [205, 796], "limit": [206, 461, 797, 1028], "map_row": 207, "max": [208, 282, 322, 484, 514, 712, 800, 847, 880, 939, 1052, 1078], "max_horizont": [209, 713], "mean": [210, 283, 485, 515, 714, 801, 848, 940, 1053, 1079], "mean_horizont": 211, "median": [212, 284, 516, 715, 802, 849, 941, 1080], "melt": [213, 803], "merge_sort": [214, 804], "min": [215, 285, 323, 486, 527, 716, 805, 850, 881, 946, 1054, 1081], "min_horizont": [216, 717], "n_chunk": [217, 1083], "n_uniqu": [218, 286, 531, 718, 851, 1084], "null_count": [219, 543, 806, 1090], "partition_bi": 220, "pipe": [221, 549, 807], "pivot": 222, "product": [223, 552, 1094], "quantil": [224, 287, 554, 720, 809, 852, 1096], "rechunk": [225, 557, 1098], "renam": [226, 811, 1100], "replac": [227, 560, 618, 1101, 1164], "replace_at_idx": 228, "replace_column": 229, "revers": [230, 487, 562, 812, 1055, 1103], "roll": [231, 565, 813], "row": [232, 233], "rows_by_kei": 234, "sampl": [235, 488, 579, 1056, 1119], "schema": [236, 814, 1192], "select": [237, 297, 725, 750, 815, 860, 1227], "select_seq": [238, 816], "set_sort": [239, 581, 818, 1125], "shape": [240, 1126], "shift": [241, 493, 582, 819, 1061, 1127], "shift_and_fil": [242, 583, 820, 1128], "shrink_to_fit": [243, 1130], "slice": [244, 494, 590, 622, 822, 1062, 1136, 1168], "sort": [245, 495, 591, 823, 1063, 1137], "std": [246, 594, 727, 824, 1139], "sum": [247, 288, 324, 496, 647, 729, 825, 853, 882, 1064, 1194], "sum_horizont": [248, 730], "tail": [249, 289, 498, 648, 731, 826, 854, 1066, 1195], "take_everi": [250, 650, 827, 1197], "to_arrow": [251, 1200], "to_dict": [252, 253], "to_dummi": [254, 1201], "to_init_repr": [255, 1203], "to_numpi": [256, 1205], "to_panda": [257, 1206], "to_seri": 258, "to_struct": [259, 501, 1069], "top_k": [260, 654, 828, 1208], "transpos": 261, "uniqu": [262, 326, 503, 656, 829, 884, 1071, 1209], "unnest": [263, 830, 1193], "unstack": 264, "updat": [265, 831], "upsampl": 266, "var": [267, 660, 735, 832, 1213], "vstack": 268, "width": [269, 833], "with_column": [270, 834], "with_columns_seq": [271, 835], "with_row_count": [272, 837], "__iter__": 273, "agg": [274, 839], "all": [275, 305, 462, 663, 840, 865, 1030], "count": [277, 346, 679, 842], "first": [278, 425, 475, 698, 781, 843, 1043], "last": [280, 458, 481, 707, 795, 845, 1049], "map_group": [281, 711, 846], "attribut": [290, 855, 1217], "comput": [291, 744, 1221], "descript": [292, 856, 1222], "export": [293, 1223], "miscellan": [296, 749, 757, 859, 1226], "manipul": [297, 750, 860, 1227], "data": 298, "type": 298, "numer": [298, 752], "tempor": [298, 755, 1230], "nest": 298, "other": 298, "expr": [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662], "ab": [301, 863], "add": 302, "agg_group": 303, "alia": [304, 864], "and_": 306, "ani": [307, 463, 665, 866, 1031], "append": [308, 867], "arcco": [311, 869], "arccosh": [312, 870], "arcsin": [313, 871], "arcsinh": [314, 872], "arctan": [315, 873], "arctanh": [316, 874], "arg_max": [317, 464, 875, 1032], "arg_min": [318, 465, 876, 1033], "arg_sort": [319, 877], "arg_tru": [320, 878], "arg_uniqu": [321, 879], "arr": [322, 323, 324, 325, 326, 880, 881, 882, 883, 884], "to_list": [325, 883, 1204], "backward_fil": 327, "bin": [328, 329, 330, 331, 332, 885, 886, 887, 888, 889], "contain": [328, 467, 596, 885, 1035, 1142], "decod": [329, 599, 886, 1145], "encod": [330, 600, 887, 1146], "ends_with": [331, 601, 888, 1147], "starts_with": [332, 626, 889, 1172], "cach": [334, 764], "cat": [336, 337, 892, 893, 894, 895, 896, 897], "get_categori": [336, 893], "set_ord": [337, 895], "cbrt": [338, 898], "ceil": [339, 899], "clip": [340, 902], "clip_max": [341, 903], "clip_min": [342, 904], "co": [343, 906], "cosh": [344, 907], "cot": [345, 908], "cum_count": 347, "cum_max": [348, 909], "cum_min": [349, 910], "cum_prod": [350, 911], "cum_sum": [351, 683, 912], "cumcount": 352, "cummax": [353, 913], "cummin": [354, 914], "cumprod": [355, 915], "cumsum": [356, 687, 916], "cumulative_ev": [357, 917], "cut": [358, 918], "degre": 359, "diff": [360, 470, 920, 1038], "dot": [361, 921], "drop_nan": [362, 922], "dt": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976], "base_utc_offset": [364, 925], "cast_time_unit": [365, 926], "combin": [366, 927], "convert_time_zon": [367, 928], "dai": [370, 371, 931, 932], "dst_offset": [372, 933], "epoch": [373, 934], "hour": [374, 375, 935, 936], "is_leap_year": [376, 937], "iso_year": [377, 938], "microsecond": [378, 379, 942, 943], "millisecond": [380, 381, 944, 945], "minut": [382, 383, 947, 948], "month": [384, 949], "month_end": [385, 950], "month_start": [386, 951], "nanosecond": [387, 388, 952, 953], "offset_bi": [389, 954], "ordinal_dai": [390, 955], "quarter": [391, 956], "replace_time_zon": [392, 957], "round": [393, 577, 958, 1117], "second": [394, 395, 959, 960], "strftime": [396, 961], "timestamp": [398, 963], "to_str": [399, 964], "total_dai": [400, 965], "total_hour": [401, 966], "total_microsecond": [402, 967], "total_millisecond": [403, 968], "total_minut": [404, 969], "total_nanosecond": [405, 970], "total_second": [406, 971], "truncat": [407, 972], "week": [408, 973], "weekdai": [409, 974], "with_time_unit": [410, 975], "year": [411, 976], "entropi": [412, 978], "eq": [413, 517], "eq_miss": 414, "ewm_mean": [415, 981], "ewm_std": [416, 982], "ewm_var": [417, 983], "exclud": [418, 697], "exp": [419, 984], "extend_const": [421, 987], "flatten": 426, "floor": [427, 992], "floordiv": 428, "forward_fil": 429, "from_json": [430, 782], "gather": [431, 476, 993, 1044], "ge": 433, "get": [434, 477, 1045], "gt": 435, "hash": [436, 997], "implod": [438, 704, 1000], "inspect": [439, 791], "is_between": [441, 1003], "is_finit": [443, 1007], "is_first": [444, 1008], "is_first_distinct": [445, 1009], "is_in": [446, 1011], "is_infinit": [447, 1012], "is_last": [448, 1014], "is_last_distinct": [449, 1015], "is_nan": [450, 1016], "is_not": 451, "is_not_nan": [452, 1017], "is_not_nul": [453, 1018], "is_nul": [454, 1019], "keep_nam": 456, "kurtosi": [457, 1026], "le": 459, "len": [460, 482, 1027, 1050], "count_match": [468, 469, 597, 598, 1036, 1037, 1143, 1144], "differ": [471, 1039], "eval": [473, 1041], "intersect": [479, 1047], "length": [483, 611, 1051, 1157], "set_differ": [489, 1057], "set_intersect": [490, 1058], "set_symmetric_differ": [491, 1059], "set_union": [492, 1060], "symmetric_differ": [497, 1065], "take": [499, 649, 1067, 1196], "to_arrai": [500, 1068], "union": [502, 1070], "log": [504, 1072], "log10": [505, 1073], "log1p": [506, 1074], "lower_bound": [507, 1075], "lt": 508, "map": [509, 533, 709, 798], "map_alia": 510, "map_batch": [511, 710, 799], "map_dict": [512, 1076], "map_el": [513, 1077], "meta": [517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 748], "has_multiple_output": 518, "is_regex_project": 519, "ne": [520, 540], "output_nam": 521, "pop": 522, "root_nam": 523, "tree_format": 524, "undo_alias": 525, "mod": 528, "mode": [529, 1082], "mul": 530, "name": [532, 533, 534, 535, 536, 537, 743, 751, 1085], "keep": 532, "prefix": [534, 551], "suffix": [535, 646], "to_lowercas": [536, 637, 1183], "to_uppercas": [537, 640, 1186], "nan_max": [538, 1086], "nan_min": [539, 1087], "ne_miss": 541, "not_": [542, 1089], "or_": 544, "over": 545, "pct_chang": [546, 1091], "peak_max": [547, 1092], "peak_min": [548, 1093], "pow": 550, "qcut": [553, 1095], "radian": 555, "rank": [556, 1097], "reinterpret": [558, 1099], "repeat_bi": 559, "reshap": [561, 1102], "rle": [563, 1104], "rle_id": [564, 1105], "rolling_appli": [566, 1106], "rolling_map": [567, 1107], "rolling_max": [568, 1108], "rolling_mean": [569, 1109], "rolling_median": [570, 1110], "rolling_min": [571, 1111], "rolling_quantil": [572, 1112], "rolling_skew": [573, 1113], "rolling_std": [574, 1114], "rolling_sum": [575, 1115], "rolling_var": [576, 1116], "round_sig_fig": [578, 1118], "search_sort": [580, 1121], "shrink_dtyp": [584, 1129], "shuffl": [585, 1131], "sign": [586, 1132], "sin": [587, 1133], "sinh": [588, 1134], "skew": [589, 1135], "sort_bi": 592, "sqrt": [593, 1138], "str": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187], "extract": [603, 1149], "extract_al": [604, 1150], "extract_group": [605, 1151], "json_decod": [606, 1152], "json_extract": [607, 1153], "json_path_match": [608, 1154], "len_byt": [609, 1155], "len_char": [610, 1156], "ljust": [612, 1158], "lstrip": [613, 1159], "n_char": [614, 1160], "pad_end": [615, 1161], "pad_start": [616, 1162], "parse_int": [617, 1163], "replace_al": [619, 1165], "rjust": [620, 1166], "rstrip": [621, 1167], "split": [623, 1169], "split_exact": [624, 1170], "splitn": [625, 1171], "strip": [627, 1173], "strip_char": [628, 1174], "strip_chars_end": [629, 1175], "strip_chars_start": [630, 1176], "strip_prefix": [631, 1177], "strip_suffix": [632, 1178], "strptime": [633, 1179], "to_dat": [634, 1180], "to_datetim": [635, 1181], "to_decim": [636, 1182], "to_tim": [638, 1184], "to_titlecas": [639, 1185], "zfill": [641, 1187], "field": [642, 1188, 1189], "json_encod": [643, 1190], "rename_field": [644, 1191], "sub": 645, "tan": [651, 1198], "tanh": [652, 1199], "to_phys": [653, 1207], "truediv": 655, "unique_count": [657, 1210], "upper_bound": [658, 1211], "value_count": [659, 1212], "where": 661, "xor": 662, "all_horizont": 664, "any_horizont": 666, "arang": 669, "arctan2": 670, "arctan2d": 671, "arg_sort_bi": 672, "arg_wher": 673, "avg": 674, "coalesc": 675, "concat_list": 676, "concat_str": 677, "cov": 680, "cum_fold": 681, "cum_reduc": 682, "cum_sum_horizont": 684, "cumfold": 685, "cumreduc": 686, "cumsum_horizont": 688, "date_rang": [690, 691], "datetime_rang": [693, 694], "element": 696, "format": 700, "from_epoch": 701, "group": 702, "int_rang": [705, 706], "lit": 708, "ones": 719, "reduc": 721, "repeat": 722, "rolling_corr": 723, "rolling_cov": 724, "sql_expr": 726, "time_rang": [733, 734], "when": 736, "zero": 737, "categori": [741, 1220], "col": 742, "express": 746, "oper": [752, 861], "conjunct": 752, "comparison": 752, "string": [753, 1228], "window": 756, "convers": 757, "parallel": 757, "random": 757, "refer": 758, "input": 759, "output": 759, "feather": 759, "ipc": 759, "parquet": 759, "databas": 759, "json": 759, "avro": 759, "spreadsheet": 759, "apach": 759, "iceberg": 759, "delta": 759, "lake": 759, "dataset": 759, "collect": 768, "collect_async": 769, "deseri": 771, "explain": 775, "fetch": 777, "profil": [808, 1232], "serial": 817, "show_graph": 821, "with_context": 836, "lazygroupbi": [839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854], "read": 859, "write": 859, "logic": 859, "plan": 859, "selector": 861, "import": 861, "set": [861, 1123], "is_loc": 894, "to_loc": 896, "uses_lexical_ord": 897, "chunk_length": 900, "get_chunk": 995, "has_valid": 996, "hist": 999, "inner_dtyp": 1001, "is_boolean": 1004, "is_float": 1010, "is_integ": 1013, "is_numer": 1020, "is_sort": 1021, "is_tempor": 1022, "is_utf8": 1024, "new_from_index": 1088, "scatter": 1120, "series_equ": 1122, "set_at_idx": 1124, "to_fram": 1202, "view": 1214, "zip_with": 1215, "sql": 1231, "method": 1231, "assert": 1232, "primit": 1232, "strategi": 1232, "helper": 1232, "util": 1233}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.find_idx_by_name": [[174, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.groupby_rolling": [[188, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.groupby": [[186, "polars-dataframe-groupby"]], "polars.DataFrame.map_rows": [[207, "polars-dataframe-map-rows"]], "polars.DataFrame.flags": [[175, "polars-dataframe-flags"]], "polars.DataFrame.drop_nulls": [[165, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[166, "polars-dataframe-dtypes"]], "polars.DataFrame.join": [[203, "polars-dataframe-join"]], "polars.DataFrame.insert_at_idx": [[193, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.get_columns": [[181, "polars-dataframe-get-columns"]], "polars.DataFrame.get_column": [[179, "polars-dataframe-get-column"]], "polars.DataFrame.group_by_dynamic": [[184, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.equals": [[167, "polars-dataframe-equals"]], "polars.DataFrame.group_by_rolling": [[185, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.groupby_dynamic": [[187, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.item": [[199, "polars-dataframe-item"]], "polars.DataFrame.is_empty": [[197, "polars-dataframe-is-empty"]], "polars.DataFrame.mean": [[210, "polars-dataframe-mean"]], "polars.DataFrame.median": [[212, "polars-dataframe-median"]], "polars.DataFrame.min_horizontal": [[216, "polars-dataframe-min-horizontal"]], "polars.DataFrame.fill_nan": [[171, "polars-dataframe-fill-nan"]], "polars.DataFrame.head": [[190, "polars-dataframe-head"]], "polars.DataFrame.iter_slices": [[202, "polars-dataframe-iter-slices"]], "polars.DataFrame.lazy": [[205, "polars-dataframe-lazy"]], "polars.DataFrame.fill_null": [[172, "polars-dataframe-fill-null"]], "polars.DataFrame.limit": [[206, "polars-dataframe-limit"]], "polars.DataFrame.fold": [[176, "polars-dataframe-fold"]], "polars.DataFrame.join_asof": [[204, "polars-dataframe-join-asof"]], "polars.DataFrame.is_unique": [[198, "polars-dataframe-is-unique"]], "polars.DataFrame.null_count": [[219, "polars-dataframe-null-count"]], "polars.DataFrame.filter": [[173, "polars-dataframe-filter"]], "polars.DataFrame.iter_columns": [[200, "polars-dataframe-iter-columns"]], "polars.DataFrame.height": [[191, "polars-dataframe-height"]], "polars.DataFrame.estimated_size": [[168, "polars-dataframe-estimated-size"]], "polars.DataFrame.group_by": [[183, "polars-dataframe-group-by"]], "polars.DataFrame.iter_rows": [[201, "polars-dataframe-iter-rows"]], "polars.DataFrame.n_unique": [[218, "polars-dataframe-n-unique"]], "polars.DataFrame.min": [[215, "polars-dataframe-min"]], "polars.DataFrame.merge_sorted": [[214, "polars-dataframe-merge-sorted"]], "polars.DataFrame.mean_horizontal": [[211, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.max_horizontal": [[209, "polars-dataframe-max-horizontal"]], "polars.DataFrame.interpolate": [[195, "polars-dataframe-interpolate"]], "polars.DataFrame.extend": [[170, "polars-dataframe-extend"]], "polars.DataFrame.is_duplicated": [[196, "polars-dataframe-is-duplicated"]], "polars.DataFrame.get_column_index": [[180, "polars-dataframe-get-column-index"]], "polars.DataFrame.gather_every": [[178, "polars-dataframe-gather-every"]], "polars.DataFrame.hstack": [[192, "polars-dataframe-hstack"]], "polars.DataFrame.n_chunks": [[217, "polars-dataframe-n-chunks"]], "polars.DataFrame.explode": [[169, "polars-dataframe-explode"]], "polars.DataFrame.max": [[208, "polars-dataframe-max"]], "polars.DataFrame.melt": [[213, "polars-dataframe-melt"]], "polars.DataFrame.frame_equal": [[177, "polars-dataframe-frame-equal"]], "polars.DataFrame.glimpse": [[182, "polars-dataframe-glimpse"]], "polars.DataFrame.hash_rows": [[189, "polars-dataframe-hash-rows"]], "polars.DataFrame.insert_column": [[194, "polars-dataframe-insert-column"]], "polars.testing.assert_frame_not_equal": [[138, "polars-testing-assert-frame-not-equal"]], "polars.read_ods": [[125, "polars-read-ods"]], "polars.DataFrame.approx_unique": [[155, "polars-dataframe-approx-unique"]], "polars.get_index_type": [[111, "polars-get-index-type"]], "polars.threadpool_size": [[148, "polars-threadpool-size"]], "polars.read_csv_batched": [[115, "polars-read-csv-batched"]], "polars.scan_ndjson": [[132, "polars-scan-ndjson"]], "polars.scan_csv": [[128, "polars-scan-csv"]], "polars.read_avro": [[113, "polars-read-avro"]], "polars.read_json": [[123, "polars-read-json"]], "polars.scan_iceberg": [[130, "polars-scan-iceberg"]], "polars.DataFrame.approx_n_unique": [[154, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.clone": [[159, "polars-dataframe-clone"]], "polars.DataFrame.drop_in_place": [[164, "polars-dataframe-drop-in-place"]], "polars.read_parquet_schema": [[127, "polars-read-parquet-schema"]], "polars.scan_parquet": [[133, "polars-scan-parquet"]], "polars.DataFrame.columns": [[160, "polars-dataframe-columns"]], "polars.from_repr": [[110, "polars-from-repr"]], "polars.read_database_uri": [[117, "polars-read-database-uri"]], "polars.scan_ipc": [[131, "polars-scan-ipc"]], "polars.scan_delta": [[129, "polars-scan-delta"]], "polars.testing.parametric.dataframes": [[144, "polars-testing-parametric-dataframes"]], "polars.testing.assert_series_not_equal": [[140, "polars-testing-assert-series-not-equal"]], "polars.using_string_cache": [[149, "polars-using-string-cache"]], "polars.DataFrame.apply": [[153, "polars-dataframe-apply"]], "polars.testing.parametric.series": [[146, "polars-testing-parametric-series"]], "polars.testing.assert_series_equal": [[139, "polars-testing-assert-series-equal"]], "Config": [[150, "config"]], "Config options": [[150, "config-options"]], "Config load, save, and current state": [[150, "config-load-save-and-current-state"]], "Use as a context manager": [[150, "use-as-a-context-manager"]], "Use as a function decorator": [[150, "use-as-a-function-decorator"]], "polars.scan_pyarrow_dataset": [[134, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.bottom_k": [[156, "polars-dataframe-bottom-k"]], "polars.testing.parametric.load_profile": [[145, "polars-testing-parametric-load-profile"]], "polars.testing.assert_frame_equal": [[137, "polars-testing-assert-frame-equal"]], "polars.read_ipc_stream": [[122, "polars-read-ipc-stream"]], "polars.read_ndjson": [[124, "polars-read-ndjson"]], "polars.read_database": [[116, "polars-read-database"]], "polars.read_ipc_schema": [[121, "polars-read-ipc-schema"]], "polars.read_delta": [[118, "polars-read-delta"]], "polars.read_ipc": [[120, "polars-read-ipc"]], "polars.read_parquet": [[126, "polars-read-parquet"]], "polars.set_random_seed": [[135, "polars-set-random-seed"]], "polars.show_versions": [[136, "polars-show-versions"]], "polars.testing.parametric.create_list_strategy": [[143, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.__dataframe__": [[152, "polars-dataframe-dataframe"]], "polars.read_excel": [[119, "polars-read-excel"]], "polars.DataFrame.describe": [[162, "polars-dataframe-describe"]], "polars.DataFrame.clear": [[158, "polars-dataframe-clear"]], "polars.testing.parametric.columns": [[142, "polars-testing-parametric-columns"]], "Aggregation": [[151, "aggregation"], [862, "aggregation"], [760, "aggregation"], [300, "aggregation"]], "polars.DataFrame.drop": [[163, "polars-dataframe-drop"]], "polars.DataFrame.cast": [[157, "polars-dataframe-cast"]], "polars.testing.parametric.set_profile": [[147, "polars-testing-parametric-set-profile"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[112, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_csv": [[114, "polars-read-csv"]], "polars.testing.parametric.column": [[141, "polars-testing-parametric-column"]], "polars.DataFrame.corr": [[161, "polars-dataframe-corr"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Float32": [[51, "polars-float32"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Float64": [[52, "polars-float64"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Int32": [[54, "polars-int32"]], "polars.Array": [[2, "polars-array"]], "polars.Int16": [[53, "polars-int16"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Date": [[47, "polars-date"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Duration": [[50, "polars-duration"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [861, "examples"], [1232, "examples"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "Index": [[0, "index"]], "polars.SQLContext.register_many": [[66, "polars-sqlcontext-register-many"]], "polars.exceptions.ShapeError": [[100, "polars-exceptions-shapeerror"]], "polars.UInt8": [[75, "polars-uint8"]], "polars.UInt32": [[73, "polars-uint32"]], "polars.LazyFrame.sink_ipc": [[58, "polars-lazyframe-sink-ipc"]], "polars.collect_all": [[84, "polars-collect-all"]], "polars.exceptions.ColumnNotFoundError": [[90, "polars-exceptions-columnnotfounderror"]], "polars.Null": [[61, "polars-null"]], "polars.disable_string_cache": [[87, "polars-disable-string-cache"]], "polars.exceptions.TooManyRowsReturnedError": [[102, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dataframe": [[104, "polars-from-dataframe"]], "polars.from_numpy": [[107, "polars-from-numpy"]], "polars.api.register_expr_namespace": [[80, "polars-api-register-expr-namespace"]], "polars.Object": [[62, "polars-object"]], "polars.exceptions.SchemaFieldNotFoundError": [[99, "polars-exceptions-schemafieldnotfounderror"]], "polars.SQLContext.execute": [[63, "polars-sqlcontext-execute"]], "polars.LazyFrame.sink_parquet": [[59, "polars-lazyframe-sink-parquet"]], "polars.exceptions.NoRowsReturnedError": [[95, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.ArrowError": [[89, "polars-exceptions-arrowerror"]], "polars.from_dicts": [[106, "polars-from-dicts"]], "polars.concat": [[86, "polars-concat"]], "polars.exceptions.ComputeError": [[91, "polars-exceptions-computeerror"]], "polars.from_dict": [[105, "polars-from-dict"]], "polars.Unknown": [[76, "polars-unknown"]], "polars.api.register_dataframe_namespace": [[79, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.register_globals": [[65, "polars-sqlcontext-register-globals"]], "polars.Int64": [[55, "polars-int64"]], "polars.List": [[60, "polars-list"]], "polars.UInt64": [[74, "polars-uint64"]], "polars.exceptions.StructFieldNotFoundError": [[101, "polars-exceptions-structfieldnotfounderror"]], "polars.align_frames": [[78, "polars-align-frames"]], "polars.api.register_lazyframe_namespace": [[81, "polars-api-register-lazyframe-namespace"]], "polars.Utf8": [[77, "polars-utf8"]], "polars.enable_string_cache": [[88, "polars-enable-string-cache"]], "polars.exceptions.SchemaError": [[98, "polars-exceptions-schemaerror"]], "polars.from_records": [[109, "polars-from-records"]], "polars.api.register_series_namespace": [[82, "polars-api-register-series-namespace"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.RowsError": [[97, "polars-exceptions-rowserror"]], "polars.Time": [[71, "polars-time"]], "polars.StringCache": [[69, "polars-stringcache"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.Int8": [[56, "polars-int8"]], "polars.Struct": [[70, "polars-struct"]], "polars.from_arrow": [[103, "polars-from-arrow"]], "polars.exceptions.PolarsPanicError": [[96, "polars-exceptions-polarspanicerror"]], "polars.SQLContext.unregister": [[68, "polars-sqlcontext-unregister"]], "polars.SQLContext.register": [[64, "polars-sqlcontext-register"]], "polars.UInt16": [[72, "polars-uint16"]], "polars.build_info": [[83, "polars-build-info"]], "polars.from_pandas": [[108, "polars-from-pandas"]], "polars.LazyFrame.sink_csv": [[57, "polars-lazyframe-sink-csv"]], "polars.SQLContext.tables": [[67, "polars-sqlcontext-tables"]], "polars.exceptions.NoDataError": [[94, "polars-exceptions-nodataerror"]], "polars.collect_all_async": [[85, "polars-collect-all-async"]], "polars.Series.str.len_chars": [[1156, "polars-series-str-len-chars"]], "polars.Series.str.to_date": [[1180, "polars-series-str-to-date"]], "polars.Series.str.to_decimal": [[1182, "polars-series-str-to-decimal"]], "polars.Series.str.strip_prefix": [[1177, "polars-series-str-strip-prefix"]], "polars.Series.struct.schema": [[1192, "polars-series-struct-schema"]], "polars.Series.top_k": [[1208, "polars-series-top-k"]], "polars.Series.str.lstrip": [[1159, "polars-series-str-lstrip"]], "polars.Series.str.replace_all": [[1165, "polars-series-str-replace-all"]], "polars.Series.str.splitn": [[1171, "polars-series-str-splitn"]], "polars.Series.str.to_titlecase": [[1185, "polars-series-str-to-titlecase"]], "polars.Series.str.pad_start": [[1162, "polars-series-str-pad-start"]], "polars.Series.str.split_exact": [[1170, "polars-series-str-split-exact"]], "polars.Series.str.lengths": [[1157, "polars-series-str-lengths"]], "polars.Series.str.split": [[1169, "polars-series-str-split"]], "polars.Series.struct.rename_fields": [[1191, "polars-series-struct-rename-fields"]], "polars.Series.str.starts_with": [[1172, "polars-series-str-starts-with"]], "polars.Series.to_init_repr": [[1203, "polars-series-to-init-repr"]], "polars.Series.take": [[1196, "polars-series-take"]], "polars.Series.to_list": [[1204, "polars-series-to-list"]], "polars.Series.struct.fields": [[1189, "polars-series-struct-fields"]], "polars.Series.str.n_chars": [[1160, "polars-series-str-n-chars"]], "polars.Series.unique": [[1209, "polars-series-unique"]], "polars.Series.str.strip": [[1173, "polars-series-str-strip"]], "polars.Series.take_every": [[1197, "polars-series-take-every"]], "polars.Series.str.parse_int": [[1163, "polars-series-str-parse-int"]], "polars.Series.to_numpy": [[1205, "polars-series-to-numpy"]], "polars.Series.str.strip_chars_end": [[1175, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1176, "polars-series-str-strip-chars-start"]], "polars.Series.str.to_lowercase": [[1183, "polars-series-str-to-lowercase"]], "polars.Series.str.len_bytes": [[1155, "polars-series-str-len-bytes"]], "polars.Series.str.zfill": [[1187, "polars-series-str-zfill"]], "polars.Series.str.strip_suffix": [[1178, "polars-series-str-strip-suffix"]], "polars.Series.str.to_time": [[1184, "polars-series-str-to-time"]], "polars.Series.to_arrow": [[1200, "polars-series-to-arrow"]], "polars.Series.str.to_uppercase": [[1186, "polars-series-str-to-uppercase"]], "polars.Series.to_frame": [[1202, "polars-series-to-frame"]], "polars.Series.struct.unnest": [[1193, "polars-series-struct-unnest"]], "polars.Series.tail": [[1195, "polars-series-tail"]], "polars.Series.str.replace": [[1164, "polars-series-str-replace"]], "polars.Series.tan": [[1198, "polars-series-tan"]], "polars.Series.to_dummies": [[1201, "polars-series-to-dummies"]], "polars.Series.str.rjust": [[1166, "polars-series-str-rjust"]], "polars.Series.str.to_datetime": [[1181, "polars-series-str-to-datetime"]], "polars.Series.struct.field": [[1188, "polars-series-struct-field"]], "polars.Series.str.ljust": [[1158, "polars-series-str-ljust"]], "polars.Series.to_physical": [[1207, "polars-series-to-physical"]], "polars.Series.str.slice": [[1168, "polars-series-str-slice"]], "polars.Series.str.strptime": [[1179, "polars-series-str-strptime"]], "polars.Series.struct.json_encode": [[1190, "polars-series-struct-json-encode"]], "polars.Series.str.rstrip": [[1167, "polars-series-str-rstrip"]], "polars.Series.str.pad_end": [[1161, "polars-series-str-pad-end"]], "polars.Series.sum": [[1194, "polars-series-sum"]], "polars.Series.to_pandas": [[1206, "polars-series-to-pandas"]], "polars.Series.tanh": [[1199, "polars-series-tanh"]], "polars.Series.str.strip_chars": [[1174, "polars-series-str-strip-chars"]], "polars.Series.list.get": [[1045, "polars-series-list-get"]], "polars.Series.null_count": [[1090, "polars-series-null-count"]], "polars.Series.list.min": [[1054, "polars-series-list-min"]], "polars.Series.list.intersection": [[1047, "polars-series-list-intersection"]], "polars.Series.list.mean": [[1053, "polars-series-list-mean"]], "polars.Series.min": [[1081, "polars-series-min"]], "polars.Series.reinterpret": [[1099, "polars-series-reinterpret"]], "polars.Series.rank": [[1097, "polars-series-rank"]], "polars.Series.nan_max": [[1086, "polars-series-nan-max"]], "polars.Series.list.join": [[1048, "polars-series-list-join"]], "polars.Series.list.take": [[1067, "polars-series-list-take"]], "polars.Series.list.sample": [[1056, "polars-series-list-sample"]], "polars.Series.lower_bound": [[1075, "polars-series-lower-bound"]], "polars.Series.map_dict": [[1076, "polars-series-map-dict"]], "polars.Series.list.union": [[1070, "polars-series-list-union"]], "polars.Series.list.shift": [[1061, "polars-series-list-shift"]], "polars.Series.log10": [[1073, "polars-series-log10"]], "polars.Series.list.last": [[1049, "polars-series-list-last"]], "polars.Series.median": [[1080, "polars-series-median"]], "polars.Series.list.to_array": [[1068, "polars-series-list-to-array"]], "polars.Series.list.set_union": [[1060, "polars-series-list-set-union"]], "polars.Series.list.head": [[1046, "polars-series-list-head"]], "polars.Series.nan_min": [[1087, "polars-series-nan-min"]], "polars.Series.peak_min": [[1093, "polars-series-peak-min"]], "polars.Series.mean": [[1079, "polars-series-mean"]], "polars.Series.mode": [[1082, "polars-series-mode"]], "polars.Series.not_": [[1089, "polars-series-not"]], "polars.Series.list.max": [[1052, "polars-series-list-max"]], "polars.Series.pct_change": [[1091, "polars-series-pct-change"]], "polars.Series.list.reverse": [[1055, "polars-series-list-reverse"]], "polars.Series.quantile": [[1096, "polars-series-quantile"]], "polars.Series.n_chunks": [[1083, "polars-series-n-chunks"]], "polars.Series.log1p": [[1074, "polars-series-log1p"]], "polars.Series.n_unique": [[1084, "polars-series-n-unique"]], "polars.Series.peak_max": [[1092, "polars-series-peak-max"]], "polars.Series.list.to_struct": [[1069, "polars-series-list-to-struct"]], "polars.Series.list.len": [[1050, "polars-series-list-len"]], "polars.Series.list.sort": [[1063, "polars-series-list-sort"]], "polars.Series.list.tail": [[1066, "polars-series-list-tail"]], "polars.Series.list.set_difference": [[1057, "polars-series-list-set-difference"]], "polars.Series.list.unique": [[1071, "polars-series-list-unique"]], "polars.Series.list.symmetric_difference": [[1065, "polars-series-list-symmetric-difference"]], "polars.Series.log": [[1072, "polars-series-log"]], "polars.Series.qcut": [[1095, "polars-series-qcut"]], "polars.Series.product": [[1094, "polars-series-product"]], "polars.Series.rechunk": [[1098, "polars-series-rechunk"]], "polars.Series.max": [[1078, "polars-series-max"]], "polars.Series.new_from_index": [[1088, "polars-series-new-from-index"]], "polars.Series.list.lengths": [[1051, "polars-series-list-lengths"]], "polars.Series.name": [[1085, "polars-series-name"]], "polars.Series.list.slice": [[1062, "polars-series-list-slice"]], "polars.Series.list.sum": [[1064, "polars-series-list-sum"]], "polars.Series.list.set_intersection": [[1058, "polars-series-list-set-intersection"]], "polars.Series.map_elements": [[1077, "polars-series-map-elements"]], "polars.Series.list.set_symmetric_difference": [[1059, "polars-series-list-set-symmetric-difference"]], "polars.Series.rolling_min": [[1111, "polars-series-rolling-min"]], "polars.Series.rolling_map": [[1107, "polars-series-rolling-map"]], "polars.Series.shuffle": [[1131, "polars-series-shuffle"]], "polars.Series.search_sorted": [[1121, "polars-series-search-sorted"]], "polars.Series.str.contains": [[1142, "polars-series-str-contains"]], "polars.Series.str.json_extract": [[1153, "polars-series-str-json-extract"]], "polars.Series.rolling_max": [[1108, "polars-series-rolling-max"]], "polars.Series.str.concat": [[1141, "polars-series-str-concat"]], "polars.Series.set_at_idx": [[1124, "polars-series-set-at-idx"]], "polars.Series.str": [[1140, "polars-series-str"]], "polars.Series.rolling_mean": [[1109, "polars-series-rolling-mean"]], "polars.Series.str.explode": [[1148, "polars-series-str-explode"]], "polars.Series.rolling_std": [[1114, "polars-series-rolling-std"]], "polars.Series.scatter": [[1120, "polars-series-scatter"]], "polars.Series.slice": [[1136, "polars-series-slice"]], "polars.Series.rolling_quantile": [[1112, "polars-series-rolling-quantile"]], "polars.Series.std": [[1139, "polars-series-std"]], "polars.Series.str.encode": [[1146, "polars-series-str-encode"]], "polars.Series.rle": [[1104, "polars-series-rle"]], "polars.Series.set_sorted": [[1125, "polars-series-set-sorted"]], "polars.Series.rolling_skew": [[1113, "polars-series-rolling-skew"]], "polars.Series.shrink_dtype": [[1129, "polars-series-shrink-dtype"]], "polars.Series.str.count_matches": [[1144, "polars-series-str-count-matches"]], "polars.Series.str.extract": [[1149, "polars-series-str-extract"]], "polars.Series.series_equal": [[1122, "polars-series-series-equal"]], "polars.Series.shape": [[1126, "polars-series-shape"]], "polars.Series.shift_and_fill": [[1128, "polars-series-shift-and-fill"]], "polars.Series.sign": [[1132, "polars-series-sign"]], "polars.Series.sinh": [[1134, "polars-series-sinh"]], "polars.Series.str.decode": [[1145, "polars-series-str-decode"]], "polars.Series.str.json_decode": [[1152, "polars-series-str-json-decode"]], "polars.Series.sort": [[1137, "polars-series-sort"]], "polars.Series.set": [[1123, "polars-series-set"]], "polars.Series.str.extract_all": [[1150, "polars-series-str-extract-all"]], "polars.Series.shrink_to_fit": [[1130, "polars-series-shrink-to-fit"]], "polars.Series.rle_id": [[1105, "polars-series-rle-id"]], "polars.Series.rename": [[1100, "polars-series-rename"]], "polars.Series.round_sig_figs": [[1118, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1119, "polars-series-sample"]], "polars.Series.reverse": [[1103, "polars-series-reverse"]], "polars.Series.str.extract_groups": [[1151, "polars-series-str-extract-groups"]], "polars.Series.rolling_apply": [[1106, "polars-series-rolling-apply"]], "polars.Series.str.ends_with": [[1147, "polars-series-str-ends-with"]], "polars.Series.str.count_match": [[1143, "polars-series-str-count-match"]], "polars.Series.skew": [[1135, "polars-series-skew"]], "polars.Series.round": [[1117, "polars-series-round"]], "polars.Series.reshape": [[1102, "polars-series-reshape"]], "polars.Series.rolling_sum": [[1115, "polars-series-rolling-sum"]], "polars.Series.str.json_path_match": [[1154, "polars-series-str-json-path-match"]], "polars.Series.sin": [[1133, "polars-series-sin"]], "polars.Series.shift": [[1127, "polars-series-shift"]], "polars.Series.rolling_median": [[1110, "polars-series-rolling-median"]], "polars.Series.rolling_var": [[1116, "polars-series-rolling-var"]], "polars.Series.replace": [[1101, "polars-series-replace"]], "polars.Series.sqrt": [[1138, "polars-series-sqrt"]], "polars.Series.list.first": [[1043, "polars-series-list-first"]], "polars.Series.floor": [[992, "polars-series-floor"]], "polars.Series.is_in": [[1011, "polars-series-is-in"]], "polars.Series.is_not_null": [[1018, "polars-series-is-not-null"]], "polars.Series.implode": [[1000, "polars-series-implode"]], "polars.Series.list.difference": [[1039, "polars-series-list-difference"]], "polars.Series.is_between": [[1003, "polars-series-is-between"]], "polars.Series.list.arg_max": [[1032, "polars-series-list-arg-max"]], "polars.Series.hist": [[999, "polars-series-hist"]], "polars.Series.inner_dtype": [[1001, "polars-series-inner-dtype"]], "polars.Series.is_not_nan": [[1017, "polars-series-is-not-nan"]], "polars.Series.list.eval": [[1041, "polars-series-list-eval"]], "polars.Series.list.explode": [[1042, "polars-series-list-explode"]], "polars.Series.is_integer": [[1013, "polars-series-is-integer"]], "polars.Series.is_nan": [[1016, "polars-series-is-nan"]], "polars.Series.filter": [[990, "polars-series-filter"]], "polars.Series.list.all": [[1030, "polars-series-list-all"]], "polars.Series.list.drop_nulls": [[1040, "polars-series-list-drop-nulls"]], "polars.Series.is_first_distinct": [[1009, "polars-series-is-first-distinct"]], "polars.Series.limit": [[1028, "polars-series-limit"]], "polars.Series.list.contains": [[1035, "polars-series-list-contains"]], "polars.Series.has_validity": [[996, "polars-series-has-validity"]], "polars.Series.item": [[1025, "polars-series-item"]], "polars.Series.list.count_matches": [[1037, "polars-series-list-count-matches"]], "polars.Series.is_unique": [[1023, "polars-series-is-unique"]], "polars.Series.list.any": [[1031, "polars-series-list-any"]], "polars.Series.gather_every": [[994, "polars-series-gather-every"]], "polars.Series.head": [[998, "polars-series-head"]], "polars.Series.list.concat": [[1034, "polars-series-list-concat"]], "polars.Series.list": [[1029, "polars-series-list"]], "polars.Series.is_last_distinct": [[1015, "polars-series-is-last-distinct"]], "polars.Series.get_chunks": [[995, "polars-series-get-chunks"]], "polars.Series.flags": [[991, "polars-series-flags"]], "polars.Series.is_first": [[1008, "polars-series-is-first"]], "polars.Series.is_float": [[1010, "polars-series-is-float"]], "polars.Series.is_boolean": [[1004, "polars-series-is-boolean"]], "polars.Series.kurtosis": [[1026, "polars-series-kurtosis"]], "polars.Series.is_duplicated": [[1005, "polars-series-is-duplicated"]], "polars.Series.is_utf8": [[1024, "polars-series-is-utf8"]], "polars.Series.is_empty": [[1006, "polars-series-is-empty"]], "polars.Series.hash": [[997, "polars-series-hash"]], "polars.Series.is_null": [[1019, "polars-series-is-null"]], "polars.Series.is_sorted": [[1021, "polars-series-is-sorted"]], "polars.Series.is_finite": [[1007, "polars-series-is-finite"]], "polars.Series.is_numeric": [[1020, "polars-series-is-numeric"]], "polars.Series.list.arg_min": [[1033, "polars-series-list-arg-min"]], "polars.Series.is_infinite": [[1012, "polars-series-is-infinite"]], "polars.Series.list.gather": [[1044, "polars-series-list-gather"]], "polars.Series.gather": [[993, "polars-series-gather"]], "polars.Series.list.count_match": [[1036, "polars-series-list-count-match"]], "polars.Series.interpolate": [[1002, "polars-series-interpolate"]], "polars.Series.len": [[1027, "polars-series-len"]], "polars.Series.is_temporal": [[1022, "polars-series-is-temporal"]], "polars.Series.list.diff": [[1038, "polars-series-list-diff"]], "polars.Series.is_last": [[1014, "polars-series-is-last"]], "polars.Series.dt.seconds": [[960, "polars-series-dt-seconds"]], "polars.Series.dt.total_seconds": [[971, "polars-series-dt-total-seconds"]], "polars.Series.dt.microseconds": [[943, "polars-series-dt-microseconds"]], "polars.Series.dt.milliseconds": [[945, "polars-series-dt-milliseconds"]], "polars.Series.estimated_size": [[980, "polars-series-estimated-size"]], "polars.Series.dt.month_end": [[950, "polars-series-dt-month-end"]], "polars.Series.dt.replace_time_zone": [[957, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.minutes": [[948, "polars-series-dt-minutes"]], "polars.Series.dt.month_start": [[951, "polars-series-dt-month-start"]], "polars.Series.dt.hour": [[935, "polars-series-dt-hour"]], "polars.Series.fill_null": [[989, "polars-series-fill-null"]], "polars.Series.ewm_std": [[982, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[983, "polars-series-ewm-var"]], "polars.Series.dt.quarter": [[956, "polars-series-dt-quarter"]], "polars.Series.ewm_mean": [[981, "polars-series-ewm-mean"]], "polars.Series.entropy": [[978, "polars-series-entropy"]], "polars.Series.dt.total_hours": [[966, "polars-series-dt-total-hours"]], "polars.Series.dt.second": [[959, "polars-series-dt-second"]], "polars.Series.dt.total_microseconds": [[967, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_days": [[965, "polars-series-dt-total-days"]], "polars.Series.dt.month": [[949, "polars-series-dt-month"]], "polars.Series.dtype": [[977, "polars-series-dtype"]], "polars.Series.dt.iso_year": [[938, "polars-series-dt-iso-year"]], "polars.Series.dt.week": [[973, "polars-series-dt-week"]], "polars.Series.extend_constant": [[987, "polars-series-extend-constant"]], "polars.Series.dt.strftime": [[961, "polars-series-dt-strftime"]], "polars.Series.explode": [[985, "polars-series-explode"]], "polars.Series.dt.total_minutes": [[969, "polars-series-dt-total-minutes"]], "polars.Series.dt.offset_by": [[954, "polars-series-dt-offset-by"]], "polars.Series.dt.with_time_unit": [[975, "polars-series-dt-with-time-unit"]], "polars.Series.dt.max": [[939, "polars-series-dt-max"]], "polars.Series.dt.nanosecond": [[952, "polars-series-dt-nanosecond"]], "polars.Series.dt.minute": [[947, "polars-series-dt-minute"]], "polars.Series.dt.microsecond": [[942, "polars-series-dt-microsecond"]], "polars.Series.dt.total_nanoseconds": [[970, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.mean": [[940, "polars-series-dt-mean"]], "polars.Series.dt.is_leap_year": [[937, "polars-series-dt-is-leap-year"]], "polars.Series.dt.total_milliseconds": [[968, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.hours": [[936, "polars-series-dt-hours"]], "polars.Series.dt.round": [[958, "polars-series-dt-round"]], "polars.Series.dt.to_string": [[964, "polars-series-dt-to-string"]], "polars.Series.dt.min": [[946, "polars-series-dt-min"]], "polars.Series.dt.time": [[962, "polars-series-dt-time"]], "polars.Series.dt.ordinal_day": [[955, "polars-series-dt-ordinal-day"]], "polars.Series.fill_nan": [[988, "polars-series-fill-nan"]], "polars.Series.dt.median": [[941, "polars-series-dt-median"]], "polars.Series.dt.nanoseconds": [[953, "polars-series-dt-nanoseconds"]], "polars.Series.dt.timestamp": [[963, "polars-series-dt-timestamp"]], "polars.Series.equals": [[979, "polars-series-equals"]], "polars.Series.dt.year": [[976, "polars-series-dt-year"]], "polars.Series.dt.millisecond": [[944, "polars-series-dt-millisecond"]], "polars.Series.dt.truncate": [[972, "polars-series-dt-truncate"]], "polars.Series.extend": [[986, "polars-series-extend"]], "polars.Series.exp": [[984, "polars-series-exp"]], "polars.Series.dt.weekday": [[974, "polars-series-dt-weekday"]], "polars.Series.cummin": [[914, "polars-series-cummin"]], "polars.Series.cumprod": [[915, "polars-series-cumprod"]], "polars.Series.drop_nulls": [[923, "polars-series-drop-nulls"]], "polars.Series.arr.to_list": [[883, "polars-series-arr-to-list"]], "polars.Series.bin.encode": [[887, "polars-series-bin-encode"]], "polars.Series.describe": [[919, "polars-series-describe"]], "polars.Series.bin.decode": [[886, "polars-series-bin-decode"]], "polars.Series.clip": [[902, "polars-series-clip"]], "polars.Series.cum_sum": [[912, "polars-series-cum-sum"]], "polars.Series.dt.combine": [[927, "polars-series-dt-combine"]], "polars.Series.cumsum": [[916, "polars-series-cumsum"]], "polars.Series.clear": [[901, "polars-series-clear"]], "polars.Series.cat": [[892, "polars-series-cat"]], "polars.Series.arr.unique": [[884, "polars-series-arr-unique"]], "polars.Series.cat.is_local": [[894, "polars-series-cat-is-local"]], "polars.Series.dt.days": [[932, "polars-series-dt-days"]], "polars.Series.dt.datetime": [[930, "polars-series-dt-datetime"]], "polars.Series.dt.date": [[929, "polars-series-dt-date"]], "polars.Series.dt": [[924, "polars-series-dt"]], "polars.Series.bin.contains": [[885, "polars-series-bin-contains"]], "polars.Series.bin.ends_with": [[888, "polars-series-bin-ends-with"]], "polars.Series.cat.get_categories": [[893, "polars-series-cat-get-categories"]], "polars.Series.cum_prod": [[911, "polars-series-cum-prod"]], "polars.Series.cummax": [[913, "polars-series-cummax"]], "polars.Series.cat.set_ordering": [[895, "polars-series-cat-set-ordering"]], "polars.Series.diff": [[920, "polars-series-diff"]], "polars.Series.ceil": [[899, "polars-series-ceil"]], "polars.Series.cosh": [[907, "polars-series-cosh"]], "polars.Series.dt.epoch": [[934, "polars-series-dt-epoch"]], "polars.Series.dt.cast_time_unit": [[926, "polars-series-dt-cast-time-unit"]], "polars.Series.cat.to_local": [[896, "polars-series-cat-to-local"]], "polars.Series.dt.base_utc_offset": [[925, "polars-series-dt-base-utc-offset"]], "polars.Series.cum_min": [[910, "polars-series-cum-min"]], "polars.Series.drop_nans": [[922, "polars-series-drop-nans"]], "polars.Series.cast": [[891, "polars-series-cast"]], "polars.Series.arr.sum": [[882, "polars-series-arr-sum"]], "polars.Series.clone": [[905, "polars-series-clone"]], "polars.Series.chunk_lengths": [[900, "polars-series-chunk-lengths"]], "polars.Series.arr.min": [[881, "polars-series-arr-min"]], "polars.Series.cot": [[908, "polars-series-cot"]], "polars.Series.dt.day": [[931, "polars-series-dt-day"]], "polars.Series.bottom_k": [[890, "polars-series-bottom-k"]], "polars.Series.cumulative_eval": [[917, "polars-series-cumulative-eval"]], "polars.Series.cut": [[918, "polars-series-cut"]], "polars.Series.clip_min": [[904, "polars-series-clip-min"]], "polars.Series.cos": [[906, "polars-series-cos"]], "polars.Series.cbrt": [[898, "polars-series-cbrt"]], "polars.Series.cum_max": [[909, "polars-series-cum-max"]], "polars.Series.arr.max": [[880, "polars-series-arr-max"]], "polars.Series.dot": [[921, "polars-series-dot"]], "polars.Series.dt.dst_offset": [[933, "polars-series-dt-dst-offset"]], "polars.Series.bin.starts_with": [[889, "polars-series-bin-starts-with"]], "polars.Series.dt.convert_time_zone": [[928, "polars-series-dt-convert-time-zone"]], "polars.Series.clip_max": [[903, "polars-series-clip-max"]], "polars.Series.cat.uses_lexical_ordering": [[897, "polars-series-cat-uses-lexical-ordering"]], "polars.LazyFrame.fetch": [[777, "polars-lazyframe-fetch"]], "polars.LazyFrame.groupby": [[787, "polars-lazyframe-groupby"]], "polars.LazyFrame.head": [[790, "polars-lazyframe-head"]], "polars.LazyFrame.quantile": [[809, "polars-lazyframe-quantile"]], "polars.LazyFrame.interpolate": [[792, "polars-lazyframe-interpolate"]], "polars.LazyFrame.inspect": [[791, "polars-lazyframe-inspect"]], "polars.LazyFrame.select_seq": [[816, "polars-lazyframe-select-seq"]], "polars.LazyFrame.shift": [[819, "polars-lazyframe-shift"]], "polars.LazyFrame.group_by_rolling": [[786, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.lazy": [[796, "polars-lazyframe-lazy"]], "polars.LazyFrame.max": [[800, "polars-lazyframe-max"]], "polars.LazyFrame.select": [[815, "polars-lazyframe-select"]], "polars.LazyFrame.last": [[795, "polars-lazyframe-last"]], "polars.LazyFrame.groupby_dynamic": [[788, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[789, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.fill_null": [[779, "polars-lazyframe-fill-null"]], "polars.LazyFrame.columns": [[770, "polars-lazyframe-columns"]], "polars.LazyFrame.rename": [[811, "polars-lazyframe-rename"]], "polars.LazyFrame.serialize": [[817, "polars-lazyframe-serialize"]], "polars.LazyFrame.median": [[802, "polars-lazyframe-median"]], "polars.LazyFrame.from_json": [[782, "polars-lazyframe-from-json"]], "polars.LazyFrame.melt": [[803, "polars-lazyframe-melt"]], "polars.LazyFrame.join_asof": [[794, "polars-lazyframe-join-asof"]], "polars.LazyFrame.gather_every": [[783, "polars-lazyframe-gather-every"]], "polars.LazyFrame.std": [[824, "polars-lazyframe-std"]], "polars.LazyFrame.null_count": [[806, "polars-lazyframe-null-count"]], "polars.LazyFrame.fill_nan": [[778, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.limit": [[797, "polars-lazyframe-limit"]], "polars.LazyFrame.profile": [[808, "polars-lazyframe-profile"]], "polars.LazyFrame.slice": [[822, "polars-lazyframe-slice"]], "polars.LazyFrame.first": [[781, "polars-lazyframe-first"]], "polars.LazyFrame.group_by_dynamic": [[785, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.mean": [[801, "polars-lazyframe-mean"]], "polars.LazyFrame.group_by": [[784, "polars-lazyframe-group-by"]], "polars.LazyFrame.reverse": [[812, "polars-lazyframe-reverse"]], "polars.LazyFrame.dtypes": [[774, "polars-lazyframe-dtypes"]], "polars.LazyFrame.rolling": [[813, "polars-lazyframe-rolling"]], "polars.LazyFrame.drop_nulls": [[773, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.filter": [[780, "polars-lazyframe-filter"]], "polars.LazyFrame.show_graph": [[821, "polars-lazyframe-show-graph"]], "polars.LazyFrame.map": [[798, "polars-lazyframe-map"]], "polars.LazyFrame.sort": [[823, "polars-lazyframe-sort"]], "polars.LazyFrame.read_json": [[810, "polars-lazyframe-read-json"]], "polars.LazyFrame.schema": [[814, "polars-lazyframe-schema"]], "polars.LazyFrame.explain": [[775, "polars-lazyframe-explain"]], "polars.LazyFrame.deserialize": [[771, "polars-lazyframe-deserialize"]], "polars.LazyFrame.explode": [[776, "polars-lazyframe-explode"]], "polars.LazyFrame.map_batches": [[799, "polars-lazyframe-map-batches"]], "polars.LazyFrame.pipe": [[807, "polars-lazyframe-pipe"]], "polars.LazyFrame.min": [[805, "polars-lazyframe-min"]], "polars.LazyFrame.drop": [[772, "polars-lazyframe-drop"]], "polars.LazyFrame.join": [[793, "polars-lazyframe-join"]], "polars.LazyFrame.shift_and_fill": [[820, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.merge_sorted": [[804, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.set_sorted": [[818, "polars-lazyframe-set-sorted"]], "polars.any": [[665, "polars-any"]], "polars.cov": [[680, "polars-cov"]], "polars.date": [[689, "polars-date"]], "polars.cum_fold": [[681, "polars-cum-fold"]], "polars.Expr.xor": [[662, "polars-expr-xor"]], "polars.arg_where": [[673, "polars-arg-where"]], "polars.Expr.where": [[661, "polars-expr-where"]], "polars.cumfold": [[685, "polars-cumfold"]], "polars.approx_n_unique": [[668, "polars-approx-n-unique"]], "polars.duration": [[695, "polars-duration"]], "polars.int_ranges": [[706, "polars-int-ranges"]], "polars.datetime_range": [[693, "polars-datetime-range"]], "polars.implode": [[704, "polars-implode"]], "polars.cum_sum_horizontal": [[684, "polars-cum-sum-horizontal"]], "polars.corr": [[678, "polars-corr"]], "polars.count": [[679, "polars-count"]], "polars.from_epoch": [[701, "polars-from-epoch"]], "polars.concat_list": [[676, "polars-concat-list"]], "polars.Expr.var": [[660, "polars-expr-var"]], "polars.cum_sum": [[683, "polars-cum-sum"]], "polars.mean": [[714, "polars-mean"]], "polars.exclude": [[697, "polars-exclude"]], "polars.lit": [[708, "polars-lit"]], "polars.all": [[663, "polars-all"]], "polars.apply": [[667, "polars-apply"]], "polars.map_groups": [[711, "polars-map-groups"]], "polars.date_range": [[690, "polars-date-range"]], "polars.cumreduce": [[686, "polars-cumreduce"]], "polars.element": [[696, "polars-element"]], "polars.arange": [[669, "polars-arange"]], "polars.fold": [[699, "polars-fold"]], "polars.cum_reduce": [[682, "polars-cum-reduce"]], "polars.cumsum_horizontal": [[688, "polars-cumsum-horizontal"]], "polars.int_range": [[705, "polars-int-range"]], "polars.first": [[698, "polars-first"]], "polars.groups": [[702, "polars-groups"]], "polars.coalesce": [[675, "polars-coalesce"]], "polars.datetime_ranges": [[694, "polars-datetime-ranges"]], "polars.format": [[700, "polars-format"]], "polars.max_horizontal": [[713, "polars-max-horizontal"]], "polars.datetime": [[692, "polars-datetime"]], "polars.arctan2d": [[671, "polars-arctan2d"]], "polars.any_horizontal": [[666, "polars-any-horizontal"]], "polars.max": [[712, "polars-max"]], "polars.avg": [[674, "polars-avg"]], "polars.arctan2": [[670, "polars-arctan2"]], "polars.arg_sort_by": [[672, "polars-arg-sort-by"]], "polars.concat_str": [[677, "polars-concat-str"]], "polars.date_ranges": [[691, "polars-date-ranges"]], "polars.map": [[709, "polars-map"]], "polars.last": [[707, "polars-last"]], "polars.cumsum": [[687, "polars-cumsum"]], "polars.all_horizontal": [[664, "polars-all-horizontal"]], "polars.head": [[703, "polars-head"]], "polars.map_batches": [[710, "polars-map-batches"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[849, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arg_min": [[876, "polars-series-arg-min"]], "polars.LazyFrame.with_columns_seq": [[835, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_columns": [[834, "polars-lazyframe-with-columns"]], "polars.Series.arccosh": [[870, "polars-series-arccosh"]], "polars.Series.any": [[866, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[850, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[839, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.arg_true": [[878, "polars-series-arg-true"]], "polars.Series.arcsin": [[871, "polars-series-arcsin"]], "polars.LazyFrame.with_context": [[836, "polars-lazyframe-with-context"]], "polars.LazyFrame.sum": [[825, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[845, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[840, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.var": [[832, "polars-lazyframe-var"]], "polars.Series.arg_max": [[875, "polars-series-arg-max"]], "polars.Series.arctan": [[873, "polars-series-arctan"]], "polars.Series.apply": [[868, "polars-series-apply"]], "polars.LazyFrame.width": [[833, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[844, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[854, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.abs": [[863, "polars-series-abs"]], "polars.LazyFrame.write_json": [[838, "polars-lazyframe-write-json"]], "Descriptive": [[856, "descriptive"], [1222, "descriptive"], [292, "descriptive"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[853, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arccos": [[869, "polars-series-arccos"]], "polars.Series.arg_sort": [[877, "polars-series-arg-sort"]], "Manipulation/selection": [[860, "manipulation-selection"], [1227, "manipulation-selection"], [750, "manipulation-selection"], [297, "manipulation-selection"]], "polars.LazyFrame.update": [[831, "polars-lazyframe-update"]], "polars.LazyFrame.unnest": [[830, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_row_count": [[837, "polars-lazyframe-with-row-count"]], "Miscellaneous": [[859, "miscellaneous"], [1226, "miscellaneous"], [749, "miscellaneous"], [757, "miscellaneous"], [296, "miscellaneous"]], "Read/write logical plan": [[859, "read-write-logical-plan"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[841, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Series.all": [[865, "polars-series-all"]], "polars.LazyFrame.unique": [[829, "polars-lazyframe-unique"]], "polars.LazyFrame.top_k": [[828, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[843, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[847, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[848, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.take_every": [[827, "polars-lazyframe-take-every"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[842, "polars-lazyframe-group-by-lazygroupby-count"]], "Attributes": [[855, "attributes"], [1217, "attributes"], [290, "attributes"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[852, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[846, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[851, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "LazyFrame": [[858, "lazyframe"]], "polars.Series.alias": [[864, "polars-series-alias"]], "polars.Series.arg_unique": [[879, "polars-series-arg-unique"]], "Selectors": [[861, "selectors"]], "Importing": [[861, "importing"]], "Set operations": [[861, "set-operations"]], "Functions": [[861, "functions"], [745, "functions"], [757, "functions"]], "GroupBy": [[857, "groupby"], [294, "groupby"]], "polars.Series.arcsinh": [[872, "polars-series-arcsinh"]], "polars.Series.append": [[867, "polars-series-append"]], "polars.LazyFrame.tail": [[826, "polars-lazyframe-tail"]], "polars.Series.arctanh": [[874, "polars-series-arctanh"]], "polars.Series.zip_with": [[1215, "polars-series-zip-with"]], "Array": [[1216, "array"], [738, "array"]], "Temporal": [[1230, "temporal"], [755, "temporal"], [298, "temporal"]], "polars.Series.var": [[1213, "polars-series-var"]], "SQL": [[1231, "sql"]], "Methods": [[1231, "methods"]], "Utils": [[1233, "utils"]], "String": [[1228, "string"], [753, "string"]], "Export": [[1223, "export"], [293, "export"]], "Struct": [[1229, "struct"], [754, "struct"]], "polars.Series.upper_bound": [[1211, "polars-series-upper-bound"]], "Boolean": [[1219, "boolean"], [740, "boolean"]], "Binary": [[1218, "binary"], [739, "binary"], [752, "binary"]], "polars.Series.unique_counts": [[1210, "polars-series-unique-counts"]], "polars.Series.view": [[1214, "polars-series-view"]], "Series": [[1224, "series"]], "List": [[1225, "list"], [747, "list"]], "Computation": [[1221, "computation"], [744, "computation"], [291, "computation"]], "polars.Series.value_counts": [[1212, "polars-series-value-counts"]], "Testing": [[1232, "testing"]], "Asserts": [[1232, "asserts"]], "Parametric testing": [[1232, "parametric-testing"]], "Polars primitives": [[1232, "polars-primitives"]], "Strategy helpers": [[1232, "strategy-helpers"]], "Profiles": [[1232, "profiles"]], "Categories": [[1220, "categories"], [741, "categories"]], "polars.Expr.str.lengths": [[611, "polars-expr-str-lengths"]], "polars.Expr.str.pad_end": [[615, "polars-expr-str-pad-end"]], "polars.Expr.str.split_exact": [[624, "polars-expr-str-split-exact"]], "polars.Expr.str.strip": [[627, "polars-expr-str-strip"]], "polars.Expr.str.to_decimal": [[636, "polars-expr-str-to-decimal"]], "polars.Expr.str.starts_with": [[626, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_prefix": [[631, "polars-expr-str-strip-prefix"]], "polars.Expr.struct.field": [[642, "polars-expr-struct-field"]], "polars.Expr.str.extract_groups": [[605, "polars-expr-str-extract-groups"]], "polars.Expr.top_k": [[654, "polars-expr-top-k"]], "polars.Expr.str.to_titlecase": [[639, "polars-expr-str-to-titlecase"]], "polars.Expr.unique": [[656, "polars-expr-unique"]], "polars.Expr.struct.json_encode": [[643, "polars-expr-struct-json-encode"]], "polars.Expr.str.lstrip": [[613, "polars-expr-str-lstrip"]], "polars.Expr.str.strip_chars_start": [[630, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.to_datetime": [[635, "polars-expr-str-to-datetime"]], "polars.Expr.str.len_chars": [[610, "polars-expr-str-len-chars"]], "polars.Expr.tanh": [[652, "polars-expr-tanh"]], "polars.Expr.str.json_extract": [[607, "polars-expr-str-json-extract"]], "polars.Expr.str.n_chars": [[614, "polars-expr-str-n-chars"]], "polars.Expr.str.parse_int": [[617, "polars-expr-str-parse-int"]], "polars.Expr.str.replace": [[618, "polars-expr-str-replace"]], "polars.Expr.str.splitn": [[625, "polars-expr-str-splitn"]], "polars.Expr.str.rjust": [[620, "polars-expr-str-rjust"]], "polars.Expr.str.strip_suffix": [[632, "polars-expr-str-strip-suffix"]], "polars.Expr.tan": [[651, "polars-expr-tan"]], "polars.Expr.unique_counts": [[657, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[658, "polars-expr-upper-bound"]], "polars.Expr.str.to_lowercase": [[637, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_uppercase": [[640, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[641, "polars-expr-str-zfill"]], "polars.Expr.sub": [[645, "polars-expr-sub"]], "polars.Expr.str.strip_chars": [[628, "polars-expr-str-strip-chars"]], "polars.Expr.take": [[649, "polars-expr-take"]], "polars.Expr.to_physical": [[653, "polars-expr-to-physical"]], "polars.Expr.str.ljust": [[612, "polars-expr-str-ljust"]], "polars.Expr.sum": [[647, "polars-expr-sum"]], "polars.Expr.str.slice": [[622, "polars-expr-str-slice"]], "polars.Expr.str.strptime": [[633, "polars-expr-str-strptime"]], "polars.Expr.str.to_time": [[638, "polars-expr-str-to-time"]], "polars.Expr.str.pad_start": [[616, "polars-expr-str-pad-start"]], "polars.Expr.str.strip_chars_end": [[629, "polars-expr-str-strip-chars-end"]], "polars.Expr.suffix": [[646, "polars-expr-suffix"]], "polars.Expr.truediv": [[655, "polars-expr-truediv"]], "polars.Expr.str.split": [[623, "polars-expr-str-split"]], "polars.Expr.str.json_decode": [[606, "polars-expr-str-json-decode"]], "polars.Expr.str.len_bytes": [[609, "polars-expr-str-len-bytes"]], "polars.Expr.str.rstrip": [[621, "polars-expr-str-rstrip"]], "polars.Expr.tail": [[648, "polars-expr-tail"]], "polars.Expr.take_every": [[650, "polars-expr-take-every"]], "polars.Expr.struct.rename_fields": [[644, "polars-expr-struct-rename-fields"]], "polars.Expr.value_counts": [[659, "polars-expr-value-counts"]], "polars.Expr.str.json_path_match": [[608, "polars-expr-str-json-path-match"]], "polars.Expr.str.replace_all": [[619, "polars-expr-str-replace-all"]], "polars.Expr.str.to_date": [[634, "polars-expr-str-to-date"]], "polars.Expr.meta.tree_format": [[524, "polars-expr-meta-tree-format"]], "polars.Expr.null_count": [[543, "polars-expr-null-count"]], "polars.Expr.list.to_array": [[500, "polars-expr-list-to-array"]], "polars.Expr.meta.ne": [[520, "polars-expr-meta-ne"]], "polars.Expr.n_unique": [[531, "polars-expr-n-unique"]], "polars.Expr.ne": [[540, "polars-expr-ne"]], "polars.Expr.mul": [[530, "polars-expr-mul"]], "polars.Expr.log": [[504, "polars-expr-log"]], "polars.Expr.min": [[527, "polars-expr-min"]], "polars.Expr.name.map": [[533, "polars-expr-name-map"]], "polars.Expr.name.to_uppercase": [[537, "polars-expr-name-to-uppercase"]], "polars.Expr.mean": [[515, "polars-expr-mean"]], "polars.Expr.list.sum": [[496, "polars-expr-list-sum"]], "polars.Expr.max": [[514, "polars-expr-max"]], "polars.Expr.list.symmetric_difference": [[497, "polars-expr-list-symmetric-difference"]], "polars.Expr.name.prefix": [[534, "polars-expr-name-prefix"]], "polars.Expr.list.union": [[502, "polars-expr-list-union"]], "polars.Expr.peak_min": [[548, "polars-expr-peak-min"]], "polars.Expr.ne_missing": [[541, "polars-expr-ne-missing"]], "polars.Expr.nan_min": [[539, "polars-expr-nan-min"]], "polars.Expr.over": [[545, "polars-expr-over"]], "polars.Expr.meta.root_names": [[523, "polars-expr-meta-root-names"]], "polars.Expr.meta.has_multiple_outputs": [[518, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.map_alias": [[510, "polars-expr-map-alias"]], "polars.Expr.log10": [[505, "polars-expr-log10"]], "polars.Expr.list.tail": [[498, "polars-expr-list-tail"]], "polars.Expr.name.suffix": [[535, "polars-expr-name-suffix"]], "polars.Expr.list.sort": [[495, "polars-expr-list-sort"]], "polars.Expr.map": [[509, "polars-expr-map"]], "polars.Expr.map_dict": [[512, "polars-expr-map-dict"]], "polars.Expr.name.to_lowercase": [[536, "polars-expr-name-to-lowercase"]], "polars.Expr.lt": [[508, "polars-expr-lt"]], "polars.Expr.peak_max": [[547, "polars-expr-peak-max"]], "polars.Expr.log1p": [[506, "polars-expr-log1p"]], "polars.Expr.meta.is_regex_projection": [[519, "polars-expr-meta-is-regex-projection"]], "polars.Expr.lower_bound": [[507, "polars-expr-lower-bound"]], "polars.Expr.not_": [[542, "polars-expr-not"]], "polars.Expr.mod": [[528, "polars-expr-mod"]], "polars.Expr.list.to_struct": [[501, "polars-expr-list-to-struct"]], "polars.Expr.mode": [[529, "polars-expr-mode"]], "polars.Expr.map_batches": [[511, "polars-expr-map-batches"]], "polars.Expr.pct_change": [[546, "polars-expr-pct-change"]], "polars.Expr.map_elements": [[513, "polars-expr-map-elements"]], "polars.Expr.nan_max": [[538, "polars-expr-nan-max"]], "polars.Expr.meta.eq": [[517, "polars-expr-meta-eq"]], "polars.Expr.meta.pop": [[522, "polars-expr-meta-pop"]], "polars.Expr.meta.write_json": [[526, "polars-expr-meta-write-json"]], "polars.Expr.name.keep": [[532, "polars-expr-name-keep"]], "polars.Expr.list.unique": [[503, "polars-expr-list-unique"]], "polars.Expr.meta.undo_aliases": [[525, "polars-expr-meta-undo-aliases"]], "polars.Expr.or_": [[544, "polars-expr-or"]], "polars.Expr.pipe": [[549, "polars-expr-pipe"]], "polars.Expr.median": [[516, "polars-expr-median"]], "polars.Expr.meta.output_name": [[521, "polars-expr-meta-output-name"]], "polars.Expr.list.take": [[499, "polars-expr-list-take"]], "polars.Expr.round": [[577, "polars-expr-round"]], "polars.Expr.reinterpret": [[558, "polars-expr-reinterpret"]], "polars.Expr.rolling_apply": [[566, "polars-expr-rolling-apply"]], "polars.Expr.str.explode": [[602, "polars-expr-str-explode"]], "polars.Expr.pow": [[550, "polars-expr-pow"]], "polars.Expr.str.decode": [[599, "polars-expr-str-decode"]], "polars.Expr.reverse": [[562, "polars-expr-reverse"]], "polars.Expr.rolling_skew": [[573, "polars-expr-rolling-skew"]], "polars.Expr.shift_and_fill": [[583, "polars-expr-shift-and-fill"]], "polars.Expr.reshape": [[561, "polars-expr-reshape"]], "polars.Expr.sinh": [[588, "polars-expr-sinh"]], "polars.Expr.set_sorted": [[581, "polars-expr-set-sorted"]], "polars.Expr.sign": [[586, "polars-expr-sign"]], "polars.Expr.prefix": [[551, "polars-expr-prefix"]], "polars.Expr.shift": [[582, "polars-expr-shift"]], "polars.Expr.rank": [[556, "polars-expr-rank"]], "polars.Expr.rolling_median": [[570, "polars-expr-rolling-median"]], "polars.Expr.rolling_std": [[574, "polars-expr-rolling-std"]], "polars.Expr.rle_id": [[564, "polars-expr-rle-id"]], "polars.Expr.sqrt": [[593, "polars-expr-sqrt"]], "polars.Expr.replace": [[560, "polars-expr-replace"]], "polars.Expr.quantile": [[554, "polars-expr-quantile"]], "polars.Expr.sort": [[591, "polars-expr-sort"]], "polars.Expr.rolling_var": [[576, "polars-expr-rolling-var"]], "polars.Expr.rolling_sum": [[575, "polars-expr-rolling-sum"]], "polars.Expr.sin": [[587, "polars-expr-sin"]], "polars.Expr.rolling": [[565, "polars-expr-rolling"]], "polars.Expr.str.concat": [[595, "polars-expr-str-concat"]], "polars.Expr.rolling_quantile": [[572, "polars-expr-rolling-quantile"]], "polars.Expr.radians": [[555, "polars-expr-radians"]], "polars.Expr.str.ends_with": [[601, "polars-expr-str-ends-with"]], "polars.Expr.rolling_mean": [[569, "polars-expr-rolling-mean"]], "polars.Expr.str.count_match": [[597, "polars-expr-str-count-match"]], "polars.Expr.shrink_dtype": [[584, "polars-expr-shrink-dtype"]], "polars.Expr.skew": [[589, "polars-expr-skew"]], "polars.Expr.repeat_by": [[559, "polars-expr-repeat-by"]], "polars.Expr.str.count_matches": [[598, "polars-expr-str-count-matches"]], "polars.Expr.str.extract_all": [[604, "polars-expr-str-extract-all"]], "polars.Expr.search_sorted": [[580, "polars-expr-search-sorted"]], "polars.Expr.slice": [[590, "polars-expr-slice"]], "polars.Expr.str.contains": [[596, "polars-expr-str-contains"]], "polars.Expr.shuffle": [[585, "polars-expr-shuffle"]], "polars.Expr.str.extract": [[603, "polars-expr-str-extract"]], "polars.Expr.rolling_map": [[567, "polars-expr-rolling-map"]], "polars.Expr.str.encode": [[600, "polars-expr-str-encode"]], "polars.Expr.product": [[552, "polars-expr-product"]], "polars.Expr.rechunk": [[557, "polars-expr-rechunk"]], "polars.Expr.rolling_max": [[568, "polars-expr-rolling-max"]], "polars.Expr.qcut": [[553, "polars-expr-qcut"]], "polars.Expr.round_sig_figs": [[578, "polars-expr-round-sig-figs"]], "polars.Expr.rolling_min": [[571, "polars-expr-rolling-min"]], "polars.Expr.sort_by": [[592, "polars-expr-sort-by"]], "polars.Expr.sample": [[579, "polars-expr-sample"]], "polars.Expr.rle": [[563, "polars-expr-rle"]], "polars.Expr.std": [[594, "polars-expr-std"]], "polars.Expr.list.count_match": [[468, "polars-expr-list-count-match"]], "polars.Expr.list.explode": [[474, "polars-expr-list-explode"]], "polars.Expr.is_not_nan": [[452, "polars-expr-is-not-nan"]], "polars.Expr.list.drop_nulls": [[472, "polars-expr-list-drop-nulls"]], "polars.Expr.list.first": [[475, "polars-expr-list-first"]], "polars.Expr.is_in": [[446, "polars-expr-is-in"]], "polars.Expr.list.get": [[477, "polars-expr-list-get"]], "polars.Expr.list.mean": [[485, "polars-expr-list-mean"]], "polars.Expr.list.intersection": [[479, "polars-expr-list-intersection"]], "polars.Expr.list.reverse": [[487, "polars-expr-list-reverse"]], "polars.Expr.list.difference": [[471, "polars-expr-list-difference"]], "polars.Expr.is_not_null": [[453, "polars-expr-is-not-null"]], "polars.Expr.interpolate": [[440, "polars-expr-interpolate"]], "polars.Expr.is_infinite": [[447, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[449, "polars-expr-is-last-distinct"]], "polars.Expr.list.arg_max": [[464, "polars-expr-list-arg-max"]], "polars.Expr.list.lengths": [[483, "polars-expr-list-lengths"]], "polars.Expr.is_unique": [[455, "polars-expr-is-unique"]], "polars.Expr.list.set_symmetric_difference": [[491, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.limit": [[461, "polars-expr-limit"]], "polars.Expr.is_not": [[451, "polars-expr-is-not"]], "polars.Expr.list.set_intersection": [[490, "polars-expr-list-set-intersection"]], "polars.Expr.list.eval": [[473, "polars-expr-list-eval"]], "polars.Expr.list.sample": [[488, "polars-expr-list-sample"]], "polars.Expr.list.all": [[462, "polars-expr-list-all"]], "polars.Expr.list.any": [[463, "polars-expr-list-any"]], "polars.Expr.list.shift": [[493, "polars-expr-list-shift"]], "polars.Expr.keep_name": [[456, "polars-expr-keep-name"]], "polars.Expr.list.contains": [[467, "polars-expr-list-contains"]], "polars.Expr.last": [[458, "polars-expr-last"]], "polars.Expr.is_finite": [[443, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[445, "polars-expr-is-first-distinct"]], "polars.Expr.len": [[460, "polars-expr-len"]], "polars.Expr.is_between": [[441, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[442, "polars-expr-is-duplicated"]], "polars.Expr.list.slice": [[494, "polars-expr-list-slice"]], "polars.Expr.is_null": [[454, "polars-expr-is-null"]], "polars.Expr.list.join": [[480, "polars-expr-list-join"]], "polars.Expr.list.concat": [[466, "polars-expr-list-concat"]], "polars.Expr.list.last": [[481, "polars-expr-list-last"]], "polars.Expr.kurtosis": [[457, "polars-expr-kurtosis"]], "polars.Expr.list.len": [[482, "polars-expr-list-len"]], "polars.Expr.list.arg_min": [[465, "polars-expr-list-arg-min"]], "polars.Expr.list.min": [[486, "polars-expr-list-min"]], "polars.Expr.list.set_union": [[492, "polars-expr-list-set-union"]], "polars.Expr.is_first": [[444, "polars-expr-is-first"]], "polars.Expr.is_nan": [[450, "polars-expr-is-nan"]], "polars.Expr.is_last": [[448, "polars-expr-is-last"]], "polars.Expr.le": [[459, "polars-expr-le"]], "polars.Expr.list.count_matches": [[469, "polars-expr-list-count-matches"]], "polars.Expr.list.head": [[478, "polars-expr-list-head"]], "polars.Expr.list.gather": [[476, "polars-expr-list-gather"]], "polars.Expr.list.set_difference": [[489, "polars-expr-list-set-difference"]], "polars.Expr.list.max": [[484, "polars-expr-list-max"]], "polars.Expr.list.diff": [[470, "polars-expr-list-diff"]], "polars.Expr.dt.month_end": [[385, "polars-expr-dt-month-end"]], "polars.Expr.dt.total_days": [[400, "polars-expr-dt-total-days"]], "polars.Expr.dt.replace_time_zone": [[392, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.truncate": [[407, "polars-expr-dt-truncate"]], "polars.Expr.dt.strftime": [[396, "polars-expr-dt-strftime"]], "polars.Expr.dt.total_minutes": [[404, "polars-expr-dt-total-minutes"]], "polars.Expr.gather_every": [[432, "polars-expr-gather-every"]], "polars.Expr.ewm_mean": [[415, "polars-expr-ewm-mean"]], "polars.Expr.floor": [[427, "polars-expr-floor"]], "polars.Expr.filter": [[424, "polars-expr-filter"]], "polars.Expr.eq_missing": [[414, "polars-expr-eq-missing"]], "polars.Expr.inspect": [[439, "polars-expr-inspect"]], "polars.Expr.forward_fill": [[429, "polars-expr-forward-fill"]], "polars.Expr.get": [[434, "polars-expr-get"]], "polars.Expr.dt.quarter": [[391, "polars-expr-dt-quarter"]], "polars.Expr.exp": [[419, "polars-expr-exp"]], "polars.Expr.dt.round": [[393, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[394, "polars-expr-dt-second"]], "polars.Expr.entropy": [[412, "polars-expr-entropy"]], "polars.Expr.explode": [[420, "polars-expr-explode"]], "polars.Expr.floordiv": [[428, "polars-expr-floordiv"]], "polars.Expr.dt.total_milliseconds": [[403, "polars-expr-dt-total-milliseconds"]], "polars.Expr.fill_null": [[423, "polars-expr-fill-null"]], "polars.Expr.first": [[425, "polars-expr-first"]], "polars.Expr.extend_constant": [[421, "polars-expr-extend-constant"]], "polars.Expr.gt": [[435, "polars-expr-gt"]], "polars.Expr.dt.total_microseconds": [[402, "polars-expr-dt-total-microseconds"]], "polars.Expr.from_json": [[430, "polars-expr-from-json"]], "polars.Expr.dt.nanosecond": [[387, "polars-expr-dt-nanosecond"]], "polars.Expr.ewm_std": [[416, "polars-expr-ewm-std"]], "polars.Expr.dt.offset_by": [[389, "polars-expr-dt-offset-by"]], "polars.Expr.implode": [[438, "polars-expr-implode"]], "polars.Expr.dt.to_string": [[399, "polars-expr-dt-to-string"]], "polars.Expr.dt.ordinal_day": [[390, "polars-expr-dt-ordinal-day"]], "polars.Expr.eq": [[413, "polars-expr-eq"]], "polars.Expr.dt.seconds": [[395, "polars-expr-dt-seconds"]], "polars.Expr.flatten": [[426, "polars-expr-flatten"]], "polars.Expr.ge": [[433, "polars-expr-ge"]], "polars.Expr.dt.week": [[408, "polars-expr-dt-week"]], "polars.Expr.exclude": [[418, "polars-expr-exclude"]], "polars.Expr.dt.nanoseconds": [[388, "polars-expr-dt-nanoseconds"]], "polars.Expr.hash": [[436, "polars-expr-hash"]], "polars.Expr.gather": [[431, "polars-expr-gather"]], "polars.Expr.dt.timestamp": [[398, "polars-expr-dt-timestamp"]], "polars.Expr.dt.weekday": [[409, "polars-expr-dt-weekday"]], "polars.Expr.fill_nan": [[422, "polars-expr-fill-nan"]], "polars.Expr.head": [[437, "polars-expr-head"]], "polars.Expr.dt.month_start": [[386, "polars-expr-dt-month-start"]], "polars.Expr.dt.with_time_unit": [[410, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.time": [[397, "polars-expr-dt-time"]], "polars.Expr.dt.total_nanoseconds": [[405, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.year": [[411, "polars-expr-dt-year"]], "polars.Expr.dt.total_seconds": [[406, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.total_hours": [[401, "polars-expr-dt-total-hours"]], "polars.Expr.ewm_var": [[417, "polars-expr-ewm-var"]], "polars.Expr.cut": [[358, "polars-expr-cut"]], "polars.Expr.cum_max": [[348, "polars-expr-cum-max"]], "polars.Expr.dot": [[361, "polars-expr-dot"]], "polars.Expr.cache": [[334, "polars-expr-cache"]], "polars.Expr.cumcount": [[352, "polars-expr-cumcount"]], "polars.Expr.cos": [[343, "polars-expr-cos"]], "polars.Expr.dt.microsecond": [[378, "polars-expr-dt-microsecond"]], "polars.Expr.bottom_k": [[333, "polars-expr-bottom-k"]], "polars.Expr.dt.dst_offset": [[372, "polars-expr-dt-dst-offset"]], "polars.Expr.cosh": [[344, "polars-expr-cosh"]], "polars.Expr.clip_max": [[341, "polars-expr-clip-max"]], "polars.Expr.drop_nulls": [[363, "polars-expr-drop-nulls"]], "polars.Expr.dt.datetime": [[369, "polars-expr-dt-datetime"]], "polars.Expr.cbrt": [[338, "polars-expr-cbrt"]], "polars.Expr.cum_min": [[349, "polars-expr-cum-min"]], "polars.Expr.bin.encode": [[330, "polars-expr-bin-encode"]], "polars.Expr.cummax": [[353, "polars-expr-cummax"]], "polars.Expr.clip_min": [[342, "polars-expr-clip-min"]], "polars.Expr.degrees": [[359, "polars-expr-degrees"]], "polars.Expr.dt.base_utc_offset": [[364, "polars-expr-dt-base-utc-offset"]], "polars.Expr.ceil": [[339, "polars-expr-ceil"]], "polars.Expr.cumsum": [[356, "polars-expr-cumsum"]], "polars.Expr.dt.milliseconds": [[381, "polars-expr-dt-milliseconds"]], "polars.Expr.cum_count": [[347, "polars-expr-cum-count"]], "polars.Expr.dt.epoch": [[373, "polars-expr-dt-epoch"]], "polars.Expr.cast": [[335, "polars-expr-cast"]], "polars.Expr.dt.iso_year": [[377, "polars-expr-dt-iso-year"]], "polars.Expr.dt.minute": [[382, "polars-expr-dt-minute"]], "polars.Expr.dt.microseconds": [[379, "polars-expr-dt-microseconds"]], "polars.Expr.dt.hours": [[375, "polars-expr-dt-hours"]], "polars.Expr.dt.convert_time_zone": [[367, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.millisecond": [[380, "polars-expr-dt-millisecond"]], "polars.Expr.cat.get_categories": [[336, "polars-expr-cat-get-categories"]], "polars.Expr.dt.combine": [[366, "polars-expr-dt-combine"]], "polars.Expr.dt.days": [[371, "polars-expr-dt-days"]], "polars.Expr.dt.date": [[368, "polars-expr-dt-date"]], "polars.Expr.bin.starts_with": [[332, "polars-expr-bin-starts-with"]], "polars.Expr.drop_nans": [[362, "polars-expr-drop-nans"]], "polars.Expr.cum_prod": [[350, "polars-expr-cum-prod"]], "polars.Expr.dt.cast_time_unit": [[365, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hour": [[374, "polars-expr-dt-hour"]], "polars.Expr.dt.day": [[370, "polars-expr-dt-day"]], "polars.Expr.bin.ends_with": [[331, "polars-expr-bin-ends-with"]], "polars.Expr.cat.set_ordering": [[337, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.minutes": [[383, "polars-expr-dt-minutes"]], "polars.Expr.cot": [[345, "polars-expr-cot"]], "polars.Expr.dt.month": [[384, "polars-expr-dt-month"]], "polars.Expr.cumulative_eval": [[357, "polars-expr-cumulative-eval"]], "polars.Expr.cumprod": [[355, "polars-expr-cumprod"]], "polars.Expr.dt.is_leap_year": [[376, "polars-expr-dt-is-leap-year"]], "polars.Expr.cum_sum": [[351, "polars-expr-cum-sum"]], "polars.Expr.cummin": [[354, "polars-expr-cummin"]], "polars.Expr.clip": [[340, "polars-expr-clip"]], "polars.Expr.diff": [[360, "polars-expr-diff"]], "polars.Expr.count": [[346, "polars-expr-count"]], "polars.DataFrame.pivot": [[222, "polars-dataframe-pivot"]], "polars.DataFrame.rows": [[233, "polars-dataframe-rows"]], "polars.DataFrame.width": [[269, "polars-dataframe-width"]], "polars.DataFrame.quantile": [[224, "polars-dataframe-quantile"]], "polars.DataFrame.to_init_repr": [[255, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_pandas": [[257, "polars-dataframe-to-pandas"]], "polars.DataFrame.schema": [[236, "polars-dataframe-schema"]], "polars.DataFrame.pipe": [[221, "polars-dataframe-pipe"]], "polars.dataframe.group_by.GroupBy.__iter__": [[273, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.sort": [[245, "polars-dataframe-sort"]], "polars.DataFrame.unstack": [[264, "polars-dataframe-unstack"]], "polars.DataFrame.top_k": [[260, "polars-dataframe-top-k"]], "polars.DataFrame.std": [[246, "polars-dataframe-std"]], "polars.DataFrame.unique": [[262, "polars-dataframe-unique"]], "polars.DataFrame.select_seq": [[238, "polars-dataframe-select-seq"]], "polars.DataFrame.with_row_count": [[272, "polars-dataframe-with-row-count"]], "polars.DataFrame.shift": [[241, "polars-dataframe-shift"]], "polars.DataFrame.sample": [[235, "polars-dataframe-sample"]], "polars.DataFrame.replace": [[227, "polars-dataframe-replace"]], "polars.DataFrame.set_sorted": [[239, "polars-dataframe-set-sorted"]], "polars.DataFrame.row": [[232, "polars-dataframe-row"]], "polars.DataFrame.sum": [[247, "polars-dataframe-sum"]], "polars.DataFrame.take_every": [[250, "polars-dataframe-take-every"]], "polars.DataFrame.partition_by": [[220, "polars-dataframe-partition-by"]], "polars.DataFrame.rename": [[226, "polars-dataframe-rename"]], "polars.DataFrame.product": [[223, "polars-dataframe-product"]], "polars.DataFrame.transpose": [[261, "polars-dataframe-transpose"]], "polars.DataFrame.unnest": [[263, "polars-dataframe-unnest"]], "polars.DataFrame.vstack": [[268, "polars-dataframe-vstack"]], "polars.DataFrame.shape": [[240, "polars-dataframe-shape"]], "polars.DataFrame.with_columns_seq": [[271, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.shrink_to_fit": [[243, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.select": [[237, "polars-dataframe-select"]], "polars.DataFrame.rows_by_key": [[234, "polars-dataframe-rows-by-key"]], "polars.DataFrame.to_series": [[258, "polars-dataframe-to-series"]], "polars.DataFrame.rolling": [[231, "polars-dataframe-rolling"]], "polars.DataFrame.slice": [[244, "polars-dataframe-slice"]], "polars.DataFrame.tail": [[249, "polars-dataframe-tail"]], "polars.DataFrame.to_dicts": [[253, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_arrow": [[251, "polars-dataframe-to-arrow"]], "polars.DataFrame.with_columns": [[270, "polars-dataframe-with-columns"]], "polars.DataFrame.replace_column": [[229, "polars-dataframe-replace-column"]], "polars.DataFrame.replace_at_idx": [[228, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.shift_and_fill": [[242, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.update": [[265, "polars-dataframe-update"]], "polars.DataFrame.sum_horizontal": [[248, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.upsample": [[266, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[267, "polars-dataframe-var"]], "polars.DataFrame.to_dummies": [[254, "polars-dataframe-to-dummies"]], "polars.DataFrame.rechunk": [[225, "polars-dataframe-rechunk"]], "polars.DataFrame.to_dict": [[252, "polars-dataframe-to-dict"]], "polars.DataFrame.to_struct": [[259, "polars-dataframe-to-struct"]], "polars.DataFrame.to_numpy": [[256, "polars-dataframe-to-numpy"]], "polars.dataframe.group_by.GroupBy.agg": [[274, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.reverse": [[230, "polars-dataframe-reverse"]], "polars.median": [[715, "polars-median"]], "polars.ones": [[719, "polars-ones"]], "polars.LazyFrame.approx_n_unique": [[761, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.clone": [[767, "polars-lazyframe-clone"]], "polars.select": [[725, "polars-select"]], "polars.time_range": [[733, "polars-time-range"]], "polars.when": [[736, "polars-when"]], "polars.n_unique": [[718, "polars-n-unique"]], "API reference": [[758, "api-reference"]], "polars.LazyFrame.approx_unique": [[762, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.bottom_k": [[763, "polars-lazyframe-bottom-k"]], "Window": [[756, "window"]], "polars.LazyFrame.cache": [[764, "polars-lazyframe-cache"]], "polars.tail": [[731, "polars-tail"]], "polars.min_horizontal": [[717, "polars-min-horizontal"]], "Name": [[751, "name"]], "polars.var": [[735, "polars-var"]], "polars.repeat": [[722, "polars-repeat"]], "Expressions": [[746, "expressions"]], "polars.col": [[742, "polars-col"]], "polars.LazyFrame.clear": [[766, "polars-lazyframe-clear"]], "polars.time": [[732, "polars-time"]], "polars.zeros": [[737, "polars-zeros"]], "Input/output": [[759, "input-output"]], "CSV": [[759, "csv"]], "Feather/ IPC": [[759, "feather-ipc"]], "Parquet": [[759, "parquet"]], "Database": [[759, "database"]], "JSON": [[759, "json"]], "AVRO": [[759, "avro"]], "Spreadsheet": [[759, "spreadsheet"]], "Apache Iceberg": [[759, "apache-iceberg"]], "Delta Lake": [[759, "delta-lake"]], "Datasets": [[759, "datasets"]], "BatchedCsvReader": [[759, "batchedcsvreader"]], "polars.LazyFrame.collect": [[768, "polars-lazyframe-collect"]], "polars.rolling_cov": [[724, "polars-rolling-cov"]], "polars.sum_horizontal": [[730, "polars-sum-horizontal"]], "Conversion": [[757, "conversion"]], "Parallelization": [[757, "parallelization"]], "Random": [[757, "random"]], "StringCache": [[757, "stringcache"]], "polars.LazyFrame.collect_async": [[769, "polars-lazyframe-collect-async"]], "Meta": [[748, "meta"]], "polars.quantile": [[720, "polars-quantile"]], "polars.reduce": [[721, "polars-reduce"]], "polars.std": [[727, "polars-std"]], "polars.sum": [[729, "polars-sum"]], "polars.min": [[716, "polars-min"]], "polars.struct": [[728, "polars-struct"]], "Columns / names": [[743, "columns-names"]], "polars.LazyFrame.cast": [[765, "polars-lazyframe-cast"]], "Operators": [[752, "operators"]], "Conjunction": [[752, "conjunction"]], "Comparison": [[752, "comparison"]], "Numeric": [[752, "numeric"], [298, "numeric"]], "polars.rolling_corr": [[723, "polars-rolling-corr"]], "polars.time_ranges": [[734, "polars-time-ranges"]], "polars.sql_expr": [[726, "polars-sql-expr"]], "polars.dataframe.group_by.GroupBy.quantile": [[287, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.any": [[307, "polars-expr-any"]], "polars.Expr.bin.decode": [[329, "polars-expr-bin-decode"]], "polars.dataframe.group_by.GroupBy.sum": [[288, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.count": [[277, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.mean": [[283, "polars-dataframe-group-by-groupby-mean"]], "DataFrame": [[295, "dataframe"]], "polars.Expr.apply": [[309, "polars-expr-apply"]], "polars.Expr.arg_true": [[320, "polars-expr-arg-true"]], "polars.dataframe.group_by.GroupBy.tail": [[289, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.approx_n_unique": [[310, "polars-expr-approx-n-unique"]], "polars.Expr.add": [[302, "polars-expr-add"]], "polars.Expr.arg_unique": [[321, "polars-expr-arg-unique"]], "polars.Expr.arg_max": [[317, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.first": [[278, "polars-dataframe-group-by-groupby-first"]], "Data types": [[298, "data-types"]], "Nested": [[298, "nested"]], "Other": [[298, "other"]], "polars.Expr.abs": [[301, "polars-expr-abs"]], "polars.Expr.arcsin": [[313, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.head": [[279, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.max": [[282, "polars-dataframe-group-by-groupby-max"]], "Exceptions": [[299, "exceptions"]], "polars.dataframe.group_by.GroupBy.min": [[285, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.last": [[280, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.arr.sum": [[324, "polars-expr-arr-sum"]], "polars.Expr.arctanh": [[316, "polars-expr-arctanh"]], "polars.Expr.append": [[308, "polars-expr-append"]], "polars.Expr.backward_fill": [[327, "polars-expr-backward-fill"]], "polars.Expr.and_": [[306, "polars-expr-and"]], "polars.Expr.agg_groups": [[303, "polars-expr-agg-groups"]], "polars.Expr.arccos": [[311, "polars-expr-arccos"]], "polars.Expr.alias": [[304, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.n_unique": [[286, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.median": [[284, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arcsinh": [[314, "polars-expr-arcsinh"]], "polars.Expr.bin.contains": [[328, "polars-expr-bin-contains"]], "polars.Expr.arctan": [[315, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.apply": [[276, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arg_sort": [[319, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.all": [[275, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arccosh": [[312, "polars-expr-arccosh"]], "polars.Expr.arg_min": [[318, "polars-expr-arg-min"]], "polars.Expr.arr.min": [[323, "polars-expr-arr-min"]], "polars.dataframe.group_by.GroupBy.map_groups": [[281, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arr.to_list": [[325, "polars-expr-arr-to-list"]], "polars.Expr.arr.unique": [[326, "polars-expr-arr-unique"]], "polars.Expr.all": [[305, "polars-expr-all"]], "polars.Expr.arr.max": [[322, "polars-expr-arr-max"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "float32 (class in polars)": [[51, "polars.Float32"]], "__init__() (polars.float32 method)": [[51, "polars.Float32.__init__"]], "float64 (class in polars)": [[52, "polars.Float64"]], "__init__() (polars.float64 method)": [[52, "polars.Float64.__init__"]], "int16 (class in polars)": [[53, "polars.Int16"]], "__init__() (polars.int16 method)": [[53, "polars.Int16.__init__"]], "int32 (class in polars)": [[54, "polars.Int32"]], "__init__() (polars.int32 method)": [[54, "polars.Int32.__init__"]], "int64 (class in polars)": [[55, "polars.Int64"]], "__init__() (polars.int64 method)": [[55, "polars.Int64.__init__"]], "int8 (class in polars)": [[56, "polars.Int8"]], "__init__() (polars.int8 method)": [[56, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[57, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[60, "polars.List"]], "__init__() (polars.list method)": [[60, "polars.List.__init__"]], "null (class in polars)": [[61, "polars.Null"]], "__init__() (polars.null method)": [[61, "polars.Null.__init__"]], "object (class in polars)": [[62, "polars.Object"]], "__init__() (polars.object method)": [[62, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[63, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[64, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[65, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[67, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[68, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[69, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[69, "polars.StringCache.__init__"]], "struct (class in polars)": [[70, "polars.Struct"]], "__init__() (polars.struct method)": [[70, "polars.Struct.__init__"]], "time (class in polars)": [[71, "polars.Time"]], "__init__() (polars.time method)": [[71, "polars.Time.__init__"]], "uint16 (class in polars)": [[72, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[72, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[73, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[73, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[74, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[74, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[75, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[75, "polars.UInt8.__init__"]], "unknown (class in polars)": [[76, "polars.Unknown"]], "__init__() (polars.unknown method)": [[76, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[77, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[77, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[78, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[79, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[80, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[81, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[82, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[83, "polars.build_info"]], "collect_all() (in module polars)": [[84, "polars.collect_all"]], "collect_all_async() (in module polars)": [[85, "polars.collect_all_async"]], "concat() (in module polars)": [[86, "polars.concat"]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache"]], "arrowerror": [[89, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[90, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[91, "polars.exceptions.ComputeError"]], "duplicateerror": [[92, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[94, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[95, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[96, "polars.exceptions.PolarsPanicError"]], "rowserror": [[97, "polars.exceptions.RowsError"]], "schemaerror": [[98, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[99, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[100, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[101, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[102, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[103, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[104, "polars.from_dataframe"]], "from_dict() (in module polars)": [[105, "polars.from_dict"]], "from_dicts() (in module polars)": [[106, "polars.from_dicts"]], "from_numpy() (in module polars)": [[107, "polars.from_numpy"]], "from_pandas() (in module polars)": [[108, "polars.from_pandas"]], "from_records() (in module polars)": [[109, "polars.from_records"]], "from_repr() (in module polars)": [[110, "polars.from_repr"]], "get_index_type() (in module polars)": [[111, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[112, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[113, "polars.read_avro"]], "read_csv() (in module polars)": [[114, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[115, "polars.read_csv_batched"]], "read_database() (in module polars)": [[116, "polars.read_database"]], "read_database_uri() (in module polars)": [[117, "polars.read_database_uri"]], "read_delta() (in module polars)": [[118, "polars.read_delta"]], "read_excel() (in module polars)": [[119, "polars.read_excel"]], "read_ipc() (in module polars)": [[120, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[121, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[122, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[123, "polars.read_json"]], "read_ndjson() (in module polars)": [[124, "polars.read_ndjson"]], "read_ods() (in module polars)": [[125, "polars.read_ods"]], "read_parquet() (in module polars)": [[126, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[127, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[128, "polars.scan_csv"]], "scan_delta() (in module polars)": [[129, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[130, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[131, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[132, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[133, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[134, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[135, "polars.set_random_seed"]], "show_versions() (in module polars)": [[136, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[137, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[139, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[141, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[141, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[148, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[149, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[152, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[153, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[154, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[155, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[156, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[157, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[158, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[159, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[160, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[161, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[162, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[163, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[164, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[165, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[166, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[167, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[168, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[169, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[170, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[171, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[172, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[173, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[174, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[175, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[176, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[177, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[178, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[179, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[180, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[181, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[182, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[183, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[184, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[185, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[186, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[187, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[188, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[189, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[190, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[191, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[192, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[193, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[194, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[195, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[196, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[197, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[198, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[199, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[200, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[201, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[202, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[203, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[204, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[205, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[206, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[207, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[208, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[209, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[210, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[211, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[212, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[213, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[214, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[215, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[216, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[217, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[218, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[219, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[220, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[221, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[222, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[223, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[224, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[225, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[226, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[227, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[228, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[229, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[230, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[231, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[232, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[233, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[234, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[235, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[236, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[237, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[238, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[239, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[240, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[241, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[242, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[243, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[244, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[245, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[246, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[247, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[248, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[249, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[250, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[251, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[252, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[253, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[254, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[255, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[256, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[257, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[258, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[259, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[260, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[261, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[262, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[263, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[264, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[265, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[266, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[267, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[268, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[269, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[270, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[271, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[272, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[301, "polars.Expr.abs"]], "add() (polars.expr method)": [[302, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[303, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[304, "polars.Expr.alias"]], "all() (polars.expr method)": [[305, "polars.Expr.all"]], "and_() (polars.expr method)": [[306, "polars.Expr.and_"]], "any() (polars.expr method)": [[307, "polars.Expr.any"]], "append() (polars.expr method)": [[308, "polars.Expr.append"]], "apply() (polars.expr method)": [[309, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[310, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[311, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[312, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[313, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[314, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[315, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[316, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[317, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[318, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[319, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[320, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[321, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[322, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[323, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[324, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[325, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[326, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[327, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[328, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[329, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[330, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[331, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[332, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[333, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[334, "polars.Expr.cache"]], "cast() (polars.expr method)": [[335, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[336, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[337, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[338, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[339, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[340, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[341, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[342, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[343, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[344, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[345, "polars.Expr.cot"]], "count() (polars.expr method)": [[346, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[347, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[348, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[349, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[350, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[351, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[352, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[353, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[354, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[355, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[356, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[357, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[358, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[359, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[360, "polars.Expr.diff"]], "dot() (polars.expr method)": [[361, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[362, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[363, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[364, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[365, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[366, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[367, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[368, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[369, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[370, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[371, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[372, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[373, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[374, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[375, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[376, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[377, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[378, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[379, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[380, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[381, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[382, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[383, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[384, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[385, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[386, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[387, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[388, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[389, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[390, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[391, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[392, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[393, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[394, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[395, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[396, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[397, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[398, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[399, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[400, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[401, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[402, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[406, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[407, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[408, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[409, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[410, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[411, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[412, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[413, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[414, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[415, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[416, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[417, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[418, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[419, "polars.Expr.exp"]], "explode() (polars.expr method)": [[420, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[421, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[422, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[423, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[424, "polars.Expr.filter"]], "first() (polars.expr method)": [[425, "polars.Expr.first"]], "flatten() (polars.expr method)": [[426, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[427, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[428, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[429, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[430, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[431, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[432, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[433, "polars.Expr.ge"]], "get() (polars.expr method)": [[434, "polars.Expr.get"]], "gt() (polars.expr method)": [[435, "polars.Expr.gt"]], "hash() (polars.expr method)": [[436, "polars.Expr.hash"]], "head() (polars.expr method)": [[437, "polars.Expr.head"]], "implode() (polars.expr method)": [[438, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[439, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[440, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[441, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[442, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[443, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[444, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[445, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[446, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[447, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[448, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[449, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[450, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[451, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[452, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[453, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[454, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[455, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[456, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[457, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[458, "polars.Expr.last"]], "le() (polars.expr method)": [[459, "polars.Expr.le"]], "len() (polars.expr method)": [[460, "polars.Expr.len"]], "limit() (polars.expr method)": [[461, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[462, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[463, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[464, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[465, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[466, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[467, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[468, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[469, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[470, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[471, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[472, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[473, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[474, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[475, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[476, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[477, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[478, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[479, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[480, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[481, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[482, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[483, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[484, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[485, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[486, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[487, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[488, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[489, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[490, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[491, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[492, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[493, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[494, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[495, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[496, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[497, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[498, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[499, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[500, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[501, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[502, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[503, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[504, "polars.Expr.log"]], "log10() (polars.expr method)": [[505, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[506, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[507, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[508, "polars.Expr.lt"]], "map() (polars.expr method)": [[509, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[510, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[511, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[512, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[513, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[514, "polars.Expr.max"]], "mean() (polars.expr method)": [[515, "polars.Expr.mean"]], "median() (polars.expr method)": [[516, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[517, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[518, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[519, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[520, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[521, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[522, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[523, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[524, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[525, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[526, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[527, "polars.Expr.min"]], "mod() (polars.expr method)": [[528, "polars.Expr.mod"]], "mode() (polars.expr method)": [[529, "polars.Expr.mode"]], "mul() (polars.expr method)": [[530, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[531, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[532, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[533, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[534, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[535, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[536, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[537, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[538, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[539, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[540, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[541, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[542, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[543, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[544, "polars.Expr.or_"]], "over() (polars.expr method)": [[545, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[546, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[547, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[548, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[549, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[550, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[551, "polars.Expr.prefix"]], "product() (polars.expr method)": [[552, "polars.Expr.product"]], "qcut() (polars.expr method)": [[553, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[554, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[555, "polars.Expr.radians"]], "rank() (polars.expr method)": [[556, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[557, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[558, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[559, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[560, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[561, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[562, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[563, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[564, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[565, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[566, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[567, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[568, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[569, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[570, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[571, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[572, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[573, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[574, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[575, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[576, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[577, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[578, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[579, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[580, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[581, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[582, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[583, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[584, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[585, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[586, "polars.Expr.sign"]], "sin() (polars.expr method)": [[587, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[588, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[589, "polars.Expr.skew"]], "slice() (polars.expr method)": [[590, "polars.Expr.slice"]], "sort() (polars.expr method)": [[591, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[592, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[593, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[594, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[595, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[596, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[597, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[598, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[599, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[600, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[601, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[602, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[603, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[604, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[605, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[606, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[607, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[608, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[609, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[610, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[611, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[612, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[613, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[614, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[615, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[616, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[617, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[618, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[619, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[620, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[621, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[622, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[623, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[624, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[625, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[626, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[627, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[628, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[629, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[630, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[631, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[632, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[633, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[634, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[635, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[636, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[637, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[638, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[639, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[640, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[641, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[642, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[643, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[644, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[645, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[646, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[647, "polars.Expr.sum"]], "tail() (polars.expr method)": [[648, "polars.Expr.tail"]], "take() (polars.expr method)": [[649, "polars.Expr.take"]], "take_every() (polars.expr method)": [[650, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[651, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[652, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[653, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[654, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[655, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[656, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[657, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[658, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[659, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[660, "polars.Expr.var"]], "where() (polars.expr method)": [[661, "polars.Expr.where"]], "xor() (polars.expr method)": [[662, "polars.Expr.xor"]], "all() (in module polars)": [[663, "polars.all"]], "all_horizontal() (in module polars)": [[664, "polars.all_horizontal"]], "any() (in module polars)": [[665, "polars.any"]], "any_horizontal() (in module polars)": [[666, "polars.any_horizontal"]], "apply() (in module polars)": [[667, "polars.apply"]], "approx_n_unique() (in module polars)": [[668, "polars.approx_n_unique"]], "arange() (in module polars)": [[669, "polars.arange"]], "arctan2() (in module polars)": [[670, "polars.arctan2"]], "arctan2d() (in module polars)": [[671, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[672, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[673, "polars.arg_where"]], "avg() (in module polars)": [[674, "polars.avg"]], "coalesce() (in module polars)": [[675, "polars.coalesce"]], "concat_list() (in module polars)": [[676, "polars.concat_list"]], "concat_str() (in module polars)": [[677, "polars.concat_str"]], "corr() (in module polars)": [[678, "polars.corr"]], "count() (in module polars)": [[679, "polars.count"]], "cov() (in module polars)": [[680, "polars.cov"]], "cum_fold() (in module polars)": [[681, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[682, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[683, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[684, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[685, "polars.cumfold"]], "cumreduce() (in module polars)": [[686, "polars.cumreduce"]], "cumsum() (in module polars)": [[687, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[688, "polars.cumsum_horizontal"]], "date() (in module polars)": [[689, "polars.date"]], "date_range() (in module polars)": [[690, "polars.date_range"]], "date_ranges() (in module polars)": [[691, "polars.date_ranges"]], "datetime() (in module polars)": [[692, "polars.datetime"]], "datetime_range() (in module polars)": [[693, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[694, "polars.datetime_ranges"]], "duration() (in module polars)": [[695, "polars.duration"]], "element() (in module polars)": [[696, "polars.element"]], "exclude() (in module polars)": [[697, "polars.exclude"]], "first() (in module polars)": [[698, "polars.first"]], "fold() (in module polars)": [[699, "polars.fold"]], "format() (in module polars)": [[700, "polars.format"]], "from_epoch() (in module polars)": [[701, "polars.from_epoch"]], "groups() (in module polars)": [[702, "polars.groups"]], "head() (in module polars)": [[703, "polars.head"]], "implode() (in module polars)": [[704, "polars.implode"]], "int_range() (in module polars)": [[705, "polars.int_range"]], "int_ranges() (in module polars)": [[706, "polars.int_ranges"]], "last() (in module polars)": [[707, "polars.last"]], "lit() (in module polars)": [[708, "polars.lit"]], "map() (in module polars)": [[709, "polars.map"]], "map_batches() (in module polars)": [[710, "polars.map_batches"]], "map_groups() (in module polars)": [[711, "polars.map_groups"]], "max() (in module polars)": [[712, "polars.max"]], "max_horizontal() (in module polars)": [[713, "polars.max_horizontal"]], "mean() (in module polars)": [[714, "polars.mean"]], "median() (in module polars)": [[715, "polars.median"]], "min() (in module polars)": [[716, "polars.min"]], "min_horizontal() (in module polars)": [[717, "polars.min_horizontal"]], "n_unique() (in module polars)": [[718, "polars.n_unique"]], "ones() (in module polars)": [[719, "polars.ones"]], "quantile() (in module polars)": [[720, "polars.quantile"]], "reduce() (in module polars)": [[721, "polars.reduce"]], "repeat() (in module polars)": [[722, "polars.repeat"]], "rolling_corr() (in module polars)": [[723, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[724, "polars.rolling_cov"]], "select() (in module polars)": [[725, "polars.select"]], "sql_expr() (in module polars)": [[726, "polars.sql_expr"]], "std() (in module polars)": [[727, "polars.std"]], "struct() (in module polars)": [[728, "polars.struct"]], "sum() (in module polars)": [[729, "polars.sum"]], "sum_horizontal() (in module polars)": [[730, "polars.sum_horizontal"]], "tail() (in module polars)": [[731, "polars.tail"]], "time() (in module polars)": [[732, "polars.time"]], "time_range() (in module polars)": [[733, "polars.time_range"]], "time_ranges() (in module polars)": [[734, "polars.time_ranges"]], "var() (in module polars)": [[735, "polars.var"]], "when() (in module polars)": [[736, "polars.when"]], "zeros() (in module polars)": [[737, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[761, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[762, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[763, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[764, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[765, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[766, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[767, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[768, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[769, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[770, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[771, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[772, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[773, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[774, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[775, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[776, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[777, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[778, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[779, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[780, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[781, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[782, "polars.LazyFrame.from_json"]], "gather_every() (polars.lazyframe method)": [[783, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[784, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[785, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[786, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[787, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[788, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[789, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[790, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[791, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[792, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[793, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[794, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[795, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[796, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[797, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[798, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[799, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[800, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[801, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[802, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[803, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[804, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[805, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[806, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[807, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[808, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[809, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[810, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[811, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[812, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[813, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[814, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[815, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[816, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[817, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[818, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[819, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[820, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[821, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[822, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[823, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[824, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[825, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[826, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[827, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[828, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[829, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[830, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[831, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[832, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[833, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[834, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[835, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[836, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[837, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[838, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[850, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[852, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[853, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[854, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[861, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[861, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[861, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[861, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[861, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[861, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[861, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[861, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[861, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[861, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[861, "polars.selectors.first"]], "float() (in module polars.selectors)": [[861, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[861, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[861, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[861, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[861, "polars.selectors.matches"]], "module": [[861, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[861, "polars.selectors.numeric"]], "polars.selectors": [[861, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[861, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[861, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[861, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[861, "polars.selectors.time"]], "abs() (polars.series method)": [[863, "polars.Series.abs"]], "alias() (polars.series method)": [[864, "polars.Series.alias"]], "all() (polars.series method)": [[865, "polars.Series.all"]], "any() (polars.series method)": [[866, "polars.Series.any"]], "append() (polars.series method)": [[867, "polars.Series.append"]], "apply() (polars.series method)": [[868, "polars.Series.apply"]], "arccos() (polars.series method)": [[869, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[870, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[871, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[872, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[873, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[874, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[875, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[876, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[877, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[878, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[879, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[880, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[881, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[882, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[883, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[884, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[885, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[886, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[887, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[888, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[889, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[890, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[891, "polars.Series.cast"]], "cat (polars.series attribute)": [[892, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[893, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[894, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[895, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[896, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[897, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[898, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[899, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[900, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[901, "polars.Series.clear"]], "clip() (polars.series method)": [[902, "polars.Series.clip"]], "clip_max() (polars.series method)": [[903, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[904, "polars.Series.clip_min"]], "clone() (polars.series method)": [[905, "polars.Series.clone"]], "cos() (polars.series method)": [[906, "polars.Series.cos"]], "cosh() (polars.series method)": [[907, "polars.Series.cosh"]], "cot() (polars.series method)": [[908, "polars.Series.cot"]], "cum_max() (polars.series method)": [[909, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[910, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[911, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[912, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[913, "polars.Series.cummax"]], "cummin() (polars.series method)": [[914, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[915, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[916, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[917, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[918, "polars.Series.cut"]], "describe() (polars.series method)": [[919, "polars.Series.describe"]], "diff() (polars.series method)": [[920, "polars.Series.diff"]], "dot() (polars.series method)": [[921, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[922, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[923, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[924, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[925, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[926, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[927, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[928, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[929, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[930, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[931, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[932, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[933, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[934, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[935, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[936, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[937, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[938, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[939, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[940, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[941, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[942, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[943, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[944, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[945, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[946, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[947, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[948, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[949, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[950, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[951, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[952, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[953, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[954, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[955, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[956, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[957, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[958, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[959, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[960, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[961, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[962, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[963, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[964, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[965, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[966, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[967, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[968, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[969, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[970, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[971, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[972, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[973, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[974, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[975, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[976, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[977, "polars.Series.dtype"]], "entropy() (polars.series method)": [[978, "polars.Series.entropy"]], "equals() (polars.series method)": [[979, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[980, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[981, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[982, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[983, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[984, "polars.Series.exp"]], "explode() (polars.series method)": [[985, "polars.Series.explode"]], "extend() (polars.series method)": [[986, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[987, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[988, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[989, "polars.Series.fill_null"]], "filter() (polars.series method)": [[990, "polars.Series.filter"]], "flags (polars.series attribute)": [[991, "polars.Series.flags"]], "floor() (polars.series method)": [[992, "polars.Series.floor"]], "gather() (polars.series method)": [[993, "polars.Series.gather"]], "gather_every() (polars.series method)": [[994, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[995, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[996, "polars.Series.has_validity"]], "hash() (polars.series method)": [[997, "polars.Series.hash"]], "head() (polars.series method)": [[998, "polars.Series.head"]], "hist() (polars.series method)": [[999, "polars.Series.hist"]], "implode() (polars.series method)": [[1000, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1001, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1002, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1003, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1004, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1005, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1006, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1007, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1008, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1009, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1010, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1011, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1012, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1013, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1014, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1015, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1016, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1017, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1018, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1019, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1020, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1021, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1022, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1023, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1024, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1025, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1026, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1027, "polars.Series.len"]], "limit() (polars.series method)": [[1028, "polars.Series.limit"]], "list (polars.series attribute)": [[1029, "polars.Series.list"]], "all() (polars.series.list method)": [[1030, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1031, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1032, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1033, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1034, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1035, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1036, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1037, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1038, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[1039, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[1040, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1041, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1042, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1043, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1044, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1045, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1046, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[1047, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[1048, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1049, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1050, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1051, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1052, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1053, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1054, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1055, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1056, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1057, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1058, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1059, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1060, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1061, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1062, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1063, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1064, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[1065, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[1066, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1067, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1068, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1069, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[1070, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[1071, "polars.Series.list.unique"]], "log() (polars.series method)": [[1072, "polars.Series.log"]], "log10() (polars.series method)": [[1073, "polars.Series.log10"]], "log1p() (polars.series method)": [[1074, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1075, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1076, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1077, "polars.Series.map_elements"]], "max() (polars.series method)": [[1078, "polars.Series.max"]], "mean() (polars.series method)": [[1079, "polars.Series.mean"]], "median() (polars.series method)": [[1080, "polars.Series.median"]], "min() (polars.series method)": [[1081, "polars.Series.min"]], "mode() (polars.series method)": [[1082, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1083, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1084, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1085, "polars.Series.name"]], "nan_max() (polars.series method)": [[1086, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1087, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1088, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1089, "polars.Series.not_"]], "null_count() (polars.series method)": [[1090, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1091, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1092, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1093, "polars.Series.peak_min"]], "product() (polars.series method)": [[1094, "polars.Series.product"]], "qcut() (polars.series method)": [[1095, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1096, "polars.Series.quantile"]], "rank() (polars.series method)": [[1097, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1098, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1099, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1100, "polars.Series.rename"]], "replace() (polars.series method)": [[1101, "polars.Series.replace"]], "reshape() (polars.series method)": [[1102, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1103, "polars.Series.reverse"]], "rle() (polars.series method)": [[1104, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1105, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1106, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1107, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1108, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1109, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1110, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1111, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1112, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1113, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1114, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1115, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1116, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1117, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1118, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1119, "polars.Series.sample"]], "scatter() (polars.series method)": [[1120, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1121, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1122, "polars.Series.series_equal"]], "set() (polars.series method)": [[1123, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1124, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1125, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1126, "polars.Series.shape"]], "shift() (polars.series method)": [[1127, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1128, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1129, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1130, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1131, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1132, "polars.Series.sign"]], "sin() (polars.series method)": [[1133, "polars.Series.sin"]], "sinh() (polars.series method)": [[1134, "polars.Series.sinh"]], "skew() (polars.series method)": [[1135, "polars.Series.skew"]], "slice() (polars.series method)": [[1136, "polars.Series.slice"]], "sort() (polars.series method)": [[1137, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1138, "polars.Series.sqrt"]], "std() (polars.series method)": [[1139, "polars.Series.std"]], "str (polars.series attribute)": [[1140, "polars.Series.str"]], "concat() (polars.series.str method)": [[1141, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1142, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1143, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1144, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1145, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1146, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1147, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1148, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1149, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1150, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1151, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1152, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1153, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1154, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1155, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1156, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1157, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1158, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1159, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1160, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1161, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1162, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1163, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1164, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1165, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1166, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1167, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1168, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1169, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1170, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1171, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1172, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1173, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1174, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1175, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1176, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1177, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1178, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1179, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1180, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1181, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1182, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1183, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1184, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1185, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1186, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1187, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1188, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1189, "polars.Series.struct.fields"]], "json_encode (polars.series.struct attribute)": [[1190, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1191, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1192, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1193, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1194, "polars.Series.sum"]], "tail() (polars.series method)": [[1195, "polars.Series.tail"]], "take() (polars.series method)": [[1196, "polars.Series.take"]], "take_every() (polars.series method)": [[1197, "polars.Series.take_every"]], "tan() (polars.series method)": [[1198, "polars.Series.tan"]], "tanh() (polars.series method)": [[1199, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1200, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1201, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1202, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1203, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1204, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1205, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1206, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1207, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1208, "polars.Series.top_k"]], "unique() (polars.series method)": [[1209, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1210, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1211, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1212, "polars.Series.value_counts"]], "var() (polars.series method)": [[1213, "polars.Series.var"]], "view() (polars.series method)": [[1214, "polars.Series.view"]], "zip_with() (polars.series method)": [[1215, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1231, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1231, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1231, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1231, "polars.SQLContext.__init__"]]}})