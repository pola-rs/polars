Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "terms": {"python": [0, 37, 38, 74, 101, 112, 113, 118, 120, 134, 135, 137, 153, 195, 201, 225, 226, 245, 276, 290, 366, 371, 375, 432, 510, 511, 614, 678, 691, 692, 694, 695, 737, 738, 740, 750, 756, 776, 843, 855, 934, 938, 948, 949, 950, 954, 1072, 1141, 1190, 1210, 1233], "api": [0, 101, 132, 153, 201, 276, 290, 511, 712, 750, 843, 1072, 1210, 1233], "refer": [0, 36, 110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 160, 163, 290, 293, 366, 399, 402, 559, 612, 623, 624, 637, 639, 640, 644, 750, 776, 855, 966, 969, 1092, 1150, 1151, 1164, 1166, 1167, 1171, 1210, 1214], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 86, 88, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 129, 130, 131, 135, 136, 139, 140, 151, 288, 289, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 746, 750, 762, 771, 772, 775, 777, 781, 782, 786, 789, 793, 794, 795, 796, 798, 802, 803, 807, 810, 819, 821, 826, 827, 828, 833, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 860, 928, 929, 963, 987, 1006, 1072, 1090, 1145, 1156, 1157, 1180, 1186, 1187, 1199, 1210, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1237], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 126, 127, 128, 129, 130, 131, 132, 135, 136, 142, 199, 215, 216, 238, 290, 428, 502, 729, 750, 762, 854, 860, 1218, 1221, 1223, 1234, 1235, 1237], "seri": [0, 1, 11, 25, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 89, 100, 102, 105, 107, 135, 137, 138, 142, 165, 174, 176, 178, 180, 183, 184, 187, 188, 190, 192, 194, 203, 205, 210, 221, 223, 227, 241, 244, 247, 249, 251, 252, 270, 290, 304, 315, 338, 342, 350, 352, 396, 425, 428, 431, 435, 436, 445, 450, 452, 453, 455, 456, 457, 458, 469, 475, 477, 502, 508, 510, 511, 559, 560, 561, 562, 563, 568, 569, 580, 591, 593, 616, 637, 638, 639, 640, 644, 648, 658, 663, 673, 677, 686, 687, 691, 692, 694, 695, 700, 702, 706, 707, 710, 711, 712, 722, 724, 725, 728, 729, 732, 737, 738, 741, 750, 762, 785, 789, 811, 837, 855, 859, 1202, 1204, 1206, 1209, 1211, 1214, 1215, 1216, 1217, 1220, 1234, 1237], "express": [0, 8, 42, 43, 44, 45, 53, 54, 139, 142, 146, 155, 170, 172, 174, 182, 201, 212, 216, 224, 229, 230, 234, 237, 248, 253, 254, 264, 265, 267, 269, 276, 290, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 314, 315, 319, 320, 321, 322, 323, 326, 337, 342, 343, 344, 345, 346, 348, 353, 354, 355, 356, 357, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 422, 424, 425, 427, 428, 432, 434, 435, 437, 438, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 462, 463, 467, 468, 470, 471, 474, 475, 481, 483, 501, 502, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 528, 530, 532, 533, 535, 537, 539, 540, 543, 544, 546, 548, 549, 553, 554, 555, 556, 558, 562, 563, 564, 566, 567, 589, 590, 591, 594, 596, 597, 599, 601, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 627, 628, 629, 630, 638, 642, 651, 652, 655, 656, 659, 660, 661, 663, 664, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 710, 711, 712, 714, 716, 719, 722, 724, 725, 726, 727, 728, 730, 732, 734, 736, 737, 738, 740, 741, 746, 749, 762, 766, 771, 772, 780, 781, 782, 785, 788, 807, 813, 814, 817, 818, 820, 825, 831, 832, 833, 835, 836, 843, 855, 859, 860, 883, 917, 927, 934, 937, 938, 952, 987, 993, 1010, 1034, 1037, 1072, 1096, 1115, 1119, 1132, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1150, 1151, 1165, 1169, 1210, 1227, 1229, 1230], "selector": [0, 36, 156, 164, 166, 170, 207, 214, 216, 246, 248, 253, 256, 258, 290, 422, 428, 517, 750, 762, 768, 777, 778, 781, 802, 826, 855], "function": [0, 36, 37, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 101, 105, 107, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 135, 136, 137, 138, 140, 149, 151, 153, 155, 160, 163, 169, 176, 201, 207, 215, 216, 220, 238, 248, 249, 250, 253, 254, 255, 258, 259, 276, 290, 301, 338, 347, 348, 363, 364, 366, 397, 418, 420, 421, 443, 502, 510, 511, 523, 533, 534, 549, 553, 556, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 598, 657, 658, 659, 668, 672, 683, 685, 686, 687, 699, 700, 702, 704, 705, 708, 711, 712, 715, 717, 720, 722, 724, 726, 727, 731, 735, 739, 741, 746, 750, 762, 766, 772, 776, 782, 798, 802, 806, 809, 815, 821, 825, 828, 835, 843, 855, 859, 899, 907, 912, 927, 928, 964, 985, 986, 988, 989, 1006, 1065, 1072, 1090, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1116, 1121, 1126, 1189, 1192, 1194, 1195, 1210, 1224, 1225, 1226, 1227, 1229, 1231, 1233, 1235, 1236, 1237], "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 89, 90, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 153, 158, 167, 170, 171, 181, 182, 183, 195, 196, 197, 199, 201, 214, 215, 219, 224, 225, 226, 228, 232, 235, 243, 248, 249, 250, 253, 255, 264, 268, 288, 290, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 317, 318, 319, 320, 321, 323, 326, 328, 329, 330, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 349, 350, 353, 354, 355, 356, 357, 364, 365, 366, 371, 372, 373, 374, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 424, 435, 437, 438, 439, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 467, 468, 470, 475, 481, 483, 490, 501, 503, 509, 511, 543, 544, 548, 549, 556, 558, 559, 562, 563, 564, 566, 567, 587, 589, 591, 596, 597, 598, 604, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 627, 628, 629, 630, 637, 638, 639, 640, 642, 644, 647, 655, 656, 657, 660, 661, 664, 667, 673, 683, 690, 691, 692, 693, 694, 695, 696, 706, 707, 709, 710, 711, 712, 722, 725, 736, 737, 738, 741, 746, 750, 762, 769, 770, 771, 772, 776, 779, 781, 782, 788, 789, 806, 812, 816, 831, 855, 864, 865, 876, 878, 879, 880, 881, 882, 884, 886, 887, 898, 900, 902, 903, 904, 908, 909, 916, 917, 918, 928, 929, 934, 935, 936, 937, 940, 941, 942, 943, 945, 946, 947, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 987, 991, 992, 1006, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1033, 1038, 1044, 1046, 1053, 1064, 1066, 1072, 1084, 1090, 1092, 1096, 1097, 1099, 1100, 1111, 1113, 1121, 1126, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1154, 1155, 1156, 1157, 1164, 1165, 1166, 1167, 1169, 1171, 1174, 1190, 1191, 1192, 1193, 1196, 1209, 1210, 1218, 1224, 1230, 1234, 1236], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 100, 102, 103, 104, 105, 106, 108, 112, 113, 114, 116, 117, 121, 122, 123, 124, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 167, 170, 176, 181, 183, 184, 196, 197, 201, 223, 228, 243, 248, 249, 252, 253, 256, 267, 290, 301, 303, 306, 307, 308, 309, 310, 311, 314, 319, 320, 321, 323, 326, 337, 338, 342, 343, 344, 345, 346, 349, 350, 353, 354, 355, 356, 357, 364, 365, 371, 372, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 424, 435, 438, 441, 448, 449, 450, 451, 452, 453, 454, 463, 467, 468, 470, 475, 481, 483, 501, 502, 510, 511, 556, 558, 562, 563, 564, 566, 567, 568, 596, 597, 604, 607, 608, 609, 611, 612, 613, 614, 616, 618, 619, 620, 627, 628, 629, 630, 637, 638, 642, 655, 656, 657, 664, 673, 683, 690, 691, 692, 693, 694, 695, 696, 698, 706, 707, 709, 710, 711, 712, 722, 725, 736, 737, 738, 741, 746, 750, 762, 771, 772, 779, 780, 781, 782, 789, 793, 807, 811, 812, 818, 826, 835, 855, 864, 865, 876, 878, 879, 880, 881, 882, 884, 886, 887, 898, 899, 900, 902, 903, 904, 908, 909, 917, 928, 929, 934, 935, 937, 939, 940, 941, 942, 943, 945, 946, 947, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 987, 991, 1004, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1033, 1038, 1044, 1046, 1064, 1065, 1084, 1090, 1096, 1097, 1099, 1100, 1121, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1143, 1145, 1146, 1147, 1154, 1155, 1156, 1157, 1164, 1165, 1169, 1190, 1191, 1193, 1201, 1210, 1218, 1224, 1231, 1234], "input": [0, 47, 53, 103, 105, 112, 113, 155, 164, 182, 201, 205, 214, 220, 229, 230, 234, 237, 241, 254, 264, 265, 269, 290, 298, 348, 353, 419, 422, 434, 448, 506, 510, 511, 521, 549, 563, 601, 616, 627, 633, 634, 635, 636, 638, 651, 659, 667, 669, 671, 673, 676, 679, 680, 681, 689, 696, 698, 706, 707, 710, 711, 712, 714, 716, 719, 728, 732, 734, 740, 750, 762, 766, 777, 788, 809, 813, 814, 815, 817, 820, 825, 831, 832, 836, 855, 859, 917, 987, 1010, 1069, 1070, 1072, 1096, 1119, 1143, 1154, 1165, 1210, 1229, 1230, 1232], "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 42, 155, 162, 195, 201, 205, 208, 214, 216, 225, 229, 231, 241, 254, 260, 264, 290, 301, 303, 326, 347, 348, 364, 481, 502, 510, 511, 520, 523, 533, 556, 604, 620, 658, 659, 664, 668, 669, 670, 671, 681, 682, 711, 712, 750, 762, 766, 775, 780, 798, 802, 803, 813, 815, 825, 831, 843, 855, 864, 865, 887, 907, 928, 1044, 1072, 1090, 1131, 1147, 1195, 1199, 1210], "config": [0, 47, 162, 229, 248, 264, 290, 606, 625, 692, 695, 696, 762, 771, 775, 813, 831, 855, 1133, 1152], "extend": [0, 103, 262, 290, 425, 750, 762, 859, 866, 993, 1210], "plugin": [0, 750, 762], "sql": [0, 34, 114, 115, 197, 234, 290, 333, 495, 592, 709, 730, 750, 762, 817, 855, 894, 1058, 1119, 1210, 1218, 1220, 1222, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236], "interfac": [0, 762, 1234], "except": [0, 135, 185, 198, 200, 242, 290, 349, 616, 638, 698, 750, 762, 794, 855, 860, 908, 1005, 1027, 1143, 1165, 1182, 1191, 1210], "test": [0, 34, 114, 115, 117, 123, 290, 762, 790, 797, 855], "metadata": [0, 128, 762], "These": [1, 36, 109, 114, 115, 151, 255, 290, 410, 749, 750, 859, 964, 977], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 89, 101, 114, 117, 126, 129, 130, 131, 132, 139, 142, 143, 146, 153, 195, 198, 199, 224, 225, 227, 249, 250, 253, 256, 268, 290, 393, 399, 402, 490, 510, 511, 517, 561, 589, 637, 639, 640, 750, 793, 794, 798, 802, 826, 833, 855, 859, 860, 960, 966, 969, 1053, 1072, 1094, 1113, 1164, 1166, 1167, 1191, 1192, 1210, 1237], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 100, 102, 103, 104, 105, 106, 112, 113, 114, 115, 117, 118, 121, 122, 126, 130, 132, 151, 155, 171, 183, 194, 195, 201, 212, 216, 223, 224, 225, 226, 238, 245, 248, 254, 255, 276, 290, 293, 347, 348, 371, 390, 391, 393, 396, 399, 402, 422, 428, 448, 474, 502, 510, 511, 554, 561, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 606, 619, 623, 624, 625, 648, 658, 659, 678, 686, 696, 700, 712, 722, 725, 729, 741, 750, 766, 772, 778, 789, 790, 797, 811, 818, 821, 825, 843, 855, 859, 860, 907, 934, 957, 958, 963, 966, 969, 992, 1010, 1037, 1072, 1094, 1133, 1146, 1150, 1151, 1152, 1189, 1195, 1210, 1214, 1223, 1237], "regist": [1, 48, 49, 50, 51, 145, 147, 238, 290, 750, 821, 855, 859, 1218, 1220, 1221, 1222, 1223, 1234], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 145, 147, 162, 201, 216, 276, 290, 338, 371, 399, 402, 502, 510, 511, 569, 664, 678, 711, 712, 750, 775, 798, 843, 855, 899, 934, 966, 969, 1065, 1072, 1101, 1199, 1210, 1237], "dedic": [1, 101, 195, 225, 290, 860], "namespac": [1, 114, 289, 290, 648, 729, 749, 762, 854, 1210, 1237], "underli": [1, 46, 61, 62, 64, 77, 85, 87, 93, 100, 102, 103, 104, 106, 114, 115, 117, 121, 122, 124, 130, 139, 142, 146, 170, 171, 195, 196, 225, 243, 249, 290, 343, 373, 374, 375, 379, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 396, 398, 411, 412, 413, 414, 561, 587, 605, 608, 615, 750, 781, 855, 860, 903, 911, 936, 937, 938, 942, 945, 946, 947, 951, 952, 953, 955, 956, 959, 961, 962, 963, 965, 978, 979, 980, 981, 992, 1094, 1111, 1121, 1132, 1135, 1142, 1185, 1191, 1210], "polar": [1, 290, 293, 749, 750, 756, 762, 855, 859, 860, 1210, 1214, 1233, 1234], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 92, 139, 140, 226, 290, 737, 746, 750, 756, 762, 855, 1190, 1210, 1220, 1234], "without": [1, 37, 42, 43, 44, 45, 52, 53, 54, 63, 65, 107, 116, 119, 124, 125, 127, 128, 131, 132, 238, 248, 249, 253, 258, 259, 290, 363, 364, 397, 443, 511, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 606, 625, 683, 726, 727, 728, 750, 771, 772, 821, 828, 855, 910, 912, 927, 928, 964, 1006, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1133, 1152, 1189, 1191, 1194, 1210, 1236], "requir": [1, 35, 36, 47, 105, 114, 115, 135, 136, 137, 138, 160, 224, 248, 249, 250, 253, 290, 339, 418, 420, 421, 503, 511, 549, 593, 637, 639, 640, 661, 725, 750, 773, 779, 820, 830, 855, 900, 984, 986, 988, 989, 1066, 1120, 1164, 1166, 1167, 1191, 1192, 1196, 1210, 1214], "subclass": [1, 290], "mixin": 1, "expr": [1, 47, 48, 49, 50, 51, 170, 172, 173, 197, 198, 212, 216, 224, 229, 230, 248, 253, 264, 265, 290, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 750, 751, 752, 755, 756, 757, 758, 759, 781, 783, 784, 793, 794, 808, 813, 814, 831, 832, 855, 859, 860, 927, 934, 937, 938, 952, 960, 977, 987, 994, 995, 999, 1037, 1043, 1059, 1063, 1132, 1137, 1142, 1158, 1210], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 142, 143, 144, 146, 151, 153, 155, 160, 162, 166, 169, 172, 174, 175, 176, 181, 182, 183, 195, 197, 198, 199, 201, 207, 208, 214, 216, 223, 224, 225, 226, 229, 230, 232, 234, 237, 244, 248, 249, 250, 253, 254, 259, 260, 264, 265, 268, 269, 290, 301, 303, 317, 333, 338, 347, 348, 353, 359, 361, 362, 371, 397, 410, 415, 417, 418, 419, 420, 421, 426, 428, 448, 450, 452, 453, 455, 456, 457, 458, 460, 465, 495, 502, 510, 544, 549, 556, 559, 562, 563, 564, 568, 571, 573, 575, 577, 579, 580, 582, 584, 586, 592, 595, 598, 600, 601, 614, 616, 617, 618, 621, 622, 623, 624, 627, 638, 642, 647, 651, 653, 658, 659, 668, 669, 671, 676, 679, 680, 681, 682, 685, 689, 691, 692, 694, 695, 714, 716, 719, 728, 732, 734, 737, 738, 740, 742, 743, 745, 749, 750, 751, 752, 755, 756, 757, 758, 759, 762, 766, 771, 772, 775, 778, 782, 783, 785, 788, 789, 790, 793, 794, 797, 798, 802, 803, 807, 809, 811, 813, 814, 816, 817, 820, 825, 828, 831, 832, 833, 836, 855, 859, 860, 864, 865, 878, 894, 899, 907, 910, 917, 925, 926, 934, 964, 977, 983, 985, 986, 987, 988, 989, 994, 996, 997, 1003, 1010, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1028, 1058, 1065, 1090, 1092, 1096, 1097, 1107, 1119, 1123, 1126, 1141, 1143, 1144, 1148, 1149, 1150, 1151, 1154, 1165, 1169, 1174, 1181, 1189, 1191, 1192, 1195, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217, 1220, 1223, 1227, 1237], "all": [1, 4, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 92, 100, 105, 112, 113, 116, 117, 118, 120, 123, 124, 126, 129, 130, 139, 140, 143, 146, 151, 154, 156, 162, 166, 173, 185, 190, 192, 194, 195, 196, 197, 199, 200, 205, 207, 211, 212, 216, 219, 224, 225, 226, 230, 236, 237, 241, 242, 246, 248, 249, 253, 256, 258, 259, 260, 265, 267, 290, 302, 304, 326, 341, 348, 357, 363, 369, 370, 371, 372, 422, 427, 433, 440, 441, 444, 446, 450, 453, 457, 458, 463, 473, 474, 481, 499, 502, 510, 529, 532, 533, 535, 536, 537, 538, 539, 540, 547, 559, 563, 565, 569, 593, 599, 601, 607, 613, 614, 616, 618, 624, 632, 633, 634, 638, 659, 669, 678, 686, 687, 688, 689, 698, 700, 705, 706, 709, 716, 724, 732, 733, 734, 740, 750, 756, 762, 765, 768, 771, 772, 775, 778, 780, 782, 784, 793, 798, 802, 807, 814, 818, 819, 820, 826, 828, 832, 833, 835, 855, 860, 887, 927, 929, 932, 933, 934, 935, 1005, 1011, 1023, 1027, 1036, 1037, 1044, 1062, 1065, 1092, 1096, 1101, 1127, 1134, 1140, 1141, 1143, 1145, 1151, 1159, 1160, 1161, 1165, 1182, 1191, 1210, 1220, 1225, 1226, 1230, 1233, 1236, 1237], "support": [1, 34, 35, 36, 41, 55, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 116, 117, 121, 122, 123, 124, 126, 127, 128, 131, 139, 143, 146, 151, 195, 196, 197, 198, 225, 226, 236, 237, 245, 250, 253, 290, 419, 496, 549, 563, 599, 601, 616, 623, 624, 625, 627, 638, 746, 750, 756, 793, 794, 819, 820, 855, 860, 987, 1059, 1096, 1127, 1143, 1150, 1151, 1152, 1154, 1165, 1192, 1194, 1210, 1231, 1233, 1234], "target": [1, 34, 35, 36, 52, 117, 253, 290, 612, 637, 639, 640, 860, 1139, 1164, 1166, 1167, 1230], "thi": [1, 4, 10, 12, 14, 30, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 100, 102, 103, 104, 105, 106, 107, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 151, 153, 154, 155, 158, 160, 162, 166, 169, 171, 175, 176, 181, 182, 183, 184, 188, 190, 192, 193, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 208, 209, 211, 212, 214, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 238, 239, 240, 243, 245, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 271, 276, 289, 290, 301, 304, 305, 314, 326, 332, 333, 334, 339, 347, 348, 350, 353, 363, 364, 366, 372, 373, 384, 390, 391, 393, 396, 397, 399, 402, 413, 417, 424, 434, 441, 443, 445, 446, 448, 452, 474, 475, 481, 490, 491, 492, 493, 494, 495, 497, 502, 503, 507, 508, 510, 511, 515, 516, 517, 518, 519, 520, 521, 523, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 549, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 599, 600, 601, 604, 606, 612, 617, 621, 622, 625, 632, 633, 634, 635, 636, 641, 647, 649, 651, 658, 659, 661, 662, 663, 664, 668, 672, 680, 683, 685, 686, 699, 700, 702, 704, 705, 708, 709, 712, 715, 717, 720, 722, 726, 727, 728, 731, 735, 739, 740, 741, 746, 750, 762, 765, 766, 767, 770, 771, 772, 773, 775, 776, 778, 779, 780, 782, 788, 789, 791, 793, 794, 798, 802, 803, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 826, 828, 830, 831, 832, 833, 834, 835, 838, 843, 854, 855, 859, 860, 866, 875, 887, 893, 894, 895, 900, 907, 909, 911, 912, 917, 918, 927, 928, 935, 936, 938, 947, 957, 958, 960, 963, 964, 966, 969, 980, 982, 985, 991, 992, 1000, 1001, 1004, 1006, 1015, 1024, 1037, 1038, 1044, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1066, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1127, 1128, 1130, 1131, 1133, 1139, 1144, 1148, 1149, 1152, 1159, 1160, 1161, 1168, 1174, 1175, 1177, 1180, 1181, 1185, 1187, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1198, 1199, 1200, 1210, 1214, 1218, 1219, 1223, 1233, 1234, 1235, 1237], "featur": [1, 41, 52, 63, 65, 248, 253, 290], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 86, 88, 89, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 150, 151, 154, 155, 158, 162, 166, 168, 169, 171, 174, 182, 183, 184, 185, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 212, 214, 215, 216, 221, 223, 224, 225, 226, 227, 230, 231, 232, 234, 236, 237, 238, 239, 242, 243, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 265, 267, 268, 276, 289, 290, 298, 301, 303, 304, 305, 315, 318, 325, 326, 333, 338, 347, 348, 363, 364, 369, 370, 371, 372, 375, 383, 390, 391, 393, 397, 399, 410, 418, 419, 420, 421, 424, 428, 432, 441, 443, 445, 448, 460, 466, 473, 474, 477, 479, 481, 490, 495, 496, 498, 502, 504, 507, 510, 511, 515, 517, 519, 520, 521, 523, 531, 549, 554, 556, 559, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 594, 595, 598, 599, 600, 601, 603, 604, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 632, 633, 634, 637, 638, 639, 640, 642, 644, 647, 651, 658, 659, 664, 665, 668, 669, 670, 671, 672, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 691, 692, 694, 695, 700, 704, 705, 706, 707, 709, 710, 712, 715, 717, 720, 722, 725, 726, 727, 728, 729, 731, 735, 737, 738, 739, 740, 741, 746, 750, 765, 766, 767, 770, 771, 772, 775, 778, 780, 782, 785, 788, 789, 792, 793, 794, 796, 798, 802, 803, 807, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 828, 829, 832, 835, 843, 855, 859, 860, 864, 865, 866, 879, 886, 887, 894, 899, 907, 910, 912, 917, 918, 927, 928, 929, 932, 933, 934, 935, 938, 946, 960, 964, 966, 977, 984, 985, 986, 987, 988, 989, 991, 992, 996, 1003, 1004, 1005, 1006, 1010, 1012, 1022, 1024, 1025, 1027, 1029, 1036, 1037, 1040, 1042, 1044, 1053, 1058, 1059, 1065, 1072, 1090, 1092, 1094, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1119, 1122, 1123, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1157, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1169, 1171, 1174, 1182, 1185, 1189, 1191, 1192, 1194, 1195, 1199, 1200, 1210, 1218, 1223, 1227, 1230, 1231, 1234, 1235, 1237], "primarili": 1, "intend": [1, 117, 135, 136, 137, 138, 647, 1174], "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 101, 103, 104, 106, 108, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 154, 155, 156, 162, 164, 166, 172, 173, 174, 176, 182, 183, 190, 192, 194, 195, 196, 198, 201, 207, 211, 212, 214, 215, 216, 223, 224, 225, 226, 227, 229, 230, 232, 237, 238, 239, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 267, 269, 276, 290, 293, 299, 301, 303, 305, 314, 315, 338, 343, 344, 348, 363, 366, 369, 370, 378, 396, 397, 399, 402, 410, 413, 415, 418, 419, 420, 421, 422, 426, 427, 428, 432, 443, 446, 447, 448, 460, 474, 490, 498, 502, 504, 510, 511, 514, 532, 535, 537, 539, 540, 549, 556, 559, 561, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 591, 593, 598, 600, 601, 603, 605, 606, 608, 609, 610, 611, 612, 613, 615, 619, 620, 623, 624, 625, 627, 629, 631, 633, 634, 635, 636, 637, 639, 640, 644, 647, 648, 651, 659, 665, 666, 668, 669, 670, 671, 672, 675, 676, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 702, 706, 707, 709, 710, 712, 713, 714, 716, 718, 719, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 737, 738, 739, 740, 741, 746, 749, 750, 761, 762, 765, 766, 767, 768, 771, 772, 775, 776, 777, 778, 780, 782, 783, 784, 785, 788, 789, 790, 794, 796, 797, 802, 811, 813, 814, 816, 820, 821, 822, 825, 826, 828, 829, 831, 832, 834, 835, 836, 843, 855, 860, 864, 865, 895, 899, 903, 904, 912, 927, 929, 932, 933, 941, 963, 964, 966, 969, 977, 980, 983, 986, 987, 988, 989, 994, 995, 999, 1003, 1006, 1008, 1009, 1010, 1025, 1037, 1053, 1060, 1065, 1072, 1090, 1092, 1094, 1097, 1099, 1100, 1101, 1113, 1114, 1116, 1117, 1120, 1126, 1128, 1130, 1132, 1133, 1135, 1136, 1138, 1139, 1140, 1142, 1146, 1147, 1150, 1151, 1152, 1154, 1156, 1164, 1166, 1167, 1171, 1174, 1186, 1188, 1191, 1192, 1200, 1210, 1214, 1218, 1219, 1220, 1221, 1223, 1224, 1234, 1237], "librari": [1, 93, 114, 117, 510, 750, 859, 1237], "author": 1, "domain": [1, 613, 1140], "specif": [1, 30, 35, 36, 100, 102, 104, 106, 112, 115, 116, 117, 121, 122, 123, 127, 156, 195, 197, 248, 290, 399, 402, 637, 639, 640, 644, 664, 750, 768, 793, 855, 860, 966, 969, 1164, 1166, 1167, 1171, 1189, 1199, 1210, 1224, 1237], "capabl": [1, 36, 290], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 103, 105, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 128, 131, 142, 145, 147, 155, 156, 162, 166, 171, 172, 182, 183, 188, 198, 223, 231, 248, 249, 254, 256, 260, 290, 301, 338, 371, 393, 397, 399, 410, 419, 425, 448, 450, 453, 455, 456, 457, 458, 502, 510, 511, 521, 523, 568, 571, 573, 575, 577, 579, 582, 584, 586, 642, 678, 691, 692, 694, 695, 696, 737, 738, 740, 750, 766, 768, 775, 778, 780, 789, 794, 811, 815, 825, 826, 855, 860, 899, 934, 960, 964, 966, 977, 987, 992, 993, 1010, 1013, 1016, 1018, 1019, 1020, 1021, 1065, 1116, 1169, 1189, 1191, 1210, 1224, 1234, 1237], "mai": [1, 35, 37, 42, 43, 44, 45, 53, 54, 55, 63, 65, 100, 102, 103, 104, 106, 112, 113, 114, 116, 118, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 135, 137, 162, 169, 171, 183, 198, 201, 223, 238, 248, 250, 253, 258, 259, 260, 290, 363, 364, 371, 372, 373, 384, 393, 397, 399, 402, 410, 422, 443, 477, 502, 510, 511, 520, 556, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 617, 619, 678, 686, 687, 691, 692, 694, 695, 700, 724, 726, 727, 737, 738, 750, 771, 772, 775, 782, 789, 794, 798, 811, 821, 828, 834, 835, 843, 855, 911, 912, 927, 928, 929, 934, 935, 936, 947, 960, 964, 966, 969, 977, 985, 992, 1006, 1040, 1072, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1144, 1146, 1189, 1192, 1194, 1210, 1237], "exist": [1, 34, 35, 36, 47, 88, 116, 127, 142, 255, 259, 264, 265, 290, 300, 342, 345, 346, 375, 396, 750, 809, 828, 831, 832, 855, 860, 938, 963, 1236], "belong": [1, 183, 290, 789, 855], "core": [1, 290, 1237], "cannot": [1, 41, 45, 89, 90, 112, 113, 117, 118, 120, 123, 124, 148, 201, 226, 227, 249, 267, 276, 290, 343, 422, 490, 511, 589, 608, 629, 650, 712, 750, 818, 835, 843, 855, 860, 903, 1053, 1072, 1113, 1135, 1156, 1191, 1210], "overrid": [1, 36, 100, 102, 103, 104, 105, 106, 112, 114, 115, 117, 121, 122, 123, 139, 140, 146, 148, 290, 855], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 142, 145, 146, 147, 151, 155, 156, 159, 162, 163, 164, 165, 166, 167, 169, 170, 174, 175, 176, 178, 179, 181, 182, 183, 185, 187, 190, 192, 193, 195, 197, 198, 200, 202, 204, 206, 207, 208, 209, 211, 212, 214, 216, 218, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 298, 299, 300, 321, 326, 338, 342, 343, 344, 345, 346, 348, 350, 358, 364, 366, 368, 376, 393, 396, 397, 399, 402, 410, 419, 422, 428, 430, 434, 435, 438, 445, 448, 469, 470, 479, 480, 481, 496, 500, 502, 511, 520, 522, 523, 524, 526, 533, 534, 535, 536, 537, 538, 539, 540, 546, 549, 553, 556, 562, 563, 565, 567, 568, 571, 573, 575, 577, 579, 582, 584, 586, 593, 600, 601, 648, 649, 650, 659, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 746, 750, 757, 766, 768, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 785, 788, 789, 791, 793, 794, 802, 803, 807, 809, 810, 811, 812, 815, 816, 818, 819, 820, 821, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 863, 882, 887, 899, 904, 908, 909, 928, 929, 939, 960, 963, 964, 966, 969, 977, 987, 995, 1032, 1033, 1044, 1065, 1081, 1082, 1090, 1095, 1096, 1116, 1175, 1177, 1178, 1186, 1187, 1188, 1189, 1199, 1210, 1215, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1230, 1231, 1234, 1235, 1237], "dt": [1, 47, 117, 123, 223, 290, 568, 696, 750, 759, 811, 855, 860, 1217, 1231], "attempt": [1, 366, 750, 776, 855], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 102, 103, 106, 112, 126, 135, 136, 137, 138, 162, 171, 194, 197, 198, 216, 243, 255, 258, 290, 363, 371, 474, 510, 632, 633, 634, 722, 725, 741, 750, 767, 771, 772, 775, 780, 794, 798, 807, 818, 855, 860, 927, 934, 992, 1037, 1159, 1160, 1161, 1194, 1210], "so": [1, 114, 115, 126, 148, 181, 183, 216, 223, 290, 315, 325, 366, 432, 448, 479, 502, 511, 568, 623, 624, 625, 632, 633, 634, 648, 750, 776, 789, 811, 855, 860, 886, 1042, 1150, 1151, 1152, 1159, 1160, 1161], "rais": [1, 15, 16, 20, 35, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 112, 113, 117, 123, 126, 135, 137, 153, 216, 224, 249, 290, 325, 343, 371, 396, 477, 479, 520, 554, 556, 605, 608, 615, 637, 639, 640, 642, 644, 693, 710, 750, 886, 903, 934, 963, 1040, 1042, 1090, 1132, 1135, 1142, 1164, 1166, 1167, 1169, 1171, 1191, 1210], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 87, 89, 90, 93, 95, 100, 102, 103, 106, 112, 113, 114, 115, 116, 117, 119, 123, 126, 128, 129, 140, 142, 146, 156, 157, 158, 169, 172, 176, 183, 194, 195, 196, 198, 201, 212, 216, 221, 223, 224, 228, 238, 243, 249, 253, 255, 258, 259, 264, 267, 276, 290, 300, 322, 325, 337, 343, 359, 360, 361, 362, 363, 364, 371, 375, 376, 393, 396, 399, 413, 419, 427, 428, 434, 435, 438, 471, 474, 477, 479, 501, 502, 510, 511, 521, 523, 532, 533, 554, 555, 556, 564, 568, 569, 570, 572, 574, 576, 578, 581, 583, 585, 605, 608, 613, 615, 617, 637, 639, 640, 642, 644, 660, 668, 673, 677, 691, 692, 694, 695, 697, 699, 702, 706, 707, 708, 709, 710, 722, 724, 725, 728, 732, 737, 738, 740, 741, 746, 750, 768, 769, 770, 772, 773, 775, 779, 780, 782, 785, 789, 794, 798, 807, 811, 812, 818, 821, 828, 830, 831, 833, 835, 843, 855, 859, 860, 883, 886, 898, 903, 916, 918, 923, 924, 925, 926, 927, 934, 938, 966, 980, 985, 987, 1024, 1034, 1037, 1040, 1042, 1064, 1072, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1114, 1116, 1132, 1135, 1140, 1142, 1144, 1164, 1166, 1167, 1169, 1171, 1191, 1210, 1226, 1227, 1230, 1231, 1233, 1234, 1236], "attributeerror": 1, "howev": [1, 103, 114, 169, 201, 249, 290, 985, 1210], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 103, 112, 113, 114, 117, 118, 123, 124, 126, 129, 131, 132, 140, 141, 142, 146, 148, 151, 155, 157, 166, 167, 176, 182, 183, 190, 192, 194, 201, 212, 216, 223, 225, 226, 229, 232, 237, 248, 249, 253, 254, 255, 258, 264, 267, 276, 290, 293, 301, 338, 348, 359, 362, 363, 366, 371, 390, 391, 393, 396, 399, 402, 410, 419, 425, 428, 448, 474, 502, 510, 511, 517, 520, 523, 529, 532, 533, 535, 537, 539, 540, 549, 554, 556, 561, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 591, 593, 595, 598, 601, 606, 614, 618, 623, 624, 625, 632, 633, 634, 637, 648, 659, 676, 678, 690, 693, 700, 702, 706, 707, 712, 729, 740, 746, 749, 750, 761, 766, 767, 771, 772, 773, 776, 778, 779, 780, 782, 789, 811, 812, 813, 815, 816, 818, 820, 821, 825, 830, 831, 834, 835, 855, 860, 899, 927, 934, 957, 958, 960, 963, 964, 966, 969, 977, 987, 993, 1010, 1037, 1065, 1072, 1077, 1090, 1094, 1096, 1114, 1116, 1117, 1120, 1123, 1126, 1133, 1134, 1141, 1145, 1150, 1151, 1152, 1159, 1160, 1161, 1164, 1189, 1191, 1210, 1214, 1223, 1234], "other": [1, 20, 32, 36, 37, 41, 54, 111, 112, 113, 114, 117, 126, 135, 136, 137, 138, 166, 168, 171, 174, 197, 198, 207, 208, 224, 226, 229, 230, 253, 259, 262, 264, 265, 288, 290, 298, 302, 304, 314, 315, 353, 368, 416, 417, 428, 432, 437, 439, 448, 452, 462, 469, 491, 492, 493, 494, 509, 515, 519, 528, 530, 543, 544, 548, 563, 601, 651, 652, 657, 660, 667, 669, 671, 676, 679, 680, 681, 689, 696, 714, 716, 719, 728, 732, 734, 750, 762, 772, 778, 785, 793, 794, 802, 803, 813, 814, 828, 831, 832, 833, 855, 860, 866, 917, 931, 984, 992, 1015, 1032, 1054, 1055, 1056, 1057, 1096, 1193, 1201, 1209, 1210, 1223, 1234], "onli": [1, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 112, 113, 114, 116, 117, 118, 120, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 142, 146, 151, 166, 171, 183, 184, 195, 198, 201, 216, 223, 225, 226, 245, 247, 248, 249, 259, 260, 276, 290, 299, 301, 303, 315, 352, 353, 366, 371, 393, 400, 422, 431, 441, 510, 511, 517, 532, 533, 534, 535, 536, 537, 538, 539, 540, 549, 561, 606, 625, 662, 678, 712, 750, 771, 776, 778, 789, 790, 794, 797, 811, 828, 843, 855, 859, 860, 864, 865, 866, 914, 917, 934, 960, 992, 998, 1004, 1072, 1094, 1133, 1152, 1185, 1188, 1191, 1210, 1218, 1220, 1234, 1237], "gener": [1, 114, 115, 133, 139, 140, 141, 142, 143, 144, 146, 153, 160, 216, 227, 246, 249, 255, 290, 349, 490, 589, 594, 673, 691, 694, 706, 707, 709, 725, 737, 738, 750, 855, 908, 1053, 1113, 1122, 1186, 1210, 1237], "userwarn": 1, "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 86, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 126, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 148, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1210, 1214, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1237], "register_expr_namespac": [1, 48, 50, 51], "greet": 1, "def": [1, 46, 48, 49, 50, 51, 114, 140, 142, 146, 151, 215, 255, 290, 298, 553, 613, 634, 667, 711, 750, 772, 806, 855, 860, 1140, 1237], "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 139, 1234], "self": [1, 48, 49, 50, 51, 53, 54, 157, 158, 163, 171, 185, 187, 188, 200, 206, 207, 213, 214, 216, 218, 219, 221, 227, 235, 236, 238, 239, 242, 246, 255, 257, 260, 261, 262, 266, 267, 268, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 341, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 527, 528, 529, 530, 531, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 729, 746, 750, 765, 766, 767, 768, 770, 771, 772, 774, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 855, 866, 908, 918, 922, 992, 996, 1007, 1071, 1072, 1083, 1087, 1088, 1093, 1096, 1114, 1116, 1117, 1128, 1198, 1201, 1210, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232], "_expr": [1, 49], "hello": [1, 20, 632, 633, 634, 860, 1044, 1159, 1160, 1161, 1219, 1222], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 91, 94, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 148, 149, 155, 157, 159, 160, 161, 165, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 185, 186, 187, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 205, 210, 211, 212, 214, 215, 216, 220, 223, 224, 225, 226, 227, 228, 231, 238, 241, 242, 248, 249, 250, 253, 254, 255, 256, 260, 263, 264, 265, 271, 273, 275, 276, 279, 284, 290, 301, 303, 306, 307, 308, 309, 310, 311, 314, 315, 319, 320, 321, 323, 325, 326, 337, 342, 343, 344, 345, 346, 347, 348, 354, 355, 356, 357, 358, 364, 365, 371, 372, 374, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 424, 432, 435, 436, 438, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 467, 468, 470, 475, 477, 479, 480, 481, 483, 490, 500, 501, 508, 510, 511, 521, 523, 524, 529, 553, 556, 558, 562, 563, 564, 566, 567, 589, 590, 595, 596, 597, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 626, 627, 628, 629, 630, 638, 642, 647, 654, 655, 656, 658, 659, 660, 662, 663, 664, 667, 668, 673, 674, 675, 676, 677, 678, 683, 685, 690, 691, 692, 693, 694, 695, 696, 699, 702, 704, 706, 707, 708, 709, 710, 711, 712, 722, 725, 728, 729, 732, 735, 736, 737, 738, 740, 741, 750, 766, 769, 771, 772, 773, 774, 775, 779, 780, 782, 787, 789, 790, 793, 796, 797, 798, 806, 807, 809, 811, 812, 815, 818, 824, 825, 826, 830, 831, 832, 838, 840, 842, 846, 851, 855, 859, 860, 864, 865, 866, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 898, 900, 902, 903, 904, 907, 910, 912, 916, 922, 928, 929, 934, 935, 937, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 985, 987, 991, 992, 1000, 1003, 1005, 1006, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1038, 1040, 1042, 1043, 1044, 1046, 1053, 1063, 1064, 1071, 1072, 1077, 1084, 1090, 1096, 1097, 1098, 1099, 1100, 1113, 1115, 1123, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1157, 1165, 1169, 1174, 1182, 1185, 1192, 1195, 1197, 1198, 1199, 1201, 1210, 1218, 1222, 1224, 1225, 1226, 1227, 1229, 1230, 1234, 1236, 1237], "lit": [1, 300, 342, 448, 532, 615, 686, 700, 722, 725, 741, 750, 995, 1210], "alia": [1, 12, 47, 49, 51, 83, 183, 200, 216, 223, 257, 264, 267, 290, 298, 302, 342, 343, 344, 345, 346, 347, 358, 359, 360, 361, 362, 364, 367, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 410, 411, 412, 413, 416, 417, 430, 432, 437, 439, 445, 448, 451, 454, 462, 464, 486, 498, 504, 509, 511, 515, 517, 519, 521, 525, 528, 530, 532, 543, 544, 548, 550, 554, 556, 559, 561, 588, 590, 605, 606, 607, 608, 610, 612, 613, 615, 616, 619, 620, 625, 626, 627, 628, 629, 630, 631, 635, 636, 638, 648, 649, 650, 652, 657, 658, 660, 666, 667, 673, 674, 675, 679, 680, 681, 691, 694, 696, 697, 700, 701, 706, 709, 711, 712, 724, 732, 737, 740, 750, 789, 791, 797, 811, 827, 831, 835, 855, 928, 935, 936, 939, 942, 943, 944, 945, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 1027, 1090, 1095, 1139, 1140, 1156, 1157, 1210], "hi": [1, 1230], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 20, 606, 625, 632, 633, 634, 645, 860, 1044, 1133, 1152, 1159, 1160, 1161, 1172, 1219, 1222], "select": [1, 8, 34, 47, 48, 49, 50, 86, 110, 112, 113, 114, 115, 116, 118, 120, 124, 126, 132, 141, 154, 193, 194, 198, 201, 212, 215, 224, 230, 236, 238, 251, 257, 260, 267, 290, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 363, 365, 367, 368, 369, 370, 373, 375, 376, 384, 390, 391, 393, 396, 403, 404, 405, 406, 407, 408, 409, 410, 413, 415, 418, 420, 421, 422, 423, 424, 425, 429, 431, 433, 436, 440, 441, 443, 444, 445, 446, 449, 450, 453, 459, 460, 461, 463, 474, 475, 502, 505, 506, 507, 508, 510, 511, 512, 513, 514, 517, 527, 529, 531, 532, 534, 536, 538, 541, 542, 546, 547, 548, 549, 551, 552, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 569, 580, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 614, 615, 637, 648, 650, 653, 655, 656, 658, 659, 661, 662, 663, 664, 665, 668, 670, 672, 675, 676, 677, 680, 682, 683, 684, 685, 688, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 713, 715, 717, 718, 720, 721, 724, 725, 729, 730, 731, 732, 733, 735, 739, 746, 750, 765, 773, 794, 806, 814, 815, 819, 821, 827, 833, 835, 855, 860, 963, 999, 1037, 1114, 1116, 1127, 1145, 1164, 1210, 1218, 1219, 1220, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236], "shapecolumn_0": [1, 201, 255, 290], "register_dataframe_namespac": [1, 49, 50, 51], "split": [1, 36, 48, 196, 290, 611, 629, 630, 1138, 1156, 1157], "splitfram": [1, 48], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 86, 88, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 126, 139, 140, 142, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 576, 578, 580, 581, 583, 585, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 746, 750, 789, 811, 815, 827, 828, 840, 843, 851, 855, 860, 963, 987, 1145, 1156, 1157, 1187, 1210, 1218, 1219, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1236, 1237], "_df": [1, 48], "by_alternate_row": 1, "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 140, 141, 142, 146, 159, 164, 167, 169, 170, 174, 180, 182, 183, 187, 195, 211, 214, 223, 224, 225, 226, 229, 237, 244, 245, 253, 255, 256, 257, 258, 264, 269, 270, 290, 299, 326, 337, 338, 339, 364, 371, 424, 430, 435, 444, 452, 510, 511, 521, 522, 549, 556, 562, 564, 569, 570, 572, 574, 576, 578, 581, 583, 585, 600, 601, 611, 613, 628, 648, 650, 657, 676, 678, 680, 692, 695, 697, 705, 707, 710, 712, 730, 732, 738, 750, 773, 779, 781, 785, 788, 789, 813, 820, 826, 827, 831, 833, 836, 837, 855, 860, 887, 898, 899, 900, 915, 928, 934, 985, 991, 996, 999, 1001, 1006, 1007, 1015, 1072, 1090, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1133, 1138, 1140, 1152, 1155, 1190, 1193, 1210, 1218, 1222, 1226, 1227, 1236, 1237], "with_row_index": [1, 223, 266, 290, 571, 573, 575, 577, 579, 582, 584, 586, 750, 834, 855, 1114, 1210], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 88, 100, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 137, 138, 139, 140, 142, 145, 146, 147, 155, 156, 159, 164, 165, 166, 170, 174, 175, 178, 179, 181, 182, 193, 194, 195, 197, 198, 201, 203, 205, 207, 208, 210, 214, 216, 220, 224, 225, 226, 228, 229, 230, 231, 237, 238, 241, 244, 246, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 266, 267, 268, 269, 275, 290, 300, 338, 342, 343, 345, 346, 348, 364, 399, 402, 422, 428, 448, 455, 456, 457, 458, 502, 511, 516, 518, 520, 522, 525, 549, 556, 565, 601, 613, 614, 623, 624, 648, 650, 651, 659, 664, 668, 669, 670, 671, 672, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 688, 689, 698, 699, 704, 705, 708, 713, 714, 715, 716, 717, 718, 719, 720, 723, 726, 727, 728, 729, 731, 732, 733, 734, 735, 739, 740, 746, 750, 766, 768, 773, 777, 778, 781, 785, 788, 793, 794, 802, 803, 809, 812, 813, 814, 815, 820, 821, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 842, 855, 859, 860, 863, 899, 916, 928, 966, 969, 984, 1065, 1090, 1095, 1139, 1140, 1141, 1150, 1151, 1175, 1178, 1186, 1187, 1192, 1199, 1210, 1219, 1220, 1221, 1222, 1223, 1233, 1234, 1237], "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 109, 112, 113, 117, 122, 126, 142, 157, 171, 177, 183, 185, 195, 196, 200, 201, 225, 226, 227, 234, 239, 242, 245, 247, 261, 273, 275, 284, 290, 305, 333, 338, 347, 348, 363, 367, 371, 373, 375, 381, 401, 413, 425, 428, 436, 442, 464, 472, 478, 480, 490, 491, 495, 498, 500, 502, 504, 550, 553, 562, 581, 582, 585, 586, 589, 592, 598, 603, 616, 619, 620, 623, 629, 630, 632, 633, 638, 640, 654, 658, 659, 660, 664, 665, 667, 682, 684, 693, 694, 695, 696, 702, 704, 722, 725, 726, 727, 731, 735, 739, 741, 750, 769, 771, 787, 789, 790, 797, 817, 822, 824, 829, 840, 842, 851, 855, 860, 894, 899, 907, 916, 927, 930, 934, 936, 938, 944, 968, 980, 992, 993, 1000, 1005, 1027, 1035, 1041, 1043, 1053, 1054, 1058, 1063, 1065, 1086, 1108, 1110, 1113, 1119, 1126, 1130, 1143, 1146, 1147, 1150, 1156, 1157, 1165, 1167, 1182, 1188, 1195, 1199, 1200, 1210, 1220, 1221, 1227, 1230, 1231, 1234, 1237], "filter": [1, 48, 116, 126, 127, 132, 166, 190, 191, 192, 197, 216, 276, 290, 520, 522, 610, 631, 666, 690, 693, 700, 729, 740, 750, 778, 782, 791, 793, 821, 843, 855, 860, 1116, 1210, 1224], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 104, 106, 126, 140, 142, 174, 182, 183, 191, 193, 201, 212, 215, 216, 223, 224, 229, 237, 248, 253, 257, 258, 264, 269, 290, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 443, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 534, 536, 538, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 676, 677, 679, 680, 681, 683, 685, 688, 690, 693, 696, 700, 701, 702, 703, 704, 705, 713, 715, 717, 718, 720, 723, 724, 729, 731, 733, 735, 736, 739, 740, 750, 785, 788, 789, 791, 806, 811, 813, 820, 821, 827, 831, 833, 836, 855, 860, 960, 963, 1037, 1114, 1116, 1145, 1164, 1210, 1237], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 101, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 126, 129, 130, 131, 132, 134, 139, 140, 141, 142, 143, 144, 146, 149, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 172, 173, 176, 177, 180, 181, 182, 183, 184, 188, 189, 193, 195, 196, 197, 199, 201, 203, 204, 205, 206, 210, 211, 212, 213, 216, 217, 218, 221, 223, 225, 226, 227, 228, 229, 231, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 253, 255, 258, 260, 261, 264, 266, 267, 269, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 290, 297, 299, 300, 302, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 320, 322, 325, 335, 338, 340, 349, 351, 352, 354, 355, 356, 363, 364, 365, 369, 370, 371, 377, 378, 382, 385, 387, 388, 392, 398, 400, 405, 406, 408, 409, 413, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 431, 432, 434, 436, 437, 439, 441, 443, 446, 447, 450, 453, 455, 456, 457, 458, 460, 462, 467, 468, 471, 474, 477, 478, 479, 485, 486, 498, 502, 504, 505, 506, 507, 509, 510, 512, 513, 514, 517, 521, 526, 527, 528, 530, 532, 541, 542, 543, 544, 545, 547, 548, 550, 553, 554, 556, 557, 558, 559, 563, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 596, 597, 598, 602, 603, 607, 611, 612, 613, 615, 651, 652, 653, 655, 656, 657, 660, 665, 666, 668, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 686, 693, 697, 700, 706, 707, 709, 712, 715, 716, 717, 721, 723, 724, 729, 736, 737, 738, 739, 740, 741, 746, 750, 765, 768, 769, 770, 774, 775, 777, 779, 780, 783, 784, 787, 788, 789, 792, 793, 796, 798, 801, 805, 807, 808, 812, 813, 818, 820, 821, 822, 829, 831, 833, 834, 835, 836, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 855, 860, 867, 868, 869, 870, 871, 872, 873, 875, 877, 880, 886, 896, 899, 901, 908, 911, 913, 914, 916, 919, 920, 921, 927, 928, 929, 931, 932, 933, 934, 941, 945, 949, 950, 951, 953, 955, 959, 965, 972, 973, 975, 976, 980, 983, 986, 987, 988, 989, 994, 998, 1000, 1003, 1004, 1006, 1008, 1009, 1013, 1016, 1018, 1019, 1020, 1021, 1024, 1025, 1030, 1031, 1034, 1037, 1040, 1041, 1042, 1048, 1049, 1061, 1065, 1067, 1068, 1069, 1070, 1071, 1074, 1075, 1086, 1090, 1091, 1092, 1096, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1115, 1123, 1124, 1125, 1126, 1129, 1130, 1134, 1138, 1139, 1140, 1142, 1145, 1183, 1184, 1186, 1189, 1191, 1192, 1193, 1194, 1198, 1200, 1210, 1218, 1223, 1225, 1226, 1229, 1230, 1232, 1236, 1237], "drop": [1, 103, 165, 166, 201, 256, 264, 290, 367, 369, 370, 472, 473, 556, 750, 778, 826, 831, 855, 930, 932, 933, 1035, 1036, 1090, 1210, 1233], "aaa": [1, 36, 290, 605, 615, 648, 650, 860, 1132, 1142], "bbb": [1, 36, 290, 648, 650, 860], "ccc": [1, 36, 290, 648, 650, 860, 1230], "ddd": [1, 36, 290, 648, 650], "eee": [1, 36, 290, 860], "fff": 1, "schema": [1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 95, 96, 100, 102, 103, 104, 106, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 130, 131, 157, 158, 167, 169, 196, 201, 208, 212, 249, 253, 290, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 378, 501, 502, 520, 534, 536, 538, 617, 667, 732, 750, 769, 770, 773, 779, 798, 803, 815, 830, 843, 855, 860, 918, 1144, 1210, 1218], "txt": [1, 12, 126, 605, 615, 1142], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 89, 103, 107, 112, 113, 114, 115, 126, 135, 136, 137, 138, 139, 146, 150, 155, 156, 167, 169, 176, 181, 182, 183, 198, 214, 216, 223, 226, 228, 229, 230, 231, 237, 247, 248, 254, 255, 258, 260, 264, 265, 268, 269, 290, 298, 321, 326, 343, 344, 345, 348, 393, 397, 399, 402, 410, 419, 422, 430, 434, 448, 481, 523, 524, 549, 553, 563, 568, 571, 573, 575, 577, 579, 582, 584, 586, 601, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 649, 651, 659, 667, 669, 671, 676, 679, 680, 681, 689, 691, 692, 694, 695, 701, 714, 716, 719, 728, 732, 734, 737, 738, 740, 750, 762, 766, 768, 779, 780, 788, 789, 794, 811, 812, 813, 814, 815, 820, 825, 831, 832, 836, 855, 860, 887, 903, 904, 905, 910, 960, 964, 966, 969, 977, 987, 1010, 1044, 1096, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1188, 1189, 1210, 1218, 1226, 1228, 1231, 1233, 1237], "register_lazyframe_namespac": [1, 48, 49, 51], "dtypeoper": [1, 50], "ldf": [1, 50, 836, 837, 839, 841, 844, 845, 846, 847, 848, 849, 850], "_ldf": [1, 50], "upcast_integer_typ": [1, 50], "with_column": [1, 12, 50, 53, 54, 183, 215, 223, 253, 258, 265, 290, 298, 300, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 331, 332, 333, 334, 338, 343, 344, 349, 353, 358, 359, 360, 361, 362, 364, 367, 371, 372, 374, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 411, 412, 414, 416, 417, 419, 426, 427, 432, 437, 439, 441, 446, 447, 448, 451, 452, 454, 455, 456, 457, 458, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 511, 528, 530, 532, 533, 535, 537, 539, 540, 543, 544, 545, 549, 550, 553, 554, 556, 559, 563, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588, 592, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 645, 646, 647, 649, 651, 652, 657, 660, 667, 669, 671, 674, 678, 679, 681, 686, 687, 689, 690, 692, 693, 697, 707, 711, 714, 716, 719, 730, 734, 736, 738, 740, 746, 750, 771, 772, 780, 782, 789, 791, 806, 807, 811, 818, 832, 855, 860, 928, 963, 1090, 1210], "tp": [1, 50], "cast": [1, 35, 49, 50, 100, 102, 103, 106, 135, 136, 137, 138, 176, 183, 215, 223, 248, 249, 253, 264, 290, 304, 361, 362, 373, 399, 402, 413, 548, 553, 554, 561, 568, 617, 618, 647, 653, 657, 681, 730, 750, 789, 806, 811, 831, 855, 859, 860, 912, 925, 926, 936, 966, 969, 980, 1094, 1144, 1145, 1174, 1181, 1187, 1191, 1193, 1194, 1210], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 89, 112, 121, 167, 176, 183, 215, 223, 228, 231, 243, 250, 290, 319, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 361, 362, 403, 404, 405, 406, 407, 408, 409, 413, 419, 422, 510, 511, 534, 536, 538, 553, 561, 568, 617, 642, 653, 657, 673, 698, 706, 707, 710, 725, 732, 750, 779, 789, 806, 811, 812, 815, 855, 860, 880, 881, 883, 884, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 925, 926, 970, 971, 972, 973, 974, 975, 976, 980, 982, 987, 1072, 1094, 1169, 1181, 1191, 1192, 1193, 1194, 1210], "int8": [1, 50, 76, 176, 290, 337, 338, 361, 362, 379, 382, 388, 389, 395, 398, 411, 412, 501, 653, 722, 725, 741, 750, 898, 899, 925, 926, 930, 942, 945, 955, 956, 962, 965, 978, 979, 1064, 1098, 1181, 1191, 1198, 1210], "int16": [1, 50, 253, 290, 361, 362, 394, 653, 750, 860, 925, 926, 961, 1181, 1188, 1210], "int32": [1, 50, 55, 100, 103, 139, 141, 142, 183, 196, 223, 248, 290, 324, 325, 327, 349, 374, 384, 385, 386, 387, 392, 414, 419, 568, 657, 725, 750, 789, 811, 855, 860, 882, 885, 886, 888, 937, 947, 951, 952, 953, 959, 981, 987, 1071, 1193, 1194, 1210], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 86, 100, 101, 102, 103, 104, 105, 106, 107, 112, 114, 117, 153, 154, 155, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 234, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 290, 298, 300, 301, 303, 304, 314, 316, 321, 326, 341, 342, 343, 344, 345, 346, 348, 349, 357, 364, 368, 399, 402, 422, 424, 426, 427, 428, 430, 433, 440, 441, 444, 446, 447, 448, 450, 453, 455, 456, 457, 458, 463, 469, 474, 481, 491, 492, 493, 494, 510, 511, 516, 529, 532, 533, 534, 535, 536, 537, 538, 546, 547, 549, 553, 556, 559, 563, 565, 567, 593, 599, 601, 608, 611, 615, 617, 623, 624, 648, 649, 659, 662, 666, 668, 669, 670, 671, 672, 676, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 726, 727, 729, 731, 732, 733, 734, 735, 739, 750, 765, 766, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 855, 860, 863, 866, 887, 902, 903, 904, 905, 906, 910, 911, 912, 928, 931, 966, 969, 983, 984, 985, 992, 995, 1010, 1015, 1032, 1054, 1055, 1056, 1057, 1090, 1095, 1135, 1138, 1142, 1144, 1150, 1151, 1175, 1177, 1178, 1180, 1192, 1197, 1210, 1220, 1221, 1223, 1224, 1225, 1226, 1230, 1232, 1234], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 100, 101, 102, 103, 104, 105, 106, 107, 126, 134, 146, 153, 154, 155, 156, 157, 158, 161, 163, 166, 170, 171, 172, 173, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 223, 225, 226, 233, 234, 237, 241, 242, 243, 244, 245, 246, 249, 252, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 267, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 293, 297, 298, 299, 300, 302, 304, 316, 323, 324, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 340, 341, 347, 348, 349, 351, 352, 353, 357, 358, 361, 362, 363, 365, 368, 375, 378, 379, 386, 394, 395, 396, 397, 398, 399, 402, 404, 407, 409, 410, 412, 416, 417, 419, 423, 424, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 457, 458, 462, 463, 464, 471, 472, 473, 474, 475, 477, 478, 480, 488, 490, 491, 492, 493, 494, 495, 496, 500, 501, 506, 509, 510, 511, 528, 530, 532, 533, 535, 537, 539, 540, 543, 544, 545, 548, 549, 551, 552, 553, 554, 557, 559, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 592, 595, 599, 600, 601, 602, 605, 607, 613, 615, 616, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 635, 636, 637, 638, 642, 647, 648, 650, 651, 652, 654, 657, 658, 659, 660, 666, 667, 669, 671, 672, 674, 675, 676, 677, 679, 681, 682, 684, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 700, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 746, 750, 765, 766, 768, 769, 770, 771, 772, 774, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 860, 866, 868, 875, 882, 884, 885, 886, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 907, 914, 915, 917, 922, 927, 929, 931, 941, 945, 951, 952, 953, 955, 956, 957, 958, 959, 962, 963, 964, 966, 969, 971, 974, 976, 977, 978, 979, 984, 987, 991, 992, 994, 995, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1023, 1027, 1034, 1035, 1036, 1037, 1038, 1043, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1063, 1064, 1078, 1081, 1082, 1083, 1086, 1087, 1088, 1092, 1093, 1096, 1097, 1100, 1104, 1106, 1107, 1108, 1109, 1110, 1113, 1115, 1119, 1120, 1123, 1126, 1127, 1128, 1132, 1134, 1140, 1142, 1143, 1146, 1147, 1148, 1149, 1154, 1156, 1157, 1162, 1163, 1164, 1165, 1169, 1174, 1175, 1178, 1180, 1182, 1188, 1191, 1193, 1195, 1201, 1210, 1214, 1218, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1235, 1236, 1237], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 101, 103, 105, 107, 117, 126, 153, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 170, 174, 176, 179, 180, 181, 182, 183, 185, 187, 188, 196, 197, 199, 200, 202, 204, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 227, 228, 229, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 254, 258, 259, 261, 262, 264, 269, 272, 273, 274, 277, 278, 280, 283, 284, 290, 298, 300, 301, 303, 321, 341, 348, 364, 428, 440, 448, 469, 481, 511, 517, 532, 533, 547, 549, 553, 556, 593, 629, 637, 659, 662, 669, 671, 672, 674, 675, 676, 679, 681, 682, 683, 684, 686, 687, 689, 699, 700, 701, 704, 705, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 729, 731, 733, 734, 735, 739, 746, 750, 766, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 785, 788, 789, 793, 796, 802, 805, 807, 809, 810, 812, 813, 818, 819, 820, 821, 825, 828, 831, 833, 836, 839, 840, 841, 844, 845, 847, 850, 851, 855, 859, 860, 911, 928, 1010, 1032, 1090, 1156, 1164, 1178, 1197, 1210, 1220, 1221, 1223, 1224, 1225, 1226, 1230], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 100, 103, 104, 105, 106, 107, 109, 113, 134, 135, 137, 140, 142, 146, 156, 157, 158, 162, 163, 170, 171, 172, 173, 176, 177, 178, 180, 181, 182, 183, 185, 186, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 210, 211, 212, 214, 216, 217, 218, 223, 226, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 248, 249, 252, 253, 255, 258, 259, 260, 263, 264, 266, 267, 269, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 290, 293, 298, 299, 302, 317, 318, 323, 324, 325, 327, 329, 333, 338, 340, 347, 348, 349, 352, 353, 363, 364, 365, 367, 368, 371, 374, 375, 376, 377, 378, 382, 385, 386, 387, 388, 392, 396, 398, 399, 400, 402, 403, 409, 413, 417, 419, 421, 422, 425, 427, 431, 432, 436, 437, 439, 442, 444, 446, 448, 451, 454, 455, 456, 457, 458, 462, 464, 471, 474, 475, 477, 478, 480, 483, 485, 486, 490, 491, 492, 493, 494, 495, 499, 500, 504, 510, 528, 530, 532, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 581, 583, 584, 585, 586, 587, 590, 595, 601, 607, 615, 616, 618, 619, 620, 638, 642, 652, 654, 658, 659, 660, 672, 674, 675, 677, 678, 679, 680, 682, 684, 686, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 700, 704, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 729, 731, 733, 734, 735, 739, 746, 750, 768, 769, 770, 771, 772, 775, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 800, 801, 802, 807, 811, 817, 818, 819, 820, 821, 822, 823, 824, 828, 830, 831, 834, 835, 836, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 855, 860, 866, 868, 872, 875, 878, 879, 882, 884, 885, 886, 888, 890, 894, 899, 900, 901, 907, 915, 917, 923, 927, 928, 929, 930, 931, 934, 937, 938, 939, 940, 941, 942, 952, 963, 965, 966, 967, 969, 970, 976, 978, 979, 980, 984, 987, 989, 991, 992, 993, 1001, 1005, 1006, 1008, 1010, 1014, 1017, 1027, 1034, 1037, 1038, 1043, 1046, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1062, 1063, 1067, 1071, 1078, 1083, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1096, 1097, 1100, 1101, 1102, 1103, 1105, 1106, 1109, 1113, 1115, 1120, 1123, 1126, 1129, 1134, 1142, 1143, 1145, 1146, 1165, 1169, 1182, 1189, 1191, 1194, 1195, 1198, 1201, 1210, 1221, 1223, 1225, 1226, 1229, 1230, 1232, 1236, 1237], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 100, 103, 104, 105, 106, 117, 121, 122, 134, 156, 159, 163, 164, 165, 166, 167, 168, 170, 171, 174, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 234, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 273, 283, 284, 290, 293, 298, 302, 323, 324, 325, 327, 333, 341, 348, 349, 361, 362, 368, 371, 375, 379, 389, 393, 394, 395, 405, 406, 408, 411, 412, 415, 417, 426, 427, 432, 433, 436, 442, 444, 446, 464, 465, 466, 475, 478, 491, 492, 493, 494, 498, 510, 511, 544, 548, 555, 558, 559, 560, 564, 566, 568, 570, 572, 574, 576, 578, 581, 583, 584, 585, 590, 601, 607, 611, 619, 620, 642, 652, 654, 659, 667, 669, 671, 678, 686, 687, 688, 690, 693, 697, 700, 706, 711, 712, 716, 729, 733, 746, 750, 768, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 790, 792, 793, 795, 797, 798, 802, 805, 807, 809, 811, 812, 813, 815, 817, 818, 819, 820, 821, 824, 827, 830, 831, 834, 835, 840, 850, 851, 855, 860, 882, 884, 885, 886, 888, 894, 915, 919, 921, 925, 926, 931, 934, 960, 979, 984, 991, 1001, 1006, 1028, 1029, 1038, 1041, 1054, 1055, 1056, 1057, 1061, 1078, 1089, 1092, 1093, 1097, 1099, 1104, 1106, 1108, 1110, 1115, 1120, 1134, 1138, 1146, 1169, 1181, 1191, 1210, 1221, 1223, 1225, 1226, 1229, 1234, 1235, 1237], "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 121, 122, 134, 149, 156, 159, 160, 162, 164, 165, 167, 168, 170, 174, 177, 179, 183, 185, 187, 189, 197, 200, 202, 204, 206, 208, 209, 213, 216, 218, 220, 221, 223, 224, 226, 227, 228, 229, 231, 234, 236, 239, 240, 241, 242, 247, 249, 250, 251, 258, 260, 261, 262, 290, 298, 302, 324, 325, 327, 336, 362, 374, 375, 379, 386, 394, 396, 397, 410, 412, 423, 436, 442, 446, 447, 464, 478, 491, 492, 493, 494, 548, 559, 564, 568, 583, 584, 601, 615, 641, 654, 678, 686, 687, 690, 693, 694, 700, 705, 711, 712, 729, 733, 750, 768, 773, 775, 777, 779, 781, 785, 787, 789, 790, 792, 793, 797, 803, 805, 808, 809, 811, 812, 813, 817, 821, 824, 855, 860, 872, 885, 886, 888, 897, 937, 938, 942, 947, 952, 963, 964, 977, 979, 990, 1009, 1024, 1041, 1054, 1055, 1056, 1057, 1096, 1097, 1109, 1115, 1142, 1168, 1210, 1223, 1225, 1226, 1229, 1237], "float32": [1, 10, 33, 42, 50, 156, 176, 247, 248, 249, 253, 290, 419, 710, 750, 768, 855, 860, 987, 1012, 1071, 1189, 1191, 1194, 1210], "lazi": [1, 50, 55, 126, 142, 198, 215, 216, 238, 290, 511, 702, 722, 725, 741, 750, 775, 793, 794, 833, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 855, 860, 1218, 1219, 1220, 1221, 1223, 1234, 1237], "i16": [1, 50, 379, 394, 412, 593, 750, 860, 961, 1188, 1210, 1237], "i32": [1, 50, 100, 103, 107, 139, 141, 142, 229, 238, 290, 324, 325, 327, 349, 374, 382, 384, 385, 386, 387, 388, 392, 414, 593, 678, 740, 750, 813, 855, 885, 886, 888, 937, 947, 951, 952, 953, 959, 981, 1071, 1210, 1227, 1231, 1237], "f32": [1, 50, 156, 238, 247, 253, 290, 593, 729, 750, 768, 821, 855, 860, 1071, 1210], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 100, 101, 102, 103, 104, 105, 106, 107, 112, 114, 121, 122, 126, 155, 156, 157, 158, 159, 163, 164, 166, 167, 170, 171, 173, 174, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 197, 198, 200, 201, 202, 207, 208, 209, 214, 215, 216, 217, 220, 221, 222, 223, 227, 229, 234, 236, 237, 238, 240, 242, 244, 251, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 280, 283, 284, 290, 298, 300, 304, 314, 319, 320, 322, 323, 328, 330, 331, 332, 333, 334, 336, 339, 341, 347, 348, 353, 359, 360, 361, 362, 363, 364, 367, 368, 381, 401, 403, 404, 405, 406, 407, 408, 409, 419, 422, 424, 425, 427, 428, 429, 430, 432, 433, 435, 436, 438, 442, 444, 445, 446, 447, 448, 451, 452, 454, 455, 456, 457, 458, 461, 464, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 508, 510, 511, 528, 529, 530, 532, 533, 535, 537, 539, 540, 545, 549, 550, 553, 554, 555, 556, 559, 560, 561, 563, 564, 565, 566, 567, 568, 589, 591, 592, 593, 594, 595, 599, 600, 601, 616, 623, 624, 638, 642, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 661, 663, 666, 673, 676, 679, 681, 686, 687, 688, 689, 690, 693, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 721, 724, 728, 729, 730, 733, 734, 735, 736, 740, 746, 750, 766, 768, 769, 771, 772, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 802, 803, 804, 806, 807, 809, 810, 811, 813, 815, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 831, 834, 835, 836, 837, 839, 840, 841, 843, 844, 847, 850, 851, 855, 860, 862, 863, 866, 884, 889, 891, 893, 894, 895, 897, 900, 907, 917, 918, 923, 924, 925, 926, 927, 928, 944, 968, 970, 971, 972, 973, 974, 975, 976, 991, 992, 993, 995, 996, 999, 1000, 1001, 1005, 1007, 1015, 1027, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1072, 1077, 1083, 1090, 1093, 1094, 1095, 1096, 1097, 1099, 1102, 1105, 1109, 1113, 1114, 1116, 1119, 1120, 1122, 1123, 1127, 1128, 1169, 1175, 1180, 1182, 1187, 1195, 1196, 1201, 1210, 1218, 1220, 1224, 1225, 1226, 1227, 1229, 1232, 1234, 1235, 1237], "register_series_namespac": [1, 48, 49, 50], "math": [1, 10, 51, 365, 750, 919, 921, 1124, 1183, 1210, 1228, 1232, 1233], "mathshortcut": [1, 51], "": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 89, 100, 107, 112, 113, 114, 115, 117, 123, 127, 128, 131, 132, 146, 155, 156, 166, 169, 174, 177, 182, 183, 188, 194, 197, 198, 207, 214, 216, 221, 223, 226, 229, 230, 237, 246, 249, 254, 256, 257, 258, 259, 264, 265, 290, 326, 348, 349, 376, 381, 399, 402, 422, 428, 432, 460, 481, 510, 511, 521, 529, 541, 542, 549, 550, 561, 567, 601, 605, 612, 613, 614, 615, 616, 623, 624, 627, 628, 630, 637, 638, 639, 640, 644, 645, 648, 650, 651, 659, 668, 669, 670, 671, 676, 682, 685, 688, 689, 698, 699, 701, 702, 708, 711, 712, 713, 714, 716, 718, 719, 721, 728, 730, 732, 733, 734, 740, 746, 750, 766, 768, 778, 788, 789, 794, 802, 813, 814, 820, 825, 826, 827, 828, 831, 832, 843, 855, 860, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 946, 948, 949, 950, 952, 953, 954, 957, 958, 961, 964, 965, 966, 969, 977, 979, 980, 981, 982, 985, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1210, 1214, 1218, 1221, 1224, 1231], "_": [1, 47, 51, 216, 246, 250, 290, 326, 481, 606, 613, 619, 620, 625, 628, 629, 818, 855, 911, 1133, 1140, 1146, 1147, 1152, 1156, 1186, 1210], "squar": [1, 51, 276, 460, 564, 602, 750, 843, 1025, 1097, 1129, 1210, 1229], "cube": [1, 51, 351, 554, 750, 913, 1210, 1229], "s2": [1, 46, 84, 85, 137, 138, 176, 290, 899, 915, 931, 984, 1001, 1015, 1024, 1032, 1065, 1078, 1093, 1201, 1210], "renam": [1, 103, 112, 113, 149, 182, 229, 230, 264, 265, 269, 271, 290, 300, 434, 525, 526, 532, 533, 534, 535, 537, 539, 540, 650, 651, 728, 732, 750, 788, 813, 814, 831, 832, 836, 838, 855, 863, 1142, 1178, 1187, 1210], "n2": [1, 338], "s3": [1, 35, 116, 127, 128, 131, 132, 290, 899, 1065, 1210], "n3": 1, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 121, 122, 134, 156, 159, 160, 162, 164, 165, 166, 167, 168, 170, 174, 177, 179, 181, 185, 187, 194, 197, 198, 200, 201, 202, 204, 206, 209, 218, 220, 221, 223, 224, 226, 227, 228, 229, 231, 234, 236, 238, 239, 240, 242, 247, 249, 250, 251, 258, 261, 262, 264, 290, 302, 304, 316, 324, 325, 327, 359, 362, 363, 375, 436, 443, 446, 447, 472, 474, 478, 491, 492, 493, 494, 530, 548, 554, 564, 565, 569, 593, 599, 601, 621, 622, 637, 667, 672, 678, 682, 684, 687, 689, 697, 699, 704, 705, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 729, 731, 734, 735, 739, 750, 768, 773, 775, 777, 778, 779, 781, 785, 787, 790, 793, 797, 798, 807, 809, 812, 813, 817, 821, 824, 831, 855, 860, 885, 886, 888, 921, 927, 947, 1006, 1009, 1024, 1035, 1037, 1041, 1054, 1055, 1056, 1057, 1086, 1097, 1100, 1101, 1104, 1106, 1108, 1110, 1148, 1149, 1164, 1210, 1218, 1223, 1225, 1226, 1229, 1230, 1231, 1237], "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 134, 160, 162, 176, 185, 189, 200, 201, 216, 223, 225, 226, 229, 241, 242, 258, 262, 264, 283, 290, 298, 302, 304, 316, 324, 325, 327, 332, 334, 359, 362, 365, 375, 428, 436, 446, 452, 472, 478, 489, 497, 532, 548, 558, 564, 568, 569, 580, 583, 584, 595, 599, 613, 641, 649, 651, 680, 686, 687, 690, 693, 705, 738, 750, 775, 790, 792, 797, 811, 813, 824, 831, 850, 855, 860, 880, 881, 885, 886, 888, 893, 895, 929, 942, 951, 953, 959, 964, 977, 978, 1015, 1024, 1035, 1041, 1052, 1060, 1097, 1101, 1107, 1109, 1111, 1123, 1140, 1168, 1177, 1210, 1218, 1223, 1226], "27": [1, 51, 248, 283, 290, 362, 389, 395, 411, 651, 750, 850, 860, 1189, 1210, 1236, 1237], "16": [1, 36, 49, 68, 78, 134, 148, 162, 183, 223, 264, 290, 359, 362, 446, 530, 554, 568, 642, 651, 686, 696, 697, 700, 750, 775, 789, 811, 818, 831, 855, 860, 964, 977, 1086, 1124, 1169, 1183, 1210, 1229, 1230], "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 133, 153, 253, 290, 356, 530, 554, 750, 1086, 1210, 1229], "25": [1, 27, 36, 51, 107, 162, 183, 198, 223, 248, 253, 260, 264, 290, 367, 379, 380, 394, 397, 410, 412, 419, 554, 556, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 660, 693, 694, 695, 696, 702, 712, 737, 738, 750, 775, 789, 794, 800, 811, 829, 831, 855, 860, 929, 930, 943, 964, 977, 983, 987, 1006, 1086, 1090, 1210, 1225, 1229, 1235], "125": [1, 36, 51, 290, 298, 554, 729, 750, 821, 855, 1086, 1210], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 163, 290, 366, 434, 750, 776, 855, 1234], "cfg": [2, 4, 17, 151], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1210, 1218, 1219, 1220, 1221, 1222, 1223, 1234], "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 101, 102, 103, 106, 112, 113, 114, 117, 118, 120, 121, 123, 124, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 159, 166, 175, 182, 184, 195, 198, 205, 207, 225, 227, 229, 231, 236, 241, 246, 248, 249, 253, 255, 256, 258, 259, 264, 290, 301, 303, 325, 326, 338, 353, 364, 396, 413, 441, 452, 477, 479, 481, 490, 491, 492, 493, 494, 496, 502, 510, 511, 517, 523, 553, 556, 563, 569, 570, 572, 574, 576, 578, 581, 583, 585, 589, 594, 598, 599, 604, 617, 623, 624, 627, 632, 633, 634, 635, 636, 637, 639, 640, 644, 664, 668, 670, 673, 677, 681, 691, 692, 693, 694, 695, 696, 706, 707, 710, 722, 725, 726, 727, 732, 737, 738, 740, 741, 750, 762, 771, 772, 778, 780, 788, 793, 794, 798, 802, 813, 815, 819, 826, 828, 831, 843, 855, 859, 864, 865, 886, 887, 899, 903, 917, 928, 963, 980, 997, 1004, 1015, 1022, 1040, 1042, 1044, 1053, 1054, 1055, 1056, 1057, 1059, 1065, 1072, 1090, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1114, 1115, 1122, 1126, 1127, 1131, 1144, 1150, 1151, 1154, 1159, 1160, 1161, 1164, 1166, 1167, 1171, 1191, 1199, 1210, 1233, 1237], "previous": [2, 3], "save": [2, 3, 6, 183, 198, 223, 260, 290, 372, 380, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 696, 737, 738, 746, 750, 762, 789, 794, 811, 855, 943, 960, 964, 977], "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 112, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 129, 131, 132, 134, 139, 140, 141, 142, 145, 146, 147, 183, 193, 198, 207, 238, 244, 255, 259, 290, 371, 460, 517, 523, 569, 570, 572, 574, 576, 578, 581, 583, 585, 598, 606, 625, 627, 664, 732, 740, 750, 762, 789, 793, 794, 802, 821, 828, 855, 860, 934, 1025, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1126, 1133, 1152, 1154, 1187, 1199, 1210, 1230], "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 156, 162, 163, 164, 169, 171, 175, 181, 183, 195, 196, 197, 198, 199, 207, 216, 220, 223, 224, 226, 227, 229, 230, 238, 246, 253, 255, 256, 258, 259, 260, 266, 290, 293, 338, 364, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 422, 432, 434, 446, 460, 478, 490, 502, 511, 523, 541, 542, 544, 549, 550, 553, 556, 558, 568, 569, 571, 573, 575, 577, 579, 582, 584, 586, 589, 601, 612, 613, 616, 617, 627, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 662, 674, 675, 678, 679, 690, 691, 692, 693, 694, 695, 696, 710, 725, 729, 736, 737, 738, 746, 749, 750, 768, 775, 776, 777, 782, 789, 793, 794, 802, 809, 811, 813, 814, 821, 826, 828, 833, 834, 855, 860, 899, 928, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 985, 987, 992, 1025, 1041, 1053, 1065, 1081, 1082, 1083, 1086, 1090, 1101, 1113, 1139, 1140, 1143, 1144, 1154, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1186, 1201, 1210, 1218, 1219, 1220, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237], "json": [2, 3, 5, 6, 39, 40, 121, 122, 128, 130, 163, 231, 290, 366, 434, 523, 526, 617, 618, 649, 750, 762, 776, 815, 855, 859, 1144, 1145, 1177], "paramet": [2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 155, 156, 157, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 193, 195, 196, 197, 198, 200, 201, 205, 207, 208, 211, 212, 214, 215, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 273, 275, 276, 282, 284, 290, 298, 300, 301, 302, 303, 304, 314, 321, 322, 325, 326, 333, 334, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 373, 375, 376, 381, 393, 396, 397, 398, 399, 401, 402, 410, 413, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 446, 447, 448, 452, 460, 462, 464, 469, 470, 471, 472, 474, 477, 478, 479, 480, 481, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 509, 510, 511, 517, 523, 524, 528, 530, 533, 534, 535, 536, 537, 538, 543, 544, 548, 549, 550, 553, 554, 556, 557, 559, 561, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 650, 651, 652, 654, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 766, 768, 769, 771, 772, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 794, 797, 798, 802, 803, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 840, 842, 843, 849, 851, 855, 859, 860, 863, 864, 865, 866, 875, 882, 883, 886, 887, 894, 895, 899, 900, 902, 903, 904, 905, 906, 907, 908, 916, 917, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 936, 938, 939, 944, 960, 963, 964, 965, 966, 968, 969, 977, 980, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 999, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1022, 1025, 1027, 1032, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1072, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1122, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1174, 1175, 1178, 1182, 1186, 1187, 1188, 1189, 1191, 1192, 1195, 1196, 1199, 1200, 1201, 1210, 1218, 1219, 1220, 1221, 1223, 1227, 1231, 1234], "produc": [2, 3, 142, 146, 197, 290, 322, 471, 520, 711, 793, 798, 855, 883, 1034], "load_from_fil": [2, 5, 6], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 163, 171, 231, 290, 366, 434, 523, 526, 536, 538, 750, 776, 815, 855, 859, 992, 1210], "current": [2, 3, 5, 6, 30, 34, 107, 114, 115, 117, 124, 126, 131, 157, 158, 197, 198, 238, 248, 253, 290, 380, 502, 550, 750, 769, 770, 793, 794, 821, 855, 860, 916, 918, 935, 943, 1086, 1189, 1194, 1210, 1220, 1234], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 110, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 163, 231, 290, 366, 523, 526, 591, 618, 750, 776, 815, 818, 855, 859, 1117, 1145, 1210, 1237], "load": [3, 5, 6, 103, 105, 114, 116, 117, 123, 127, 128, 145, 147, 290, 750, 762, 790, 797, 855, 859, 1237], "reset": [4, 151], "default": [4, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 100, 102, 103, 104, 105, 106, 107, 112, 113, 115, 117, 118, 120, 121, 122, 123, 124, 126, 131, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 151, 162, 166, 169, 182, 183, 184, 195, 197, 198, 205, 207, 214, 216, 223, 224, 225, 226, 227, 231, 234, 238, 239, 241, 246, 248, 249, 253, 256, 258, 259, 261, 266, 275, 290, 300, 301, 303, 326, 333, 338, 364, 371, 396, 415, 417, 418, 420, 421, 441, 477, 481, 490, 495, 496, 498, 502, 504, 505, 510, 517, 520, 523, 541, 542, 544, 550, 556, 559, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 592, 594, 603, 604, 612, 627, 632, 633, 634, 637, 639, 640, 642, 644, 664, 665, 668, 670, 673, 677, 678, 681, 682, 684, 691, 692, 693, 694, 695, 696, 699, 702, 706, 707, 708, 710, 722, 725, 731, 732, 737, 738, 739, 741, 750, 771, 772, 775, 778, 780, 788, 789, 793, 794, 802, 811, 815, 817, 821, 822, 826, 828, 829, 834, 842, 855, 860, 864, 865, 887, 894, 899, 917, 928, 929, 934, 963, 983, 985, 986, 988, 989, 1004, 1040, 1044, 1053, 1058, 1059, 1065, 1081, 1082, 1086, 1090, 1092, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1119, 1122, 1130, 1131, 1132, 1139, 1142, 1154, 1159, 1160, 1161, 1164, 1166, 1167, 1169, 1171, 1189, 1191, 1199, 1200, 1210, 1229, 1237], "state": [4, 93, 686, 762, 780, 782, 807, 818, 855], "note": [4, 10, 20, 35, 36, 46, 47, 54, 61, 62, 64, 77, 84, 85, 100, 101, 102, 104, 106, 107, 112, 114, 115, 116, 117, 121, 122, 127, 128, 132, 135, 137, 140, 142, 146, 148, 151, 153, 160, 162, 172, 183, 184, 193, 194, 195, 197, 198, 201, 212, 215, 216, 223, 224, 225, 226, 234, 238, 245, 248, 250, 253, 255, 259, 260, 264, 266, 267, 290, 333, 353, 361, 362, 369, 370, 376, 390, 391, 393, 397, 410, 419, 426, 432, 434, 441, 448, 455, 456, 474, 477, 495, 502, 511, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 592, 598, 605, 611, 612, 613, 614, 615, 616, 619, 620, 623, 624, 627, 632, 633, 634, 637, 638, 647, 648, 653, 660, 669, 671, 678, 686, 691, 692, 694, 695, 696, 700, 710, 722, 724, 725, 729, 737, 738, 740, 741, 746, 750, 761, 772, 775, 782, 783, 789, 790, 794, 797, 809, 811, 817, 818, 820, 821, 828, 831, 834, 835, 855, 860, 894, 917, 925, 926, 929, 932, 933, 939, 957, 958, 960, 964, 977, 987, 994, 1003, 1004, 1010, 1037, 1040, 1058, 1072, 1096, 1100, 1107, 1114, 1116, 1119, 1121, 1126, 1132, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1150, 1151, 1154, 1159, 1160, 1161, 1164, 1165, 1174, 1181, 1192, 1194, 1210, 1214, 1218, 1222, 1223, 1234], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 132, 139, 142, 146, 151, 162, 163, 166, 171, 182, 189, 195, 201, 212, 218, 224, 225, 226, 234, 256, 264, 271, 276, 282, 290, 298, 301, 302, 333, 353, 366, 399, 402, 416, 417, 425, 432, 434, 437, 439, 446, 462, 495, 509, 511, 526, 528, 530, 532, 533, 535, 537, 539, 540, 543, 544, 545, 548, 554, 557, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 592, 633, 634, 635, 636, 641, 647, 652, 660, 662, 667, 682, 712, 723, 742, 743, 745, 746, 750, 751, 752, 755, 756, 757, 758, 759, 762, 772, 775, 776, 778, 792, 808, 817, 826, 831, 838, 843, 849, 855, 866, 894, 917, 929, 966, 969, 992, 993, 1008, 1058, 1072, 1091, 1092, 1106, 1119, 1168, 1174, 1193, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217, 1222], "oper": [4, 36, 46, 55, 85, 89, 90, 97, 100, 102, 103, 104, 105, 106, 112, 114, 158, 171, 174, 176, 182, 188, 199, 201, 208, 212, 214, 215, 219, 221, 223, 226, 227, 232, 234, 243, 249, 250, 255, 258, 268, 269, 290, 298, 299, 302, 333, 358, 359, 360, 361, 362, 363, 416, 417, 432, 434, 437, 439, 462, 490, 491, 492, 493, 494, 495, 502, 509, 525, 528, 530, 531, 532, 533, 535, 537, 539, 540, 543, 544, 545, 548, 549, 554, 561, 589, 592, 652, 660, 667, 668, 670, 680, 681, 685, 697, 729, 740, 750, 762, 770, 773, 775, 779, 782, 788, 790, 793, 797, 802, 803, 812, 816, 817, 821, 830, 836, 855, 859, 894, 918, 922, 923, 924, 925, 926, 927, 992, 1053, 1054, 1055, 1056, 1057, 1058, 1094, 1113, 1119, 1185, 1190, 1191, 1192, 1210, 1233], "remov": [4, 112, 113, 126, 153, 164, 246, 290, 422, 533, 632, 633, 634, 635, 636, 698, 750, 777, 855, 1159, 1160, 1161, 1162, 1163, 1186, 1210, 1236], "environ": [4, 30, 124, 126, 131, 145, 148, 248, 290], "ani": [4, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 126, 127, 128, 129, 131, 132, 139, 141, 142, 144, 146, 151, 155, 160, 166, 171, 173, 174, 176, 193, 195, 196, 201, 205, 215, 224, 225, 226, 238, 241, 244, 245, 248, 249, 250, 253, 254, 256, 258, 259, 267, 290, 298, 301, 302, 326, 347, 348, 349, 363, 364, 397, 398, 416, 417, 427, 428, 432, 435, 437, 439, 443, 452, 462, 469, 474, 481, 509, 510, 511, 517, 525, 528, 530, 532, 533, 535, 537, 539, 540, 543, 544, 548, 553, 556, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 604, 606, 633, 634, 635, 636, 637, 639, 640, 642, 644, 652, 658, 659, 660, 667, 668, 669, 671, 681, 682, 683, 710, 712, 726, 727, 740, 750, 766, 771, 772, 778, 784, 785, 806, 821, 825, 826, 828, 835, 855, 859, 860, 864, 887, 907, 912, 927, 928, 964, 965, 992, 995, 999, 1006, 1015, 1024, 1032, 1037, 1044, 1072, 1090, 1096, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1115, 1131, 1133, 1164, 1166, 1167, 1169, 1171, 1189, 1190, 1191, 1192, 1194, 1195, 1210, 1234, 1237], "local": [4, 35, 114, 116, 127, 128, 131, 290, 410, 551, 552, 750, 910, 911, 940, 941, 964, 967, 977, 1087, 1088, 1210], "non": [4, 33, 35, 36, 42, 47, 62, 63, 105, 133, 155, 161, 196, 207, 223, 229, 230, 234, 254, 255, 259, 264, 265, 290, 347, 348, 353, 357, 358, 371, 396, 448, 502, 510, 511, 550, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 607, 613, 619, 647, 651, 658, 659, 669, 671, 679, 680, 681, 683, 685, 689, 696, 714, 716, 719, 726, 727, 728, 732, 734, 750, 766, 774, 802, 811, 813, 814, 817, 825, 828, 831, 832, 855, 859, 860, 907, 917, 922, 929, 934, 963, 1010, 1065, 1072, 1086, 1096, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1119, 1134, 1140, 1146, 1174, 1191, 1195, 1210, 1227], "env": [4, 147], "back": [4, 47, 171, 183, 249, 250, 290, 523, 549, 645, 750, 789, 815, 855, 992, 1172, 1192, 1210], "valu": [4, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 89, 102, 103, 105, 106, 112, 113, 114, 115, 126, 132, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 153, 154, 155, 162, 166, 168, 171, 172, 173, 174, 181, 183, 184, 185, 189, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 214, 216, 217, 218, 220, 223, 224, 225, 226, 227, 231, 234, 237, 239, 240, 241, 242, 244, 245, 249, 250, 254, 255, 258, 259, 260, 261, 268, 271, 272, 274, 277, 278, 280, 281, 290, 297, 298, 299, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 362, 363, 364, 367, 369, 370, 375, 379, 389, 394, 411, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 495, 497, 498, 499, 500, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 527, 528, 529, 530, 531, 541, 542, 543, 544, 547, 549, 550, 553, 554, 556, 557, 559, 562, 563, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 595, 596, 597, 598, 600, 601, 602, 604, 605, 607, 608, 609, 610, 612, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 638, 647, 649, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 676, 679, 681, 683, 685, 686, 687, 688, 689, 699, 700, 705, 706, 707, 708, 710, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 726, 727, 733, 734, 740, 750, 765, 766, 775, 778, 783, 784, 785, 789, 791, 792, 793, 794, 799, 800, 801, 802, 804, 805, 808, 809, 811, 815, 817, 820, 822, 823, 825, 828, 829, 838, 839, 841, 844, 845, 847, 848, 855, 860, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 900, 901, 903, 904, 905, 906, 908, 914, 917, 919, 920, 921, 922, 927, 928, 929, 930, 932, 933, 938, 942, 956, 961, 978, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1058, 1060, 1061, 1062, 1063, 1066, 1067, 1072, 1073, 1074, 1076, 1077, 1079, 1081, 1082, 1083, 1085, 1086, 1089, 1090, 1091, 1092, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1119, 1123, 1124, 1125, 1126, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1156, 1157, 1158, 1165, 1174, 1177, 1181, 1182, 1183, 1184, 1191, 1192, 1193, 1197, 1199, 1201, 1210, 1218, 1222, 1224, 1226, 1227, 1229, 1230, 1236, 1237], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 86, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 121, 122, 123, 126, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 762, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1210, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 102, 105, 107, 114, 115, 116, 127, 128, 141, 142, 144, 146, 155, 159, 166, 167, 183, 191, 196, 212, 248, 249, 253, 254, 259, 271, 290, 301, 303, 326, 345, 346, 366, 440, 452, 481, 511, 604, 610, 612, 614, 615, 618, 630, 631, 647, 668, 669, 670, 671, 681, 685, 712, 750, 766, 773, 776, 778, 779, 789, 807, 825, 828, 838, 855, 859, 860, 864, 865, 887, 1002, 1044, 1078, 1131, 1137, 1139, 1141, 1142, 1145, 1157, 1158, 1174, 1185, 1191, 1210, 1226], "save_to_fil": 5, "json_str": [5, 121, 122], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 56, 59, 62, 63, 85, 100, 102, 103, 104, 105, 106, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 157, 161, 162, 166, 172, 173, 181, 183, 184, 189, 193, 197, 198, 199, 201, 204, 207, 212, 213, 216, 223, 224, 227, 231, 234, 236, 237, 244, 246, 248, 249, 250, 253, 255, 256, 257, 258, 259, 260, 271, 275, 290, 301, 303, 304, 316, 317, 318, 325, 326, 338, 341, 353, 357, 358, 359, 362, 364, 369, 370, 378, 393, 396, 417, 418, 419, 420, 421, 422, 425, 426, 427, 433, 440, 441, 443, 446, 447, 448, 455, 456, 457, 458, 463, 465, 466, 473, 479, 481, 483, 490, 491, 492, 493, 494, 496, 502, 510, 511, 520, 523, 524, 526, 531, 544, 545, 546, 547, 549, 550, 556, 559, 560, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 592, 593, 594, 595, 599, 600, 604, 605, 607, 609, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 642, 644, 647, 648, 649, 650, 657, 669, 670, 671, 673, 679, 681, 683, 685, 689, 691, 692, 693, 694, 695, 696, 698, 699, 706, 707, 708, 709, 710, 711, 712, 714, 716, 719, 725, 726, 727, 732, 734, 736, 737, 738, 740, 750, 769, 770, 772, 774, 775, 778, 780, 783, 784, 789, 792, 793, 794, 796, 798, 802, 805, 811, 815, 817, 818, 819, 820, 826, 827, 828, 833, 838, 842, 843, 855, 859, 860, 864, 865, 873, 874, 878, 879, 886, 887, 899, 916, 917, 922, 928, 929, 931, 932, 933, 941, 948, 949, 950, 954, 963, 983, 986, 987, 988, 989, 993, 994, 995, 1002, 1004, 1006, 1008, 1009, 1010, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1032, 1036, 1042, 1044, 1046, 1053, 1054, 1055, 1056, 1057, 1059, 1065, 1072, 1073, 1074, 1075, 1076, 1085, 1090, 1091, 1092, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1119, 1122, 1123, 1126, 1127, 1130, 1131, 1132, 1134, 1136, 1137, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1169, 1171, 1174, 1177, 1187, 1188, 1189, 1191, 1192, 1193, 1200, 1210, 1218, 1219, 1220, 1221, 1223, 1227, 1234], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 231, 290, 523, 815, 855], "leav": [6, 207, 290, 502, 802, 855], "directli": [6, 30, 54, 114, 142, 146, 151, 226, 248, 290, 418, 420, 421, 563, 725, 750, 772, 855, 986, 988, 989, 1096, 1189, 1210, 1220, 1237], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 474, 613, 1037, 1140], "bool": [7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 100, 101, 102, 103, 105, 106, 107, 112, 113, 114, 117, 118, 120, 122, 123, 124, 126, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 168, 173, 174, 175, 176, 180, 181, 182, 183, 187, 188, 190, 191, 192, 195, 197, 198, 205, 214, 216, 224, 225, 226, 227, 232, 235, 237, 238, 241, 244, 246, 249, 250, 254, 255, 256, 257, 259, 260, 262, 264, 272, 274, 277, 280, 290, 300, 301, 302, 303, 304, 314, 317, 318, 321, 325, 326, 334, 339, 342, 343, 345, 346, 348, 349, 358, 359, 360, 361, 362, 363, 364, 371, 383, 398, 415, 416, 417, 418, 420, 421, 437, 439, 440, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 470, 474, 477, 479, 481, 490, 497, 503, 509, 510, 511, 515, 516, 517, 518, 519, 520, 524, 543, 544, 546, 548, 551, 552, 556, 559, 561, 569, 570, 572, 574, 576, 578, 580, 581, 583, 585, 589, 591, 593, 598, 600, 601, 604, 605, 606, 607, 608, 610, 615, 623, 624, 625, 628, 629, 631, 637, 639, 640, 642, 644, 648, 650, 659, 661, 664, 667, 668, 669, 670, 671, 673, 676, 677, 678, 681, 682, 685, 686, 691, 692, 694, 695, 706, 707, 710, 712, 722, 725, 729, 732, 737, 738, 740, 741, 750, 766, 768, 769, 771, 772, 775, 780, 782, 784, 785, 788, 789, 793, 794, 798, 802, 807, 816, 818, 820, 821, 825, 826, 827, 828, 831, 839, 841, 844, 847, 855, 859, 860, 864, 865, 875, 878, 879, 882, 886, 887, 895, 900, 902, 903, 905, 906, 908, 910, 912, 916, 922, 923, 924, 925, 926, 927, 928, 934, 946, 965, 983, 984, 986, 988, 989, 996, 1002, 1003, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1029, 1033, 1037, 1040, 1042, 1044, 1053, 1060, 1066, 1072, 1084, 1087, 1088, 1090, 1092, 1093, 1094, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1116, 1117, 1121, 1126, 1128, 1131, 1132, 1133, 1134, 1135, 1137, 1142, 1150, 1151, 1152, 1155, 1156, 1158, 1164, 1166, 1167, 1169, 1171, 1186, 1191, 1192, 1196, 1199, 1210, 1218, 1220, 1226, 1230, 1234], "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 53, 54, 55, 100, 101, 102, 103, 105, 106, 107, 109, 112, 113, 114, 116, 117, 118, 120, 123, 124, 126, 127, 129, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 151, 153, 156, 157, 158, 162, 168, 173, 174, 176, 180, 181, 182, 183, 188, 190, 191, 192, 195, 197, 198, 199, 204, 205, 211, 212, 214, 216, 217, 224, 225, 226, 227, 229, 237, 238, 241, 244, 246, 248, 249, 250, 253, 255, 256, 257, 258, 259, 260, 264, 270, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 299, 300, 301, 302, 303, 304, 315, 317, 318, 321, 325, 326, 334, 338, 342, 343, 345, 346, 348, 349, 358, 359, 360, 361, 362, 364, 371, 373, 376, 379, 381, 383, 390, 391, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 428, 435, 437, 438, 439, 440, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 470, 477, 479, 481, 497, 502, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 524, 525, 543, 544, 546, 548, 551, 552, 556, 561, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 593, 598, 600, 601, 604, 605, 606, 607, 608, 610, 615, 617, 618, 623, 624, 628, 629, 631, 637, 639, 640, 642, 644, 648, 650, 659, 661, 664, 667, 668, 669, 670, 671, 673, 676, 677, 678, 682, 691, 694, 700, 706, 712, 722, 725, 729, 732, 737, 740, 741, 750, 768, 769, 770, 771, 772, 775, 780, 782, 784, 785, 788, 789, 793, 794, 796, 798, 802, 807, 813, 818, 820, 821, 826, 827, 828, 831, 837, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 859, 860, 864, 865, 876, 878, 879, 882, 886, 887, 895, 902, 903, 905, 906, 908, 910, 912, 915, 916, 928, 934, 935, 936, 939, 942, 943, 944, 945, 946, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 983, 984, 986, 988, 989, 996, 1002, 1003, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1029, 1033, 1040, 1042, 1044, 1060, 1072, 1078, 1084, 1087, 1088, 1090, 1093, 1094, 1107, 1126, 1128, 1131, 1132, 1133, 1134, 1135, 1137, 1142, 1144, 1145, 1150, 1151, 1155, 1156, 1158, 1164, 1166, 1167, 1169, 1171, 1186, 1191, 1192, 1199, 1201, 1210, 1218, 1220, 1222, 1226, 1227, 1230, 1234, 1237], "ascii": [7, 20, 606, 616, 619, 620, 625, 627, 638, 647, 860, 1133, 1143, 1146, 1147, 1152, 1154, 1165, 1174], "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 111, 112, 113, 115, 126, 290, 393, 611, 613, 616, 619, 620, 621, 622, 623, 624, 627, 628, 629, 632, 633, 634, 635, 636, 638, 647, 807, 855, 860, 960, 1138, 1140, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1159, 1160, 1161, 1165, 1174, 1230], "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 162, 181, 290, 775, 780, 855, 1236], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 100, 107, 116, 117, 127, 128, 197, 216, 238, 243, 250, 258, 259, 290, 729, 762, 793, 821, 828, 855, 1219, 1220, 1221, 1223, 1224, 1233, 1234], "outlin": 7, "fals": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 101, 102, 103, 105, 106, 107, 112, 113, 114, 117, 118, 120, 122, 123, 124, 126, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 153, 155, 156, 157, 158, 162, 168, 176, 180, 181, 182, 183, 187, 188, 190, 191, 192, 195, 197, 198, 199, 204, 205, 211, 212, 214, 216, 217, 224, 225, 226, 227, 232, 235, 237, 238, 241, 244, 246, 249, 250, 254, 255, 256, 259, 260, 262, 264, 272, 274, 277, 278, 280, 283, 290, 301, 302, 303, 314, 317, 318, 321, 325, 326, 334, 339, 342, 345, 346, 348, 349, 358, 359, 360, 361, 362, 363, 364, 371, 383, 398, 415, 416, 417, 418, 420, 421, 439, 440, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 470, 474, 477, 479, 481, 490, 497, 503, 509, 510, 511, 515, 517, 519, 521, 524, 543, 544, 546, 548, 551, 552, 556, 559, 569, 570, 572, 574, 576, 578, 580, 581, 583, 585, 589, 591, 593, 598, 600, 601, 604, 605, 606, 607, 610, 615, 617, 623, 624, 625, 628, 629, 631, 637, 639, 640, 642, 659, 661, 664, 667, 668, 669, 670, 671, 673, 676, 677, 678, 681, 682, 685, 686, 691, 692, 694, 695, 706, 707, 710, 722, 725, 729, 732, 737, 738, 740, 741, 750, 766, 768, 769, 770, 771, 772, 775, 780, 782, 788, 789, 793, 794, 796, 798, 807, 816, 818, 820, 821, 825, 826, 828, 831, 839, 841, 844, 845, 847, 850, 855, 859, 860, 864, 865, 875, 878, 879, 882, 886, 887, 895, 900, 902, 903, 905, 906, 908, 910, 912, 915, 916, 922, 923, 924, 925, 926, 927, 928, 934, 946, 965, 983, 984, 986, 988, 989, 996, 997, 1001, 1002, 1003, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1029, 1033, 1037, 1040, 1042, 1044, 1053, 1060, 1066, 1078, 1084, 1087, 1088, 1090, 1092, 1093, 1094, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1117, 1121, 1126, 1128, 1131, 1132, 1133, 1134, 1137, 1142, 1144, 1150, 1151, 1152, 1155, 1156, 1158, 1164, 1166, 1167, 1169, 1186, 1191, 1192, 1196, 1199, 1201, 1210, 1220, 1226, 1230, 1234], "revert": [7, 9, 10], "utf8_full_condens": [7, 20, 107], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 42, 110, 112, 113, 114, 118, 120, 126, 132, 170, 181, 195, 207, 225, 226, 231, 245, 288, 290, 397, 399, 402, 523, 524, 637, 639, 640, 644, 696, 780, 781, 802, 815, 855, 966, 969, 1164, 1166, 1167, 1171, 1209, 1231], "style": [7, 20, 36, 114, 216, 290], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 298, 613, 623, 633, 750, 860, 1140, 1150, 1151], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 298, 607, 613, 750, 1134, 1140, 1187, 1210], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 101, 103, 121, 132, 139, 142, 156, 157, 158, 160, 162, 163, 164, 167, 172, 173, 176, 180, 181, 182, 183, 188, 189, 197, 198, 203, 204, 205, 206, 210, 216, 217, 218, 236, 237, 239, 241, 253, 261, 264, 269, 272, 274, 277, 278, 279, 280, 282, 283, 290, 297, 300, 306, 307, 308, 309, 310, 311, 329, 335, 340, 349, 351, 352, 354, 355, 356, 364, 365, 369, 370, 398, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 431, 432, 437, 439, 446, 447, 455, 456, 457, 458, 460, 462, 474, 485, 486, 498, 504, 505, 506, 507, 509, 512, 513, 514, 527, 530, 532, 541, 542, 543, 544, 550, 554, 556, 557, 558, 559, 563, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 596, 597, 598, 602, 603, 651, 655, 656, 660, 665, 674, 675, 679, 680, 682, 684, 697, 698, 712, 715, 716, 717, 729, 731, 739, 746, 750, 768, 769, 775, 777, 783, 784, 788, 789, 792, 793, 794, 800, 801, 808, 820, 822, 829, 831, 833, 836, 839, 841, 844, 845, 846, 847, 849, 850, 855, 860, 867, 868, 869, 870, 871, 872, 890, 896, 901, 913, 914, 919, 920, 921, 928, 929, 932, 933, 965, 986, 987, 988, 989, 990, 994, 998, 1006, 1008, 1009, 1037, 1048, 1049, 1061, 1067, 1068, 1069, 1070, 1086, 1090, 1092, 1096, 1101, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1124, 1125, 1129, 1183, 1184, 1198, 1210, 1218, 1225, 1226, 1229, 1232, 1237], "multi": [8, 36, 112, 113, 253, 290, 422, 612, 750, 1139], "automat": [8, 100, 102, 103, 104, 106, 107, 112, 113, 114, 115, 117, 121, 122, 126, 130, 142, 146, 148, 229, 238, 264, 290, 510, 563, 632, 633, 634, 729, 750, 813, 821, 831, 855, 859, 1096, 1159, 1160, 1161, 1194, 1210, 1220, 1223, 1234], "turn": [8, 42, 43, 44, 45, 53, 54, 112, 113, 126, 645, 771, 772, 780, 782, 798, 807, 855, 1172], "struct": [8, 98, 107, 212, 229, 252, 257, 264, 290, 338, 364, 443, 502, 511, 534, 536, 538, 556, 566, 567, 614, 617, 629, 630, 664, 686, 687, 689, 711, 750, 813, 827, 831, 843, 855, 899, 928, 1065, 1072, 1090, 1099, 1141, 1144, 1156, 1157, 1191, 1210], "v": [8, 9, 41, 169, 290, 590, 669, 671, 750, 1115, 1210, 1220, 1221], "v2": [8, 118, 129], "out": [8, 14, 34, 42, 43, 44, 45, 107, 134, 223, 226, 290, 325, 343, 477, 479, 605, 608, 615, 740, 811, 855, 886, 903, 1040, 1042, 1132, 1135, 1142], "separ": [9, 10, 24, 27, 32, 33, 42, 109, 111, 112, 113, 117, 126, 214, 216, 246, 255, 257, 290, 323, 326, 475, 481, 511, 611, 681, 686, 687, 750, 827, 855, 884, 887, 1038, 1044, 1138, 1180, 1186, 1210, 1230], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 112, 113, 126, 290, 587, 641, 750, 855, 860, 1111, 1168, 1210, 1229], "set_thousands_separ": 9, "thousand": [9, 27], "group": [9, 27, 36, 41, 45, 113, 156, 182, 183, 196, 212, 214, 216, 223, 226, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 299, 348, 363, 424, 430, 435, 438, 474, 510, 511, 520, 522, 549, 559, 567, 568, 600, 601, 605, 612, 613, 614, 615, 623, 624, 659, 664, 712, 750, 768, 788, 789, 811, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 927, 1037, 1100, 1132, 1139, 1140, 1141, 1142, 1150, 1151, 1199, 1210, 1218, 1225, 1233], "9876": 9, "54321": 9, "1010101": 9, "123456": [9, 860], "78": 9, "tbl_cell_numeric_align": [9, 10, 27], "right": [9, 10, 15, 16, 18, 27, 36, 63, 112, 113, 135, 136, 137, 138, 183, 197, 198, 223, 259, 290, 364, 418, 420, 421, 448, 491, 492, 493, 494, 556, 568, 571, 573, 575, 577, 579, 582, 584, 586, 590, 598, 679, 691, 692, 694, 695, 737, 738, 750, 789, 793, 794, 811, 828, 855, 928, 986, 988, 989, 1010, 1054, 1055, 1056, 1057, 1090, 1115, 1126, 1210, 1224, 1228], "thousands_separ": [9, 10, 27], "decimal_separ": [9, 27], "float_precis": [9, 10, 27, 33, 36, 42, 290, 855], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 113, 134, 135, 137, 167, 181, 182, 196, 199, 247, 268, 290, 445, 524, 750, 771, 791, 855, 860, 1015, 1188, 1210, 1237], "876": 9, "543": 9, "010": [9, 642, 1169], "101": [9, 27, 375, 642, 860, 1169, 1237], "000": [9, 10, 27, 36, 290, 1237], "123": [9, 607, 613, 624, 647, 740, 860, 1134, 1140, 1174, 1187, 1210], "456": [9, 10, 375, 860, 938, 1187, 1210], "780": 9, "precis": [10, 11, 33, 36, 42, 63, 114, 195, 225, 226, 245, 248, 253, 290, 373, 641, 855, 860, 936, 1168], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 103, 106, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 126, 127, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 157, 162, 169, 172, 173, 177, 179, 181, 184, 185, 186, 188, 193, 195, 196, 198, 200, 201, 211, 212, 221, 223, 224, 227, 233, 234, 236, 239, 242, 247, 251, 254, 258, 261, 263, 266, 267, 273, 284, 290, 298, 321, 325, 333, 335, 338, 340, 341, 347, 348, 363, 367, 371, 418, 420, 421, 425, 426, 427, 433, 435, 436, 438, 441, 442, 443, 464, 470, 472, 477, 478, 479, 480, 490, 495, 496, 498, 500, 501, 502, 504, 548, 550, 553, 554, 556, 559, 562, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 594, 599, 603, 612, 616, 617, 621, 622, 623, 627, 629, 630, 638, 641, 642, 647, 654, 658, 659, 665, 667, 673, 682, 684, 690, 693, 696, 702, 704, 706, 707, 721, 722, 725, 726, 727, 731, 732, 735, 736, 739, 741, 750, 766, 769, 775, 782, 783, 784, 787, 790, 794, 797, 807, 817, 819, 822, 824, 825, 829, 830, 834, 835, 840, 851, 855, 860, 873, 874, 882, 886, 894, 896, 899, 901, 907, 908, 915, 916, 927, 930, 931, 934, 985, 986, 988, 989, 993, 994, 995, 999, 1000, 1004, 1005, 1006, 1024, 1026, 1027, 1033, 1035, 1040, 1041, 1042, 1043, 1053, 1058, 1059, 1061, 1063, 1064, 1065, 1067, 1078, 1079, 1081, 1082, 1083, 1085, 1086, 1089, 1090, 1092, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1122, 1127, 1130, 1139, 1143, 1144, 1148, 1149, 1150, 1154, 1156, 1157, 1165, 1168, 1169, 1174, 1181, 1182, 1188, 1195, 1200, 1210, 1220, 1223, 1234, 1237], "control": [10, 11, 36, 54, 55, 117, 140, 142, 237, 238, 248, 290, 563, 601, 729, 750, 772, 780, 820, 821, 855, 1096, 1189, 1210, 1220, 1223], "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 94, 100, 102, 103, 104, 106, 109, 112, 113, 114, 115, 117, 121, 122, 123, 124, 126, 129, 130, 131, 133, 140, 142, 145, 147, 148, 149, 155, 157, 161, 169, 170, 172, 173, 181, 185, 186, 195, 196, 199, 200, 211, 212, 223, 227, 234, 239, 242, 254, 258, 261, 263, 271, 273, 275, 284, 290, 315, 331, 333, 338, 341, 347, 348, 357, 363, 364, 367, 371, 374, 382, 384, 386, 388, 389, 398, 411, 412, 414, 418, 419, 420, 421, 425, 426, 427, 433, 442, 455, 456, 463, 464, 472, 480, 483, 488, 490, 495, 498, 500, 502, 504, 549, 553, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 594, 603, 616, 617, 619, 620, 623, 627, 629, 630, 638, 641, 654, 658, 659, 665, 678, 682, 683, 684, 696, 704, 709, 726, 727, 731, 735, 739, 750, 766, 769, 774, 781, 782, 783, 784, 790, 797, 807, 817, 822, 824, 825, 829, 830, 838, 840, 842, 851, 855, 892, 894, 899, 907, 916, 927, 928, 930, 934, 937, 945, 947, 952, 955, 956, 965, 978, 979, 981, 985, 986, 987, 988, 989, 993, 994, 995, 1005, 1026, 1027, 1035, 1043, 1046, 1051, 1053, 1058, 1063, 1065, 1078, 1079, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1119, 1122, 1130, 1143, 1144, 1146, 1147, 1150, 1154, 1156, 1157, 1165, 1168, 1182, 1195, 1200, 1210, 1224, 1229, 1237], "place": [10, 11, 33, 42, 165, 171, 187, 188, 216, 221, 226, 237, 262, 290, 314, 326, 334, 481, 497, 600, 601, 676, 750, 820, 855, 866, 875, 887, 895, 992, 1044, 1060, 1093, 1128, 1210], "float": [10, 11, 33, 36, 42, 66, 67, 112, 113, 126, 132, 135, 136, 137, 138, 139, 142, 146, 153, 162, 169, 172, 198, 218, 227, 248, 249, 282, 290, 321, 352, 364, 369, 370, 398, 415, 416, 417, 418, 420, 421, 426, 431, 432, 437, 439, 446, 450, 453, 455, 456, 457, 458, 462, 470, 490, 505, 509, 510, 512, 527, 541, 542, 543, 544, 554, 556, 557, 569, 570, 572, 574, 576, 578, 579, 581, 583, 585, 587, 589, 660, 723, 725, 750, 775, 783, 794, 808, 818, 849, 855, 860, 882, 908, 914, 928, 929, 931, 932, 933, 965, 983, 985, 986, 988, 989, 994, 998, 1006, 1025, 1033, 1053, 1068, 1081, 1082, 1089, 1090, 1091, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1113, 1116, 1126, 1130, 1181, 1191, 1200, 1210, 1237], "point": [10, 11, 36, 37, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 124, 131, 132, 142, 146, 172, 183, 199, 238, 248, 253, 258, 259, 290, 352, 363, 364, 369, 397, 398, 426, 431, 432, 443, 455, 456, 490, 511, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 726, 727, 750, 771, 772, 783, 789, 798, 809, 821, 828, 855, 912, 914, 927, 928, 932, 964, 965, 994, 998, 1006, 1053, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1189, 1194, 1210], "standard": [10, 36, 239, 248, 253, 290, 384, 420, 581, 582, 598, 603, 618, 731, 746, 750, 822, 855, 947, 988, 1126, 1130, 1145, 1210, 1225, 1237], "behaviour": [10, 47, 55, 166, 238, 290, 605, 612, 613, 615, 623, 624, 660, 729, 750, 778, 821, 855, 1132, 1139, 1140, 1142, 1150, 1151], "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 112, 113, 114, 115, 117, 118, 120, 123, 124, 126, 127, 129, 130, 132, 135, 136, 137, 138, 142, 146, 155, 162, 167, 169, 171, 173, 176, 183, 197, 201, 215, 224, 226, 229, 230, 234, 237, 246, 248, 249, 253, 254, 256, 259, 265, 290, 333, 353, 366, 371, 418, 420, 421, 427, 495, 502, 521, 553, 563, 592, 600, 601, 606, 611, 616, 619, 620, 625, 627, 632, 633, 634, 637, 638, 676, 678, 686, 700, 750, 766, 775, 776, 784, 789, 793, 798, 813, 814, 817, 820, 825, 826, 828, 832, 855, 894, 917, 929, 934, 985, 986, 988, 989, 992, 995, 1058, 1096, 1114, 1116, 1119, 1133, 1138, 1143, 1146, 1147, 1152, 1154, 1159, 1160, 1161, 1164, 1165, 1186, 1191, 1210, 1223], "larger": [10, 42, 43, 44, 45, 53, 54, 432, 682, 750, 771, 772, 855], "should": [10, 34, 36, 42, 43, 44, 45, 55, 100, 102, 104, 106, 116, 117, 121, 122, 126, 130, 132, 139, 140, 142, 146, 164, 195, 198, 201, 224, 225, 226, 237, 245, 246, 257, 276, 290, 299, 363, 366, 413, 419, 422, 455, 456, 474, 511, 523, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 590, 598, 601, 664, 676, 696, 698, 710, 712, 726, 727, 740, 750, 776, 777, 782, 793, 794, 798, 815, 820, 827, 855, 860, 927, 980, 987, 1037, 1072, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1115, 1126, 1199, 1210], "ensur": [10, 36, 115, 141, 144, 182, 214, 224, 249, 290, 448, 510, 750, 788, 798, 855, 859, 860, 1191, 1210], "awar": [10, 114, 195, 225, 226, 245, 290, 419, 606, 625, 750, 782, 855, 987, 1133, 1152, 1210], "both": [10, 25, 33, 42, 46, 84, 85, 114, 183, 197, 198, 208, 223, 224, 250, 259, 290, 304, 353, 364, 422, 448, 556, 568, 571, 573, 575, 577, 579, 582, 584, 586, 627, 691, 692, 694, 695, 737, 738, 746, 750, 761, 789, 793, 794, 803, 811, 828, 855, 860, 917, 1010, 1154, 1192, 1210, 1235], "limit": [10, 11, 45, 114, 115, 126, 148, 173, 290, 341, 427, 433, 750, 784, 790, 855, 995, 1210, 1233], "represent": [10, 39, 40, 61, 62, 64, 77, 107, 247, 290, 374, 379, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 411, 412, 414, 657, 750, 780, 796, 855, 911, 937, 942, 945, 946, 947, 951, 952, 953, 955, 956, 959, 961, 962, 965, 978, 979, 981, 1188, 1193, 1210], "look": [10, 183, 290, 342, 502, 789, 855, 902], "appli": [10, 20, 33, 36, 42, 55, 114, 126, 139, 142, 146, 162, 176, 201, 215, 237, 238, 248, 276, 290, 314, 374, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 400, 411, 412, 414, 420, 421, 510, 511, 553, 570, 571, 572, 573, 576, 577, 583, 584, 601, 623, 624, 637, 639, 640, 644, 676, 686, 687, 700, 711, 712, 724, 729, 740, 750, 775, 790, 797, 798, 806, 820, 821, 843, 855, 917, 937, 940, 941, 942, 945, 946, 947, 951, 952, 953, 955, 956, 959, 961, 962, 965, 967, 978, 979, 981, 988, 989, 1072, 1102, 1103, 1105, 1109, 1150, 1151, 1164, 1166, 1167, 1171, 1210, 1218], "float64": [10, 33, 36, 42, 103, 112, 121, 139, 142, 167, 169, 176, 228, 253, 264, 290, 306, 307, 308, 309, 310, 311, 349, 354, 355, 356, 365, 398, 419, 422, 455, 456, 558, 596, 597, 655, 656, 698, 722, 725, 741, 750, 779, 812, 831, 855, 860, 965, 987, 1192, 1198, 1210], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 100, 102, 104, 106, 107, 112, 113, 114, 115, 117, 121, 122, 123, 126, 139, 140, 141, 142, 146, 153, 156, 183, 198, 223, 247, 248, 249, 250, 253, 258, 267, 290, 349, 350, 361, 362, 413, 422, 435, 469, 477, 508, 510, 511, 517, 554, 561, 562, 568, 571, 573, 575, 577, 579, 582, 584, 586, 593, 617, 637, 653, 657, 663, 673, 698, 702, 706, 707, 709, 710, 711, 712, 722, 725, 732, 741, 750, 768, 789, 794, 811, 835, 855, 860, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 908, 909, 910, 911, 916, 925, 926, 929, 930, 980, 985, 1012, 1028, 1029, 1032, 1040, 1064, 1071, 1072, 1098, 1120, 1144, 1164, 1181, 1188, 1189, 1191, 1192, 1193, 1194, 1198, 1210, 1237], "doe": [10, 33, 35, 42, 47, 55, 94, 100, 102, 103, 104, 106, 107, 112, 113, 114, 115, 116, 117, 121, 122, 126, 127, 130, 132, 158, 171, 174, 183, 184, 196, 197, 224, 225, 226, 256, 264, 267, 290, 293, 413, 428, 432, 441, 502, 633, 634, 662, 746, 750, 770, 775, 782, 785, 789, 793, 798, 826, 831, 835, 855, 918, 980, 992, 996, 1003, 1004, 1121, 1210, 1214], "cover": 10, "nativ": [10, 34, 112, 114, 117, 118, 120, 124, 195, 201, 225, 226, 245, 249, 276, 290, 511, 712, 729, 750, 756, 821, 843, 855, 1072, 1191, 1210, 1237], "level": [10, 36, 41, 45, 126, 129, 130, 131, 176, 201, 212, 238, 290, 428, 750, 762, 790, 797, 821, 855], "larg": [10, 11, 14, 47, 114, 117, 123], "maximum": [10, 26, 33, 41, 42, 45, 63, 103, 106, 112, 113, 114, 117, 121, 123, 126, 130, 132, 140, 141, 142, 144, 146, 181, 183, 202, 203, 290, 319, 467, 512, 541, 551, 559, 616, 617, 620, 627, 638, 713, 714, 750, 789, 799, 855, 880, 948, 1030, 1073, 1081, 1087, 1092, 1143, 1144, 1147, 1154, 1165, 1210, 1225], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 100, 101, 104, 105, 112, 114, 115, 121, 122, 126, 132, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 156, 162, 163, 164, 166, 181, 183, 196, 198, 207, 214, 216, 238, 246, 248, 253, 258, 260, 290, 293, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 428, 517, 523, 569, 571, 573, 575, 577, 579, 582, 584, 586, 678, 690, 691, 692, 693, 694, 695, 696, 729, 737, 738, 746, 750, 762, 768, 772, 775, 776, 777, 778, 789, 794, 798, 802, 815, 855, 919, 921, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 1013, 1016, 1018, 1019, 1101, 1124, 1183, 1210, 1214, 1232, 1237], "pi": [10, 365, 750, 919, 921, 1124, 1183, 1210, 1228, 1232], "e": [10, 31, 33, 35, 37, 38, 41, 42, 101, 112, 118, 120, 129, 132, 144, 163, 181, 185, 194, 200, 242, 243, 249, 258, 290, 298, 366, 415, 419, 422, 448, 505, 511, 516, 517, 518, 520, 521, 522, 524, 525, 593, 598, 615, 633, 634, 698, 712, 729, 740, 750, 776, 796, 809, 855, 860, 983, 987, 1010, 1126, 1142, 1210, 1226, 1230, 1237], "const": 10, "15": [10, 36, 134, 162, 183, 188, 201, 223, 290, 363, 367, 391, 397, 410, 419, 553, 568, 583, 687, 693, 736, 737, 750, 775, 789, 811, 855, 860, 927, 930, 964, 977, 987, 1210], "141592653589793": 10, "718281828459045": [10, 415, 505, 750, 983, 1068, 1210], "fix": [10, 56, 65, 117, 140, 413, 696, 980], "align": [10, 15, 16, 36, 47, 55, 290, 1235], "numer": [10, 16, 33, 36, 42, 116, 127, 156, 164, 198, 207, 216, 249, 250, 258, 290, 298, 349, 353, 432, 448, 507, 528, 530, 554, 562, 593, 614, 647, 652, 660, 750, 762, 768, 777, 794, 802, 855, 860, 908, 917, 929, 1010, 1120, 1141, 1174, 1191, 1210, 1229, 1237], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 86, 88, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 142, 155, 156, 160, 161, 164, 165, 166, 167, 170, 174, 175, 178, 179, 181, 182, 183, 187, 188, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 237, 239, 240, 241, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 275, 290, 300, 301, 303, 314, 323, 332, 334, 337, 348, 353, 357, 358, 364, 374, 375, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 399, 400, 402, 411, 412, 414, 422, 424, 428, 430, 443, 447, 448, 463, 469, 475, 477, 497, 501, 502, 511, 517, 518, 520, 522, 523, 532, 535, 537, 539, 540, 549, 556, 560, 562, 564, 566, 567, 568, 571, 573, 575, 577, 579, 582, 584, 586, 593, 600, 601, 604, 611, 615, 616, 629, 630, 637, 638, 639, 640, 641, 642, 644, 649, 651, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 766, 768, 774, 777, 778, 779, 781, 785, 788, 789, 793, 794, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 842, 843, 855, 860, 864, 865, 884, 893, 895, 898, 910, 911, 917, 922, 928, 937, 940, 941, 942, 945, 946, 947, 951, 952, 953, 955, 956, 959, 961, 962, 965, 966, 967, 969, 978, 979, 981, 991, 1003, 1006, 1009, 1032, 1038, 1040, 1060, 1064, 1090, 1097, 1100, 1120, 1131, 1138, 1142, 1156, 1157, 1164, 1166, 1167, 1168, 1169, 1171, 1177, 1180, 1186, 1187, 1199, 1210, 1224, 1226, 1227, 1229, 1230, 1232, 1235, 1236, 1237], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 103, 114, 133, 135, 136, 137, 138, 155, 159, 166, 167, 174, 182, 183, 197, 214, 215, 216, 223, 225, 227, 228, 232, 237, 248, 249, 254, 256, 260, 290, 314, 334, 339, 347, 348, 369, 370, 428, 473, 490, 497, 503, 549, 554, 559, 568, 589, 590, 591, 600, 601, 626, 633, 634, 635, 636, 650, 658, 659, 661, 662, 664, 676, 729, 740, 750, 761, 766, 773, 778, 779, 785, 788, 789, 793, 802, 811, 812, 816, 820, 821, 825, 826, 855, 860, 875, 895, 900, 907, 912, 932, 933, 996, 1022, 1036, 1053, 1060, 1066, 1092, 1098, 1113, 1115, 1117, 1128, 1153, 1178, 1195, 1196, 1197, 1199, 1210, 1218, 1220, 1226, 1233, 1237], "cleanli": [10, 181, 290], "line": [10, 20, 36, 112, 113, 117, 126, 181, 190, 192, 290, 293, 612, 1139], "up": [10, 36, 76, 115, 195, 198, 225, 226, 232, 245, 290, 352, 511, 616, 638, 750, 793, 794, 798, 816, 855, 860, 914, 1143, 1165, 1210], "xx": [10, 48, 50, 146, 162, 238, 290, 775, 855, 860, 1224, 1230, 1236], "yy": [10, 48, 50, 146, 162, 238, 290, 775, 855, 860, 1224, 1230, 1236], "11111111": 10, "44444444444": 10, "100000": [10, 27], "987654321": 10, "23456789": 10, "11": [10, 16, 41, 45, 134, 142, 154, 162, 198, 223, 290, 300, 390, 391, 393, 397, 410, 434, 446, 478, 526, 550, 559, 568, 569, 583, 599, 667, 733, 738, 750, 765, 771, 772, 775, 790, 797, 807, 811, 824, 855, 860, 960, 964, 977, 1072, 1101, 1210], "111": [10, 1227], "100": [10, 17, 27, 36, 103, 106, 112, 113, 114, 117, 121, 123, 126, 130, 234, 290, 563, 592, 606, 617, 625, 641, 695, 750, 817, 855, 860, 1069, 1096, 1102, 1103, 1105, 1119, 1133, 1144, 1152, 1168, 1210, 1227, 1237], "988": 10, "44": [10, 208, 290, 368, 750, 803, 855], "444": 10, "23": [10, 142, 162, 183, 223, 253, 290, 375, 379, 382, 394, 397, 412, 568, 571, 573, 575, 577, 579, 582, 584, 586, 693, 696, 736, 737, 738, 750, 775, 789, 811, 821, 855, 860, 938, 945, 1194, 1210, 1236, 1237], "789": [10, 860], "fmt": [11, 198, 290, 445, 701, 750, 791, 855], "floatfmt": 11, "mix": [11, 198, 249, 290, 729, 821, 855, 860, 929, 1210], "how": [11, 35, 36, 47, 55, 88, 115, 124, 126, 131, 166, 197, 198, 216, 258, 259, 290, 322, 367, 396, 446, 471, 472, 549, 562, 580, 637, 640, 678, 693, 740, 750, 778, 793, 828, 855, 859, 883, 930, 963, 1034, 1035, 1107, 1164, 1167, 1210], "full": [11, 41, 45, 47, 55, 62, 103, 106, 112, 113, 114, 116, 121, 126, 127, 128, 130, 132, 197, 259, 290, 616, 617, 637, 638, 639, 640, 644, 691, 692, 793, 798, 828, 855, 860, 1143, 1144, 1164, 1165, 1166, 1167, 1171, 1210, 1224, 1237], "scientif": 11, "notat": [11, 36, 290], "small": [11, 115, 199, 290, 397, 782, 855, 1237], "2304980958725870923": 11, "1e6": 11, "1e": [11, 135, 136, 137, 138], "230498": 11, "0000e": 11, "230498095872587": 11, "1000000": [11, 975], "00000001": [11, 667, 750], "plai": [12, 681], "sam": 12, "As": [12, 46, 84, 85, 100, 102, 103, 104, 106, 117, 121, 122, 130, 248, 253, 290, 502, 740, 855], "time": [12, 35, 52, 53, 54, 62, 64, 116, 126, 127, 142, 143, 146, 162, 171, 183, 198, 223, 260, 290, 321, 347, 348, 372, 373, 375, 376, 377, 380, 381, 390, 391, 393, 396, 397, 399, 401, 402, 410, 413, 419, 469, 470, 502, 567, 568, 571, 573, 575, 577, 579, 582, 584, 586, 594, 637, 640, 644, 657, 658, 659, 680, 681, 691, 692, 693, 694, 695, 696, 702, 737, 738, 750, 771, 772, 775, 789, 794, 807, 811, 855, 860, 882, 907, 935, 936, 938, 939, 943, 944, 960, 963, 964, 966, 968, 969, 977, 980, 987, 992, 1032, 1033, 1100, 1122, 1164, 1167, 1171, 1193, 1195, 1210, 1218, 1223, 1231, 1237], "goe": 12, "By": [12, 14, 30, 47, 112, 113, 126, 183, 197, 198, 223, 225, 234, 239, 260, 261, 290, 333, 393, 397, 410, 495, 498, 504, 568, 571, 573, 575, 577, 579, 582, 584, 586, 592, 603, 665, 682, 684, 691, 692, 694, 695, 696, 710, 731, 737, 738, 739, 750, 771, 789, 793, 794, 811, 817, 822, 829, 855, 894, 960, 964, 977, 1058, 1119, 1130, 1200, 1210], "begin": [12, 36, 290, 418, 420, 421, 612, 638, 750, 986, 988, 989, 1139, 1165, 1210], "beauti": 12, "friendship": 12, "len_byt": [12, 620, 1147], "len": [12, 36, 142, 146, 196, 216, 267, 271, 276, 290, 357, 511, 520, 522, 566, 683, 706, 750, 835, 838, 843, 855, 1099, 1210], "u32": [12, 114, 154, 156, 161, 213, 266, 267, 271, 275, 281, 283, 290, 299, 305, 312, 313, 314, 315, 316, 319, 320, 322, 331, 357, 358, 443, 463, 467, 468, 471, 483, 488, 531, 547, 559, 566, 567, 571, 573, 575, 577, 579, 582, 584, 586, 590, 607, 615, 619, 620, 657, 662, 664, 668, 672, 676, 677, 683, 685, 706, 709, 720, 750, 765, 768, 774, 805, 834, 835, 838, 842, 848, 850, 855, 860, 875, 876, 877, 880, 881, 883, 892, 908, 911, 922, 1006, 1030, 1031, 1034, 1046, 1051, 1092, 1099, 1100, 1115, 1134, 1142, 1146, 1147, 1193, 1197, 1199, 1210, 1218, 1225, 1226, 1230], "go": [12, 112, 113, 126, 610, 1137], "37": [12, 860], "bea": 12, "48": [12, 142, 223, 290, 568, 651, 750, 811, 855, 860], "fmt_str_length": [12, 692, 695], "50": [12, 27, 36, 162, 171, 181, 290, 353, 397, 410, 692, 750, 775, 855, 860, 917, 929, 977, 1210, 1224], "element": [13, 14, 25, 137, 138, 141, 144, 155, 161, 193, 216, 224, 237, 239, 254, 261, 290, 306, 307, 308, 309, 310, 311, 322, 323, 347, 348, 351, 354, 355, 356, 357, 359, 360, 361, 362, 363, 369, 370, 423, 424, 428, 441, 452, 463, 471, 473, 474, 475, 478, 483, 491, 492, 493, 494, 498, 504, 506, 507, 510, 511, 549, 550, 559, 562, 569, 570, 572, 574, 576, 578, 580, 581, 583, 585, 590, 595, 596, 597, 601, 602, 603, 629, 630, 641, 655, 656, 658, 659, 665, 676, 682, 684, 726, 727, 731, 739, 750, 766, 774, 820, 822, 825, 829, 855, 867, 868, 869, 870, 871, 872, 883, 884, 907, 913, 916, 919, 920, 921, 923, 924, 925, 926, 927, 932, 933, 990, 991, 996, 1005, 1015, 1024, 1026, 1027, 1034, 1036, 1037, 1038, 1041, 1046, 1054, 1055, 1056, 1057, 1069, 1070, 1072, 1086, 1092, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1115, 1123, 1124, 1125, 1129, 1130, 1156, 1157, 1168, 1182, 1183, 1184, 1188, 1195, 1196, 1200, 1210, 1225, 1226], "empti": [13, 31, 33, 42, 90, 103, 112, 113, 117, 123, 126, 157, 158, 183, 207, 290, 611, 710, 728, 769, 770, 789, 802, 855, 860, 916, 918, 1012, 1138, 1210], "alwai": [13, 33, 35, 42, 63, 65, 112, 155, 182, 197, 201, 254, 276, 290, 347, 348, 510, 520, 637, 658, 659, 740, 750, 766, 793, 798, 825, 855, 860, 907, 1072, 1164, 1195, 1210, 1218, 1234, 1237], "neg": [13, 61, 62, 63, 64, 112, 113, 118, 120, 124, 133, 185, 200, 223, 234, 236, 242, 267, 290, 333, 495, 496, 553, 554, 568, 592, 599, 616, 627, 638, 750, 811, 817, 819, 834, 835, 855, 860, 894, 1005, 1027, 1058, 1059, 1119, 1127, 1143, 1154, 1165, 1182, 1210], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 104, 105, 106, 114, 115, 116, 117, 126, 129, 131, 132, 146, 171, 183, 184, 197, 198, 212, 216, 223, 226, 231, 232, 234, 248, 249, 250, 260, 267, 269, 275, 290, 371, 397, 399, 402, 410, 418, 419, 420, 421, 425, 432, 441, 448, 460, 501, 502, 510, 511, 523, 549, 554, 556, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 591, 592, 611, 628, 629, 640, 660, 664, 685, 686, 687, 693, 694, 695, 696, 710, 711, 722, 725, 726, 727, 729, 741, 750, 767, 771, 775, 789, 793, 798, 807, 811, 815, 816, 817, 835, 836, 842, 855, 860, 866, 964, 966, 969, 977, 986, 988, 989, 992, 993, 1004, 1010, 1025, 1064, 1072, 1090, 1096, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1117, 1119, 1138, 1155, 1156, 1167, 1191, 1192, 1199, 1210, 1224, 1234, 1235, 1237], "being": [13, 37, 42, 43, 44, 45, 53, 54, 63, 65, 112, 113, 114, 124, 126, 131, 132, 156, 170, 238, 246, 248, 253, 258, 259, 290, 363, 364, 397, 443, 511, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 678, 697, 726, 727, 750, 768, 771, 772, 781, 782, 821, 828, 855, 912, 927, 928, 964, 1006, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1138, 1186, 1189, 1194, 1210, 1237], "A": [13, 33, 36, 42, 53, 54, 59, 65, 107, 112, 113, 114, 115, 126, 128, 133, 148, 159, 167, 176, 183, 197, 198, 203, 205, 210, 216, 241, 244, 258, 259, 260, 264, 265, 290, 297, 369, 370, 375, 399, 402, 416, 417, 425, 437, 439, 450, 453, 455, 456, 462, 502, 509, 510, 521, 534, 543, 544, 565, 570, 572, 574, 576, 578, 581, 583, 585, 605, 606, 607, 612, 613, 614, 615, 616, 618, 620, 623, 624, 625, 627, 638, 647, 680, 696, 697, 701, 750, 773, 779, 789, 793, 794, 809, 828, 831, 832, 855, 860, 932, 933, 938, 966, 969, 993, 1102, 1103, 1105, 1108, 1109, 1110, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1150, 1151, 1152, 1154, 1165, 1174, 1210, 1218, 1221, 1234], "content": [13, 594, 750, 1122, 1210], "final": [13, 36, 47, 131, 198, 290, 418, 420, 421, 750, 775, 782, 855, 859, 986, 988, 989, 1210, 1235], "item": [13, 55, 113, 181, 224, 227, 290, 321, 325, 326, 367, 424, 470, 472, 479, 481, 490, 589, 630, 750, 882, 886, 887, 930, 991, 1033, 1035, 1042, 1044, 1053, 1113, 1157, 1210], "num": [13, 36, 252, 290, 448, 750, 1010, 1210], "fmt_table_cell_list_len": 13, "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 107, 115, 126, 134, 158, 162, 171, 180, 181, 183, 185, 187, 188, 189, 194, 198, 200, 211, 215, 216, 217, 221, 223, 229, 238, 242, 264, 269, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 300, 304, 312, 313, 314, 316, 353, 359, 362, 367, 371, 372, 374, 375, 377, 378, 380, 382, 385, 386, 387, 388, 390, 391, 392, 396, 397, 398, 400, 410, 413, 419, 440, 441, 442, 446, 452, 464, 472, 478, 480, 486, 496, 498, 500, 504, 506, 520, 522, 532, 547, 550, 553, 563, 568, 599, 642, 651, 654, 667, 678, 679, 686, 691, 693, 694, 697, 700, 702, 704, 710, 711, 735, 738, 750, 771, 772, 775, 789, 790, 792, 797, 806, 807, 811, 813, 823, 824, 831, 836, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 860, 917, 930, 934, 935, 937, 938, 943, 952, 963, 977, 980, 983, 987, 1005, 1015, 1027, 1035, 1043, 1049, 1059, 1061, 1063, 1067, 1069, 1072, 1086, 1096, 1114, 1116, 1169, 1182, 1189, 1191, 1194, 1210, 1218, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1237], "size": [14, 41, 45, 112, 113, 114, 139, 140, 141, 142, 146, 148, 169, 258, 290, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 673, 706, 707, 726, 727, 750, 771, 855, 985, 1097, 1107, 1210, 1237], "overwrit": [14, 34, 35, 100, 102, 103, 104, 106, 112, 113, 121, 122, 126, 130, 153, 259, 290, 300, 651, 750, 782, 828, 855], "chunk": [14, 45, 109, 112, 113, 124, 126, 129, 130, 131, 142, 146, 171, 196, 211, 249, 290, 304, 560, 750, 855, 866, 915, 992, 1001, 1078, 1093, 1185, 1191, 1210], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 120, 182, 197, 256, 290, 510, 750, 771, 772, 780, 782, 788, 793, 798, 802, 807, 818, 820, 826, 855], "engin": [14, 34, 114, 115, 117, 148, 182, 197, 201, 249, 256, 276, 290, 510, 729, 750, 788, 793, 798, 802, 826, 843, 855, 1072, 1191, 1210, 1220], "determin": [14, 33, 36, 42, 47, 55, 82, 112, 113, 114, 117, 123, 124, 126, 131, 133, 155, 176, 183, 195, 196, 201, 216, 223, 254, 255, 260, 290, 348, 383, 396, 443, 502, 520, 556, 562, 563, 598, 606, 616, 637, 638, 640, 641, 659, 693, 722, 725, 741, 750, 766, 773, 779, 789, 811, 825, 830, 855, 946, 963, 1006, 1065, 1090, 1096, 1126, 1133, 1164, 1167, 1168, 1210], "thread": [14, 33, 42, 54, 109, 112, 113, 115, 148, 149, 237, 290, 474, 511, 601, 676, 750, 772, 820, 855, 895, 1037, 1060, 1128, 1210], "pool": [14, 54, 148, 149, 772, 855], "For": [14, 35, 36, 114, 115, 116, 117, 127, 128, 166, 171, 197, 198, 223, 248, 276, 290, 293, 390, 391, 418, 420, 421, 432, 502, 511, 521, 561, 598, 605, 612, 613, 614, 615, 616, 638, 686, 696, 700, 701, 746, 750, 778, 794, 811, 843, 855, 859, 986, 988, 989, 992, 1072, 1094, 1126, 1132, 1139, 1140, 1141, 1142, 1143, 1165, 1189, 1210, 1214], "some": [14, 30, 36, 46, 85, 103, 112, 113, 114, 117, 126, 153, 166, 226, 249, 290, 746, 778, 855, 1015, 1210, 1237], "dataset": [14, 41, 65, 112, 113, 117, 123, 126, 132, 197, 253, 290, 460, 750, 762, 793, 798, 855, 1025, 1210, 1235], "esp": 14, "have": [14, 30, 36, 46, 47, 62, 85, 101, 110, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 163, 171, 195, 197, 198, 219, 223, 225, 226, 245, 253, 267, 290, 363, 366, 418, 420, 421, 511, 521, 559, 563, 568, 614, 750, 776, 793, 802, 811, 834, 835, 855, 859, 860, 927, 929, 986, 988, 989, 992, 1003, 1092, 1096, 1210, 1233, 1235, 1237], "too": [14, 782, 855], "optimist": 14, "lead": [14, 41, 107, 132, 205, 232, 234, 241, 290, 333, 435, 438, 495, 510, 511, 591, 592, 632, 634, 682, 750, 798, 816, 817, 843, 855, 894, 1058, 1072, 1117, 1119, 1159, 1161, 1210], "memori": [14, 45, 53, 54, 55, 100, 101, 104, 105, 106, 112, 113, 114, 117, 118, 124, 126, 129, 130, 131, 153, 171, 201, 225, 226, 235, 249, 276, 290, 549, 560, 593, 750, 771, 772, 855, 992, 1072, 1093, 1120, 1121, 1191, 1210], "error": [14, 35, 54, 92, 95, 102, 103, 106, 112, 113, 126, 156, 216, 224, 249, 290, 300, 325, 326, 343, 371, 477, 479, 481, 532, 605, 608, 612, 614, 615, 617, 618, 637, 639, 640, 644, 750, 768, 772, 843, 855, 886, 887, 903, 934, 1040, 1042, 1044, 1132, 1135, 1139, 1141, 1142, 1144, 1145, 1164, 1166, 1167, 1171, 1191, 1210], "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 94, 99, 103, 104, 105, 106, 107, 112, 113, 114, 117, 118, 120, 121, 123, 124, 126, 129, 130, 131, 132, 135, 136, 142, 155, 157, 166, 171, 174, 176, 177, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 207, 212, 223, 226, 227, 236, 242, 245, 247, 248, 253, 254, 256, 258, 259, 266, 267, 271, 273, 275, 276, 284, 290, 314, 315, 323, 338, 348, 424, 432, 436, 442, 464, 475, 502, 549, 550, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 599, 601, 611, 617, 654, 659, 673, 676, 681, 683, 685, 700, 704, 706, 707, 709, 724, 726, 727, 735, 740, 750, 766, 769, 771, 778, 782, 785, 786, 787, 789, 790, 793, 794, 795, 797, 798, 802, 819, 824, 825, 826, 828, 834, 835, 838, 840, 842, 843, 851, 855, 875, 884, 991, 992, 1000, 1005, 1027, 1038, 1086, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1127, 1138, 1144, 1182, 1210, 1224, 1226, 1235, 1236, 1237], "per": [14, 33, 36, 42, 117, 140, 142, 155, 181, 212, 213, 230, 237, 254, 265, 279, 281, 282, 290, 325, 348, 474, 477, 479, 510, 511, 532, 533, 535, 537, 539, 540, 601, 659, 664, 676, 750, 766, 814, 820, 825, 832, 846, 848, 849, 855, 859, 886, 1037, 1040, 1042, 1199, 1210], "everi": [14, 33, 42, 112, 113, 126, 177, 183, 245, 260, 290, 317, 318, 319, 320, 323, 325, 331, 359, 360, 361, 362, 363, 397, 410, 424, 436, 467, 468, 472, 475, 478, 479, 480, 488, 491, 496, 500, 567, 611, 686, 687, 750, 782, 787, 789, 855, 878, 879, 880, 881, 884, 886, 892, 923, 924, 925, 926, 927, 964, 977, 991, 1000, 1003, 1030, 1031, 1035, 1038, 1041, 1042, 1043, 1051, 1054, 1059, 1063, 1100, 1138, 1210], "process": [14, 33, 42, 43, 44, 45, 53, 54, 112, 113, 114, 126, 148, 225, 290, 771, 772, 855], "liter": [15, 16, 20, 35, 114, 145, 146, 147, 229, 230, 234, 259, 264, 265, 290, 300, 342, 353, 375, 416, 417, 425, 432, 437, 439, 448, 462, 509, 528, 530, 543, 544, 554, 563, 605, 607, 615, 623, 624, 651, 652, 660, 669, 671, 673, 679, 680, 681, 689, 690, 693, 706, 710, 714, 716, 719, 728, 732, 734, 736, 750, 784, 813, 814, 817, 828, 831, 832, 855, 860, 902, 917, 938, 993, 1010, 1096, 1114, 1116, 1119, 1132, 1134, 1142, 1150, 1151, 1210], "left": [15, 16, 36, 47, 135, 136, 137, 138, 183, 197, 198, 223, 259, 290, 364, 418, 420, 421, 446, 448, 556, 568, 571, 573, 575, 577, 579, 582, 584, 586, 590, 657, 679, 686, 687, 691, 692, 694, 695, 700, 724, 737, 738, 740, 750, 789, 793, 794, 811, 828, 855, 928, 986, 988, 989, 1010, 1090, 1115, 1193, 1210, 1220, 1224, 1228], "center": [15, 16, 36, 290, 418, 420, 421, 569, 570, 572, 574, 576, 578, 581, 583, 585, 750, 986, 988, 989, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1210], "cell": [15, 16, 36, 290], "valueerror": [15, 20], "recognis": [15, 16, 20, 860], "column_abc": 15, "column_xyz": 15, "keyerror": 16, "datetim": [16, 33, 36, 42, 47, 107, 116, 127, 142, 143, 144, 146, 156, 162, 181, 183, 196, 198, 223, 238, 260, 290, 293, 321, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 470, 568, 571, 573, 575, 577, 579, 582, 584, 586, 637, 640, 657, 678, 690, 691, 692, 694, 695, 696, 702, 710, 737, 738, 750, 768, 775, 789, 794, 811, 855, 860, 882, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 1033, 1081, 1082, 1164, 1167, 1191, 1193, 1210, 1231], "date": [16, 36, 47, 62, 112, 113, 115, 117, 123, 126, 132, 156, 162, 181, 183, 196, 198, 223, 238, 290, 293, 321, 371, 373, 374, 375, 376, 379, 381, 383, 384, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 470, 568, 571, 573, 575, 577, 579, 582, 584, 586, 637, 639, 657, 678, 691, 692, 694, 695, 702, 710, 736, 750, 768, 775, 789, 794, 811, 855, 860, 882, 934, 936, 937, 938, 939, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 987, 1033, 1081, 1082, 1164, 1166, 1193, 1210, 1228], "333": [16, 588, 750, 1112, 1210], "mno": [16, 20], "2023": [16, 36, 107, 134, 196, 290, 375, 696, 710, 860, 938], "29": [16, 134, 372, 390, 935, 957], "2001": [16, 373, 374, 379, 381, 383, 386, 389, 393, 394, 395, 397, 401, 410, 411, 412, 413, 571, 573, 575, 577, 579, 582, 584, 586, 637, 750, 860, 936, 937, 942, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 964, 968, 977, 978, 979, 980, 981, 1164], "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 102, 103, 106, 112, 113, 122, 126, 130, 132, 139, 142, 146, 153, 155, 157, 161, 162, 166, 168, 173, 174, 176, 189, 197, 204, 205, 206, 213, 216, 218, 234, 237, 239, 240, 241, 244, 249, 250, 254, 257, 259, 261, 264, 271, 290, 301, 303, 304, 314, 317, 318, 325, 326, 333, 334, 341, 343, 347, 348, 349, 353, 357, 358, 359, 362, 367, 369, 370, 393, 396, 403, 404, 405, 406, 407, 408, 409, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 433, 440, 446, 447, 455, 456, 457, 458, 463, 465, 466, 472, 473, 476, 477, 479, 481, 482, 483, 491, 492, 493, 494, 495, 497, 502, 510, 511, 523, 531, 544, 545, 546, 547, 550, 560, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 592, 593, 595, 600, 601, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 627, 629, 630, 631, 637, 638, 640, 642, 647, 648, 649, 650, 657, 658, 659, 668, 669, 670, 671, 676, 679, 680, 681, 683, 685, 689, 693, 698, 709, 710, 714, 716, 719, 726, 727, 732, 734, 740, 750, 766, 769, 774, 775, 778, 784, 785, 792, 793, 805, 815, 817, 820, 825, 827, 828, 831, 833, 838, 855, 860, 864, 865, 875, 878, 879, 886, 887, 894, 895, 903, 907, 908, 916, 917, 922, 930, 932, 933, 963, 970, 971, 972, 973, 974, 975, 976, 984, 986, 987, 988, 989, 993, 995, 996, 1002, 1003, 1008, 1009, 1020, 1021, 1022, 1026, 1028, 1029, 1032, 1035, 1036, 1039, 1040, 1042, 1044, 1045, 1046, 1055, 1057, 1058, 1060, 1065, 1072, 1085, 1086, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1119, 1123, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1154, 1156, 1157, 1158, 1164, 1165, 1167, 1169, 1174, 1177, 1188, 1191, 1192, 1193, 1195, 1210, 1220, 1224, 1226, 1227, 1234, 1235, 1237], "07": [16, 112, 142, 162, 290, 371, 374, 375, 386, 396, 397, 410, 637, 690, 691, 693, 694, 702, 775, 855, 860, 934, 938, 963, 1164, 1231], "05": [16, 132, 135, 136, 137, 138, 142, 156, 162, 260, 290, 371, 374, 375, 376, 377, 378, 382, 385, 386, 387, 388, 390, 391, 392, 396, 398, 399, 400, 402, 403, 678, 690, 691, 693, 694, 768, 775, 794, 855, 860, 938, 939, 940, 941, 963, 964, 966, 967, 969, 970, 977, 1231], "visibl": [17, 169, 290, 985, 1210], "eg": [17, 25, 36, 55, 115, 151, 248, 290, 397, 637, 640, 660, 750, 860, 1003, 1164, 1167, 1210], "low": [17, 114, 556, 750, 1090, 1210], "rang": [17, 36, 114, 115, 162, 169, 183, 196, 290, 305, 365, 371, 379, 389, 394, 395, 397, 410, 411, 446, 673, 678, 680, 690, 691, 692, 693, 694, 695, 706, 707, 736, 737, 738, 750, 775, 789, 855, 860, 929, 934, 942, 956, 961, 962, 964, 977, 978, 985, 1086, 1210, 1230], "98": [17, 188, 290, 347, 435, 438, 600, 641, 658, 750, 1168], "99": [17, 36, 172, 173, 188, 191, 259, 290, 299, 347, 425, 427, 435, 438, 600, 658, 740, 750, 783, 784, 828, 855, 983, 993, 1210, 1229], "tbl_col": 17, "95": [17, 299, 750, 860], "96": [17, 162, 290, 299, 750, 775, 855, 1025, 1210], "97": [17, 188, 290, 299, 750, 1025, 1210], "move": [18, 226, 290, 371, 418, 419, 420, 421, 570, 572, 576, 583, 750, 934, 986, 987, 988, 989, 1102, 1103, 1105, 1109, 1210], "inlin": [18, 226, 290, 605, 612, 613, 615, 623, 624, 1132, 1139, 1140, 1142, 1150, 1151], "parenthes": 18, "inform": [19, 23, 34, 52, 116, 124, 126, 127, 128, 131, 135, 137, 160, 162, 290, 293, 460, 598, 605, 612, 613, 615, 623, 624, 750, 775, 807, 855, 859, 911, 1025, 1126, 1132, 1139, 1140, 1142, 1150, 1151, 1210, 1214], "below": [19, 35, 116, 117, 127, 128, 166, 216, 290, 427, 616, 638, 691, 692, 694, 695, 737, 738, 740, 746, 750, 778, 855, 1143, 1165, 1234], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_no_bord": 20, "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_horizontal_onli": 20, "ascii_markdown": 20, "utf8_ful": [20, 47, 107], "utf8_no_bord": 20, "utf8_borders_onli": 20, "utf8_horizontal_onli": 20, "noth": [20, 612, 618, 1139, 1145], "rounded_corn": 20, "border": 20, "includ": [20, 30, 33, 35, 36, 42, 52, 105, 114, 116, 127, 128, 142, 143, 162, 169, 174, 214, 226, 253, 255, 258, 259, 290, 364, 398, 428, 432, 443, 448, 517, 556, 570, 572, 574, 576, 578, 580, 581, 583, 585, 628, 629, 632, 633, 678, 686, 726, 727, 750, 775, 785, 828, 855, 860, 928, 929, 965, 985, 996, 1006, 1010, 1090, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1155, 1156, 1159, 1210, 1234], "divid": [20, 364, 397, 410, 418, 420, 421, 432, 460, 556, 750, 928, 964, 977, 986, 988, 989, 1025, 1090, 1210, 1229], "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 118, 126, 135, 136, 137, 138, 140, 151, 174, 182, 201, 216, 225, 226, 237, 256, 264, 265, 269, 276, 290, 297, 304, 337, 369, 370, 428, 432, 434, 435, 438, 501, 515, 519, 549, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 601, 611, 619, 650, 750, 771, 772, 785, 788, 798, 820, 826, 831, 832, 836, 855, 860, 862, 898, 932, 933, 938, 1064, 1072, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1138, 1146, 1201, 1210, 1222, 1224, 1231], "dens": [20, 181, 290, 559, 750, 1092, 1210], "space": [20, 183, 290, 789, 855, 860], "horizont": [20, 55, 88, 176, 187, 203, 205, 210, 241, 258, 290, 669, 671, 680, 681, 686, 687, 689, 697, 700, 714, 716, 719, 724, 734], "markdown": 20, "compat": [20, 36, 41, 45, 290, 605, 607, 612, 613, 614, 615, 623, 624, 855, 860, 1132, 1134, 1139, 1140, 1141, 1142, 1150, 1151, 1231, 1234], "utf8": [20, 112, 113, 126, 616, 627, 638, 1143, 1154, 1165], "No": [20, 645, 1172], "round": [20, 36, 49, 107, 114, 290, 352, 356, 431, 588, 655, 750, 914, 998, 1112, 1210, 1228], "corner": [20, 36, 107, 290], "op": [20, 146, 290, 517, 562, 750, 855, 1210], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 100, 102, 103, 104, 106, 112, 113, 114, 115, 117, 121, 122, 123, 124, 126, 130, 131, 132, 135, 136, 137, 138, 142, 143, 144, 146, 148, 155, 162, 165, 166, 167, 170, 171, 174, 181, 182, 183, 184, 189, 195, 198, 201, 208, 214, 223, 224, 225, 226, 229, 230, 238, 248, 249, 254, 257, 260, 264, 265, 267, 268, 269, 276, 290, 300, 341, 342, 343, 344, 347, 348, 364, 369, 370, 371, 379, 389, 393, 394, 397, 399, 410, 411, 422, 425, 428, 432, 433, 441, 473, 477, 510, 511, 523, 549, 556, 559, 562, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 595, 598, 604, 608, 609, 612, 616, 617, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 648, 651, 658, 659, 678, 698, 702, 710, 712, 726, 727, 728, 729, 732, 740, 742, 743, 745, 746, 750, 751, 752, 755, 757, 758, 759, 766, 775, 778, 780, 781, 785, 788, 789, 790, 792, 794, 797, 798, 803, 807, 811, 813, 814, 815, 821, 825, 827, 831, 832, 835, 836, 843, 855, 859, 860, 863, 866, 902, 903, 904, 907, 916, 928, 929, 932, 933, 934, 942, 956, 960, 961, 964, 966, 977, 978, 992, 993, 996, 1004, 1036, 1040, 1072, 1090, 1092, 1096, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1123, 1126, 1131, 1135, 1136, 1143, 1144, 1148, 1149, 1150, 1151, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1191, 1195, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217, 1218, 1222, 1235, 1237], "one": [20, 33, 34, 36, 42, 47, 91, 100, 102, 103, 104, 105, 106, 112, 113, 117, 121, 122, 123, 126, 145, 147, 151, 156, 173, 174, 181, 182, 183, 195, 207, 216, 223, 224, 225, 232, 234, 249, 252, 270, 290, 299, 333, 364, 427, 428, 432, 435, 438, 440, 495, 502, 507, 532, 533, 535, 537, 539, 540, 567, 568, 592, 600, 612, 613, 614, 625, 648, 712, 730, 740, 746, 750, 768, 784, 785, 788, 789, 802, 811, 816, 817, 833, 837, 855, 866, 894, 899, 928, 995, 1002, 1058, 1065, 1070, 1090, 1100, 1119, 1139, 1140, 1141, 1152, 1175, 1191, 1210, 1214, 1223, 1224, 1226, 1229, 1236], "more": [20, 36, 41, 45, 47, 55, 84, 85, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 116, 117, 121, 122, 123, 124, 127, 128, 135, 137, 142, 151, 160, 162, 174, 194, 195, 199, 201, 207, 212, 224, 225, 227, 238, 248, 249, 253, 256, 276, 290, 293, 302, 339, 428, 432, 440, 460, 490, 503, 507, 510, 511, 548, 589, 598, 613, 619, 637, 639, 640, 661, 672, 683, 699, 705, 708, 715, 717, 720, 721, 730, 740, 750, 775, 802, 821, 826, 855, 859, 860, 900, 911, 929, 1002, 1025, 1053, 1066, 1072, 1113, 1126, 1140, 1146, 1164, 1166, 1167, 1189, 1191, 1196, 1210, 1214, 1223, 1224, 1235, 1236, 1237], "semigraph": 20, "box": [20, 201, 290], "draw": [20, 25, 142, 146, 1237], "found": [20, 33, 36, 42, 86, 96, 98, 103, 107, 167, 238, 290, 590, 615, 618, 635, 636, 637, 640, 750, 821, 855, 1115, 1142, 1145, 1162, 1163, 1164, 1167, 1210, 1220, 1234], "unicod": [20, 616, 620, 627, 638, 860, 1143, 1147, 1154, 1165], "block": [20, 54, 182, 256, 290, 740, 772, 788, 809, 826, 834, 835, 843, 855, 1114, 1116, 1210], "http": [20, 36, 37, 38, 101, 114, 115, 118, 120, 153, 160, 290, 612, 614, 818, 855, 1139, 1141], "en": [20, 36, 290], "wikipedia": 20, "org": [20, 37, 38, 101, 114, 115, 118, 120, 153, 160, 290, 818, 855], "wiki": 20, "drawing_charact": 20, "box_draw": 20, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "hide": [21, 22, 23, 24, 36, 290], "etc": [21, 35, 36, 112, 116, 117, 118, 120, 127, 128, 129, 290, 750, 859, 860, 1114, 1116, 1210, 1231], "between": [24, 55, 139, 140, 142, 146, 160, 218, 225, 282, 290, 326, 349, 367, 368, 448, 472, 481, 491, 492, 493, 494, 550, 556, 557, 578, 579, 604, 674, 675, 678, 682, 684, 723, 726, 727, 750, 808, 849, 855, 887, 908, 911, 930, 931, 1010, 1035, 1044, 1054, 1055, 1056, 1057, 1086, 1090, 1091, 1106, 1131, 1210, 1232], "set_tbl_column_data_type_inlin": 24, "max": [25, 36, 41, 45, 162, 173, 182, 203, 216, 223, 290, 359, 427, 502, 510, 549, 559, 563, 568, 570, 571, 591, 630, 714, 730, 750, 775, 784, 788, 811, 855, 923, 929, 995, 1065, 1092, 1102, 1117, 1157, 1210, 1218, 1226, 1228], "tbl_row": [25, 162, 290, 775, 855], "width": [26, 36, 56, 112, 113, 126, 290, 293, 501, 855, 1064], "id": [26, 36, 55, 112, 128, 248, 255, 267, 276, 290, 567, 623, 624, 662, 750, 835, 843, 855, 860, 1100, 1197, 1210, 1235, 1237], "seq1": 26, "seq2": 26, "seq": 26, "atgataaaggag": 26, "gcaacgcatata": 26, "12": [26, 36, 47, 107, 112, 134, 142, 162, 183, 194, 198, 223, 238, 260, 290, 300, 361, 372, 374, 375, 379, 386, 389, 390, 391, 393, 394, 395, 397, 410, 411, 412, 419, 446, 478, 550, 558, 568, 583, 593, 607, 641, 687, 690, 693, 694, 695, 711, 736, 737, 738, 750, 775, 789, 790, 794, 797, 811, 818, 824, 855, 860, 935, 937, 938, 949, 950, 952, 956, 964, 977, 987, 1072, 1111, 1134, 1168, 1210, 1229, 1231, 1237], "atg": 26, "ata": 26, "aag": 26, "gag": 26, "gca": 26, "acg": 26, "cat": [26, 46, 84, 85, 364, 556, 605, 607, 643, 646, 657, 681, 745, 750, 860, 928, 1006, 1090, 1132, 1134, 1170, 1173, 1206, 1210], "also": [27, 33, 36, 42, 46, 103, 114, 117, 118, 123, 126, 141, 142, 145, 146, 151, 167, 182, 183, 208, 212, 223, 225, 229, 237, 248, 259, 264, 267, 290, 359, 362, 371, 393, 396, 428, 448, 511, 517, 559, 563, 601, 623, 624, 632, 633, 648, 678, 686, 687, 690, 693, 700, 702, 724, 740, 749, 750, 756, 788, 789, 803, 811, 813, 820, 828, 831, 833, 835, 855, 860, 934, 963, 1010, 1092, 1096, 1134, 1150, 1151, 1159, 1210, 1214, 1220, 1223, 1235], "char": [27, 613, 1140], "omit": [27, 103, 107, 140, 151, 212, 226, 248, 253, 290, 706, 707, 737, 738, 860, 1235], "set_decimal_separ": 27, "x": [27, 47, 55, 76, 89, 101, 107, 112, 113, 115, 126, 139, 140, 142, 153, 169, 187, 190, 192, 197, 207, 216, 225, 226, 255, 258, 290, 293, 298, 300, 302, 321, 326, 358, 365, 416, 417, 432, 437, 439, 441, 462, 469, 481, 507, 509, 510, 511, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 548, 554, 562, 563, 567, 595, 598, 629, 651, 652, 657, 660, 667, 669, 671, 674, 675, 686, 687, 689, 700, 710, 711, 714, 716, 719, 724, 729, 734, 740, 750, 793, 798, 802, 819, 821, 855, 860, 887, 911, 922, 995, 1072, 1096, 1123, 1126, 1156, 1189, 1193, 1194, 1210, 1220, 1221, 1224, 1229, 1234, 1236], "1234567": 27, "987654": [27, 860], "10101": 27, "y": [27, 47, 55, 76, 89, 101, 107, 139, 140, 142, 153, 169, 190, 192, 197, 207, 216, 225, 226, 255, 258, 290, 293, 298, 300, 302, 321, 326, 399, 402, 416, 417, 437, 439, 462, 469, 481, 509, 511, 531, 533, 535, 537, 539, 540, 543, 544, 548, 562, 563, 567, 637, 639, 640, 651, 660, 667, 669, 671, 674, 675, 689, 696, 710, 714, 716, 719, 729, 734, 750, 793, 802, 819, 821, 855, 860, 887, 911, 966, 969, 1096, 1164, 1166, 1167, 1210, 1224, 1231, 1236], "1234": [27, 588, 750, 1112, 1210], "7654321": 27, "234": 27, "567": 27, "987": 27, "654": [27, 729, 821, 855], "00": [27, 36, 62, 156, 162, 183, 260, 290, 372, 373, 376, 380, 390, 391, 393, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 571, 573, 575, 577, 579, 582, 584, 586, 637, 640, 644, 693, 694, 695, 696, 736, 737, 738, 750, 768, 775, 789, 794, 855, 860, 935, 936, 939, 940, 941, 943, 944, 945, 950, 951, 955, 957, 958, 959, 960, 963, 964, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 980, 1164, 1167, 1171], "321": [27, 1237], "strip": [28, 632, 633, 634, 635, 636, 1159, 1160, 1161, 1230], "trail": [28, 181, 290, 632, 633, 1159, 1160], "zero": [28, 36, 100, 101, 110, 112, 113, 118, 120, 124, 141, 144, 153, 173, 183, 195, 224, 238, 243, 249, 250, 290, 427, 502, 507, 590, 598, 647, 660, 750, 769, 784, 789, 855, 916, 995, 1065, 1126, 1174, 1185, 1191, 1192, 1210, 1229], "enabl": [28, 29, 41, 45, 46, 84, 85, 135, 136, 137, 138, 150, 229, 250, 264, 290, 301, 303, 563, 591, 606, 625, 664, 746, 750, 771, 813, 831, 855, 864, 865, 1096, 1117, 1133, 1152, 1192, 1199, 1210], "d": [28, 31, 33, 35, 36, 37, 38, 41, 103, 132, 181, 183, 184, 185, 188, 197, 200, 242, 243, 253, 258, 262, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 298, 300, 358, 381, 399, 402, 448, 553, 593, 607, 613, 623, 624, 629, 637, 639, 640, 679, 696, 702, 729, 750, 789, 793, 821, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 860, 911, 922, 944, 966, 969, 1010, 1032, 1134, 1140, 1150, 1151, 1156, 1164, 1166, 1167, 1178, 1210, 1224, 1226, 1227, 1230, 1231], "01": [28, 47, 61, 62, 142, 156, 162, 181, 183, 198, 223, 260, 290, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 637, 639, 640, 644, 678, 690, 691, 692, 693, 694, 695, 696, 750, 768, 775, 789, 811, 855, 860, 934, 936, 938, 939, 940, 941, 944, 945, 950, 951, 955, 957, 958, 959, 960, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 1164, 1166, 1167, 1171], "6789": [28, 860], "scale": [28, 63, 169, 290, 511, 553, 641, 750, 860, 985, 1168, 1210], "trim_decimal_zero": 28, "01000": 28, "67890": 28, "addit": [29, 32, 34, 35, 36, 103, 111, 116, 117, 127, 128, 140, 142, 144, 146, 166, 170, 182, 214, 229, 230, 237, 250, 257, 264, 265, 269, 290, 298, 380, 422, 425, 549, 601, 605, 612, 613, 615, 623, 624, 648, 651, 676, 679, 680, 681, 698, 728, 729, 732, 750, 781, 788, 813, 814, 820, 827, 831, 832, 836, 855, 860, 935, 943, 993, 1132, 1139, 1140, 1142, 1150, 1151, 1192, 1210, 1214], "verbos": [29, 135, 137, 151, 613, 1140], "debug": [29, 771, 782, 798, 855, 1237], "log": [29, 49, 348, 415, 507, 530, 554, 659, 750, 983, 1210, 1228], "do_polars_oper": 29, "if_set": 30, "env_onli": 30, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 100, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 142, 175, 195, 214, 220, 224, 225, 226, 244, 245, 248, 253, 255, 290, 750, 809, 855, 859, 860, 1210, 1221], "show": [30, 36, 162, 166, 181, 199, 213, 290, 443, 750, 775, 778, 807, 818, 855, 1006, 1210, 1222, 1233], "variabl": [30, 72, 124, 126, 131, 145, 148, 207, 246, 290, 802, 855, 1186, 1210, 1220, 1234], "chang": [30, 37, 42, 43, 44, 45, 47, 53, 54, 63, 65, 112, 113, 114, 124, 131, 132, 238, 248, 253, 258, 259, 266, 290, 363, 364, 367, 397, 443, 511, 549, 550, 556, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 726, 727, 750, 771, 772, 821, 828, 834, 855, 859, 860, 911, 912, 927, 928, 964, 1006, 1086, 1090, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1121, 1189, 1194, 1210], "restrict": [30, 630, 1157], "dictionari": [30, 36, 52, 76, 100, 102, 103, 104, 106, 112, 113, 114, 115, 119, 121, 122, 125, 126, 130, 195, 214, 224, 225, 226, 244, 245, 248, 253, 290, 855], "those": [30, 36, 112, 226, 250, 259, 290, 432, 559, 612, 712, 750, 828, 855, 860, 1092, 1139, 1192, 1210], "been": [30, 36, 149, 153, 271, 290, 434, 511, 526, 559, 750, 838, 1092, 1210], "set_fmt_float": 30, "via": [30, 112, 113, 114, 124, 126, 129, 130, 131, 163, 195, 225, 290, 366, 511, 614, 750, 776, 855, 1141], "set_stat": 30, "all_stat": 30, "io": [31, 33, 36, 37, 38, 110, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 163, 290, 366, 434, 523, 750, 776, 815, 855], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 169, 290, 616, 619, 620, 627, 638, 855, 985, 1143, 1146, 1147, 1154, 1165, 1210, 1230], "compress": [31, 37, 38, 41, 43, 45, 290, 566, 750, 855, 1099, 1210], "avrocompress": [31, 290], "uncompress": [31, 37, 38, 41, 45, 118, 129, 290, 855], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 111, 113, 118, 151, 290, 353, 526, 750, 796, 818, 855, 860, 917, 1210], "apach": [31, 37, 38, 41, 110, 114, 115, 118, 120, 128, 290], "avro": [31, 110, 290, 762], "writabl": [31, 33, 37, 38, 39, 40, 41, 231, 249, 290, 1191, 1210], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 101, 110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 163, 183, 190, 192, 197, 226, 231, 248, 249, 290, 366, 372, 434, 474, 510, 525, 559, 612, 633, 634, 664, 746, 750, 767, 772, 776, 789, 855, 859, 935, 1037, 1092, 1139, 1199, 1210], "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 89, 101, 102, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 140, 142, 143, 153, 163, 182, 183, 198, 199, 214, 223, 226, 231, 238, 248, 249, 250, 290, 366, 523, 691, 692, 694, 695, 710, 729, 737, 738, 750, 762, 776, 789, 794, 811, 821, 855, 860, 1185, 1210, 1220, 1223, 1234], "snappi": [31, 41, 45, 290, 855], "deflat": [31, 290], "pathlib": [31, 33, 37, 38, 41, 126, 290], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 121, 122, 156, 159, 160, 164, 165, 166, 167, 168, 171, 174, 176, 178, 179, 180, 184, 185, 186, 187, 188, 189, 191, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 216, 218, 220, 221, 224, 227, 228, 229, 231, 233, 236, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 255, 256, 257, 261, 262, 263, 268, 290, 350, 364, 366, 393, 436, 442, 445, 464, 515, 517, 519, 520, 521, 522, 523, 524, 525, 556, 564, 604, 607, 609, 611, 613, 614, 626, 628, 630, 632, 633, 634, 635, 636, 643, 646, 654, 672, 682, 683, 684, 699, 703, 704, 705, 708, 709, 713, 715, 717, 718, 720, 721, 723, 728, 731, 735, 739, 740, 746, 750, 768, 773, 777, 778, 779, 785, 791, 792, 793, 805, 809, 812, 813, 826, 827, 830, 833, 855, 860, 909, 928, 960, 1044, 1090, 1097, 1134, 1136, 1138, 1140, 1141, 1153, 1157, 1162, 1163, 1170, 1173, 1210, 1222, 1224, 1225, 1226, 1227, 1230], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 121, 122, 156, 159, 160, 164, 165, 166, 167, 168, 171, 174, 176, 178, 179, 180, 185, 187, 188, 189, 191, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 216, 218, 220, 221, 224, 227, 228, 229, 231, 236, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 256, 257, 261, 262, 263, 268, 290, 350, 366, 445, 515, 517, 519, 520, 521, 522, 523, 524, 525, 598, 607, 609, 611, 613, 614, 626, 628, 630, 635, 636, 672, 682, 683, 684, 699, 704, 705, 708, 709, 713, 715, 717, 718, 720, 721, 728, 731, 735, 739, 740, 746, 750, 768, 773, 777, 778, 779, 785, 791, 792, 793, 805, 809, 812, 813, 826, 827, 830, 855, 860, 909, 1044, 1126, 1134, 1136, 1138, 1140, 1141, 1153, 1157, 1162, 1163, 1210, 1222, 1224, 1225, 1226, 1227, 1230], "ham": [31, 33, 35, 37, 38, 41, 156, 159, 160, 164, 165, 166, 167, 168, 174, 179, 184, 185, 187, 197, 200, 202, 204, 206, 209, 213, 218, 220, 221, 224, 227, 228, 229, 236, 239, 240, 242, 246, 247, 249, 250, 251, 256, 261, 262, 290, 350, 524, 768, 773, 777, 778, 779, 785, 793, 805, 809, 812, 813, 826, 833, 855, 909, 1224, 1225], "dirpath": [31, 33, 37, 38, 41, 126, 290], "new_fil": [31, 33, 37, 38, 41, 290], "t": [32, 33, 35, 42, 55, 111, 112, 117, 123, 126, 183, 198, 201, 215, 256, 258, 290, 363, 372, 380, 396, 415, 418, 420, 421, 474, 511, 553, 612, 615, 623, 624, 634, 637, 640, 740, 750, 789, 806, 826, 855, 860, 927, 963, 983, 986, 988, 989, 1037, 1072, 1139, 1142, 1150, 1151, 1160, 1161, 1164, 1167, 1210, 1220, 1221], "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 111, 114, 115, 142, 144, 146, 160, 174, 215, 250, 290, 553, 750, 785, 806, 855, 859, 1192, 1210, 1221, 1234], "copi": [32, 100, 101, 111, 153, 157, 158, 196, 243, 249, 250, 264, 290, 425, 750, 769, 770, 831, 855, 916, 918, 993, 1185, 1190, 1191, 1192, 1210], "csv": [32, 33, 42, 43, 44, 45, 111, 112, 113, 117, 126, 290, 762, 855], "system": [32, 112, 113, 290, 376, 939], "clipboard": [32, 111, 290, 762], "write_csv": [32, 113, 126, 290], "past": [32, 290, 798, 855], "excel": [32, 36, 111, 117, 290, 762], "similar": [32, 41, 111, 148, 176, 198, 234, 290, 333, 399, 402, 495, 549, 592, 651, 709, 740, 750, 782, 794, 817, 855, 894, 966, 969, 1058, 1119, 1210], "spreadsheet": [32, 111, 117, 123, 216, 290], "softwar": [32, 111, 290], "field": [32, 33, 35, 42, 76, 96, 98, 103, 257, 290, 338, 502, 511, 534, 536, 538, 566, 613, 614, 617, 629, 630, 650, 651, 664, 686, 687, 711, 732, 750, 827, 855, 899, 1065, 1072, 1099, 1141, 1156, 1157, 1178, 1180, 1210, 1231], "symbol": [32, 33, 42, 290, 750, 855], "argument": [32, 35, 41, 111, 112, 116, 124, 126, 127, 142, 144, 146, 160, 164, 170, 182, 183, 198, 214, 215, 223, 229, 230, 237, 250, 257, 260, 264, 265, 269, 290, 397, 410, 422, 428, 448, 510, 549, 553, 568, 601, 632, 633, 634, 651, 668, 674, 675, 676, 679, 680, 681, 683, 685, 698, 728, 732, 740, 750, 777, 781, 788, 789, 806, 811, 813, 814, 820, 827, 831, 832, 836, 855, 859, 860, 964, 977, 1010, 1159, 1160, 1161, 1192, 1210, 1229, 1230], "pass": [32, 34, 35, 36, 41, 47, 102, 111, 114, 115, 117, 124, 126, 132, 135, 137, 140, 142, 144, 146, 155, 160, 164, 182, 183, 185, 200, 214, 215, 223, 229, 234, 237, 242, 250, 253, 254, 260, 264, 268, 269, 290, 293, 333, 348, 371, 381, 393, 396, 425, 445, 495, 510, 511, 549, 553, 563, 568, 592, 601, 632, 633, 634, 659, 668, 676, 678, 685, 702, 732, 740, 746, 750, 766, 777, 788, 789, 791, 798, 806, 811, 813, 817, 818, 820, 825, 831, 836, 843, 855, 859, 894, 934, 944, 963, 993, 1005, 1027, 1058, 1072, 1096, 1119, 1159, 1160, 1161, 1182, 1192, 1210, 1214, 1221, 1234], "read_clipboard": [32, 290], "read": [32, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 163, 171, 290, 366, 434, 740, 750, 776, 782, 855, 992, 1210], "comma": [32, 33, 112, 113, 126, 290], "include_bom": [33, 42, 290, 855], "include_head": [33, 36, 42, 113, 255, 290, 855], "line_termin": [33, 42, 290, 855], "quote_char": [33, 42, 112, 113, 126, 290, 855], "batch_siz": [33, 42, 112, 113, 114, 130, 132, 253, 290, 855], "1024": [33, 41, 42, 45, 112, 113, 114, 130, 290, 855], "datetime_format": [33, 42, 290, 855], "date_format": [33, 42, 290, 855], "time_format": [33, 42, 290, 855], "null_valu": [33, 42, 112, 113, 126, 290, 855], "quote_styl": [33, 42, 290, 855], "csvquotestyl": [33, 42, 290, 855], "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 143, 144, 145, 153, 166, 171, 181, 183, 185, 193, 194, 195, 198, 200, 201, 205, 212, 214, 216, 223, 225, 226, 227, 231, 234, 236, 238, 241, 242, 245, 246, 248, 249, 255, 256, 258, 259, 268, 290, 301, 303, 326, 333, 338, 349, 371, 375, 376, 390, 391, 399, 402, 428, 443, 448, 460, 481, 490, 495, 496, 502, 510, 511, 517, 523, 524, 549, 554, 556, 559, 561, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 594, 598, 599, 604, 613, 614, 615, 616, 617, 627, 628, 629, 630, 632, 633, 634, 637, 638, 639, 640, 644, 647, 664, 668, 670, 673, 677, 678, 681, 682, 685, 686, 691, 692, 694, 695, 696, 699, 700, 706, 707, 708, 710, 712, 722, 725, 726, 727, 732, 737, 738, 740, 741, 750, 771, 772, 778, 780, 789, 793, 794, 798, 802, 809, 811, 815, 817, 819, 821, 826, 828, 843, 855, 859, 860, 864, 865, 887, 894, 899, 908, 917, 934, 938, 939, 957, 958, 966, 969, 992, 1003, 1005, 1006, 1010, 1024, 1025, 1027, 1044, 1053, 1058, 1059, 1065, 1072, 1090, 1092, 1094, 1096, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1115, 1117, 1119, 1122, 1126, 1127, 1131, 1140, 1141, 1142, 1143, 1144, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1171, 1174, 1182, 1185, 1189, 1191, 1199, 1210, 1218, 1220, 1227, 1234], "instead": [33, 35, 39, 40, 47, 54, 55, 102, 103, 106, 112, 113, 114, 117, 123, 124, 126, 132, 139, 140, 141, 142, 146, 154, 155, 181, 194, 195, 198, 201, 212, 214, 224, 225, 226, 229, 230, 231, 234, 248, 249, 250, 254, 265, 266, 268, 290, 293, 314, 333, 348, 349, 364, 378, 419, 422, 432, 495, 510, 523, 556, 592, 611, 619, 620, 623, 624, 632, 633, 634, 635, 636, 647, 659, 666, 673, 675, 677, 683, 691, 692, 694, 695, 696, 706, 707, 722, 725, 729, 732, 737, 738, 741, 750, 765, 766, 772, 780, 813, 814, 815, 817, 825, 832, 834, 855, 860, 875, 894, 903, 908, 928, 941, 987, 1003, 1058, 1090, 1114, 1116, 1119, 1128, 1138, 1146, 1147, 1150, 1151, 1159, 1160, 1161, 1174, 1191, 1192, 1210, 1214, 1218, 1222, 1234, 1235], "whether": [33, 42, 104, 106, 146, 150, 168, 194, 198, 232, 237, 290, 301, 303, 317, 318, 383, 398, 440, 465, 466, 591, 601, 676, 750, 798, 816, 820, 855, 860, 864, 865, 878, 879, 910, 912, 946, 965, 984, 1002, 1028, 1029, 1210, 1220, 1234], "utf": [33, 42, 75, 290, 855], "bom": [33, 42, 290, 855], "header": [33, 36, 41, 42, 45, 107, 112, 113, 117, 126, 167, 216, 255, 290, 855], "end": [33, 36, 42, 112, 113, 126, 183, 290, 342, 345, 346, 372, 397, 422, 496, 605, 610, 613, 616, 621, 627, 631, 632, 633, 636, 673, 678, 690, 691, 692, 693, 694, 695, 698, 706, 707, 737, 738, 740, 750, 789, 790, 797, 807, 855, 860, 905, 935, 964, 1022, 1059, 1137, 1140, 1143, 1148, 1154, 1158, 1159, 1160, 1165, 1210, 1230], "each": [33, 36, 42, 47, 56, 63, 72, 113, 114, 117, 130, 135, 136, 137, 138, 140, 159, 161, 167, 174, 181, 182, 183, 196, 198, 201, 214, 223, 225, 227, 248, 253, 257, 259, 260, 268, 269, 271, 273, 275, 276, 284, 290, 314, 348, 364, 397, 410, 428, 451, 454, 480, 483, 490, 500, 507, 511, 549, 556, 559, 566, 567, 574, 578, 589, 594, 601, 613, 616, 619, 620, 627, 629, 630, 638, 659, 673, 676, 681, 706, 707, 732, 740, 750, 771, 773, 774, 779, 785, 789, 794, 807, 811, 827, 828, 836, 838, 840, 842, 843, 851, 855, 875, 915, 928, 964, 977, 1014, 1017, 1043, 1046, 1053, 1063, 1090, 1092, 1099, 1100, 1113, 1122, 1140, 1143, 1146, 1147, 1154, 1156, 1157, 1165, 1180, 1210, 1235, 1237], "quot": [33, 34, 42, 112, 113, 115, 126, 290, 855], "specifi": [33, 35, 36, 42, 47, 86, 96, 98, 117, 123, 143, 155, 156, 169, 170, 173, 182, 183, 197, 214, 223, 224, 226, 229, 230, 234, 237, 248, 254, 257, 264, 265, 269, 290, 348, 353, 418, 420, 421, 422, 427, 549, 562, 563, 570, 572, 574, 576, 578, 581, 583, 585, 592, 601, 651, 659, 676, 679, 680, 681, 691, 692, 694, 695, 696, 698, 728, 732, 737, 738, 750, 766, 768, 781, 784, 788, 789, 793, 811, 813, 814, 817, 820, 825, 827, 831, 832, 836, 855, 860, 917, 985, 986, 988, 989, 995, 1096, 1119, 1189, 1210, 1224, 1236], "defin": [33, 36, 42, 62, 114, 121, 139, 140, 142, 156, 166, 170, 183, 201, 212, 215, 223, 259, 276, 290, 448, 477, 511, 553, 556, 567, 568, 571, 573, 575, 577, 579, 582, 584, 586, 616, 620, 627, 638, 691, 692, 694, 695, 712, 732, 737, 738, 750, 768, 778, 781, 789, 806, 811, 828, 843, 855, 860, 1010, 1040, 1072, 1090, 1100, 1143, 1147, 1154, 1165, 1210], "chrono": [33, 42, 290, 399, 402, 637, 639, 640, 644, 855, 966, 969, 1164, 1166, 1167, 1171], "rust": [33, 41, 42, 93, 118, 120, 124, 201, 276, 290, 614, 855, 859, 1072, 1141, 1210], "crate": [33, 42, 290, 605, 607, 612, 613, 614, 615, 623, 624, 637, 639, 640, 644, 855, 860, 1132, 1134, 1139, 1140, 1141, 1142, 1150, 1151, 1164, 1166, 1167, 1171], "fraction": [33, 42, 135, 136, 137, 138, 227, 290, 398, 490, 550, 589, 637, 640, 750, 855, 965, 1053, 1086, 1113, 1164, 1167, 1210], "second": [33, 42, 135, 136, 137, 138, 183, 198, 223, 260, 290, 382, 385, 387, 388, 392, 393, 397, 409, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 623, 624, 637, 640, 693, 694, 695, 696, 736, 737, 738, 740, 750, 789, 794, 811, 855, 860, 960, 964, 976, 977, 987, 1150, 1151, 1164, 1167, 1210, 1230, 1231, 1237], "infer": [33, 42, 63, 76, 100, 102, 103, 104, 105, 106, 112, 113, 114, 117, 121, 122, 123, 124, 126, 130, 131, 201, 290, 510, 511, 564, 617, 637, 639, 640, 641, 644, 696, 710, 725, 750, 855, 1072, 1097, 1144, 1164, 1166, 1167, 1168, 1171, 1210], "timeunit": [33, 42, 62, 64, 290, 373, 375, 401, 413, 640, 693, 694, 695, 696, 855, 860, 936, 938, 968, 980, 1167], "frame": [33, 34, 36, 42, 47, 54, 55, 103, 113, 117, 123, 135, 136, 156, 157, 162, 195, 196, 201, 208, 212, 215, 224, 225, 226, 238, 253, 258, 259, 290, 729, 768, 769, 775, 803, 806, 821, 828, 855, 860, 916, 1210, 1218, 1219, 1220, 1221, 1222, 1223, 1234, 1237], "datatyp": [33, 42, 100, 102, 103, 104, 106, 108, 117, 119, 121, 122, 125, 130, 143, 144, 146, 167, 176, 228, 231, 290, 349, 422, 593, 657, 698, 710, 750, 762, 779, 812, 815, 855, 860, 908, 929, 1072, 1120, 1193, 1210], "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 100, 102, 104, 105, 106, 114, 238, 239, 248, 249, 261, 268, 290, 432, 455, 456, 498, 504, 510, 603, 616, 620, 627, 638, 665, 668, 682, 684, 696, 698, 710, 711, 712, 721, 726, 727, 731, 739, 746, 750, 821, 822, 829, 855, 860, 1114, 1130, 1143, 1147, 1154, 1165, 1191, 1200, 1210], "necessari": [33, 34, 42, 46, 85, 117, 249, 290, 855, 1191, 1210], "non_numer": [33, 42, 290, 855], "never": [33, 42, 114, 197, 224, 290, 793, 855], "strategi": [33, 42, 47, 55, 112, 139, 140, 141, 142, 143, 144, 146, 173, 183, 197, 198, 211, 259, 290, 427, 502, 511, 750, 784, 789, 793, 794, 828, 855, 995, 1065, 1210], "put": [33, 42, 290, 855], "around": [33, 42, 290, 855], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 103, 126, 151, 198, 199, 226, 290, 625, 633, 634, 750, 855, 859, 860], "record": [33, 38, 42, 120, 132, 290, 794, 855], "termin": [33, 42, 290, 855], "indistinguish": [33, 42, 290, 855], "even": [33, 42, 112, 290, 419, 553, 556, 750, 855, 860, 987, 1090, 1210], "invalid": [33, 42, 112, 113, 126, 290, 349, 617, 618, 642, 660, 750, 855, 903, 908, 1144, 1145, 1169, 1210], "g": [33, 42, 112, 116, 118, 120, 127, 129, 132, 144, 153, 163, 194, 249, 258, 290, 298, 366, 419, 422, 511, 593, 698, 750, 776, 809, 855, 987, 1210, 1237], "pars": [33, 42, 111, 112, 113, 115, 117, 122, 123, 126, 129, 130, 155, 182, 229, 230, 234, 237, 254, 264, 265, 269, 290, 348, 353, 448, 549, 563, 601, 617, 641, 642, 651, 659, 669, 671, 676, 679, 680, 681, 689, 702, 714, 716, 719, 728, 730, 732, 734, 740, 750, 766, 788, 813, 814, 817, 820, 825, 831, 832, 836, 855, 917, 1010, 1096, 1119, 1144, 1168, 1169, 1210, 1218], "valid": [33, 36, 42, 62, 114, 118, 120, 124, 146, 151, 169, 197, 290, 363, 605, 607, 612, 613, 614, 615, 618, 623, 624, 740, 750, 793, 855, 860, 927, 985, 1003, 1132, 1134, 1139, 1140, 1141, 1142, 1145, 1150, 1151, 1210, 1218], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 133, 140, 142, 145, 147, 166, 183, 223, 246, 249, 290, 302, 352, 398, 431, 432, 548, 554, 556, 561, 567, 568, 580, 616, 638, 642, 667, 673, 702, 706, 707, 725, 750, 778, 789, 811, 855, 860, 914, 965, 998, 1090, 1094, 1100, 1107, 1114, 1143, 1165, 1169, 1191, 1210, 1229, 1234, 1237], "aren": [33, 42, 290, 855], "strictli": [33, 42, 46, 85, 290, 782, 855], "table_nam": [34, 36, 238, 290, 821, 855], "connect": [34, 112, 114, 115, 118, 120, 124, 126, 129, 131, 132, 290, 763], "connectionorcursor": [34, 114, 290], "if_table_exist": [34, 290], "dbwritemod": [34, 290], "fail": [34, 35, 101, 116, 118, 122, 124, 126, 127, 129, 130, 131, 153, 249, 256, 290, 315, 400, 502, 637, 639, 640, 644, 750, 826, 855, 1072, 1164, 1166, 1167, 1171, 1191, 1210], "dbwriteengin": [34, 290], "engine_opt": [34, 117, 290], "databas": [34, 114, 115, 290, 762], "new": [34, 35, 36, 117, 126, 151, 163, 177, 187, 188, 201, 212, 213, 220, 231, 238, 248, 253, 255, 257, 258, 259, 264, 265, 290, 300, 375, 424, 434, 436, 446, 517, 533, 534, 549, 563, 567, 623, 624, 629, 630, 648, 650, 651, 729, 746, 750, 762, 787, 809, 821, 827, 828, 831, 832, 843, 855, 860, 863, 938, 991, 1000, 1083, 1095, 1096, 1100, 1150, 1151, 1156, 1157, 1175, 1178, 1187, 1189, 1194, 1210, 1234, 1236], "version": [34, 35, 52, 116, 117, 127, 134, 139, 140, 141, 142, 146, 149, 153, 154, 163, 184, 231, 238, 248, 249, 253, 266, 271, 290, 378, 390, 391, 413, 434, 441, 517, 526, 606, 611, 651, 666, 675, 724, 729, 750, 765, 780, 821, 834, 838, 855, 860, 941, 957, 958, 980, 1003, 1004, 1133, 1138, 1189, 1191, 1194, 1210], "20": [34, 35, 36, 112, 117, 134, 139, 140, 141, 142, 146, 149, 154, 162, 163, 171, 187, 188, 208, 215, 217, 221, 231, 238, 248, 249, 253, 266, 271, 290, 312, 313, 314, 367, 374, 377, 378, 382, 385, 386, 387, 388, 392, 397, 398, 400, 410, 413, 434, 441, 446, 517, 526, 553, 571, 573, 575, 577, 579, 582, 584, 586, 611, 651, 666, 693, 702, 710, 729, 737, 750, 765, 775, 780, 803, 806, 821, 834, 838, 855, 860, 930, 937, 941, 952, 964, 977, 980, 990, 1003, 1138, 1189, 1191, 1194, 1210, 1224, 1225, 1227], "26": [34, 134, 139, 140, 141, 142, 146, 162, 290, 380, 411, 775, 855, 943], "instanti": [34, 36, 114, 144, 229, 248, 264, 290, 813, 831, 855, 1189, 1210], "uri": [34, 35, 114, 115, 116, 127, 128, 290], "qualifi": [34, 290], "creat": [34, 36, 46, 85, 100, 104, 106, 112, 113, 114, 115, 118, 120, 124, 127, 128, 140, 141, 142, 143, 144, 145, 146, 147, 157, 158, 183, 213, 216, 223, 248, 249, 260, 264, 267, 290, 375, 397, 410, 419, 502, 560, 568, 571, 573, 575, 577, 579, 582, 584, 586, 680, 690, 691, 692, 693, 694, 695, 696, 736, 737, 738, 746, 750, 769, 770, 775, 780, 789, 811, 831, 835, 855, 916, 918, 928, 938, 964, 977, 987, 1083, 1090, 1093, 1189, 1191, 1210, 1233, 1234, 1237], "append": [34, 35, 142, 171, 197, 198, 290, 560, 740, 750, 793, 794, 855, 992, 1210], "your": [34, 36, 46, 47, 85, 112, 113, 114, 115, 117, 132, 195, 201, 225, 226, 229, 245, 264, 269, 276, 290, 376, 419, 434, 510, 511, 614, 637, 639, 640, 647, 712, 750, 790, 797, 798, 813, 831, 836, 843, 855, 939, 987, 1072, 1141, 1164, 1166, 1167, 1174, 1210, 1237], "special": [34, 112, 113, 115, 126, 253, 267, 290, 569, 613, 623, 624, 750, 835, 855, 1072, 1101, 1140, 1150, 1151, 1210], "sqlalchemi": [34, 114, 134, 290], "adbc": [34, 114, 115, 290], "against": [34, 89, 112, 114, 238, 290, 474, 615, 729, 821, 855, 1037, 1142, 1218, 1234, 1236, 1237], "postgresql": [34, 114, 115, 290, 549, 750], "user": [34, 114, 115, 201, 215, 276, 290, 510, 511, 553, 591, 712, 750, 806, 843, 855, 859, 1072, 1117, 1210], "server": [34, 114, 115, 290], "port": [34, 112, 114, 115, 118, 120, 129, 290], "sqlite": [34, 114, 290], "db": [34, 114, 115, 290], "replac": [34, 35, 112, 113, 126, 172, 173, 221, 255, 264, 265, 290, 375, 396, 426, 510, 511, 624, 625, 750, 783, 831, 832, 855, 938, 963, 994, 1114, 1116, 1151, 1152, 1210, 1228], "insert": [34, 112, 113, 118, 120, 124, 126, 129, 130, 131, 188, 255, 257, 290, 590, 604, 647, 750, 827, 855, 1115, 1131, 1174, 1210], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 135, 137, 216, 238, 290, 613, 722, 725, 741, 750, 771, 772, 855, 1140, 1210, 1218, 1234], "alreadi": [34, 35, 88, 248, 290, 363, 474, 664, 750, 818, 855, 927, 1037, 1199, 1210], "suppli": [34, 36, 100, 102, 103, 104, 106, 114, 121, 122, 130, 174, 224, 248, 290, 428, 553, 750, 785, 855, 1189, 1210], "unset": [34, 141, 275, 290, 396, 502, 842, 963, 1218], "associ": [34, 36, 47, 115, 117, 141, 144, 226, 290, 1219, 1221], "panda": [34, 101, 105, 134, 183, 250, 290, 390, 391, 657, 729, 750, 789, 855, 957, 958, 1192, 1193, 1210, 1220, 1234], "to_sql": [34, 290], "though": [34, 114, 183, 290, 746, 789, 855], "eventu": [34, 290], "phase": [34, 258, 290], "favour": [34, 290], "solut": [34, 290], "cursor": [34, 114, 290], "adbc_ingest": [34, 290], "affect": [34, 135, 136, 137, 138, 290], "driver": [34, 114, 115, 290], "provid": [34, 36, 112, 113, 115, 116, 117, 124, 126, 127, 128, 131, 142, 146, 174, 193, 238, 248, 290, 343, 344, 422, 443, 502, 510, 511, 608, 609, 612, 617, 618, 633, 634, 635, 636, 702, 732, 750, 762, 785, 821, 855, 903, 904, 1006, 1024, 1072, 1135, 1136, 1139, 1144, 1145, 1189, 1210, 1221, 1227, 1231, 1234, 1237], "otherwis": [34, 114, 117, 141, 144, 148, 201, 208, 226, 229, 248, 253, 276, 290, 338, 343, 353, 364, 418, 419, 420, 421, 502, 511, 520, 549, 553, 554, 556, 561, 605, 608, 611, 615, 616, 620, 627, 638, 668, 696, 699, 708, 712, 740, 750, 803, 813, 843, 855, 899, 903, 917, 928, 986, 987, 988, 989, 1065, 1072, 1090, 1094, 1114, 1116, 1132, 1135, 1138, 1142, 1143, 1147, 1154, 1165, 1210, 1227], "temporari": [34, 290], "target_t": [34, 290], "pyodbc": [34, 290], "wa": [34, 52, 135, 214, 248, 249, 268, 290, 563, 625, 696, 750, 860, 1096, 1152, 1191, 1210], "fast_executemani": [34, 290], "improv": [34, 45, 118, 129, 290, 510, 750, 855], "perform": [34, 41, 43, 45, 47, 87, 90, 97, 101, 112, 113, 114, 118, 124, 126, 129, 130, 131, 153, 182, 183, 198, 201, 219, 223, 225, 226, 249, 276, 290, 432, 502, 510, 511, 549, 568, 606, 619, 620, 625, 637, 639, 640, 750, 789, 794, 811, 820, 834, 835, 855, 1072, 1133, 1146, 1147, 1152, 1164, 1166, 1167, 1191, 1210], "pyodbc_uri": [34, 290], "mssql": [34, 290], "1433": [34, 290], "odbc": [34, 114, 290], "18": [34, 107, 162, 208, 223, 290, 362, 397, 410, 413, 446, 532, 568, 651, 750, 775, 803, 807, 811, 855, 860, 980, 1225, 1232], "create_engin": [34, 290], "deltalak": [35, 116, 127, 134, 290], "deltat": [35, 290], "ignor": [35, 114, 141, 142, 146, 205, 241, 259, 290, 301, 303, 326, 367, 396, 418, 420, 421, 472, 481, 541, 542, 604, 668, 670, 681, 750, 828, 855, 860, 864, 865, 887, 930, 963, 986, 988, 989, 1035, 1044, 1081, 1082, 1131, 1210], "merg": [35, 197, 208, 290, 793, 803, 855], "overwrite_schema": [35, 290], "storage_opt": [35, 112, 116, 118, 120, 124, 126, 127, 128, 129, 131, 290], "delta_write_opt": [35, 290], "delta_merge_opt": [35, 290], "tablemerg": [35, 290], "delta": [35, 116, 127, 239, 261, 290, 498, 504, 581, 582, 585, 586, 603, 665, 682, 684, 726, 727, 731, 739, 750, 762, 822, 829, 855, 1108, 1110, 1130, 1200, 1210], "handl": [35, 53, 54, 55, 107, 112, 113, 126, 132, 290, 367, 472, 611, 647, 750, 771, 772, 855, 859, 930, 1035, 1138, 1174, 1210], "throw": [35, 102, 103, 106, 156, 290, 617, 618, 768, 855, 1144, 1145, 1210], "add": [35, 36, 113, 171, 183, 201, 264, 265, 266, 267, 290, 364, 535, 536, 537, 538, 556, 651, 696, 700, 740, 750, 789, 793, 831, 832, 833, 834, 835, 855, 992, 1210], "anyth": [35, 224, 290], "updat": [35, 162, 290, 775, 855], "deprec": [35, 139, 140, 141, 142, 146, 149, 154, 249, 266, 271, 290, 378, 413, 434, 526, 611, 666, 675, 683, 750, 765, 780, 834, 838, 855, 941, 980, 1003, 1138, 1191, 1210], "sinc": [35, 61, 62, 77, 114, 116, 127, 139, 140, 141, 142, 146, 149, 154, 249, 266, 271, 290, 378, 381, 413, 434, 510, 526, 611, 666, 675, 702, 750, 765, 780, 820, 834, 838, 855, 941, 944, 980, 1003, 1138, 1191, 1210], "14": [35, 134, 162, 201, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 372, 377, 378, 382, 385, 387, 388, 392, 398, 400, 446, 559, 693, 736, 737, 750, 775, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 860, 935, 964], "schema_mod": [35, 290], "extra": [35, 112, 113, 116, 118, 120, 126, 127, 128, 129, 171, 183, 290, 750, 789, 855, 859, 992, 1210], "storag": [35, 112, 116, 118, 120, 124, 126, 127, 128, 129, 290], "backend": [35, 114, 115, 116, 127, 128, 290], "cloud": [35, 114, 116, 124, 126, 127, 128, 129, 131, 132, 290], "configur": [35, 116, 127, 128, 151, 290], "authent": [35, 116, 127, 128, 290], "see": [35, 36, 37, 38, 53, 54, 62, 114, 115, 116, 117, 118, 120, 124, 126, 127, 128, 131, 135, 136, 137, 138, 142, 146, 160, 183, 197, 215, 216, 290, 293, 353, 427, 460, 510, 598, 605, 612, 613, 615, 616, 623, 624, 638, 691, 692, 694, 695, 724, 737, 738, 746, 750, 771, 772, 789, 855, 859, 860, 911, 917, 1025, 1126, 1132, 1139, 1140, 1142, 1143, 1150, 1151, 1165, 1210, 1214, 1237], "here": [35, 36, 41, 100, 102, 103, 104, 106, 114, 115, 116, 121, 122, 124, 126, 127, 128, 130, 131, 140, 142, 146, 290, 371, 510, 511, 614, 618, 678, 750, 818, 855, 860, 934, 1145], "gc": [35, 116, 127, 128, 290], "azur": [35, 116, 124, 126, 127, 128, 131, 290], "keyword": [35, 116, 124, 127, 142, 146, 160, 182, 215, 224, 229, 230, 250, 264, 265, 269, 290, 428, 553, 651, 728, 732, 740, 750, 788, 806, 813, 814, 831, 832, 836, 855, 1192, 1210, 1221], "while": [35, 54, 113, 116, 117, 127, 142, 146, 151, 195, 207, 255, 259, 290, 620, 772, 802, 828, 855, 1003, 1147, 1210], "lake": [35, 116, 127, 290, 762], "typeerror": [35, 290], "unsupport": [35, 290], "arrowinvaliderror": [35, 290], "could": [35, 82, 87, 156, 290, 686, 696, 700, 768, 775, 778, 855, 1003, 1210], "primit": [35, 290, 452, 750], "tablenotfounderror": [35, 290], "doesn": [35, 112, 126, 183, 198, 290, 415, 750, 789, 855, 983, 1210], "action": [35, 290], "trigger": [35, 250, 290, 750, 859, 1192, 1210], "protocol": [35, 101, 115, 153, 290], "categor": [35, 46, 65, 84, 85, 135, 136, 137, 138, 197, 246, 290, 350, 364, 556, 563, 657, 750, 860, 909, 910, 911, 912, 928, 1090, 1096, 1193, 1210], "convert": [35, 101, 105, 116, 117, 123, 127, 153, 244, 245, 246, 247, 248, 249, 250, 252, 253, 290, 337, 338, 365, 376, 399, 402, 501, 502, 510, 533, 558, 614, 637, 639, 640, 641, 642, 644, 649, 750, 855, 859, 898, 899, 911, 939, 966, 969, 1064, 1065, 1141, 1164, 1166, 1167, 1168, 1169, 1171, 1177, 1180, 1188, 1189, 1190, 1191, 1192, 1194, 1210, 1231, 1232], "normal": [35, 183, 290, 415, 460, 598, 750, 789, 855, 983, 1025, 1126, 1210], "nullabl": [35, 290], "To": [35, 54, 172, 290, 353, 369, 370, 426, 427, 605, 611, 612, 613, 615, 623, 624, 633, 634, 635, 636, 645, 750, 783, 855, 917, 932, 933, 994, 1003, 1132, 1138, 1139, 1140, 1142, 1150, 1151, 1172, 1191, 1210, 1234], "pyarrow": [35, 41, 100, 105, 112, 115, 116, 118, 120, 124, 127, 132, 134, 243, 249, 250, 290, 729, 762, 1185, 1191, 1192, 1210, 1220, 1234], "ha": [35, 36, 47, 54, 105, 114, 126, 149, 153, 260, 266, 271, 290, 347, 348, 363, 434, 510, 521, 526, 616, 638, 648, 658, 659, 699, 708, 746, 750, 772, 834, 838, 843, 855, 907, 916, 927, 929, 1003, 1143, 1165, 1195, 1210], "last": [35, 135, 136, 137, 138, 185, 198, 200, 216, 226, 237, 242, 249, 256, 284, 290, 314, 325, 334, 363, 379, 390, 394, 411, 454, 479, 497, 500, 502, 532, 533, 535, 537, 539, 540, 600, 601, 616, 630, 638, 654, 676, 735, 750, 794, 820, 824, 826, 851, 855, 860, 875, 886, 895, 927, 942, 957, 961, 978, 1005, 1017, 1027, 1042, 1060, 1063, 1128, 1143, 1157, 1165, 1182, 1191, 1210, 1228, 1230], "filesystem": [35, 116, 127, 128, 290], "table_path": [35, 116, 127, 128, 290], "match": [35, 36, 55, 62, 94, 100, 102, 103, 104, 106, 114, 121, 122, 130, 135, 136, 137, 138, 156, 173, 197, 198, 224, 259, 290, 517, 518, 563, 580, 605, 606, 607, 610, 612, 613, 615, 617, 618, 623, 624, 625, 631, 637, 639, 640, 740, 750, 768, 784, 793, 794, 828, 855, 860, 984, 1096, 1107, 1132, 1133, 1134, 1137, 1139, 1140, 1142, 1144, 1145, 1150, 1151, 1152, 1158, 1164, 1166, 1167, 1210, 1230], "old": [35, 220, 290, 563, 750, 809, 855, 1096, 1210], "existing_table_path": [35, 290], "store": [35, 112, 128, 171, 195, 225, 290, 350, 566, 750, 909, 992, 1099, 1210], "bucket": [35, 116, 127, 128, 131, 290, 397, 410, 443, 750, 964, 977, 1006, 1210], "prefix": [35, 112, 113, 126, 151, 290, 300, 346, 518, 533, 536, 537, 539, 540, 631, 634, 635, 647, 750, 860, 906, 1158, 1162, 1174], "aws_region": [35, 127, 131, 290], "the_aws_region": [35, 290], "aws_access_key_id": [35, 116, 127, 131, 290], "the_aws_access_key_id": [35, 116, 127, 128, 290], "aws_secret_access_kei": [35, 116, 127, 131, 290], "the_aws_secret_access_kei": [35, 116, 127, 128, 290], "pa": [35, 100, 132, 290, 729], "check": [35, 62, 89, 112, 113, 126, 135, 136, 137, 138, 150, 168, 193, 197, 290, 321, 342, 345, 346, 440, 448, 452, 470, 605, 610, 615, 631, 750, 793, 798, 855, 882, 902, 905, 906, 984, 1002, 1012, 1015, 1022, 1024, 1033, 1132, 1137, 1142, 1158, 1210], "doc": [35, 37, 38, 115, 118, 120, 135, 137, 160, 290], "predic": [35, 42, 43, 44, 45, 53, 54, 126, 129, 130, 131, 132, 174, 193, 224, 290, 428, 666, 700, 740, 750, 771, 772, 780, 782, 785, 798, 807, 809, 818, 834, 835, 855, 996, 1114, 1116, 1210], "source_alia": [35, 290], "target_alia": [35, 290], "when_matched_update_al": [35, 290], "when_not_matched_insert_al": [35, 290], "execut": [35, 46, 55, 114, 115, 199, 238, 290, 366, 474, 664, 729, 750, 767, 776, 798, 807, 821, 855, 859, 1037, 1199, 1210, 1219, 1220, 1222, 1234], "workbook": [36, 117, 123, 290], "worksheet": [36, 117, 123, 290], "posit": [36, 164, 170, 182, 214, 229, 230, 234, 237, 257, 264, 265, 269, 290, 333, 418, 420, 421, 422, 495, 549, 554, 556, 592, 601, 614, 615, 623, 624, 642, 651, 674, 675, 676, 679, 680, 681, 698, 728, 732, 750, 777, 781, 788, 813, 814, 817, 820, 827, 831, 832, 836, 855, 860, 894, 986, 988, 989, 1058, 1090, 1119, 1141, 1169, 1210, 1235], "tupl": [36, 56, 115, 117, 123, 195, 201, 214, 224, 225, 226, 233, 253, 268, 290, 564, 750, 807, 818, 855, 860, 1097, 1210], "a1": [36, 48, 50, 290], "table_styl": [36, 290], "column_format": [36, 290], "columnformatdict": [36, 290], "dtype_format": [36, 290], "oneormoredatatyp": [36, 140, 290], "conditional_format": [36, 290], "conditionalformatdict": [36, 290], "header_format": [36, 290], "column_tot": [36, 290], "columntotalsdefinit": [36, 290], "column_width": [36, 290], "columnwidthsdefinit": [36, 290], "row_tot": [36, 290], "rowtotalsdefinit": [36, 290], "row_height": [36, 290], "sparklin": [36, 290], "sequenc": [36, 47, 76, 100, 102, 103, 104, 106, 112, 113, 114, 117, 121, 122, 123, 126, 130, 140, 141, 142, 143, 144, 155, 162, 170, 171, 197, 198, 207, 212, 214, 215, 216, 226, 237, 246, 248, 253, 254, 258, 259, 260, 290, 338, 348, 364, 435, 452, 502, 510, 553, 556, 563, 601, 635, 636, 650, 659, 676, 686, 687, 700, 702, 711, 712, 721, 724, 730, 750, 766, 775, 781, 793, 794, 802, 806, 820, 825, 828, 855, 860, 899, 928, 929, 992, 1065, 1090, 1096, 1178, 1210], "formula": [36, 290, 415, 750, 983, 1210], "autofilt": [36, 290], "autofit": [36, 290], "hidden_column": [36, 290], "selectortyp": [36, 290, 860], "hide_gridlin": [36, 290], "sheet_zoom": [36, 290], "freeze_pan": [36, 290], "bytesio": [36, 37, 38, 41, 110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 163, 290, 366, 750, 776, 855], "open": [36, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 163, 290, 366, 750, 776, 855], "xlsxwriter": [36, 134, 290], "close": [36, 114, 183, 223, 238, 290, 364, 448, 507, 556, 568, 571, 573, 575, 577, 579, 582, 584, 586, 598, 691, 692, 694, 695, 737, 738, 750, 789, 811, 821, 855, 928, 1010, 1090, 1126, 1210], "xlsx": [36, 117, 290], "work": [36, 63, 65, 113, 132, 230, 265, 290, 301, 303, 339, 352, 353, 422, 431, 474, 503, 510, 511, 532, 533, 535, 537, 539, 540, 549, 616, 619, 620, 627, 638, 661, 750, 814, 832, 855, 860, 864, 865, 900, 914, 917, 998, 1037, 1066, 1143, 1146, 1147, 1154, 1165, 1196, 1210], "directori": [36, 41, 124, 290, 859], "sheet1": [36, 290], "medium": [36, 290], "kei": [36, 41, 45, 47, 52, 55, 124, 126, 128, 131, 183, 195, 197, 198, 208, 214, 216, 220, 222, 225, 226, 259, 268, 290, 428, 511, 563, 732, 750, 782, 789, 793, 794, 803, 809, 810, 828, 855, 860, 1096, 1210, 1224], "follow": [36, 41, 52, 112, 113, 114, 116, 126, 127, 128, 135, 183, 198, 201, 215, 223, 249, 260, 290, 393, 397, 410, 419, 510, 553, 554, 559, 568, 571, 573, 575, 577, 579, 580, 582, 584, 586, 650, 660, 675, 691, 692, 694, 695, 712, 737, 738, 740, 742, 743, 745, 750, 751, 752, 755, 757, 758, 759, 789, 794, 806, 811, 855, 860, 960, 964, 977, 987, 1092, 1114, 1116, 1191, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217, 1237], "first_column": [36, 290], "last_column": [36, 290], "banded_column": [36, 290], "banded_row": [36, 290], "sheet": [36, 117, 123, 290], "chart": [36, 290, 807, 855], "subsequ": [36, 219, 250, 290, 502, 729, 740, 780, 855, 1192, 1210, 1223], "colnam": [36, 126, 290], "given": [36, 47, 89, 100, 102, 103, 104, 106, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 130, 131, 137, 138, 139, 140, 142, 144, 145, 146, 147, 169, 170, 172, 183, 193, 201, 214, 215, 224, 225, 226, 234, 237, 253, 259, 290, 321, 333, 338, 348, 353, 372, 376, 399, 401, 402, 415, 419, 443, 448, 470, 495, 502, 505, 511, 549, 553, 559, 562, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 592, 613, 614, 621, 622, 637, 640, 647, 650, 659, 698, 699, 708, 711, 712, 725, 726, 727, 750, 781, 789, 798, 806, 817, 820, 828, 843, 855, 860, 882, 894, 899, 917, 935, 939, 966, 968, 969, 983, 985, 987, 1006, 1010, 1024, 1033, 1058, 1065, 1068, 1071, 1072, 1083, 1092, 1097, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1115, 1119, 1140, 1141, 1148, 1149, 1164, 1167, 1174, 1198, 1201, 1210, 1218, 1219, 1226, 1229, 1230, 1234, 1237], "dd": [36, 290, 1230], "mm": [36, 290], "yyyi": [36, 290], "overridden": [36, 100, 102, 104, 106, 121, 122, 148, 290, 855], "basi": [36, 117, 142, 290], "param": [36, 100, 102, 103, 104, 106, 112, 113, 121, 122, 126, 141, 142, 146, 224, 290, 855], "It": [36, 37, 42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 124, 131, 132, 162, 208, 215, 238, 248, 253, 258, 259, 267, 276, 290, 363, 364, 397, 443, 511, 520, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 726, 727, 746, 750, 767, 771, 772, 775, 798, 803, 821, 828, 835, 843, 855, 912, 927, 928, 964, 1006, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1116, 1189, 1194, 1210], "float_dtyp": [36, 290], "simplifi": [36, 42, 43, 44, 45, 53, 54, 290, 771, 772, 780, 782, 807, 818, 855], "uniform": [36, 290, 556, 750, 1090, 1210], "condit": [36, 166, 174, 224, 290, 428, 448, 610, 631, 677, 700, 740, 750, 778, 785, 855, 1010, 1210, 1224, 1228, 1233], "typenam": [36, 290], "3_color_scal": [36, 290], "data_bar": [36, 290], "make": [36, 55, 76, 100, 105, 112, 113, 117, 118, 120, 124, 129, 208, 212, 219, 249, 260, 290, 420, 421, 443, 539, 540, 549, 562, 629, 750, 803, 855, 859, 988, 989, 1006, 1156, 1191, 1210, 1234], "icon": [36, 290], "multipl": [36, 53, 54, 55, 112, 113, 117, 123, 126, 129, 130, 131, 140, 142, 146, 164, 169, 171, 174, 182, 183, 187, 196, 214, 216, 226, 229, 232, 237, 259, 264, 269, 290, 348, 477, 516, 521, 529, 530, 549, 563, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 601, 648, 659, 676, 683, 700, 711, 713, 718, 724, 730, 733, 740, 746, 750, 771, 772, 777, 785, 788, 789, 813, 816, 820, 828, 831, 836, 843, 855, 866, 895, 985, 992, 1040, 1060, 1077, 1096, 1097, 1128, 1210, 1221, 1226], "singl": [36, 47, 53, 54, 55, 111, 112, 113, 114, 115, 117, 124, 126, 131, 140, 156, 164, 165, 166, 171, 178, 184, 193, 201, 214, 224, 226, 237, 248, 249, 268, 290, 322, 353, 371, 393, 435, 438, 441, 471, 477, 510, 511, 560, 563, 564, 566, 601, 604, 616, 620, 627, 638, 666, 676, 680, 681, 707, 711, 712, 730, 738, 750, 768, 771, 772, 777, 778, 820, 855, 860, 883, 917, 934, 960, 992, 1004, 1034, 1040, 1093, 1096, 1097, 1099, 1131, 1143, 1147, 1154, 1165, 1185, 1191, 1210, 1219], "across": [36, 47, 115, 184, 203, 205, 210, 241, 290, 441, 669, 671, 686, 687, 689, 714, 716, 719, 734, 750, 1004, 1210], "effect": [36, 176, 183, 290, 380, 432, 511, 534, 536, 538, 750, 789, 834, 835, 855, 935, 943], "heatmap": [36, 290], "min": [36, 41, 45, 162, 173, 210, 216, 223, 290, 360, 427, 549, 559, 568, 576, 577, 719, 728, 750, 775, 784, 811, 855, 859, 924, 929, 995, 1092, 1105, 1210, 1226, 1228, 1231, 1237], "entir": [36, 53, 54, 117, 123, 290, 771, 772, 855], "made": [36, 114, 290], "abov": [36, 135, 198, 216, 290, 740], "than": [36, 42, 43, 44, 45, 53, 54, 99, 104, 106, 112, 113, 114, 117, 123, 126, 132, 157, 182, 195, 198, 201, 214, 224, 225, 227, 258, 276, 290, 432, 434, 437, 439, 448, 462, 490, 509, 510, 511, 524, 556, 567, 589, 598, 616, 619, 621, 622, 630, 638, 647, 682, 712, 750, 771, 772, 788, 794, 843, 855, 1010, 1053, 1072, 1090, 1100, 1113, 1126, 1143, 1146, 1148, 1149, 1157, 1165, 1174, 1191, 1210, 1237], "bold": [36, 290], "font_color": [36, 290], "702963": [36, 290], "total": [36, 169, 271, 290, 403, 404, 405, 406, 407, 408, 409, 463, 483, 750, 838, 970, 971, 972, 973, 974, 975, 976, 985, 1026, 1046, 1210], "export": [36, 195, 196, 225, 226, 245, 248, 290, 746, 860], "sum": [36, 169, 176, 182, 183, 193, 216, 223, 241, 269, 290, 361, 362, 366, 415, 428, 502, 511, 520, 522, 523, 524, 525, 563, 568, 583, 584, 666, 668, 686, 688, 689, 700, 712, 724, 734, 750, 771, 772, 776, 780, 782, 788, 789, 805, 807, 811, 815, 818, 836, 855, 859, 860, 925, 926, 983, 985, 1109, 1210, 1218, 1224, 1226, 1228], "must": [36, 65, 101, 102, 116, 127, 128, 132, 162, 170, 183, 198, 208, 223, 224, 290, 364, 502, 556, 563, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 740, 750, 775, 781, 789, 794, 798, 803, 811, 818, 855, 859, 928, 929, 1090, 1096, 1210], "funcnam": [36, 290], "averag": [36, 290, 418, 419, 420, 421, 559, 750, 986, 987, 988, 989, 1092, 1210, 1225], "count_num": [36, 290], "count": [36, 132, 154, 162, 183, 212, 213, 223, 255, 260, 266, 281, 290, 305, 322, 331, 358, 371, 419, 443, 463, 471, 483, 488, 511, 531, 547, 568, 607, 662, 664, 672, 678, 685, 709, 720, 750, 765, 775, 789, 805, 811, 834, 848, 855, 860, 883, 892, 922, 929, 934, 987, 1006, 1026, 1034, 1046, 1051, 1079, 1085, 1134, 1197, 1199, 1210, 1218, 1228], "std_dev": [36, 290], "var": [36, 147, 290, 585, 586, 750, 855, 1210], "pixel": [36, 290], "unit": [36, 62, 64, 135, 136, 137, 138, 142, 146, 169, 290, 373, 375, 381, 401, 413, 419, 425, 508, 521, 637, 640, 663, 693, 694, 695, 696, 702, 750, 807, 855, 859, 860, 936, 938, 944, 968, 980, 985, 987, 993, 1071, 1164, 1167, 1198, 1210, 1237], "hand": [36, 112, 113, 126, 290, 491, 492, 493, 494, 1054, 1055, 1056, 1057], "side": [36, 183, 223, 290, 448, 491, 492, 493, 494, 568, 571, 573, 575, 577, 579, 582, 584, 586, 590, 691, 692, 694, 695, 737, 738, 750, 789, 811, 855, 859, 1010, 1054, 1055, 1056, 1057, 1115, 1210], "call": [36, 46, 53, 54, 105, 113, 114, 117, 135, 136, 137, 138, 142, 146, 151, 155, 182, 183, 199, 201, 223, 238, 249, 254, 289, 290, 347, 348, 359, 362, 371, 511, 532, 533, 535, 537, 539, 540, 594, 658, 659, 678, 683, 746, 750, 766, 771, 772, 780, 782, 788, 789, 807, 811, 818, 821, 825, 854, 855, 859, 860, 907, 934, 1072, 1122, 1191, 1195, 1210, 1222, 1234], "ad": [36, 103, 117, 183, 255, 259, 264, 265, 290, 304, 425, 686, 687, 750, 789, 828, 831, 832, 855, 860, 993, 1210], "wise": [36, 47, 114, 176, 290, 306, 307, 308, 309, 310, 311, 354, 355, 356, 423, 506, 595, 596, 597, 655, 656, 700, 724, 750, 867, 868, 869, 870, 871, 872, 919, 920, 921, 990, 1069, 1070, 1123, 1124, 1125, 1183, 1184, 1210], "particip": [36, 290], "distinct": [36, 146, 214, 268, 290, 339, 451, 454, 503, 559, 567, 696, 750, 900, 1014, 1017, 1066, 1092, 1100, 1210, 1225, 1235, 1237], "referenc": [36, 290, 650], "differ": [36, 112, 117, 132, 135, 137, 171, 183, 184, 195, 223, 225, 226, 245, 248, 249, 255, 290, 367, 379, 393, 394, 396, 411, 417, 432, 441, 472, 491, 493, 502, 511, 541, 542, 544, 563, 637, 662, 699, 702, 708, 750, 780, 789, 811, 855, 860, 911, 930, 942, 960, 961, 963, 978, 992, 1004, 1035, 1054, 1056, 1072, 1081, 1082, 1096, 1164, 1210, 1231], "row_index": [36, 290], "height": [36, 142, 166, 290], "intersect": [36, 290, 492, 860, 1055], "bodi": [36, 290], "start": [36, 110, 112, 113, 115, 118, 120, 123, 124, 126, 129, 130, 131, 148, 177, 182, 183, 199, 236, 260, 266, 267, 290, 342, 345, 346, 371, 379, 389, 394, 397, 410, 411, 422, 436, 478, 496, 567, 571, 573, 575, 577, 579, 582, 584, 586, 599, 605, 610, 613, 622, 627, 631, 632, 634, 635, 638, 647, 673, 678, 686, 690, 691, 692, 693, 694, 695, 698, 700, 706, 707, 737, 738, 740, 750, 787, 788, 789, 807, 819, 834, 835, 855, 860, 906, 934, 936, 939, 942, 944, 945, 951, 953, 955, 956, 959, 961, 964, 968, 977, 978, 1000, 1041, 1059, 1100, 1127, 1137, 1140, 1149, 1154, 1158, 1159, 1161, 1165, 1174, 1210, 1224, 1230, 1237], "unless": [36, 47, 102, 248, 253, 290, 632, 633, 725, 855, 1159, 1231], "marker": [36, 290], "compliant": [36, 290], "case": [36, 46, 47, 54, 100, 102, 103, 104, 106, 114, 121, 122, 130, 131, 148, 171, 183, 195, 201, 216, 223, 225, 226, 245, 248, 249, 290, 372, 419, 510, 520, 521, 533, 568, 605, 606, 613, 615, 623, 624, 625, 750, 772, 789, 811, 855, 859, 860, 935, 987, 992, 1132, 1133, 1140, 1142, 1150, 1151, 1152, 1189, 1210], "three": [36, 223, 252, 290, 364, 556, 568, 590, 616, 638, 750, 811, 855, 899, 928, 1065, 1090, 1143, 1165, 1210], "avail": [36, 37, 41, 45, 109, 114, 115, 116, 127, 128, 140, 151, 216, 238, 289, 290, 559, 729, 742, 743, 745, 749, 750, 751, 752, 755, 756, 757, 758, 759, 762, 782, 821, 854, 855, 859, 860, 929, 1092, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217, 1234], "insert_befor": [36, 290], "insert_aft": [36, 290], "respect": [36, 290, 606, 625, 860, 1133, 1152, 1194, 1210], "direct": [36, 115, 124, 128, 131, 135, 234, 248, 258, 290, 333, 495, 592, 750, 817, 855, 894, 1058, 1119, 1210], "far": [36, 290], "strongli": [36, 148, 201, 224, 276, 290, 511, 750, 1072, 1210], "advis": [36, 46, 85, 199, 290], "structur": [36, 37, 89, 90, 97, 171, 215, 226, 249, 290, 553, 750, 806, 855, 992, 1210], "wherev": [36, 201, 276, 290, 511, 750, 1072, 1210], "possibl": [36, 41, 45, 89, 102, 103, 106, 112, 117, 139, 142, 146, 182, 195, 201, 225, 256, 276, 290, 508, 511, 520, 569, 630, 663, 750, 773, 779, 788, 812, 820, 826, 830, 855, 1072, 1101, 1157, 1210], "simpl": [36, 212, 290], "colx": [36, 290, 539, 540, 860, 1223, 1237], "coli": [36, 290, 539, 540, 860, 1237], "after": [36, 55, 103, 110, 112, 113, 118, 120, 124, 126, 129, 130, 131, 155, 171, 254, 257, 289, 290, 347, 348, 422, 549, 559, 647, 658, 659, 750, 766, 825, 827, 855, 907, 992, 1092, 1174, 1195, 1210, 1223], "befor": [36, 61, 62, 112, 114, 117, 126, 132, 135, 136, 137, 138, 148, 151, 171, 183, 198, 238, 248, 253, 257, 290, 361, 362, 363, 510, 549, 550, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 647, 653, 726, 727, 750, 789, 791, 794, 827, 855, 859, 925, 926, 927, 992, 1086, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1138, 1174, 1181, 1210, 1224], "most": [36, 100, 112, 113, 115, 126, 135, 136, 137, 138, 249, 290, 521, 529, 550, 630, 750, 1077, 1086, 1157, 1191, 1210, 1220, 1234], "mandatori": [36, 290], "return_dtyp": [36, 201, 290, 510, 511, 563, 667, 711, 712, 750, 1072, 1096, 1210], "latter": [36, 171, 290, 992, 1210], "appropri": [36, 132, 249, 290, 559, 750, 1092, 1210], "pure": [36, 290, 517], "actual": [36, 103, 142, 146, 226, 290, 1121, 1210, 1231], "indic": [36, 61, 62, 64, 77, 110, 112, 113, 114, 118, 120, 124, 126, 131, 139, 140, 146, 183, 223, 226, 232, 234, 246, 290, 315, 333, 435, 443, 449, 450, 451, 453, 454, 455, 456, 457, 458, 477, 495, 515, 516, 517, 518, 519, 568, 571, 573, 575, 577, 579, 582, 584, 586, 590, 592, 595, 676, 677, 721, 750, 789, 811, 816, 817, 855, 859, 860, 894, 999, 1006, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1040, 1058, 1114, 1115, 1119, 1123, 1186, 1210, 1237], "calcul": [36, 41, 45, 47, 162, 183, 239, 261, 290, 367, 418, 419, 420, 421, 460, 472, 491, 498, 504, 508, 580, 598, 603, 663, 665, 682, 684, 726, 727, 731, 739, 750, 775, 789, 822, 829, 855, 929, 930, 986, 987, 988, 989, 1025, 1035, 1054, 1107, 1126, 1130, 1200, 1210], "individu": [36, 45, 151, 223, 248, 249, 253, 290, 511, 613, 750, 771, 811, 855, 860, 915, 1140, 1210], "gridlin": [36, 290], "zoom": [36, 290], "freez": [36, 290], "pane": [36, 290], "top": [36, 238, 254, 290, 659, 750, 821, 825, 855], "index": [36, 101, 105, 108, 112, 113, 118, 120, 124, 126, 129, 130, 131, 134, 153, 177, 179, 183, 188, 193, 195, 216, 221, 223, 224, 225, 234, 236, 248, 249, 251, 259, 260, 266, 267, 290, 299, 312, 313, 314, 316, 319, 320, 325, 333, 338, 419, 435, 436, 438, 467, 468, 477, 478, 479, 495, 496, 502, 568, 571, 573, 575, 577, 579, 582, 584, 586, 590, 592, 599, 605, 612, 615, 616, 627, 638, 648, 676, 706, 709, 750, 787, 789, 811, 817, 819, 828, 834, 835, 855, 860, 873, 874, 875, 876, 877, 880, 881, 886, 894, 899, 987, 999, 1000, 1024, 1030, 1031, 1040, 1041, 1042, 1058, 1059, 1065, 1083, 1114, 1115, 1119, 1127, 1139, 1142, 1143, 1154, 1165, 1210, 1226, 1230], "thu": [36, 171, 290, 682, 992, 1210], "altern": [36, 290, 746, 1227], "a2": [36, 48, 50, 290], "occur": [36, 53, 54, 290, 322, 471, 529, 559, 750, 771, 772, 780, 782, 807, 818, 855, 883, 1034, 1077, 1092, 1191, 1210], "equival": [36, 100, 102, 103, 104, 106, 116, 121, 122, 130, 183, 193, 212, 290, 298, 302, 416, 417, 419, 432, 437, 439, 462, 509, 528, 530, 543, 544, 545, 548, 554, 620, 652, 660, 667, 750, 789, 855, 987, 1024, 1147, 1170, 1172, 1173, 1210], "top_row": [36, 290], "top_col": [36, 290], "base": [36, 60, 92, 144, 166, 174, 183, 223, 290, 372, 380, 415, 418, 419, 420, 421, 428, 443, 447, 505, 506, 510, 511, 554, 556, 563, 568, 571, 573, 575, 577, 579, 582, 584, 586, 642, 750, 778, 785, 789, 811, 855, 860, 935, 943, 983, 986, 987, 988, 989, 1006, 1009, 1068, 1069, 1072, 1090, 1096, 1169, 1201, 1210, 1224, 1229, 1237], "scroll": [36, 290], "region": [36, 128, 290], "initi": [36, 76, 151, 290, 686, 700, 740, 1234], "5th": [36, 290], "properti": [36, 153, 159, 167, 175, 186, 228, 233, 263, 267, 290, 773, 779, 812, 830, 835, 855, 860, 1210, 1237], "readthedoc": [36, 290], "html": [36, 37, 38, 101, 114, 118, 120, 153, 160, 290], "definit": [36, 290, 460, 750, 860, 1025, 1210], "take": [36, 117, 123, 142, 143, 151, 176, 177, 183, 205, 208, 215, 216, 220, 290, 314, 371, 393, 428, 435, 436, 477, 478, 534, 536, 538, 601, 676, 678, 697, 699, 708, 750, 787, 789, 803, 809, 855, 875, 934, 960, 999, 1000, 1040, 1041, 1201, 1210, 1226], "care": [36, 232, 290, 511, 591, 750, 816, 855, 1117, 1210], "rel": [36, 115, 116, 127, 128, 135, 136, 137, 138, 290, 393, 418, 420, 421, 750, 960, 986, 988, 989, 1210], "working_with_conditional_format": [36, 290], "similarli": [36, 103, 183, 198, 223, 260, 290, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977], "well": [36, 112, 113, 114, 126, 290, 448, 729, 750, 1010, 1210, 1234], "adjac": [36, 290], "two": [36, 46, 84, 85, 102, 104, 106, 115, 176, 198, 207, 208, 216, 225, 252, 270, 276, 290, 299, 368, 375, 432, 435, 438, 502, 556, 600, 674, 675, 682, 684, 726, 727, 729, 750, 802, 803, 837, 843, 855, 860, 899, 931, 938, 1065, 1090, 1210, 1223, 1224, 1227, 1235], "help": [36, 135, 136, 137, 138, 290, 293, 782, 855, 1210, 1214], "where": [36, 47, 114, 115, 117, 166, 171, 174, 183, 195, 207, 225, 238, 239, 248, 253, 259, 261, 290, 315, 412, 415, 417, 419, 428, 498, 504, 510, 544, 562, 590, 598, 601, 603, 625, 665, 677, 682, 684, 726, 727, 729, 731, 739, 740, 750, 778, 785, 789, 802, 821, 822, 828, 829, 855, 876, 979, 983, 987, 992, 996, 1115, 1126, 1130, 1152, 1200, 1201, 1210, 1218, 1233, 1234, 1236], "appear": [36, 59, 103, 137, 138, 290, 662, 750, 860, 1197, 1210], "working_with_sparklin": [36, 290], "inject": [36, 47, 290], "locat": [36, 171, 221, 251, 257, 290, 590, 750, 827, 855, 992, 999, 1114, 1115, 1210], "syntax": [36, 174, 201, 212, 290, 605, 612, 613, 615, 623, 624, 706, 707, 746, 785, 818, 855, 1132, 1139, 1140, 1142, 1150, 1151, 1210, 1231], "correctli": [36, 290, 510, 750], "microsoft": [36, 290], "com": [36, 115, 290, 418, 420, 421, 612, 613, 614, 750, 986, 988, 989, 1139, 1140, 1141, 1210], "u": [36, 62, 64, 131, 144, 198, 290, 373, 375, 381, 401, 413, 637, 640, 669, 671, 693, 694, 695, 696, 702, 860, 936, 938, 944, 968, 980, 1164, 1167, 1221, 1231], "offic": [36, 290], "f5ed2452": [36, 290], "2337": [36, 290], "4f71": [36, 290], "bed3": [36, 290], "c8ae6d2b276": [36, 290], "basic": [36, 290, 1237], "random": [36, 37, 118, 133, 140, 184, 227, 290, 441, 490, 559, 589, 594, 664, 750, 762, 1004, 1053, 1092, 1113, 1122, 1199, 1210], "dtm": [36, 290, 375, 860, 938], "500": [36, 259, 290, 377, 378, 382, 385, 387, 388, 392, 398, 400, 782, 828, 855, 951, 953, 959, 1102, 1103, 1105, 1210], "val": [36, 222, 290, 511, 553, 657, 740, 750, 810, 855], "10_000": [36, 290], "20_000": [36, 290], "30_000": [36, 290], "increas": [36, 47, 112, 123, 124, 131, 290, 363, 567, 750, 927, 1100, 1210], "b4": [36, 290], "light": [36, 290], "twice": [36, 290], "titl": [36, 290, 1218], "explicit": [36, 114, 126, 140, 238, 259, 290, 724, 821, 828, 855], "integr": [36, 253, 290, 1237], "multi_fram": [36, 290], "wb": [36, 290], "coordin": [36, 290], "advanc": [36, 117, 216, 290, 338, 502, 532, 535, 537, 539, 540, 899, 1065, 1237], "min_color": [36, 290], "76933c": [36, 290], "mid_color": [36, 290], "c4d79b": [36, 290], "max_color": [36, 290], "ebf1d": [36, 290], "data_bar_2010": [36, 290], "bar_color": [36, 290], "9bbb59": [36, 290], "bar_negative_color_sam": [36, 290], "bar_negative_border_color_sam": [36, 290], "white": [36, 290], "w": [36, 114, 183, 226, 290, 607, 612, 614, 669, 671, 789, 855, 860, 1134, 1139, 1141, 1160, 1220, 1221], "get_worksheet_by_nam": [36, 290], "fmt_titl": [36, 290], "add_format": [36, 290], "4f6228": [36, 290], "font_siz": [36, 290], "ital": [36, 290], "customis": [36, 290], "trend": [36, 290], "win_loss": [36, 290], "subtl": [36, 290], "tone": [36, 290], "hidden": [36, 290], "q1": [36, 290], "55": [36, 49, 290], "35": [36, 290, 367, 693, 750, 930, 1210], "q2": [36, 290], "30": [36, 162, 171, 183, 187, 215, 221, 244, 264, 290, 312, 313, 314, 367, 375, 377, 378, 382, 385, 387, 388, 389, 390, 392, 395, 396, 397, 398, 400, 403, 410, 411, 441, 517, 593, 693, 710, 736, 737, 750, 775, 780, 789, 806, 831, 855, 860, 930, 938, 957, 963, 964, 970, 977, 1003, 1210, 1224, 1225, 1227, 1229, 1231, 1232, 1235, 1237], "60": [36, 171, 290, 382, 387, 388, 398, 409, 432, 584, 637, 750, 961, 965, 976, 1094, 1164, 1210, 1232], "q3": [36, 290], "40": [36, 162, 171, 198, 215, 290, 397, 410, 441, 504, 641, 651, 750, 775, 806, 855, 860, 947, 977, 1067, 1168, 1224, 1225, 1227], "80": [36, 290], "q4": [36, 290], "75": [36, 162, 290, 302, 548, 556, 570, 572, 574, 576, 581, 583, 585, 712, 750, 775, 855, 860, 929, 1006, 1025, 1090, 1210, 1232, 1237], "account": [36, 107, 115, 128, 290, 393, 418, 420, 421, 750, 960, 986, 988, 989, 1210], "flavour": [36, 114, 290], "integer_dtyp": [36, 229, 290, 813, 855, 860], "0_": [36, 290], "just": [36, 105, 114, 126, 207, 290, 802, 855, 860], "unifi": [36, 248, 253, 290, 860], "2_color_scal": [36, 290], "95b3d7": [36, 290], "ffffff": [36, 290], "standardis": [36, 290], "z": [36, 55, 76, 107, 140, 169, 190, 192, 197, 207, 225, 226, 255, 258, 290, 298, 300, 302, 441, 469, 511, 533, 535, 537, 539, 540, 548, 562, 563, 606, 613, 625, 637, 640, 669, 671, 689, 714, 716, 719, 725, 729, 734, 750, 793, 802, 819, 821, 855, 860, 995, 1096, 1133, 1140, 1152, 1164, 1167, 1210, 1220, 1224, 1234, 1236], "score": [36, 290], "conjunct": [36, 84, 114, 117, 123, 140, 290, 706, 709], "a123": [36, 290], "b345": [36, 290], "c567": [36, 290], "d789": [36, 290], "e101": [36, 290], "45": [36, 162, 223, 290, 375, 397, 410, 568, 584, 607, 613, 649, 675, 693, 710, 736, 737, 750, 775, 811, 855, 860, 938, 964, 977, 1134, 1140, 1177, 1229, 1232, 1235, 1237], "85": [36, 290, 1025, 1210, 1237], "font": [36, 290], "consola": [36, 290], "stdev": [36, 290], "ipccompress": [37, 38, 290], "futur": [37, 54, 117, 153, 162, 232, 290, 772, 775, 816, 855], "arrow": [37, 38, 43, 100, 114, 115, 118, 120, 129, 195, 225, 226, 243, 245, 249, 290, 855, 1185, 1191, 1210], "ipc": [37, 38, 43, 118, 119, 120, 129, 132, 290, 762, 855], "binari": [37, 114, 290, 342, 343, 344, 345, 346, 608, 860, 902, 903, 905, 906, 1135], "feather": [37, 118, 129, 290, 762], "access": [37, 48, 49, 50, 51, 118, 124, 126, 128, 129, 131, 153, 195, 224, 225, 238, 290, 614, 648, 773, 779, 812, 821, 830, 833, 855, 1141, 1237], "lz4": [37, 38, 41, 43, 45, 290, 855], "zstd": [37, 38, 41, 43, 45, 290, 855], "intern": [37, 114, 133, 195, 290, 432, 750, 1234], "might": [37, 112, 113, 126, 148, 249, 290, 511, 662, 750, 820, 855], "implement": [37, 41, 101, 114, 153, 184, 201, 276, 290, 293, 441, 511, 532, 533, 535, 537, 539, 540, 648, 712, 750, 843, 1004, 1072, 1114, 1116, 1210, 1214], "consid": [37, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 112, 113, 114, 124, 126, 131, 132, 135, 136, 137, 138, 155, 166, 168, 194, 201, 207, 225, 238, 248, 253, 254, 256, 258, 259, 290, 348, 353, 363, 364, 397, 432, 443, 510, 511, 517, 531, 532, 535, 537, 539, 540, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 659, 686, 700, 726, 727, 746, 750, 766, 771, 772, 778, 790, 797, 802, 821, 825, 826, 828, 843, 855, 860, 910, 912, 917, 927, 928, 964, 984, 1006, 1072, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1116, 1189, 1194, 1210], "unstabl": [37, 42, 43, 44, 45, 53, 54, 63, 65, 114, 124, 131, 132, 238, 248, 253, 258, 259, 290, 363, 364, 397, 443, 511, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 726, 727, 750, 771, 772, 821, 828, 855, 912, 927, 928, 964, 1006, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1189, 1194, 1210], "break": [37, 42, 43, 44, 45, 53, 54, 63, 65, 124, 131, 132, 238, 248, 253, 258, 259, 290, 363, 364, 397, 443, 511, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 726, 727, 750, 771, 772, 821, 828, 855, 912, 927, 928, 964, 1006, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1189, 1194, 1210], "batch": [38, 53, 54, 109, 113, 114, 120, 130, 132, 225, 253, 290, 771, 772, 798, 855], "iobas": [39, 40, 121, 122, 163, 231, 290, 366, 523, 526, 750, 776, 815, 855], "serial": [39, 40, 163, 290, 366, 526, 750, 776, 855], "write_ndjson": [39, 290], "newlin": [40, 122, 130, 290], "delimit": [40, 42, 122, 130, 216, 246, 290, 604, 855, 1131, 1186, 1210], "parquetcompress": [41, 290], "compression_level": [41, 45, 290, 855], "statist": [41, 45, 112, 113, 124, 131, 162, 290, 420, 421, 460, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 598, 750, 775, 855, 929, 988, 989, 1025, 1107, 1126, 1210], "row_group_s": [41, 45, 290, 855], "data_page_s": [41, 290], "use_pyarrow": [41, 45, 112, 118, 120, 124, 249, 290, 855, 1191, 1210], "pyarrow_opt": [41, 116, 124, 127, 290], "parquet": [41, 45, 124, 125, 131, 290, 762, 855], "gzip": [41, 45, 290, 855], "lzo": [41, 45, 290, 855], "brotli": [41, 45, 290, 855], "choos": [41, 43, 45, 183, 216, 290, 789, 855], "good": [41, 43, 45, 195, 290, 855, 1229], "fast": [41, 43, 45, 145, 147, 290, 425, 591, 750, 855, 859, 993, 1117, 1210, 1237], "decompress": [41, 43, 45, 290, 855], "backward": [41, 45, 173, 198, 290, 341, 371, 391, 427, 750, 784, 794, 855, 934, 958, 995, 1210], "guarante": [41, 45, 112, 113, 155, 162, 184, 254, 256, 290, 347, 348, 441, 658, 659, 750, 766, 775, 782, 825, 826, 855, 907, 1003, 1004, 1195, 1210], "deal": [41, 45, 195, 290, 301, 303, 396, 559, 637, 640, 668, 669, 670, 671, 693, 750, 855, 864, 865, 963, 1092, 1164, 1167, 1210], "older": [41, 45, 290, 855], "reader": [41, 45, 109, 112, 113, 117, 118, 120, 124, 290, 855], "higher": [41, 45, 162, 218, 282, 290, 557, 578, 579, 723, 750, 775, 808, 849, 855, 929, 1091, 1106, 1210], "mean": [41, 45, 112, 113, 118, 126, 162, 173, 182, 183, 198, 205, 216, 223, 260, 269, 290, 393, 397, 410, 424, 427, 432, 568, 571, 572, 573, 575, 577, 579, 582, 584, 586, 598, 604, 612, 691, 692, 694, 695, 696, 716, 737, 738, 740, 750, 775, 784, 788, 789, 794, 798, 811, 836, 855, 929, 960, 964, 977, 991, 995, 1003, 1103, 1126, 1131, 1139, 1210, 1225, 1226], "smaller": [41, 45, 169, 290, 782, 855, 985, 1210], "disk": [41, 42, 43, 44, 45, 118, 290, 818, 855], "22": [41, 45, 134, 142, 290, 379, 394, 397, 410, 412, 413, 569, 571, 573, 575, 577, 579, 582, 584, 586, 637, 693, 750, 855, 860, 964, 977, 980, 1101, 1164, 1210, 1231, 1237], "behavior": [41, 45, 166, 197, 290, 325, 434, 477, 479, 611, 699, 708, 750, 778, 793, 855, 886, 1040, 1042, 1138], "disabl": [41, 45, 46, 84, 85, 143, 195, 290, 771, 855], "combin": [41, 45, 53, 54, 55, 174, 183, 184, 198, 223, 260, 290, 302, 315, 410, 419, 432, 548, 563, 568, 632, 633, 634, 691, 692, 694, 695, 737, 738, 740, 750, 771, 772, 780, 782, 789, 794, 807, 811, 818, 855, 964, 977, 987, 1096, 1159, 1160, 1161, 1210, 1224, 1235], "minimum": [41, 45, 140, 141, 142, 144, 146, 176, 209, 210, 290, 418, 420, 421, 527, 542, 552, 559, 718, 719, 750, 804, 855, 954, 986, 988, 989, 1082, 1088, 1092, 1210, 1225, 1237], "distinct_count": [41, 45, 290, 855], "uniqu": [41, 45, 47, 139, 140, 141, 144, 146, 154, 192, 197, 212, 216, 226, 281, 290, 305, 316, 331, 364, 459, 488, 531, 556, 637, 639, 640, 644, 662, 664, 672, 720, 750, 765, 793, 848, 855, 859, 877, 892, 928, 1023, 1051, 1079, 1090, 1164, 1166, 1167, 1171, 1197, 1199, 1210, 1226], "null_count": [41, 45, 162, 166, 290, 363, 750, 775, 855, 927, 929, 1210], "512": [41, 114, 195, 290, 554, 750, 1086, 1210], "page": [41, 45, 118, 124, 129, 131, 290, 750, 762, 855, 1210, 1233], "At": [41, 290], "moment": [41, 160, 290, 460, 598, 750, 1025, 1126, 1210], "write_t": [41, 290], "partition_col": [41, 115, 290], "write_to_dataset": [41, 290], "spark": [41, 290], "partit": [41, 115, 116, 124, 127, 131, 132, 196, 214, 290, 549, 750], "we": [41, 110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 162, 163, 183, 198, 223, 260, 290, 366, 393, 397, 410, 443, 474, 502, 510, 511, 568, 571, 573, 575, 577, 579, 582, 584, 586, 614, 642, 690, 691, 692, 693, 694, 695, 710, 737, 738, 740, 750, 775, 776, 789, 794, 798, 811, 855, 960, 964, 977, 1006, 1037, 1072, 1141, 1169, 1210, 1220], "use_pyarrow_write_to_dataset": [41, 290], "first": [41, 47, 112, 113, 117, 118, 120, 124, 126, 135, 136, 137, 138, 181, 183, 185, 198, 200, 201, 211, 215, 216, 223, 242, 246, 247, 255, 256, 260, 267, 273, 290, 314, 316, 325, 363, 367, 391, 393, 397, 413, 432, 442, 451, 464, 472, 474, 479, 480, 502, 510, 511, 521, 553, 554, 568, 590, 601, 605, 611, 612, 615, 616, 617, 618, 623, 624, 638, 679, 686, 700, 704, 740, 750, 771, 789, 790, 794, 797, 806, 811, 826, 833, 835, 840, 855, 860, 875, 886, 927, 929, 930, 958, 960, 964, 980, 1005, 1014, 1027, 1035, 1037, 1042, 1043, 1065, 1072, 1115, 1128, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1150, 1151, 1165, 1182, 1186, 1188, 1191, 1210, 1227, 1228, 1230, 1237], "watermark": [41, 290], "partitioned_object": [41, 290], "maintain_ord": [42, 43, 44, 45, 182, 214, 216, 237, 256, 260, 270, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 299, 339, 348, 435, 438, 503, 511, 601, 659, 661, 676, 750, 772, 780, 782, 788, 807, 818, 820, 826, 837, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 900, 1066, 1196, 1210], "type_coercion": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 807, 818, 855], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 798, 807, 818, 855], "projection_pushdown": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 798, 807, 818, 855], "simplify_express": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 807, 818, 855], "slice_pushdown": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 798, 807, 818, 855], "no_optim": [42, 43, 44, 45, 53, 54, 771, 772, 782, 798, 807, 855], "evalu": [42, 43, 44, 45, 172, 174, 198, 290, 302, 315, 317, 318, 363, 428, 445, 465, 466, 502, 548, 668, 670, 673, 677, 691, 692, 694, 695, 697, 706, 707, 722, 725, 732, 737, 738, 740, 741, 750, 771, 785, 791, 793, 794, 855, 876, 878, 879, 927, 996, 1028, 1029, 1201, 1210, 1227], "queri": [42, 43, 44, 45, 53, 54, 114, 115, 118, 126, 129, 130, 131, 171, 199, 215, 238, 290, 510, 511, 618, 729, 750, 771, 772, 780, 782, 790, 797, 807, 818, 821, 834, 835, 843, 855, 992, 1072, 1145, 1210, 1218, 1220, 1224, 1234, 1235, 1236], "ram": [42, 43, 44, 45, 855], "maintain": [42, 43, 44, 45, 237, 290, 339, 503, 590, 601, 661, 676, 750, 775, 820, 855, 900, 1066, 1115, 1196, 1210], "slightli": [42, 43, 44, 45, 432, 750, 855, 1231], "faster": [42, 43, 44, 45, 114, 117, 171, 249, 258, 290, 511, 662, 750, 855, 992, 1072, 1210], "coercion": [42, 43, 44, 45, 53, 54, 562, 750, 771, 772, 780, 782, 807, 818, 855], "optim": [42, 43, 44, 45, 53, 54, 124, 126, 129, 130, 131, 195, 199, 215, 219, 225, 256, 290, 767, 771, 772, 780, 782, 798, 807, 818, 826, 834, 835, 843, 855, 913, 1114, 1210], "pushdown": [42, 43, 44, 45, 53, 54, 771, 772, 780, 782, 798, 807, 809, 818, 834, 835, 855, 1114, 1116, 1210], "project": [42, 43, 44, 45, 53, 54, 126, 128, 129, 130, 131, 600, 601, 750, 771, 772, 780, 782, 798, 807, 809, 815, 818, 855], "run": [42, 43, 44, 45, 53, 54, 62, 114, 142, 145, 146, 147, 182, 199, 201, 216, 230, 256, 265, 276, 290, 363, 474, 510, 511, 566, 567, 620, 728, 750, 771, 772, 780, 782, 788, 798, 802, 807, 814, 818, 826, 832, 855, 860, 927, 1037, 1072, 1099, 1100, 1147, 1210, 1234, 1237], "slice": [42, 43, 44, 45, 48, 53, 54, 169, 185, 196, 242, 290, 480, 500, 511, 520, 522, 569, 570, 572, 574, 576, 578, 581, 583, 585, 616, 638, 750, 771, 772, 780, 782, 798, 807, 818, 855, 859, 985, 1005, 1043, 1063, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1143, 1165, 1182, 1210, 1230], "off": [42, 43, 44, 45, 53, 54, 112, 113, 126, 371, 678, 771, 772, 780, 782, 798, 807, 855, 934], "certain": [42, 43, 44, 45, 54, 116, 127, 188, 260, 290, 633, 634, 771, 772, 807, 855, 1210], "lf": [42, 43, 44, 45, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 838, 842, 855, 1225, 1234, 1237], "scan_csv": [42, 43, 44, 45, 112, 113, 855], "my_larger_than_ram_fil": [42, 43, 44, 45, 855], "ndjson": [44, 855], "data_pagesize_limit": [45, 855], "reduc": [45, 112, 113, 124, 126, 129, 130, 131, 225, 277, 278, 280, 283, 290, 593, 687, 700, 750, 844, 845, 847, 850, 855, 1074, 1089, 1120, 1181, 1210], "pressur": [45, 112, 113, 124, 126, 130, 131, 593, 750, 855, 1120, 1210], "speed": [45, 232, 290, 511, 750, 816, 855, 1237], "context": [46, 84, 85, 148, 212, 238, 290, 299, 428, 474, 510, 511, 520, 600, 601, 664, 683, 685, 699, 702, 708, 709, 712, 721, 725, 728, 749, 750, 761, 762, 821, 833, 855, 1037, 1199, 1210, 1223, 1234, 1236], "manag": [46, 84, 85, 761, 762, 1223, 1234], "global": [46, 84, 85, 117, 133, 142, 150, 238, 290, 563, 729, 750, 821, 855, 910, 911, 1096, 1210, 1220, 1234], "cach": [46, 53, 54, 84, 85, 118, 126, 129, 131, 135, 136, 137, 138, 150, 563, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 637, 639, 640, 644, 750, 761, 771, 772, 780, 782, 807, 818, 855, 910, 1096, 1164, 1166, 1167, 1171, 1210], "under": [46, 48, 49, 50, 51, 84, 85, 238, 290, 742, 743, 745, 746, 751, 752, 755, 757, 758, 759, 821, 855, 1202, 1204, 1206, 1211, 1215, 1216, 1217], "physic": [46, 59, 85, 112, 113, 198, 290, 657, 750, 767, 793, 794, 855, 911, 1193, 1210], "equal": [46, 85, 112, 113, 114, 126, 135, 136, 137, 138, 183, 198, 208, 237, 290, 364, 410, 416, 417, 419, 437, 462, 502, 544, 556, 562, 569, 570, 572, 574, 576, 578, 581, 583, 585, 601, 621, 622, 647, 676, 726, 727, 740, 746, 750, 789, 794, 803, 820, 855, 928, 964, 987, 1065, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1148, 1149, 1174, 1210, 1227, 1237], "concaten": [46, 55, 84, 85, 176, 215, 290, 553, 604, 680, 681, 750, 806, 855, 915, 1078, 1131, 1210, 1230], "join": [46, 47, 53, 54, 55, 85, 174, 198, 259, 290, 428, 446, 549, 729, 750, 771, 772, 780, 782, 785, 794, 807, 818, 828, 833, 855, 1220, 1226, 1233], "introduc": [46, 85, 637, 639, 640, 1164, 1166, 1167], "overhead": [46, 85, 126, 129, 130, 131], "amount": [46, 64, 85, 511, 696, 750, 1225], "depend": [46, 52, 85, 114, 134, 319, 320, 467, 468, 511, 520, 556, 559, 696, 699, 702, 708, 750, 880, 881, 1030, 1031, 1090, 1092, 1210, 1237], "categori": [46, 65, 85, 246, 290, 350, 364, 443, 556, 750, 909, 928, 1006, 1090, 1186, 1210], "nest": [46, 107, 143, 144, 169, 290, 762, 985, 1210, 1234, 1237], "clear": [46, 84, 158, 290, 770, 855, 918, 1210], "outermost": 46, "exit": [46, 84, 151, 1223, 1234], "construct": [46, 84, 85, 100, 102, 103, 104, 105, 106, 107, 114, 290, 434, 722, 725, 741, 746, 750, 776, 855, 910, 1210, 1223], "s1": [46, 84, 85, 137, 138, 176, 290, 899, 984, 1001, 1024, 1032, 1065, 1093, 1201, 1210], "color": [46, 84, 85, 276, 342, 343, 344, 345, 346, 608, 664, 750, 843, 902, 903, 904, 905, 906, 1135, 1199, 1210, 1230], "red": [46, 84, 85, 276, 664, 750, 843, 1199, 1210], "green": [46, 84, 85, 276, 664, 750, 843, 1199, 1210], "blue": [46, 84, 85, 342, 343, 344, 345, 346, 664, 750, 1199, 1210], "concat": [46, 84, 85, 88, 113, 198, 290, 915, 1001, 1078, 1093, 1210, 1228], "decor": [46, 48, 49, 50, 51, 142, 146, 201, 290, 511, 750, 761, 762, 1072, 1210], "dure": [46, 112, 113, 126, 151, 171, 290, 992, 1210], "afterward": [46, 740], "construct_categor": 46, "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 174, 215, 290, 314, 553, 676, 701, 750, 785, 806, 855, 859, 1072, 1210, 1221], "frametyp": [47, 1234], "joinstrategi": [47, 197, 290, 793, 855], "descend": [47, 232, 237, 290, 314, 334, 497, 559, 591, 600, 601, 664, 676, 750, 816, 820, 855, 875, 895, 1022, 1060, 1092, 1117, 1128, 1199, 1210], "common": [47, 53, 54, 55, 112, 113, 126, 259, 290, 533, 756, 771, 772, 780, 782, 807, 818, 828, 855], "fill": [47, 55, 157, 172, 173, 234, 258, 290, 341, 359, 362, 426, 427, 433, 446, 447, 570, 572, 574, 576, 578, 581, 583, 585, 592, 701, 722, 725, 741, 750, 783, 784, 817, 833, 855, 994, 995, 1008, 1009, 1083, 1102, 1103, 1105, 1108, 1109, 1110, 1119, 1210], "sort": [47, 48, 155, 183, 198, 208, 215, 216, 223, 232, 254, 260, 273, 284, 290, 314, 347, 348, 419, 428, 511, 549, 568, 591, 601, 658, 659, 664, 666, 676, 712, 750, 766, 780, 789, 794, 803, 806, 807, 811, 816, 818, 825, 840, 851, 855, 860, 875, 907, 987, 1022, 1117, 1195, 1196, 1199, 1210, 1224, 1235, 1237], "origin": [47, 112, 113, 126, 166, 174, 256, 290, 369, 370, 396, 397, 410, 428, 473, 511, 532, 549, 561, 562, 563, 564, 566, 607, 612, 618, 674, 675, 750, 778, 785, 826, 855, 932, 933, 963, 964, 977, 996, 1036, 1096, 1097, 1099, 1134, 1139, 1145, 1210], "In": [47, 54, 114, 116, 127, 128, 131, 142, 146, 151, 169, 171, 183, 198, 201, 212, 223, 249, 290, 510, 511, 568, 750, 772, 789, 811, 855, 985, 992, 1093, 1210], "duplic": [47, 88, 190, 197, 198, 256, 259, 290, 300, 449, 532, 556, 750, 793, 794, 826, 828, 855, 1011, 1090, 1210, 1235], "outer": [47, 55, 259, 290, 828, 855], "suitabl": [47, 55, 114, 140, 201, 290, 511, 590, 750, 1072, 1115, 1210], "get": [47, 54, 119, 125, 132, 155, 159, 167, 175, 178, 180, 183, 185, 186, 190, 192, 193, 200, 203, 210, 211, 216, 223, 224, 228, 233, 236, 242, 250, 254, 263, 273, 284, 290, 299, 312, 313, 314, 316, 324, 327, 339, 348, 350, 359, 360, 361, 362, 371, 381, 429, 435, 442, 459, 461, 464, 476, 482, 503, 512, 513, 514, 520, 522, 527, 541, 542, 551, 552, 557, 567, 568, 599, 603, 611, 653, 654, 658, 659, 661, 665, 676, 678, 699, 704, 708, 712, 713, 714, 715, 717, 718, 719, 721, 731, 735, 739, 750, 766, 771, 772, 773, 779, 786, 789, 790, 795, 797, 811, 812, 819, 824, 825, 830, 840, 851, 855, 859, 873, 874, 875, 876, 877, 885, 888, 900, 909, 915, 923, 924, 925, 926, 934, 944, 982, 997, 1001, 1005, 1010, 1011, 1023, 1027, 1039, 1045, 1066, 1073, 1075, 1076, 1078, 1080, 1081, 1082, 1087, 1088, 1091, 1100, 1127, 1130, 1138, 1182, 1186, 1192, 1196, 1200, 1210], "speedup": [47, 195, 201, 290, 511, 750, 1072, 1210], "receiv": [47, 114, 126, 201, 215, 276, 290, 511, 553, 750, 806, 855, 1237], "now": [47, 223, 249, 290, 811, 855, 1191, 1210], "One": [47, 162, 212, 216, 248, 253, 290, 302, 548, 672, 683, 699, 705, 708, 715, 717, 720, 721, 730, 750, 775, 855, 860, 929, 1210], "whose": [47, 198, 216, 290, 422, 698, 750, 794, 855, 860], "post": 47, "constrain": [47, 166, 290, 778, 855, 860], "newli": 47, "boolean": [47, 142, 155, 174, 176, 237, 254, 290, 301, 302, 303, 317, 318, 321, 342, 345, 346, 348, 383, 428, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 465, 466, 470, 546, 548, 551, 552, 601, 617, 659, 666, 667, 676, 677, 732, 740, 750, 766, 785, 820, 825, 855, 860, 864, 865, 876, 878, 879, 882, 902, 946, 996, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1033, 1084, 1087, 1088, 1116, 1132, 1201, 1210, 1227], "know": [47, 114, 216, 290, 502, 510, 750], "df1": [47, 55, 135, 136, 168, 171, 208, 238, 262, 290, 803, 855, 1220, 1222, 1223, 1224, 1235], "2022": [47, 156, 162, 181, 290, 375, 397, 410, 637, 691, 692, 694, 695, 696, 702, 768, 775, 855, 860, 938, 947, 964, 977, 1164], "df2": [47, 55, 135, 136, 168, 171, 262, 290, 1220, 1222, 1223, 1224, 1235], "df3": [47, 290], "set_tbl_format": 47, "09": [47, 112, 162, 223, 290, 371, 375, 390, 391, 568, 641, 690, 691, 693, 738, 750, 775, 811, 855, 860, 934, 1168], "02": [47, 156, 162, 181, 183, 223, 260, 290, 371, 373, 375, 381, 390, 391, 393, 396, 401, 404, 407, 409, 413, 568, 571, 573, 575, 577, 579, 582, 584, 586, 587, 637, 639, 640, 644, 678, 690, 691, 692, 693, 694, 695, 696, 750, 768, 775, 789, 811, 855, 860, 899, 936, 938, 940, 941, 944, 945, 950, 951, 955, 957, 958, 959, 963, 964, 967, 968, 971, 974, 976, 977, 1065, 1164, 1166, 1167, 1171, 1231], "03": [47, 107, 112, 156, 183, 198, 223, 260, 290, 373, 375, 376, 381, 390, 391, 393, 396, 397, 399, 401, 402, 403, 404, 407, 409, 410, 413, 419, 432, 568, 571, 573, 575, 577, 579, 582, 584, 586, 639, 644, 690, 691, 692, 693, 694, 695, 696, 750, 768, 789, 811, 855, 860, 936, 938, 939, 944, 945, 950, 951, 957, 958, 959, 963, 964, 966, 968, 969, 970, 971, 974, 976, 1166, 1171], "af1": 47, "af2": 47, "af3": 47, "keep": [47, 112, 113, 126, 256, 259, 260, 290, 434, 510, 525, 533, 563, 679, 750, 826, 828, 855, 1096, 1210, 1236], "easili": [47, 229, 253, 264, 269, 290, 732, 813, 831, 836, 855], "dot": [47, 750, 818, 855, 1210], "product": [47, 160, 197, 290, 361, 368, 750, 782, 793, 855, 925, 931, 1210], "fill_nul": [47, 172, 290, 426, 750, 783, 833, 855, 994, 1210], "sum_horizont": [47, 290, 733], "167": 47, "47": [47, 162, 290, 584, 750, 775, 855, 860], "callabl": [48, 49, 50, 51, 126, 176, 201, 215, 220, 276, 290, 338, 502, 510, 511, 533, 534, 553, 569, 686, 687, 700, 711, 712, 724, 750, 798, 806, 809, 843, 855, 899, 1065, 1072, 1101, 1210], "by_first_letter_of_column_nam": 48, "f": [48, 113, 114, 181, 196, 243, 249, 255, 258, 290, 298, 338, 502, 593, 611, 637, 640, 680, 750, 860, 899, 1065, 1138, 1164, 1167, 1226], "fromkei": [48, 50], "by_first_letter_of_column_valu": 48, "starts_with": [48, 342, 345, 517, 605, 610, 729, 821, 855, 860, 1137, 1228], "to_seri": [48, 178, 290, 637, 677, 725, 1164], "xy": [48, 50], "yz": [48, 50], "b1": [48, 50], "b2": [48, 50], "orient": [48, 50, 104, 106, 290, 855], "pow_n": 49, "powersofn": 49, "next": [49, 183, 198, 223, 260, 290, 341, 371, 393, 397, 410, 559, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 934, 960, 964, 977, 1092, 1210], "p": [49, 215, 290, 553, 732, 750, 806, 855, 860, 1142, 1143, 1221], "ceil": [49, 750, 1210, 1228], "previou": [49, 151, 371, 532, 533, 535, 537, 539, 540, 550, 650, 750, 934, 1086, 1210], "floor": [49, 432, 750, 1210, 1228], "nearest": [49, 162, 198, 218, 282, 290, 352, 431, 446, 557, 578, 579, 723, 750, 775, 794, 808, 849, 855, 914, 929, 998, 1008, 1091, 1106, 1210, 1229], "24": [49, 134, 183, 198, 201, 223, 238, 260, 290, 361, 363, 379, 393, 394, 397, 404, 410, 412, 530, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 927, 960, 964, 971, 977, 1024, 1210, 1230, 1236], "001": [49, 647, 696, 972, 973, 975, 1174], "next_pow2": 49, "prev_pow2": 49, "nearest_pow2": 49, "32": [49, 61, 66, 69, 79, 193, 198, 223, 290, 530, 568, 593, 750, 811, 855, 931, 961, 1086, 1106, 1210, 1225, 1230], "128": [49, 63, 1086, 1210], "split_by_column_dtyp": 50, "collect": [50, 53, 54, 126, 127, 128, 132, 142, 143, 146, 166, 199, 216, 238, 243, 256, 257, 290, 422, 452, 511, 680, 698, 702, 729, 732, 750, 765, 766, 768, 769, 772, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 860, 1015, 1210, 1219, 1220, 1223, 1224, 1234, 1235, 1237], "collect_al": [50, 54, 771, 772, 855], "31": [51, 162, 163, 231, 238, 290, 374, 375, 379, 386, 390, 393, 403, 611, 637, 690, 693, 702, 710, 729, 775, 855, 860, 935, 937, 938, 942, 952, 957, 970, 1138, 1164, 1231, 1237], "42": [51, 162, 184, 208, 223, 290, 568, 750, 775, 803, 811, 855, 1004, 1210, 1224, 1236], "961": 51, "1764": 51, "4160": 51, "detail": [52, 101, 114, 115, 135, 137, 153, 183, 290, 789, 855, 1234, 1237], "build": [52, 101, 860, 1237], "compil": [52, 319, 320, 467, 468, 880, 881, 1030, 1031], "host": [52, 112, 118, 120, 129, 131], "git": 52, "flag": [52, 139, 249, 290, 591, 605, 612, 613, 615, 623, 624, 750, 780, 798, 855, 860, 1117, 1132, 1139, 1140, 1142, 1150, 1151, 1191, 1210, 1230], "lazy_fram": [53, 54], "iter": [53, 54, 55, 65, 100, 114, 145, 147, 155, 164, 174, 182, 183, 194, 195, 196, 223, 224, 225, 226, 229, 230, 237, 254, 255, 264, 265, 268, 269, 290, 348, 363, 371, 428, 549, 601, 651, 659, 669, 671, 676, 678, 679, 680, 681, 689, 714, 716, 719, 728, 732, 734, 740, 746, 750, 766, 777, 785, 788, 789, 811, 813, 814, 820, 825, 831, 832, 836, 855, 859, 927, 934, 1114, 1210, 1237], "comm_subplan_elim": [53, 54, 771, 772, 780, 782, 807, 818, 855], "comm_subexpr_elim": [53, 54, 771, 772, 780, 782, 807, 818, 855], "cluster_with_column": [53, 54, 771, 772, 780, 782, 807, 818, 855], "comput": [53, 55, 87, 169, 182, 198, 250, 256, 269, 282, 290, 297, 306, 307, 308, 309, 310, 311, 328, 329, 330, 335, 336, 340, 351, 354, 355, 356, 359, 360, 361, 362, 368, 415, 423, 460, 484, 485, 486, 487, 491, 492, 493, 494, 498, 504, 505, 506, 507, 529, 549, 550, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 595, 596, 597, 598, 602, 655, 656, 664, 669, 671, 674, 675, 676, 682, 684, 697, 716, 726, 727, 740, 750, 771, 788, 791, 793, 794, 826, 833, 836, 849, 855, 862, 867, 868, 869, 870, 871, 872, 889, 890, 891, 896, 897, 901, 913, 919, 920, 921, 923, 924, 925, 926, 931, 983, 985, 990, 1025, 1047, 1048, 1049, 1050, 1054, 1055, 1056, 1057, 1061, 1067, 1068, 1069, 1070, 1077, 1086, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1123, 1124, 1125, 1126, 1129, 1183, 1184, 1192, 1199, 1210, 1229, 1232], "graph": [53, 114, 199, 290, 771, 791, 833, 855], "parallel": [53, 55, 109, 115, 124, 131, 183, 198, 199, 215, 230, 265, 290, 363, 474, 664, 740, 750, 762, 789, 793, 794, 814, 832, 843, 855, 927, 1037, 1199, 1210], "threadpool": 53, "Will": [53, 54, 771, 772, 780, 782, 807, 818, 855, 1210], "try": [53, 54, 97, 112, 113, 118, 124, 126, 129, 131, 771, 772, 780, 782, 807, 818, 855], "branch": [53, 54, 771, 772, 780, 782, 807, 818, 855], "subplan": [53, 54, 771, 772, 780, 782, 807, 818, 855], "union": [53, 54, 55, 494, 771, 772, 780, 782, 807, 818, 855, 860, 1057, 1233], "subexpress": [53, 54, 771, 772, 780, 782, 807, 818, 855], "reus": [53, 54, 771, 772, 780, 782, 807, 818, 855], "sequenti": [53, 54, 230, 265, 290, 771, 772, 780, 782, 807, 814, 818, 832, 855], "independ": [53, 54, 139, 142, 146, 253, 290, 771, 772, 780, 782, 807, 818, 855], "explain": [53, 54, 771, 772, 855, 1233], "gevent": [54, 134, 772, 855], "await": [54, 114, 772, 855], "_geventdataframeresult": [54, 772, 855], "asynchron": [54, 114, 772, 855], "them": [54, 100, 102, 103, 104, 106, 114, 115, 121, 122, 123, 124, 126, 130, 131, 170, 171, 183, 198, 208, 223, 253, 260, 290, 326, 419, 448, 481, 541, 542, 549, 568, 680, 691, 692, 694, 695, 737, 738, 750, 772, 781, 789, 794, 803, 811, 855, 860, 887, 987, 992, 1044, 1081, 1082, 1210, 1226, 1234], "schedul": [54, 772, 855], "insid": [54, 772, 855], "almost": [54, 201, 276, 290, 637, 639, 640, 772, 855, 1072, 1164, 1166, 1167, 1210], "instantli": [54, 772, 855], "asyncio": [54, 114, 772, 855], "want": [54, 103, 105, 117, 171, 201, 212, 223, 238, 290, 371, 428, 510, 511, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 606, 619, 625, 678, 686, 700, 722, 725, 741, 750, 772, 790, 797, 821, 855, 860, 934, 992, 1072, 1133, 1146, 1152, 1210, 1223], "releas": [54, 117, 511, 750, 772, 855, 1237], "greenlet": [54, 772, 855], "task": [54, 772, 855], "wrapper": [54, 772, 855], "event": [54, 772, 855], "asyncresult": [54, 772, 855], "timeout": [54, 772, 855], "collect_async": [54, 855], "set_except": [54, 772, 855], "rerais": [54, 772, 855], "polarstyp": 55, "concatmethod": 55, "vertic": [55, 171, 258, 262, 290, 604, 1131], "rechunk": [55, 100, 105, 112, 113, 118, 120, 124, 126, 129, 130, 131, 171, 290, 750, 915, 992, 1001, 1078, 1210], "vertical_relax": 55, "diagon": [55, 255, 290], "diagonal_relax": 55, "vstack": [55, 171, 290], "addition": [55, 224, 290, 860], "coerc": [55, 562, 750], "supertyp": [55, 173, 249, 253, 290, 304, 750, 784, 855, 859, 1210], "mismatch": [55, 95, 122, 130, 135, 137], "find": [55, 179, 290, 590, 605, 606, 750, 1115, 1133, 1210], "miss": [55, 112, 113, 126, 172, 290, 341, 418, 420, 421, 426, 433, 455, 456, 502, 750, 783, 855, 986, 988, 989, 994, 1210], "stack": [55, 187, 262, 290], "length": [55, 56, 72, 123, 126, 140, 144, 181, 183, 223, 236, 290, 293, 363, 397, 410, 496, 502, 521, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 599, 616, 619, 620, 621, 622, 627, 638, 647, 722, 725, 726, 727, 741, 750, 789, 807, 811, 819, 855, 859, 915, 927, 938, 964, 977, 1059, 1065, 1083, 1096, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1127, 1143, 1146, 1147, 1148, 1149, 1154, 1165, 1174, 1210, 1226, 1228], "don": [55, 183, 198, 201, 256, 258, 290, 363, 474, 511, 750, 789, 826, 855, 860, 927, 1037, 1072, 1210], "auto": [55, 100, 102, 103, 104, 106, 121, 122, 124, 130, 131, 255, 290, 855, 1237], "logic": [55, 201, 276, 290, 293, 301, 303, 366, 511, 657, 668, 669, 670, 671, 712, 750, 776, 780, 793, 815, 843, 855, 864, 865, 1072, 1191, 1193, 1210, 1214, 1236], "align_fram": 55, "pattern": [55, 112, 113, 126, 129, 130, 131, 195, 290, 518, 605, 606, 607, 612, 613, 614, 615, 623, 624, 625, 843, 860, 1114, 1116, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1150, 1151, 1152, 1210, 1230], "collis": 55, "need": [55, 107, 112, 113, 115, 183, 223, 226, 235, 290, 502, 568, 593, 641, 696, 722, 725, 741, 750, 789, 811, 855, 1120, 1168, 1210, 1237], "sure": [55, 100, 105, 112, 113, 118, 120, 124, 219, 290, 750, 859], "contigu": [55, 100, 105, 112, 113, 118, 120, 124, 126, 129, 130, 131, 219, 249, 290], "relev": 55, "df_h1": 55, "l1": 55, "l2": 55, "df_h2": 55, "r1": 55, "r2": 55, "r3": 55, "df_d1": 55, "df_d2": 55, "df_a1": 55, "df_a2": 55, "df_a3": 55, "inner": [56, 72, 141, 197, 259, 290, 326, 337, 368, 481, 501, 511, 562, 657, 729, 750, 793, 815, 828, 855, 887, 898, 931, 1044, 1064, 1072, 1193, 1210, 1224], "polarsdatatyp": [56, 72, 112, 113, 126, 139, 140, 141, 142, 143, 146, 156, 201, 248, 253, 290, 349, 422, 510, 511, 563, 617, 698, 710, 711, 712, 722, 725, 741, 746, 750, 768, 855, 860, 908, 1072, 1096, 1144, 1210], "pythondatatyp": [56, 72], "within": [56, 72, 135, 136, 137, 138, 182, 183, 184, 198, 223, 260, 290, 441, 559, 601, 750, 789, 794, 811, 855, 1004, 1210, 1234], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 139, 290, 742, 743, 745, 746, 751, 752, 755, 757, 758, 759, 855, 1202, 1204, 1206, 1210, 1211, 1215, 1216, 1217], "categoricalord": 59, "encod": [59, 65, 75, 112, 113, 126, 246, 290, 343, 434, 566, 608, 649, 750, 903, 1099, 1135, 1186, 1210], "lexic": [59, 860, 912], "calendar": [61, 62, 183, 198, 223, 260, 290, 374, 384, 386, 393, 397, 410, 414, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 937, 947, 952, 960, 964, 977, 981, 987, 1210], "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 561, 605, 750, 1094, 1132, 1210, 1230], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 393, 561, 623, 624, 647, 750, 860, 960, 1094, 1150, 1151, 1174, 1210, 1228], "dai": [61, 62, 77, 183, 196, 198, 223, 260, 290, 371, 390, 391, 393, 394, 397, 399, 402, 403, 410, 412, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 678, 690, 691, 692, 693, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 860, 934, 957, 958, 960, 961, 964, 966, 969, 970, 977, 979, 987, 1210, 1231], "unix": [61, 62, 381, 702, 944], "epoch": [61, 62, 702, 1231], "1970": [61, 62, 132, 1218], "time_unit": [62, 64, 373, 375, 381, 401, 413, 640, 693, 694, 695, 696, 702, 860, 936, 938, 944, 968, 980, 1167], "time_zon": [62, 376, 378, 396, 640, 693, 694, 695, 860, 935, 939, 943, 963, 1167], "timezon": [62, 116, 127, 378, 860, 1231], "m": [62, 64, 197, 290, 372, 373, 375, 380, 381, 399, 401, 402, 413, 612, 637, 639, 640, 644, 693, 694, 695, 696, 702, 793, 855, 860, 935, 936, 938, 943, 944, 966, 968, 969, 980, 1139, 1164, 1166, 1167, 1171, 1221, 1230, 1231], "microsecond": [62, 64, 183, 195, 198, 223, 225, 226, 245, 260, 290, 393, 397, 405, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 693, 694, 695, 696, 736, 737, 738, 750, 789, 794, 807, 811, 855, 860, 960, 964, 972, 977, 987, 1210, 1231], "zone": [62, 142, 143, 146, 372, 376, 396, 419, 640, 693, 694, 695, 750, 860, 935, 939, 963, 987, 1167, 1210], "zoneinfo": [62, 860], "available_timezon": [62, 860], "progress": [63, 65], "expect": [63, 65, 91, 94, 99, 112, 114, 126, 502, 511, 710, 750, 796, 798, 855], "digit": [63, 553, 587, 588, 613, 750, 860, 1111, 1112, 1134, 1140, 1210, 1237], "offset": [64, 112, 113, 118, 120, 124, 126, 129, 130, 131, 177, 183, 223, 236, 266, 267, 290, 371, 372, 380, 390, 391, 393, 397, 410, 436, 478, 496, 568, 599, 627, 750, 787, 789, 811, 819, 834, 835, 855, 934, 935, 943, 957, 958, 960, 964, 977, 1000, 1041, 1059, 1127, 1154, 1210, 1233], "integer_list": 72, "float_list": 72, "wrap": [74, 107, 349, 448, 510, 750, 908, 1210], "arbitrari": [74, 366, 750, 776, 855, 860], "schemadict": [76, 100, 102, 103, 104, 105, 106, 112, 114, 115, 117, 123, 124, 126, 131, 290, 732, 798, 843, 855], "composit": [76, 1237], "either": [76, 142, 193, 197, 198, 199, 214, 223, 224, 248, 249, 290, 419, 510, 554, 556, 563, 568, 637, 668, 676, 732, 750, 793, 794, 796, 811, 855, 859, 860, 987, 1090, 1096, 1164, 1210, 1221, 1237], "map": [76, 102, 103, 112, 113, 114, 115, 118, 119, 124, 125, 126, 129, 142, 156, 175, 195, 201, 220, 224, 225, 226, 228, 244, 290, 300, 397, 410, 510, 511, 532, 534, 535, 537, 539, 540, 563, 664, 711, 750, 768, 809, 812, 855, 860, 929, 964, 977, 1072, 1096, 1199, 1210, 1220, 1221, 1234], "nanosecond": [77, 183, 198, 223, 260, 290, 393, 397, 398, 408, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 960, 964, 965, 975, 977, 987, 1210, 1231], "midnight": 77, "unsign": [78, 79, 80, 81, 561, 750, 860, 1094, 1210], "static": [82, 843], "enable_string_cach": 84, "stringcach": [84, 85, 197, 290, 762, 910, 911], "reliabl": [84, 85], "wai": [84, 85, 100, 102, 103, 104, 106, 121, 122, 130, 182, 196, 215, 237, 269, 290, 549, 553, 601, 612, 683, 746, 750, 788, 806, 820, 836, 843, 855, 1139], "until": [84, 183, 199, 290, 621, 622, 647, 789, 855, 1148, 1149, 1174], "disable_string_cach": 85, "unabl": [88, 117], "hstack": [88, 290], "is_in": [89, 174, 290, 750, 1210], "least": [91, 550, 612, 614, 750, 1086, 1139, 1141, 1210, 1228], "unexpect": [93, 95, 114, 510, 511, 750, 1072, 1210], "caus": [93, 95, 101, 112, 113, 126, 135, 153, 171, 249, 290, 510, 750, 992, 1191, 1210], "panic": 93, "incompat": 97, "arrai": [100, 104, 112, 113, 124, 169, 170, 243, 248, 249, 250, 290, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 359, 360, 361, 362, 469, 484, 485, 486, 487, 489, 498, 499, 501, 504, 506, 510, 564, 570, 572, 574, 576, 578, 581, 583, 585, 591, 697, 729, 750, 781, 855, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 923, 924, 925, 926, 931, 985, 1032, 1047, 1048, 1049, 1050, 1052, 1060, 1061, 1062, 1064, 1067, 1069, 1070, 1097, 1102, 1103, 1105, 1108, 1109, 1110, 1117, 1121, 1185, 1189, 1191, 1192, 1210, 1228, 1233, 1236], "chunkedarrai": [100, 211, 290], "recordbatch": [100, 196, 290, 729, 1220, 1234], "schemadefinit": [100, 102, 103, 104, 106, 121, 122, 130, 290, 855], "schema_overrid": [100, 102, 103, 104, 105, 106, 112, 113, 114, 115, 117, 121, 122, 123, 126, 196, 249, 290, 855, 860], "part": [100, 117, 248, 253, 290, 549, 613, 629, 630, 750, 780, 782, 807, 818, 833, 855, 1140, 1156, 1157, 1231], "closest": [100, 198, 290, 1229], "pair": [100, 102, 103, 104, 106, 121, 122, 130, 220, 290, 809, 855, 1237], "declar": [100, 102, 103, 104, 106, 114, 121, 122, 130, 248, 253, 290, 855, 860, 1218], "sever": [100, 102, 103, 104, 106, 121, 122, 130, 290, 855, 1237], "form": [100, 102, 103, 104, 106, 121, 122, 130, 195, 225, 258, 290, 550, 750, 855, 1086, 1210], "dimens": [100, 102, 104, 106, 121, 122, 130, 290, 564, 750, 855, 1097, 1191, 1210], "supportsinterchang": 101, "allow_copi": [101, 153, 249, 290, 1191, 1210], "interchang": [101, 153], "__dataframe__": 101, "convers": [101, 117, 153, 195, 196, 225, 226, 245, 249, 250, 290, 376, 637, 639, 640, 644, 762, 939, 1003, 1164, 1166, 1167, 1171, 1191, 1192, 1210], "latest": [101, 116, 127, 153, 396, 433, 521, 637, 640, 693, 750, 963, 1164, 1167], "from_panda": 101, "from_arrow": 101, "effici": [101, 114, 117, 194, 196, 290, 510, 750], "through": [101, 114, 746, 860, 1210, 1223, 1234], "pd": [101, 105, 657, 729, 750, 1192, 1193, 1210], "df_pd": 101, "dfi": [101, 153], "strict": [102, 103, 106, 156, 290, 343, 349, 605, 608, 615, 637, 639, 640, 642, 644, 750, 768, 855, 860, 903, 908, 1132, 1135, 1142, 1164, 1166, 1167, 1169, 1171, 1210], "clone": [102, 103, 104, 105, 106, 157, 249, 290, 769, 855, 916, 1210], "dimension": [102, 104, 106, 249, 290, 855, 1210], "exactli": [102, 103, 106, 135, 136, 137, 138, 141, 142, 146, 290, 629, 630, 635, 636, 696, 855, 1121, 1156, 1157, 1162, 1163, 1210], "infer_schema_length": [103, 106, 112, 113, 114, 117, 121, 123, 126, 130, 290, 617, 855, 1144], "NOT": [103, 194, 232, 290, 502, 519, 591, 750, 816, 855, 1234], "typic": [103, 114, 117, 131, 201, 290, 380, 860, 943, 1072, 1210], "clearer": 103, "partial": [103, 112, 126, 290, 855], "scan": [103, 106, 112, 113, 114, 117, 121, 123, 126, 127, 128, 129, 130, 131, 132, 290, 617, 782, 790, 797, 855, 1144], "slow": [103, 106, 112, 113, 114, 117, 121, 123, 126, 130, 290, 363, 511, 569, 617, 750, 843, 855, 927, 1101, 1144, 1210], "present": [103, 142, 452, 633, 634, 750, 782, 818, 855], "np": [104, 174, 249, 290, 435, 590, 750, 785, 855, 999, 1013, 1016, 1018, 1019, 1114, 1115, 1210], "ndarrai": [104, 174, 249, 290, 435, 590, 750, 785, 855, 999, 1114, 1115, 1191, 1210], "numpi": [104, 134, 160, 195, 225, 226, 245, 249, 250, 290, 510, 541, 542, 569, 750, 855, 1013, 1016, 1018, 1019, 1081, 1082, 1101, 1191, 1192, 1210], "slower": [104, 106, 117, 182, 201, 214, 260, 276, 290, 511, 712, 750, 788, 843, 855, 1072, 1210], "columnar": [104, 106, 195, 225, 290], "interpret": [104, 106, 112, 113, 126, 290, 855], "yield": [104, 106, 112, 113, 114, 126, 169, 171, 194, 255, 290, 432, 510, 549, 750, 855, 985, 992, 1210], "conclus": [104, 106, 290, 855], "datetimeindex": 105, "nan_to_nul": [105, 290, 855, 1210], "include_index": 105, "instal": [105, 112, 113, 115, 118, 120, 160, 250, 290, 371, 678, 818, 855, 934, 1192, 1210], "nan": [105, 142, 153, 172, 249, 250, 290, 369, 370, 416, 417, 426, 437, 439, 446, 455, 456, 457, 458, 462, 509, 512, 527, 541, 542, 543, 544, 569, 660, 682, 750, 783, 855, 868, 872, 932, 933, 994, 1018, 1019, 1081, 1082, 1101, 1191, 1192, 1210, 1237], "nameless": 105, "enumer": [105, 112, 113, 126, 196, 290], "regardless": [105, 155, 182, 198, 254, 290, 348, 376, 618, 659, 740, 750, 766, 825, 855, 939, 1145], "pleas": [105, 114, 115, 183, 290, 293, 419, 683, 696, 750, 789, 855, 987, 1210, 1214], "reset_index": [105, 183, 290, 789, 855], "prior": 105, "pd_df": 105, "pd_seri": 105, "its": [107, 134, 169, 249, 290, 375, 397, 410, 419, 566, 601, 740, 750, 773, 779, 830, 855, 911, 938, 964, 977, 985, 987, 1099, 1191, 1210, 1236], "repr": 107, "trim": [107, 1230], "whitespac": [107, 632, 633, 634, 1159, 1160, 1161, 1230], "prompt": 107, "extract": [107, 238, 290, 374, 377, 379, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 553, 613, 614, 617, 618, 627, 629, 750, 937, 940, 941, 942, 945, 947, 951, 952, 953, 955, 956, 959, 961, 962, 965, 967, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 1140, 1141, 1144, 1145, 1154, 1228], "to_init_repr": [107, 290, 1210], "truncat": [107, 112, 113, 126, 181, 183, 195, 225, 226, 245, 290, 789, 807, 855, 1233], "identifi": [107, 114, 207, 214, 256, 268, 290, 802, 826, 855], "compound": [107, 226, 290, 860], "neither": [107, 117, 123, 227, 290, 338, 502, 899, 1065], "source_ac": 107, "source_cha": 107, "ident": [107, 157, 158, 290, 399, 566, 567, 750, 769, 770, 855, 916, 918, 966, 1099, 1100, 1210], "timestamp": [107, 116, 127, 183, 290, 396, 397, 410, 702, 789, 855, 963, 964, 977], "tor_id": 107, "nnel_id": 107, "\u03bc": [107, 156, 183, 195, 223, 225, 226, 245, 260, 290, 372, 373, 375, 376, 377, 378, 380, 382, 385, 387, 388, 390, 391, 392, 393, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 568, 571, 573, 575, 577, 579, 582, 584, 586, 637, 640, 693, 694, 695, 696, 702, 750, 768, 789, 794, 811, 855, 860, 935, 936, 938, 939, 940, 941, 943, 944, 945, 950, 951, 955, 957, 958, 959, 960, 963, 964, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 980, 1164, 1167], "asia": [107, 860, 940, 941, 967], "tokyo": [107, 860], "123456780": 107, "9876543210": 107, "56": [107, 655, 750], "59": [107, 162, 290, 375, 388, 398, 432, 693, 736, 737, 738, 750, 775, 855, 860, 938, 955, 965], "663053": 107, "jst": [107, 860], "803065983": 107, "2055938745": 107, "38": [107, 139, 142], "050545": 107, "source_actor_id": 107, "source_channel_id": 107, "to_list": [107, 223, 290, 1132, 1142, 1210], "uint32": [108, 134, 156, 169, 223, 267, 290, 314, 319, 320, 357, 419, 435, 438, 463, 467, 468, 483, 562, 566, 567, 568, 607, 619, 620, 657, 683, 706, 709, 750, 768, 811, 835, 855, 860, 876, 880, 881, 908, 985, 987, 1030, 1031, 1046, 1099, 1100, 1134, 1146, 1147, 1193, 1194, 1210], "regular": [108, 195, 224, 225, 260, 267, 290, 422, 605, 607, 612, 613, 614, 615, 623, 624, 678, 698, 750, 835, 855, 860, 1132, 1134, 1139, 1140, 1141, 1142, 1150, 1151], "uint64": [108, 184, 223, 267, 290, 319, 320, 419, 441, 467, 468, 561, 568, 750, 811, 835, 855, 860, 880, 881, 987, 1004, 1030, 1031, 1094, 1194, 1210], "bigidx": 108, "over": [109, 112, 113, 114, 116, 117, 126, 142, 143, 155, 171, 194, 195, 196, 201, 224, 225, 226, 238, 254, 255, 268, 276, 290, 347, 348, 363, 366, 419, 427, 510, 511, 520, 522, 523, 524, 525, 533, 534, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 658, 659, 686, 687, 700, 711, 712, 724, 729, 750, 766, 821, 825, 843, 855, 860, 907, 927, 987, 992, 1072, 1102, 1103, 1105, 1109, 1195, 1210], "fetch": [109, 126, 199, 290, 771, 790, 797, 855], "ideal": 109, "read_csv_batch": 109, "tpch": [109, 113], "tables_scale_100": [109, 113], "lineitem": [109, 113, 115], "tbl": [109, 113, 1236], "try_parse_d": [109, 112, 113, 126], "n_row": [110, 112, 113, 118, 120, 124, 126, 129, 130, 131, 196, 290, 782, 855], "handler": [110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 163, 290, 366, 750, 776, 855], "builtin": [110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 163, 290, 366, 750, 776, 855], "instanc": [110, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 142, 146, 151, 156, 171, 176, 290, 521, 686, 700, 746, 768, 798, 834, 835, 855, 992, 1210], "accept": [110, 112, 113, 116, 118, 120, 124, 142, 155, 164, 182, 229, 230, 234, 237, 254, 264, 265, 269, 290, 298, 348, 353, 422, 448, 549, 563, 601, 651, 659, 667, 669, 671, 676, 679, 680, 681, 689, 698, 714, 716, 719, 728, 732, 734, 740, 750, 766, 777, 788, 813, 814, 817, 820, 825, 831, 832, 836, 855, 859, 917, 1010, 1096, 1119, 1210], "stop": [110, 112, 113, 118, 120, 124, 126, 129, 130, 131, 571, 573, 575, 577, 579, 582, 584, 586, 750, 936, 939, 944, 945, 951, 953, 955, 959, 964, 968], "text": [111, 114, 419, 616, 619, 620, 623, 624, 626, 627, 638, 730, 750, 987, 1143, 1146, 1147, 1153, 1154, 1165, 1210, 1223, 1237], "read_csv": [111, 117, 126], "write_clipboard": [111, 290], "has_head": [112, 113, 117, 126], "new_column": [112, 113, 117, 126], "comment_prefix": [112, 113, 126], "skip_row": [112, 113, 126], "missing_utf8_is_empty_str": [112, 113, 126], "ignore_error": [112, 113, 122, 126, 130], "n_thread": [112, 113], "8192": 112, "csvencod": [112, 113, 126], "low_memori": [112, 113, 124, 126, 130, 131], "skip_rows_after_head": [112, 113, 126], "row_index_nam": [112, 113, 118, 120, 124, 126, 129, 130, 131], "row_index_offset": [112, 113, 118, 120, 124, 126, 129, 130, 131], "sample_s": [112, 113], "eol_char": [112, 113, 126], "raise_if_empti": [112, 113, 117, 123, 126], "truncate_ragged_lin": [112, 113, 126], "decimal_comma": [112, 113, 126], "glob": [112, 113, 124, 126, 129, 130, 131], "fsspec": [112, 113, 118, 120, 124, 126, 127, 128, 129, 134], "remot": [112, 113, 118, 120], "autogener": [112, 113, 126], "column_x": [112, 113, 126], "shorter": [112, 113, 126, 502, 706, 707], "remain": [112, 113, 126, 166, 169, 174, 216, 290, 369, 370, 428, 473, 563, 629, 630, 750, 778, 785, 798, 855, 932, 933, 985, 996, 1036, 1096, 1156, 1157, 1210, 1223], "comment": [112, 113, 126], "skip": [112, 113, 117, 124, 126, 131, 198, 258, 290, 1072, 1210, 1224], "escap": [112, 113, 115, 126], "complet": [112, 114, 126, 1235], "wherea": [112, 126, 223, 290, 397, 410, 541, 542, 568, 750, 790, 797, 811, 855, 964, 977, 1081, 1082, 1210], "would": [112, 113, 126, 249, 253, 290, 314, 325, 371, 479, 510, 511, 520, 549, 559, 676, 678, 750, 875, 886, 934, 1042, 1092, 1191, 1210], "prefer": [112, 113, 116, 117, 126, 147, 155, 171, 195, 201, 224, 225, 254, 276, 290, 347, 348, 422, 511, 658, 659, 750, 766, 825, 855, 907, 992, 1072, 1195, 1210, 1237], "treat": [112, 113, 126, 419, 605, 607, 615, 623, 624, 740, 750, 987, 1132, 1134, 1142, 1150, 1151, 1210], "10000": [112, 196, 290], "issu": [112, 113, 114, 117, 126, 290, 361, 362, 653, 750, 925, 926, 1181, 1210], "iso8601": [112, 113, 126], "succe": [112, 113, 126], "cpu": [112, 113, 248, 290, 1189, 1210], "buffer": [112, 113, 114, 169, 195, 290, 985, 1210], "onc": [112, 113, 148, 201, 225, 227, 269, 290, 490, 510, 511, 589, 635, 636, 750, 767, 836, 855, 1053, 1072, 1113, 1162, 1163, 1210, 1221], "modifi": [112, 113, 126, 148, 151, 171, 187, 194, 195, 262, 290, 315, 396, 413, 605, 612, 613, 615, 623, 624, 750, 866, 963, 980, 992, 1132, 1139, 1140, 1142, 1150, 1151, 1170, 1172, 1173, 1210], "upper": [112, 113, 114, 169, 183, 290, 353, 443, 448, 502, 534, 663, 673, 691, 692, 694, 695, 737, 738, 750, 789, 855, 917, 985, 1006, 1010, 1071, 1198, 1210, 1226, 1228], "bound": [112, 113, 169, 183, 290, 325, 353, 448, 477, 479, 502, 508, 663, 673, 691, 692, 694, 695, 737, 738, 750, 789, 855, 886, 917, 985, 1010, 1040, 1042, 1071, 1198, 1210, 1226], "lossi": [112, 113, 126], "decod": [112, 113, 617], "expens": [112, 113, 124, 126, 130, 131, 145, 147, 195, 201, 224, 225, 226, 255, 256, 290, 511, 750, 773, 775, 779, 812, 826, 830, 855, 992, 1072, 1210, 1237], "aggreg": [112, 113, 124, 176, 182, 183, 202, 204, 206, 209, 212, 216, 217, 218, 223, 239, 240, 258, 261, 269, 270, 272, 274, 290, 299, 428, 444, 510, 511, 549, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 668, 669, 670, 671, 686, 687, 688, 689, 700, 705, 713, 714, 716, 718, 719, 724, 733, 734, 750, 789, 798, 799, 800, 801, 804, 805, 808, 811, 822, 823, 829, 836, 837, 839, 841, 855, 859, 1007, 1101, 1102, 1103, 1105, 1108, 1109, 1110, 1210, 1224, 1228, 1233], "parser": 112, "regard": [112, 682], "sens": [112, 118, 120, 129, 208, 260, 290, 549, 750, 803, 855], "particular": [112, 118, 120, 129, 155, 169, 254, 290, 347, 348, 658, 659, 750, 766, 825, 855, 907, 985, 1195, 1210], "usernam": [112, 115, 118, 120, 129], "password": [112, 115, 118, 120, 129], "sampl": [112, 113, 276, 290, 598, 750, 843, 1126, 1210], "estim": [112, 113, 154, 169, 290, 305, 420, 421, 460, 672, 750, 765, 855, 985, 988, 989, 1025, 1210], "alloc": [112, 113, 169, 219, 290, 750, 859, 985, 1210], "encount": [112, 113, 126, 183, 290, 541, 542, 617, 618, 682, 686, 700, 750, 789, 855, 1081, 1082, 1144, 1145, 1210], "window": [112, 113, 126, 183, 223, 290, 363, 418, 420, 421, 511, 523, 549, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 680, 726, 727, 750, 789, 811, 855, 927, 986, 988, 989, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1210], "rn": [112, 113, 126], "r": [112, 113, 126, 290, 553, 607, 611, 612, 613, 614, 623, 624, 750, 860, 1134, 1138, 1139, 1140, 1141, 1150, 1151, 1165, 1221, 1230], "nodataerror": [112, 113, 117, 123, 126], "longer": [112, 113, 126], "period": [112, 113, 126, 183, 223, 290, 397, 410, 418, 420, 421, 550, 568, 691, 692, 694, 695, 737, 738, 750, 789, 811, 855, 964, 977, 986, 988, 989, 1086, 1210], "expand": [112, 124, 126, 131, 424, 516, 518, 562, 750, 859, 860, 991, 1210], "rule": [112, 124, 126, 131, 176, 290, 606, 625, 1133, 1152], "lazili": [112, 113, 126, 127, 128, 129, 130, 131, 772, 855], "incorrectli": [112, 502], "continu": [112, 364, 556, 598, 750, 928, 1090, 1126, 1210], "benchmark": 112, "demonstr": [112, 432, 750, 860], "birthdai": 112, "alic": [112, 1235], "1995": 112, "bob": [112, 208, 290, 803, 855, 1235], "1990": [112, 1218], "charli": [112, 1235], "2002": [112, 383, 393, 946, 960, 981], "08": [112, 135, 136, 137, 138, 162, 198, 223, 238, 290, 371, 375, 390, 391, 397, 568, 637, 694, 696, 750, 775, 811, 855, 860, 934, 964, 977, 1164, 1231], "50000": 113, "batchedcsvread": 113, "upon": 113, "creation": 113, "gather": [113, 177, 290, 314, 436, 478, 676, 750, 787, 855, 875, 1000, 1041, 1210], "done": [113, 132, 151, 154, 156, 198, 290, 304, 305, 549, 750, 765, 768, 794, 855], "next_batch": 113, "big": 113, "interest": [113, 399, 402, 966, 969], "seen_group": 113, "big_fil": 113, "df_current_batch": 113, "partition_df": 113, "partition_bi": [113, 196, 290, 523, 549, 750], "as_dict": [113, 214, 290], "fh": 113, "els": [113, 740], "iter_batch": 114, "execute_opt": [114, 115], "client": 114, "packag": [114, 371, 678, 859, 934], "establish": 114, "async": [114, 772, 855], "aris": 114, "happen": [114, 376, 556, 750, 939, 1090, 1210], "report": 114, "resultset": 114, "manner": 114, "veri": [114, 195, 255, 290, 511, 750, 843, 1229], "poor": 114, "mani": [114, 115, 171, 290, 625, 992, 1152, 1210], "trip": 114, "still": [114, 115], "exact": [114, 140, 142, 146, 198, 235, 290, 305, 432, 611, 635, 636, 637, 639, 640, 660, 750, 1138, 1164, 1166, 1167], "incom": 114, "read_arrow_batches_from_odbc": 114, "read_database_uri": 114, "wide": [114, 181, 207, 258, 290, 802, 855], "snowflak": [114, 115], "variou": [114, 290, 750, 855, 860, 1210], "facil": 114, "initialis": [114, 151, 855], "flight": 114, "flightsql": 114, "flight_sql": 114, "about": [114, 598, 605, 612, 613, 615, 623, 624, 750, 859, 1126, 1132, 1139, 1140, 1142, 1150, 1151, 1210, 1237], "notabl": 114, "dremio": 114, "influxdb": 114, "notic": [114, 290, 855, 1210], "dbapi2": 114, "connectorx": [114, 115, 134], "optimis": [114, 201, 226, 276, 290, 855, 1072, 1116, 1210, 1237], "translat": 114, "conn": 114, "url": [114, 115, 124, 131, 612, 614, 1139, 1141], "render_as_str": 114, "hide_password": 114, "abl": 114, "relat": [114, 151, 623, 624, 860, 1150, 1151, 1224, 1236], "k\u00f9zudb": 114, "cypher": 114, "surrealql": 114, "surrealdb": 114, "test_data": 114, "user_conn": 114, "normalised_scor": 114, "uint8": [114, 156, 247, 248, 249, 258, 290, 361, 362, 563, 653, 667, 750, 768, 855, 860, 925, 926, 1096, 1181, 1194, 1210, 1237], "parameteris": 114, "metric": 114, "alchemy_conn": 114, "qmark": 114, "variad": 114, "1000": [114, 169, 247, 267, 290, 305, 750, 835, 855, 972, 1069, 1188, 1210, 1237], "localhost": 114, "5432": 114, "uid": 114, "usr": 114, "pwd": 114, "max_text_s": 114, "max_binary_s": 114, "do_someth": 114, "kuzu_db_conn": 114, "session": 114, "ext": 114, "create_async_engin": 114, "async_engin": 114, "aiosqlit": 114, "surreal": 114, "surrealhttp": 114, "surreal_query_to_fram": 114, "8000": 114, "rpc": 114, "partition_on": 115, "partition_rang": 115, "partition_num": 115, "dbreadengin": 115, "raw": 115, "warehous": 115, "role": 115, "caller": [115, 208, 290, 502, 798, 803, 843, 855], "respons": [115, 208, 290, 803, 855], "often": [115, 151, 183, 223, 290, 322, 471, 562, 568, 750, 789, 811, 855, 883, 1034, 1223], "come": [115, 183, 290, 371, 390, 391, 460, 502, 678, 750, 789, 854, 855, 934, 957, 958, 1025, 1210], "transfer": 115, "document": [115, 117, 290, 293, 399, 402, 618, 637, 639, 640, 644, 746, 911, 966, 969, 1145, 1164, 1166, 1167, 1171, 1210, 1214], "redshift": 115, "mysql": 115, "mariadb": 115, "clickhous": 115, "oracl": 115, "bigqueri": 115, "github": [115, 290], "sfu": 115, "connector": 115, "destin": 115, "develop": [115, 142, 146], "read_databas": 115, "usual": [115, 253, 290, 372, 935], "urllib": 115, "quote_plu": 115, "word": [115, 623, 624, 633, 634], "3f": [115, 637, 640, 1164, 1167], "20word": 115, "explicitli": [115, 117, 140, 142, 151, 290, 732, 761, 1234], "test_tabl": 115, "compani": 115, "testdb": 115, "public": [115, 290, 750, 762, 855, 1210, 1233], "myrol": 115, "delta_table_opt": [116, 127], "root": [116, 127, 351, 522, 532, 533, 535, 537, 539, 540, 602, 749, 750, 913, 1129, 1210, 1229], "absolut": [116, 127, 128, 135, 136, 137, 138, 297, 418, 420, 421, 750, 862, 986, 988, 989, 1210, 1229], "info": [116, 127, 128, 134, 290, 293, 1210, 1214], "avoid": [116, 142, 146, 225, 290, 300, 750, 773, 779, 812, 830, 855], "year": [116, 127, 183, 198, 223, 238, 260, 290, 371, 383, 384, 393, 394, 397, 410, 411, 568, 571, 573, 575, 577, 579, 582, 584, 586, 678, 690, 691, 692, 693, 694, 695, 737, 738, 750, 789, 794, 811, 855, 860, 934, 946, 947, 960, 961, 964, 977, 978, 1231], "2021": [116, 127, 156, 162, 181, 183, 260, 290, 637, 710, 768, 775, 789, 855, 860, 940, 941, 947, 967, 1164], "travel": [116, 127], "2020": [116, 127, 156, 162, 181, 198, 223, 290, 293, 371, 376, 380, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 419, 568, 637, 639, 640, 678, 750, 768, 775, 811, 855, 860, 934, 939, 943, 963, 966, 969, 970, 971, 972, 973, 974, 975, 976, 987, 1164, 1166, 1167, 1210], "tzinfo": [116, 127], "utc": [116, 127, 372, 376, 378, 380, 396, 637, 640, 860, 935, 939, 943, 963, 1164, 1167], "aw": [116, 124, 126, 127, 131], "googl": [116, 127, 128], "service_account": [116, 127], "service_account_json_absolute_path": [116, 127], "az": [116, 127, 128], "adl": [116, 127, 128], "abf": [116, 127, 128], "azure_storage_account_nam": [116, 127, 128], "azure_storage_account_kei": [116, 127, 128], "without_fil": [116, 127, 128], "track": [116, 127, 128, 201, 290, 502, 1234], "sheet_id": [117, 123], "sheet_nam": [117, 123], "excelspreadsheetengin": 117, "read_opt": 117, "calamin": 117, "fastexcel": [117, 134], "xlsb": 117, "xl": 117, "19": [117, 142, 198, 223, 290, 374, 397, 568, 573, 575, 577, 579, 641, 750, 794, 811, 855, 937, 964, 977, 1168], "openpyxl": [117, 134], "sheetnam": [117, 123], "nor": [117, 123, 227, 290], "xlsx2csv": [117, 134], "refin": 117, "major": [117, 248, 290], "dramat": 117, "modul": [117, 749, 860, 1237], "bind": 117, "significantli": [117, 201, 276, 290, 1072, 1210, 1237], "potenti": [117, 126, 129, 130, 195, 224, 226, 290, 532, 775, 855, 859], "primari": [117, 1237], "constructor": [117, 146], "load_workbook": 117, "excelread": 117, "load_sheet_by_nam": 117, "influenc": [117, 782, 798, 855], "pipelin": [117, 253, 290], "becom": [117, 144], "skip_empty_lin": 117, "correct": [117, 123, 420, 421, 460, 580, 598, 750, 798, 855, 859, 988, 989, 1025, 1107, 1126, 1210], "forc": [117, 198, 201, 249, 276, 290, 502, 793, 794, 843, 855, 1072, 1191, 1210], "best": [117, 201, 276, 290, 511, 750, 1072, 1210], "known": [117, 118, 338, 502, 843, 899, 1065], "ambigu": [117, 396, 397, 410, 637, 640, 693, 963, 964, 977, 1164, 1167], "memory_map": [118, 124, 129], "greatli": [118, 129], "repeat": [118, 129, 560, 562, 722, 741, 750], "o": [118, 129, 347, 348, 363, 611, 658, 659, 750, 907, 927, 1138, 1159, 1195, 1210, 1221], "That": [118, 798, 855], "filenam": 118, "my_fil": 118, "write_ipc": [118, 290], "read_ndjson": 121, "stringio": [121, 122, 163, 290, 366, 434, 523, 750, 776, 815, 855], "With": [121, 193, 234, 290, 333, 495, 592, 750, 817, 855, 894, 1024, 1058, 1119, 1210], "becaus": [122, 130, 169, 183, 199, 201, 258, 276, 290, 432, 474, 750, 789, 843, 855, 985, 1037, 1072, 1210], "openoffic": 123, "od": [123, 762], "parallelstrategi": [124, 131], "use_statist": [124, 131], "hive_partit": [124, 131], "hive_schema": [124, 131], "retri": [124, 126, 129, 131], "row_group": [124, 131], "hive": [124, 131], "prune": [124, 131, 798, 855], "gcp": [124, 126, 128, 131], "stabl": [124, 160, 162, 184, 227, 238, 290, 441, 507, 750, 775, 802, 820, 821, 855, 1004, 1210], "read_tabl": 124, "scan_parquet": [124, 132], "scan_pyarrow_dataset": [124, 131], "with_column_nam": 126, "push": [126, 129, 130, 131, 132], "down": [126, 129, 130, 131, 132, 431, 750, 998, 1210], "therebi": [126, 129, 130], "realloc": [126, 129, 130, 171, 290, 992, 1210], "headerless": 126, "my_long_fil": 126, "thing": [126, 133], "less": [126, 198, 290, 432, 462, 509, 510, 630, 750, 794, 855, 1157, 1237], "breezah": 126, "languag": [126, 183, 198, 223, 260, 290, 393, 397, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977, 987, 1210], "hard": [126, 798, 855], "mydf": 126, "lambda": [126, 176, 201, 215, 216, 220, 276, 290, 338, 418, 419, 420, 421, 502, 510, 511, 533, 534, 686, 687, 700, 711, 712, 724, 750, 798, 806, 809, 843, 855, 899, 986, 987, 988, 989, 1065, 1072, 1210], "lower": [126, 162, 183, 218, 282, 290, 353, 448, 508, 533, 557, 561, 578, 579, 673, 691, 692, 694, 695, 723, 737, 738, 750, 775, 789, 808, 849, 855, 917, 929, 1010, 1071, 1091, 1094, 1106, 1198, 1210, 1226, 1228], "simpli": [126, 686, 700], "idx": [126, 183, 196, 267, 290, 325, 338, 502, 789, 835, 855, 899, 1065, 1142], "uint16": [126, 361, 362, 653, 750, 860, 925, 926, 1181, 1191, 1194, 1210], "u16": [126, 1237], "eu": [127, 128], "central": [127, 128, 460, 598, 750, 1025, 1126, 1210], "iceberg": [128, 762], "pyiceberg": [128, 134], "secret": [128, 131], "adlf": 128, "my": [128, 132, 645, 1172], "oauth": 128, "token": 128, "ya29": 128, "dr": 128, "afm": 128, "py": 128, "impl": 128, "fsspecfileio": 128, "give": [129, 130, 198, 207, 256, 290, 381, 432, 460, 562, 660, 664, 750, 762, 802, 826, 855, 944, 1025, 1199, 1210, 1233], "read_parquet": 131, "east": 131, "allow_pyarrow_filt": 132, "comparison": 132, "dset": 132, "folder": 132, "04": [132, 156, 162, 183, 260, 290, 375, 376, 390, 391, 396, 397, 399, 402, 403, 404, 407, 409, 413, 571, 573, 575, 577, 579, 582, 584, 586, 637, 678, 690, 693, 694, 696, 750, 768, 775, 789, 855, 860, 939, 951, 955, 957, 958, 959, 963, 966, 969, 970, 971, 974, 976, 980, 1164], "seed": [133, 184, 227, 290, 441, 490, 559, 589, 594, 750, 1004, 1053, 1092, 1113, 1122, 1210], "shuffl": [133, 227, 253, 276, 290, 490, 589, 750, 843, 1053, 1113, 1210], "platform": 134, "maco": 134, "arm64": 134, "arm": 134, "64bit": [134, 561, 750, 1094, 1210], "main": [134, 772, 855], "feb": 134, "2024": [134, 371, 377, 378, 382, 385, 387, 388, 392, 398, 400, 678, 690, 693, 696, 860, 934, 1231], "21": [134, 162, 208, 240, 290, 374, 571, 573, 575, 577, 579, 582, 584, 586, 693, 702, 750, 775, 803, 855, 860, 937, 1225], "clang": 134, "1500": [134, 145], "adbc_driver_manag": 134, "cloudpickl": 134, "17": [134, 142, 169, 198, 269, 290, 419, 569, 587, 702, 737, 750, 836, 919, 921, 964, 987, 1101, 1210, 1237], "hvplot": [134, 290, 293, 1210, 1214], "matplotlib": [134, 807, 818, 855], "nest_asyncio": 134, "pydant": 134, "torch": [134, 253, 290, 1194, 1210], "check_row_ord": [135, 136], "check_column_ord": [135, 136], "check_dtyp": [135, 136, 137, 138, 984, 1210], "check_exact": [135, 136, 137, 138], "rtol": [135, 136, 137, 138], "atol": [135, 136, 137, 138], "categorical_as_str": [135, 136, 137, 138], "assert": [135, 136, 137, 138, 142, 146, 223, 290, 762, 860], "assertionerror": [135, 136, 137, 138], "compar": [135, 136, 137, 138, 168, 290, 416, 417, 437, 439, 448, 462, 509, 543, 544, 750, 911, 984, 1210], "toler": [135, 136, 137, 138, 198, 290, 794, 855], "inexact": [135, 136, 137, 138], "share": [135, 136, 137, 138, 169, 290, 985, 1210], "assert_series_equ": [135, 138, 984, 1210, 1237], "assert_frame_not_equ": [135, 138], "pytest": [135, 137], "worthwhil": [135, 137], "shorten": [135, 137], "traceback": [135, 136, 137, 138, 249, 290, 1191, 1210], "tb": [135, 137, 169, 290, 985, 1210], "short": [135, 137], "tend": [135, 137], "unhelpfulli": [135, 137], "recent": [135, 136, 137, 138, 249, 290, 550, 750, 1086, 1191, 1210, 1220, 1234], "assert_frame_equ": [136, 137, 168, 290, 1237], "assert_series_not_equ": [136, 137], "check_nam": [137, 138, 984, 1210], "check_ord": [137, 138], "searchstrategi": [139, 141, 142, 143, 144, 146], "allow_nul": [139, 142, 146, 1237], "null_prob": [139, 142, 146], "percentag": [139, 142, 146, 550, 750, 1086, 1210], "chanc": [139, 142, 146, 1237], "1755e": [139, 142], "575050513": [139, 142], "inf": [139, 142, 146, 311, 364, 443, 450, 453, 556, 660, 750, 872, 921, 928, 1006, 1013, 1016, 1071, 1086, 1090, 1198, 1210, 1232], "min_col": [140, 142], "max_col": [140, 142], "comprehens": 140, "standalon": [140, 860], "itself": [140, 290, 293, 511, 570, 572, 574, 576, 578, 580, 581, 583, 585, 726, 727, 750, 796, 855, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1210, 1214, 1218, 1234], "mincol": 140, "assign": [140, 183, 275, 290, 338, 502, 549, 559, 629, 630, 750, 789, 842, 855, 899, 1065, 1092, 1156, 1157, 1210], "especi": [140, 567, 750, 782, 855, 1100, 1210], "hypothesi": [140, 142, 145, 146, 1237], "test_unique_xyz": 140, "assert_someth": 140, "inner_dtyp": [141, 144], "select_from": [141, 144, 146], "min_siz": [141, 142, 144, 146, 1237], "max_siz": [141, 142, 144, 146, 1237], "anoth": [141, 156, 168, 182, 198, 290, 363, 373, 447, 477, 515, 519, 563, 571, 573, 575, 577, 579, 582, 584, 586, 615, 750, 768, 788, 833, 855, 927, 936, 984, 992, 1009, 1040, 1096, 1142, 1210, 1229, 1230], "randomli": 141, "innermost": [141, 144], "2x": 141, "lst": 141, "11330": 141, "24030": 141, "116": 141, "include_col": 142, "allow_chunk": [142, 146], "allowed_dtyp": [142, 143, 146, 1237], "excluded_dtyp": [142, 143, 146], "allow_time_zon": [142, 143, 146], "describ": [142, 181, 290, 855, 1210], "desir": [142, 338, 413, 502, 899, 980, 1065], "onto": 142, "exclud": [142, 146, 183, 290, 348, 359, 362, 371, 448, 517, 659, 678, 750, 789, 855, 860, 934, 1010, 1210], "pct": 142, "preced": [142, 860], "allow_infin": [142, 146], "disallow": 142, "usag": [142, 146, 235, 290, 860, 1121, 1210], "deploi": [142, 146], "characterist": [142, 146], "concret": [142, 146], "test_df_height": 142, "interact": [142, 146, 162, 290, 775, 855], "col0": [142, 1237], "col1": [142, 216, 290, 855, 1237], "col2": [142, 216, 290, 855, 1237], "1844": 142, "06": [142, 156, 260, 290, 371, 375, 389, 395, 396, 397, 398, 410, 411, 690, 693, 768, 855, 860, 934, 963, 964, 977], "848808": 142, "1436e16": 142, "9914e218": 142, "2068": 142, "412277": 142, "7415e16": 142, "2095": 142, "647961": 142, "15836": 142, "nesting_level": 143, "pick": [143, 740], "prioriti": 143, "complex": [143, 347, 348, 363, 658, 659, 750, 907, 927, 1195, 1210], "fulli": [144, 215, 227, 249, 290], "profil": [145, 147, 771, 855], "balanc": [145, 147, 1237], "set_environ": 145, "polars_hypothesis_profil": [145, 147], "max_data_s": 146, "test_series_len": 146, "zz": [146, 162, 238, 290, 775, 855, 1224, 1230, 1236], "polars_max_thread": 148, "behind": 148, "lock": 148, "reason": [148, 162, 290, 502, 510, 750, 775, 855], "temporarili": [148, 151, 183, 223, 290, 568, 750, 789, 811, 855], "pyspark": 148, "udf": [148, 201, 215, 276, 290, 366, 511, 553, 712, 750, 776, 806, 843, 855, 1072, 1210], "recommend": [148, 162, 195, 215, 290, 767, 775, 855, 860], "thread_pool_s": 149, "easi": 151, "restor": 151, "restore_default": 151, "set_tbl_row": 151, "scope": [151, 761, 860, 1220, 1223, 1234], "lifetim": [151, 761, 1223], "whatev": 151, "were": [151, 563, 746, 750, 1096, 1210], "enter": 151, "advantag": [151, 215, 290], "set_": 151, "set_verbos": 151, "do_various_th": 151, "cleaner": 151, "init": [151, 1218], "breviti": 151, "vein": 151, "durat": [151, 198, 260, 290, 372, 380, 403, 404, 405, 406, 407, 408, 409, 413, 419, 657, 691, 692, 694, 695, 737, 738, 750, 794, 855, 860, 935, 943, 970, 971, 972, 973, 974, 975, 976, 980, 987, 1191, 1193, 1210], "set_ascii_t": 151, "write_ascii_frame_to_stdout": 151, "sy": 151, "stdout": [151, 181, 290, 524], "nan_as_nul": 153, "polarsdatafram": 153, "notimplementederror": 153, "num_row": 153, "get_column": [153, 251, 290], "dtypekind": 153, "approxim": [154, 290, 305, 419, 672, 750, 765, 855, 987, 1210, 1229, 1237], "hyperloglog": [154, 290, 305, 672, 750, 765, 855], "algorithm": [154, 290, 305, 606, 625, 672, 750, 765, 855, 1133, 1152], "cardin": [154, 290, 305, 672, 750, 765, 855], "k": [155, 226, 254, 255, 290, 347, 348, 358, 460, 658, 659, 750, 766, 825, 855, 907, 922, 1025, 1195, 1210], "intoexpr": [155, 182, 183, 223, 229, 230, 234, 237, 254, 264, 265, 269, 290, 304, 322, 342, 345, 346, 348, 371, 419, 425, 443, 447, 448, 471, 491, 492, 493, 494, 549, 563, 571, 573, 575, 577, 579, 582, 584, 586, 590, 592, 601, 606, 625, 628, 629, 630, 635, 636, 651, 659, 669, 671, 676, 679, 680, 681, 682, 684, 686, 689, 693, 700, 714, 716, 719, 725, 728, 732, 734, 750, 766, 788, 789, 811, 813, 814, 817, 820, 825, 831, 832, 836, 855, 859, 883, 902, 905, 906, 934, 987, 993, 1009, 1010, 1034, 1096, 1115, 1119, 1155, 1156, 1157, 1162, 1163, 1210], "revers": [155, 169, 254, 290, 348, 358, 359, 360, 361, 362, 533, 535, 537, 659, 685, 750, 766, 825, 855, 922, 923, 924, 925, 926, 1210, 1226, 1228], "smallest": [155, 254, 290, 347, 348, 659, 750, 766, 825, 855, 907, 1210, 1225, 1227], "wish": [155, 254, 290, 347, 348, 658, 659, 750, 766, 825, 855, 907, 1195, 1210], "bottom": [155, 290, 348, 750, 766, 855], "largest": [155, 254, 290, 348, 658, 659, 750, 766, 825, 855, 1195, 1210], "top_k": [155, 290, 347, 348, 659, 750, 766, 855, 907, 1210], "columnnameorselector": [156, 164, 166, 207, 214, 216, 226, 246, 256, 257, 258, 290, 768, 777, 778, 802, 826, 827, 855], "due": [156, 183, 198, 223, 226, 260, 290, 300, 380, 393, 397, 410, 532, 533, 535, 537, 539, 540, 568, 571, 573, 575, 577, 579, 582, 584, 586, 678, 691, 692, 694, 695, 737, 738, 750, 768, 789, 794, 811, 855, 943, 960, 964, 977], "overflow": [156, 290, 349, 361, 362, 642, 653, 750, 768, 855, 908, 925, 926, 1169, 1181, 1210], "u8": [156, 246, 247, 258, 290, 563, 667, 750, 768, 855, 860, 1096, 1186, 1210, 1237], "tempor": [156, 183, 195, 223, 225, 226, 245, 290, 353, 448, 568, 571, 573, 575, 577, 579, 582, 584, 586, 750, 762, 768, 789, 811, 855, 860, 917, 1010, 1210, 1228, 1233], "to_dict": [156, 290, 768, 855, 860], "as_seri": [156, 244, 290, 768, 855, 860], "greater": [157, 198, 290, 437, 439, 448, 598, 621, 622, 630, 647, 750, 794, 855, 1010, 1126, 1148, 1149, 1157, 1174, 1210], "cheap": [157, 158, 230, 265, 290, 769, 770, 814, 832, 855, 916, 918, 1210], "deepcopi": [157, 290, 769, 855, 916, 1210], "13": [157, 158, 162, 172, 173, 180, 188, 199, 211, 223, 264, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 300, 371, 377, 378, 382, 385, 387, 388, 392, 398, 400, 520, 522, 568, 641, 680, 686, 689, 693, 700, 734, 736, 739, 750, 769, 770, 775, 783, 784, 796, 811, 831, 839, 841, 844, 845, 846, 847, 848, 849, 850, 855, 934, 964, 977, 978, 1072, 1168, 1210], "appl": [159, 187, 197, 220, 221, 244, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 290, 348, 565, 610, 631, 659, 750, 793, 809, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 855, 1137, 1158, 1224, 1230], "banana": [159, 244, 272, 274, 277, 278, 279, 280, 281, 282, 283, 290, 348, 565, 610, 631, 659, 750, 839, 841, 844, 845, 846, 847, 848, 849, 850, 1230], "orang": [159, 271, 272, 274, 275, 277, 278, 280, 282, 283, 290, 348, 659, 750, 838, 839, 841, 842, 844, 845, 847, 849, 850, 1230], "pairwis": [160, 290], "pearson": [160, 290, 460, 598, 682, 750, 1025, 1126, 1210], "correl": [160, 290, 682, 726], "coeffici": [160, 290, 598, 750, 1126, 1210], "corrcoef": [160, 290], "percentil": [162, 290, 775, 855, 929, 1210], "interpol": [162, 218, 282, 290, 427, 447, 514, 557, 578, 579, 723, 750, 775, 808, 849, 855, 929, 1009, 1091, 1106, 1210], "rollinginterpolationmethod": [162, 218, 282, 290, 557, 578, 579, 723, 750, 775, 808, 849, 855, 929, 1091, 1106, 1210], "summari": [162, 290, 775, 855, 929, 1210, 1224], "midpoint": [162, 218, 282, 290, 557, 578, 579, 723, 750, 775, 808, 849, 855, 929, 1091, 1106, 1210], "linear": [162, 189, 218, 282, 290, 446, 447, 469, 514, 557, 578, 579, 680, 681, 723, 750, 775, 792, 808, 849, 855, 929, 1008, 1009, 1032, 1091, 1106, 1210], "deem": [162, 290, 775, 855], "programmat": [162, 290, 775, 855], "versu": [162, 290, 775, 855], "explor": [162, 290, 775, 855], "glimps": [162, 185, 290], "median": [162, 216, 290, 427, 574, 575, 750, 775, 833, 855, 929, 1104, 1210, 1228], "266667": [162, 290, 775, 855], "666667": [162, 189, 261, 278, 290, 418, 715, 750, 775, 792, 829, 845, 855, 986, 1210], "std": [162, 290, 581, 582, 750, 775, 855, 929, 1108, 1210], "101514": [162, 290, 775, 855], "071068": [162, 290, 775, 855], "36": [162, 290, 775, 855], "41": [162, 290, 584, 750, 775, 855, 1225, 1237], "34": [162, 290, 637, 775, 855, 1164], "43": [162, 223, 290, 362, 568, 584, 750, 775, 811, 855], "70": [162, 290, 667, 750, 775, 855, 1025, 1210], "88": [162, 290, 775, 855], "90": [162, 290, 641, 775, 855, 1168, 1232], "49": [162, 290, 775, 855, 860], "33": [162, 208, 290, 587, 750, 775, 803, 855, 1106, 1210], "subset": [166, 212, 256, 290, 778, 826, 855], "preserv": [166, 174, 182, 197, 201, 249, 250, 290, 369, 370, 371, 390, 391, 428, 473, 595, 611, 750, 778, 785, 793, 855, 932, 933, 934, 996, 1036, 1123, 1138, 1192, 1210], "all_horizont": [166, 290, 668, 778, 855], "is_nul": [166, 290, 750, 778, 855, 1210], "null_equ": [168, 290, 984, 1210], "sizeunit": [169, 290, 985, 1210], "heap": [169, 290, 750, 859, 985, 1210], "bitmap": [169, 290, 985, 1210], "therefor": [169, 290, 511, 740, 750, 985, 1210], "structarrai": [169, 290, 985, 1210], "constant": [169, 223, 290, 372, 419, 425, 750, 811, 855, 935, 985, 987, 993, 1210], "unchang": [169, 290, 563, 657, 750, 798, 843, 855, 985, 1096, 1193, 1210], "capac": [169, 235, 290, 985, 1121, 1210], "ffi": [169, 290, 985, 1210], "kb": [169, 290, 985, 1210], "mb": [169, 290, 985, 1210], "gb": [169, 290, 985, 1210], "1_000_000": [169, 290, 985, 1210], "17888890": [169, 290], "0601749420166": [169, 290], "more_column": [170, 257, 290, 422, 698, 750, 781, 827, 855, 860], "long": [170, 207, 258, 290, 781, 802, 855], "letter": [170, 273, 284, 290, 422, 606, 613, 625, 698, 750, 781, 840, 851, 855, 860, 1133, 1140, 1152, 1230], "onlin": [171, 290, 992, 1210], "rerun": [171, 290, 992, 1210], "finish": [171, 290, 992, 1210], "conveni": [171, 253, 290, 866, 992, 1210], "Not": [172, 290, 426, 455, 456, 750, 783, 855, 994, 1210], "fillnullstrategi": [173, 290, 427, 750, 784, 855, 995, 1210], "matches_supertyp": [173, 290, 784, 855], "forward": [173, 198, 234, 290, 333, 371, 390, 427, 433, 495, 592, 750, 784, 794, 817, 855, 894, 934, 957, 995, 1058, 1119, 1210], "consecut": [173, 290, 341, 427, 433, 604, 750, 784, 855, 995, 1131, 1210], "fill_nan": [173, 290, 427, 750, 784, 855, 995, 1210], "intoexprcolumn": [174, 290, 321, 325, 326, 333, 347, 348, 353, 397, 425, 428, 470, 478, 481, 490, 495, 550, 554, 589, 592, 612, 616, 618, 627, 632, 633, 634, 638, 642, 647, 658, 659, 673, 678, 691, 692, 694, 695, 706, 707, 737, 738, 740, 750, 785, 817, 855, 882, 886, 887, 894, 917, 964, 993, 1033, 1041, 1044, 1053, 1058, 1086, 1139, 1143, 1145, 1154, 1159, 1160, 1161, 1165, 1174, 1210], "constraint": [174, 290, 428, 532, 533, 535, 537, 539, 540, 740, 750, 785, 855, 860], "discard": [174, 290, 428, 750, 785, 855, 996, 1210], "behav": [174, 290, 428, 511, 633, 634, 750, 785, 855], "eq": [174, 290, 417, 428, 750, 785, 855, 1210], "implicitli": [174, 290, 428, 740, 750, 785, 855], "reduct": [176, 290], "supercast": [176, 290], "parent": [176, 290], "arithmet": [176, 290], "zip_with": [176, 290, 1210], "foo11": [176, 290], "bar22": [176, 290], "nth": [177, 290, 436, 630, 750, 787, 855, 1000, 1157, 1210], "th": [177, 290, 436, 478, 491, 598, 616, 638, 750, 787, 855, 1000, 1041, 1054, 1126, 1143, 1165, 1210], "retriev": [178, 248, 290, 319, 320, 467, 468, 648, 721, 880, 881, 1030, 1031, 1175, 1189, 1210, 1224], "max_items_per_column": [181, 290], "max_colname_length": [181, 290], "return_as_str": [181, 290, 524], "preview": [181, 290], "few": [181, 290], "exce": [181, 290], "ellipsi": [181, 290], "head": [181, 200, 242, 290, 304, 464, 549, 750, 797, 855, 1027, 1182, 1210], "tail": [181, 185, 290, 304, 598, 750, 855, 1005, 1126, 1210], "usd": [181, 290, 1237], "eur": [181, 290, 1237], "named_bi": [182, 290, 788, 855], "groupbi": [182, 290, 511, 712, 750], "consist": [182, 214, 249, 290, 637, 691, 692, 788, 855, 860, 866, 992, 1164, 1191, 1210], "agg": [182, 183, 216, 223, 290, 299, 348, 428, 430, 435, 438, 510, 511, 523, 549, 600, 601, 659, 666, 712, 750, 771, 772, 780, 782, 788, 789, 807, 811, 818, 855, 860], "Or": [182, 183, 198, 223, 237, 260, 269, 290, 419, 549, 568, 601, 691, 692, 694, 695, 737, 738, 740, 750, 788, 789, 794, 811, 820, 836, 855, 987, 1210], "index_column": [183, 223, 290, 568, 750, 789, 811, 855], "timedelta": [183, 198, 223, 260, 290, 393, 397, 410, 419, 568, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 860, 948, 954, 960, 964, 977, 987, 1081, 1082, 1130, 1200, 1210], "include_boundari": [183, 290, 789, 855], "closedinterv": [183, 223, 290, 448, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 811, 855, 1010, 1210], "label": [183, 248, 253, 290, 364, 556, 569, 570, 572, 574, 576, 578, 581, 583, 585, 750, 789, 807, 855, 928, 1090, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1210], "group_bi": [183, 212, 216, 223, 260, 289, 290, 299, 348, 428, 430, 435, 438, 510, 511, 549, 600, 601, 659, 666, 712, 750, 771, 772, 780, 782, 789, 807, 811, 818, 854, 855, 860], "start_bi": [183, 290, 789, 855], "startbi": [183, 290, 789, 855], "dynamicgroupbi": [183, 290], "member": [183, 290, 789, 855, 1015, 1210], "earliest": [183, 290, 396, 637, 640, 693, 789, 855, 963, 1164, 1167], "datapoint": [183, 290, 789, 855], "descript": [183, 290, 789, 855, 1224, 1225, 1226, 1227, 1229, 1231, 1235, 1236], "ascend": [183, 223, 290, 568, 750, 789, 811, 855], "dynam": [183, 290, 338, 502, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 750, 789, 855, 859, 899, 1065], "matter": [183, 195, 223, 225, 226, 245, 290, 568, 633, 634, 750, 789, 811, 855], "interv": [183, 223, 260, 290, 364, 397, 410, 443, 448, 556, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 811, 855, 928, 942, 944, 945, 951, 953, 955, 956, 959, 961, 962, 964, 968, 977, 978, 1006, 1010, 1090, 1210], "_lower_boundari": [183, 290, 789, 855], "_upper_boundari": [183, 290, 789, 855], "impact": [183, 290, 789, 855, 1218, 1234], "harder": [183, 290, 789, 855], "inclus": [183, 223, 290, 448, 568, 571, 573, 575, 577, 579, 582, 584, 586, 628, 629, 673, 691, 692, 694, 695, 706, 707, 737, 738, 750, 789, 811, 855, 1010, 1155, 1156, 1210], "boundari": [183, 290, 353, 443, 750, 789, 855, 917, 1006, 1210], "mondai": [183, 290, 371, 410, 412, 678, 789, 855, 934, 977, 979], "tuesdai": [183, 290, 789, 855], "wednesdai": [183, 290, 399, 402, 789, 855, 966, 969], "thursdai": [183, 290, 371, 678, 789, 855, 934], "fridai": [183, 290, 371, 399, 402, 678, 789, 855, 934, 966, 969], "saturdai": [183, 290, 789, 855], "sundai": [183, 290, 371, 399, 402, 412, 678, 789, 855, 934, 966, 969, 979], "weekli": [183, 290, 410, 789, 855, 977], "week": [183, 198, 223, 260, 290, 371, 393, 397, 410, 412, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 678, 691, 692, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 860, 934, 960, 964, 977, 979, 987, 1210, 1231], "shift": [183, 290, 341, 367, 433, 472, 550, 680, 750, 789, 855, 930, 1035, 1086, 1210], "front": [183, 290, 789, 855], "roll": [183, 290, 371, 390, 391, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 680, 726, 727, 750, 789, 855, 934, 957, 958, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1210], "re": [183, 194, 290, 390, 391, 399, 402, 789, 855, 957, 958, 966, 969, 1234], "1d": [183, 198, 223, 260, 290, 373, 393, 397, 404, 407, 410, 413, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 696, 710, 737, 738, 750, 789, 794, 811, 855, 860, 936, 944, 950, 960, 964, 968, 971, 974, 977, 987, 1210], "set_index": [183, 290, 789, 855], "resampl": [183, 290, 789, 855], "unlik": [183, 290, 789, 855], "evenli": [183, 290, 789, 855], "upsampl": [183, 290, 789, 855], "1n": [183, 198, 223, 260, 290, 393, 397, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977, 987, 1210], "1u": [183, 198, 223, 260, 290, 393, 397, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977, 987, 1210], "1m": [183, 198, 223, 260, 290, 393, 397, 409, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 972, 973, 975, 976, 977, 987, 1210], "millisecond": [183, 198, 223, 260, 290, 382, 388, 393, 397, 406, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 860, 960, 964, 973, 977, 987, 1210, 1231], "minut": [183, 198, 223, 260, 290, 382, 385, 387, 392, 393, 397, 398, 407, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 693, 694, 695, 696, 736, 737, 738, 750, 789, 794, 811, 855, 860, 960, 964, 974, 977, 987, 1210, 1231], "1h": [183, 198, 223, 260, 290, 380, 393, 397, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 694, 695, 737, 738, 750, 789, 794, 811, 855, 943, 945, 960, 964, 977, 987, 1210], "hour": [183, 198, 223, 260, 290, 385, 387, 388, 392, 393, 397, 398, 404, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 693, 694, 695, 696, 736, 737, 738, 750, 789, 794, 811, 855, 860, 960, 964, 971, 977, 987, 1210, 1231], "1w": [183, 198, 223, 260, 290, 393, 397, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977, 987, 1210], "1mo": [183, 198, 223, 260, 290, 376, 390, 391, 393, 396, 397, 403, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 939, 956, 957, 958, 960, 961, 962, 963, 964, 970, 977, 978, 987, 1210], "month": [183, 198, 223, 260, 290, 379, 390, 391, 393, 397, 399, 402, 410, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 690, 691, 692, 693, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 942, 957, 958, 960, 964, 966, 969, 977, 987, 1210, 1231], "1q": [183, 198, 223, 260, 290, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977], "quarter": [183, 198, 223, 260, 290, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977, 1231], "1y": [183, 198, 223, 260, 290, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 737, 738, 750, 789, 794, 811, 855, 960, 964, 977], "1i": [183, 223, 260, 290, 419, 568, 750, 789, 811, 855, 987, 1210], "3d12h4m25": [183, 198, 223, 260, 290, 397, 410, 419, 568, 694, 695, 737, 738, 750, 789, 794, 811, 855, 964, 977, 987, 1210], "correspond": [183, 198, 223, 249, 260, 290, 348, 384, 393, 397, 410, 511, 559, 568, 571, 573, 575, 577, 579, 582, 584, 586, 659, 691, 692, 694, 695, 737, 738, 750, 771, 789, 794, 811, 855, 947, 960, 964, 977, 1092, 1210], "daylight": [183, 198, 223, 260, 290, 372, 380, 393, 397, 410, 568, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 694, 695, 696, 737, 738, 750, 789, 794, 811, 855, 943, 960, 964, 977], "10i": [183, 290, 789, 855], "datetime_rang": [183, 290, 373, 376, 390, 391, 393, 396, 397, 403, 404, 405, 406, 407, 408, 409, 410, 413, 571, 573, 575, 577, 579, 582, 584, 586, 691, 692, 750, 789, 855, 935, 936, 939, 943, 944, 945, 950, 951, 953, 955, 957, 958, 959, 960, 963, 964, 968, 970, 971, 972, 973, 974, 975, 976, 977], "30m": [183, 290, 397, 410, 789, 855, 964, 977], "eager": [183, 198, 216, 258, 290, 373, 376, 379, 381, 390, 391, 393, 394, 396, 397, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 571, 573, 575, 577, 579, 582, 584, 586, 673, 677, 691, 692, 694, 695, 702, 706, 707, 722, 725, 729, 732, 737, 738, 741, 749, 750, 789, 798, 855, 935, 936, 939, 942, 943, 944, 945, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 1218, 1219, 1220, 1221, 1222, 1223, 1234], "lower_bound": [183, 290, 353, 448, 750, 789, 855, 917, 1010, 1198, 1210], "upper_bound": [183, 290, 353, 448, 502, 750, 789, 855, 917, 1010, 1071, 1210], "bys": [183, 290, 789, 855], "int_rang": [183, 258, 267, 276, 290, 673, 709, 789, 798, 835, 843, 855], "2i": [183, 290, 789, 855], "3i": [183, 223, 290, 789, 855], "a_agg_list": [183, 290, 789, 855], "seed_1": [184, 290, 441, 750, 1004, 1210], "seed_2": [184, 290, 441, 750, 1004, 1210], "seed_3": [184, 290, 441, 750, 1004, 1210], "hash": [184, 290, 750, 1210], "Its": [184, 290, 441, 750, 1004, 1210], "stabil": [184, 290, 441, 750, 1004, 1210], "u64": [184, 267, 290, 441, 561, 750, 807, 835, 855, 860, 1004, 1094, 1210], "10783150408545073287": [184, 290], "1438741209321515184": [184, 290], "10047419486152048166": [184, 290], "2047317070637311557": [184, 290], "ab": [185, 200, 242, 264, 290, 648, 650, 750, 831, 855, 860, 1005, 1027, 1182, 1210, 1228, 1230], "in_plac": [187, 235, 262, 290, 1093, 1121, 1128, 1210], "grown": [187, 290], "baz": [188, 189, 216, 257, 290, 614, 628, 630, 699, 708, 721, 746, 792, 827, 855, 860, 1141, 1157, 1222, 1227, 1230], "intermedi": [189, 290, 792, 855, 1237], "333333": [189, 290, 532, 792, 855, 1086, 1110, 1210, 1225], "mask": [190, 192, 290, 343, 449, 451, 454, 459, 551, 552, 605, 608, 615, 750, 903, 996, 1003, 1010, 1011, 1014, 1017, 1023, 1087, 1088, 1116, 1132, 1135, 1142, 1201, 1210], "visual": [190, 192, 290, 818, 855], "scalar": [193, 201, 224, 290, 510, 590, 616, 620, 627, 638, 710, 712, 750, 859, 1024, 1115, 1143, 1147, 1154, 1165, 1210], "buffer_s": [195, 290], "fit": [195, 235, 258, 290, 593, 725, 750, 1120, 1121, 1210], "signific": [195, 201, 290, 511, 588, 750, 1072, 1112, 1210], "4x": [195, 290], "materialis": [195, 196, 224, 225, 290], "rows_by_kei": [195, 225, 290], "iter_row": [196, 224, 225, 226, 290], "17_500": [196, 290], "klmnoopqrstuvwxyz": [196, 290], "__name__": [196, 290], "7500": [196, 290], "15_000": [196, 290], "record_batch": [196, 290], "to_arrow": [196, 290, 1191, 1210], "to_batch": [196, 290], "date32": [196, 290], "large_str": [196, 243, 250, 290], "15000": [196, 290], "2500": [196, 253, 290], "left_on": [197, 198, 259, 290, 793, 794, 828, 855], "right_on": [197, 198, 259, 290, 793, 794, 828, 855], "suffix": [197, 198, 229, 264, 269, 290, 300, 345, 348, 455, 456, 457, 458, 516, 533, 535, 538, 539, 540, 549, 565, 610, 633, 636, 659, 750, 793, 794, 813, 831, 833, 836, 855, 860, 905, 1137, 1163], "_right": [197, 198, 290, 793, 794, 855], "joinvalid": [197, 290, 793, 855], "join_nul": [197, 290, 793, 855], "coalesc": [197, 259, 290, 446, 637, 750, 793, 828, 855, 1164, 1224, 1228], "fashion": [197, 290, 780, 782, 807, 818, 855], "semi": [197, 290, 793, 855, 1224], "anti": [197, 290, 793, 843, 855, 1114, 1116, 1210, 1224], "cross": [197, 290, 793, 855, 1224], "cartesian": [197, 290, 793, 855], "many_to_mani": [197, 290, 793, 855], "one_to_on": [197, 290, 793, 855], "one_to_mani": [197, 290, 793, 855], "many_to_on": [197, 290, 793, 855], "join_asof": [197, 290, 793, 855], "other_df": [197, 290], "ham_right": [197, 290, 793, 855], "by_left": [198, 290, 794, 855], "by_right": [198, 290, 794, 855], "asofjoinstrategi": [198, 290, 794, 855], "allow_parallel": [198, 290, 793, 794, 855], "force_parallel": [198, 290, 793, 794, 855], "asof": [198, 290, 794, 855], "rather": [198, 290, 434, 510, 524, 556, 567, 647, 750, 794, 855, 1090, 1100, 1174, 1210], "asof_join": [198, 290], "search": [198, 290, 502, 606, 625, 794, 820, 855, 1133, 1152], "distanc": [198, 290, 443, 750, 794, 855, 1006, 1210], "plan": [198, 199, 290, 366, 750, 767, 771, 776, 780, 793, 794, 815, 818, 855, 1236], "gdp": [198, 290, 794, 855], "date_rang": [198, 260, 290, 379, 381, 394, 401, 412, 694, 695, 942, 956, 961, 962, 978, 979], "2016": [198, 290, 794, 855], "4164": [198, 290, 794, 855], "4411": [198, 290, 794, 855], "4566": [198, 290, 794, 855], "4696": [198, 290, 794, 855], "4827": [198, 290], "2017": [198, 290, 794, 855], "2018": [198, 290, 396, 794, 855, 963], "2019": [198, 290, 794, 855], "popul": [198, 290, 794, 855], "82": [198, 290, 794, 855], "66": [198, 259, 290, 584, 667, 750, 794, 828, 855, 1025, 1106, 1210], "83": [198, 290, 794, 855], "quit": [198, 290], "earlier": [198, 290], "later": [198, 290, 523, 815, 855], "countri": [198, 290, 372, 935], "gdp_date": [198, 290], "gdp2": [198, 290], "germani": [198, 290], "netherland": [198, 290], "784": [198, 290], "833": [198, 290], "914": [198, 290], "910": [198, 290, 613, 1140], "909": [198, 290], "pop2": [198, 290], "request": [199, 290], "describe_plan": [199, 290], "unoptim": [199, 290], "describe_optimized_plan": [199, 290], "show_graph": [199, 290, 855], "un": [199, 290], "graphviz": [199, 290, 818, 855], "inference_s": [201, 290], "256": [201, 290, 1086, 1210, 1229], "much": [201, 258, 276, 290, 363, 477, 511, 619, 620, 712, 750, 843, 927, 1040, 1072, 1146, 1147, 1210], "intens": [201, 276, 290, 549, 750, 1072, 1210], "materi": [201, 226, 276, 290, 771, 807, 843, 855, 860, 1072, 1210], "parallelis": [201, 276, 290, 1072, 1210], "achiev": [201, 276, 290, 511, 620, 750, 1072, 1147, 1210], "tri": [201, 290], "black": [201, 290, 342, 343, 344, 345, 346], "arbitrarili": [201, 290], "rearrang": [201, 290], "transform": [201, 238, 290, 510, 643, 645, 646, 729, 750, 821, 855], "map_el": [201, 290, 510, 667, 750, 1210], "lru_cach": [201, 290, 511, 750, 1072, 1210], "column_1": [201, 255, 290, 1232], "better": [201, 248, 249, 276, 290, 511, 620, 750, 767, 843, 855, 1114, 1116, 1147, 1210], "spam": [204, 290, 613, 1140], "ignore_nul": [205, 241, 290, 301, 303, 326, 418, 420, 421, 481, 604, 668, 670, 681, 750, 864, 865, 887, 986, 988, 989, 1044, 1131, 1210], "id_var": [207, 290, 802, 855], "value_var": [207, 290, 802, 855], "variable_nam": [207, 290, 802, 855], "value_nam": [207, 290, 802, 855], "unpivot": [207, 290, 802, 855], "massag": [207, 290, 802, 855], "measur": [207, 290, 802, 855], "axi": [207, 290, 674, 675, 802, 855], "df0": [208, 290, 803, 855, 1223], "steve": [208, 290, 803, 855], "elis": [208, 290, 803, 855], "ag": [208, 290, 803, 855, 1235], "anna": [208, 290, 803, 855], "megan": [208, 290, 803, 855], "thoma": [208, 290, 803, 855], "what": [212, 290, 293, 371, 510, 606, 625, 750, 934, 1133, 1152, 1210, 1214], "pack": [212, 290], "expr_unique_subset": [212, 290], "df_nuniqu": [212, 290], "df_agg_nuniqu": [212, 290], "more_bi": [214, 237, 290, 601, 750, 820, 855], "include_kei": [214, 226, 290], "offer": [215, 290, 553, 750, 806, 855, 1231], "cast_str_to_int": [215, 290, 806, 855], "col_nam": [215, 290, 511, 740, 750, 806, 855], "tdf": [215, 290, 806, 855], "aggregate_funct": [216, 290, 860], "pivotagg": [216, 290], "sort_column": [216, 290], "section": [216, 290, 605, 612, 613, 615, 623, 624, 691, 692, 694, 695, 737, 738, 1132, 1139, 1140, 1142, 1150, 1151], "predefin": [216, 290], "predict": [216, 219, 260, 290], "transpos": [216, 290], "discoveri": [216, 290], "col3": [216, 290, 1237], "tanh": [216, 290, 750, 1210], "998347": [216, 290], "964028": [216, 290], "999954": [216, 290], "unique_column_valu": [216, 290], "ix": [216, 290], "column_nam": [220, 255, 290, 809, 855], "coo": [220, 290, 809, 855], "car": [220, 244, 290, 565, 750, 809, 855], "cam": [220, 290, 809, 855], "rollinggroupbi": [223, 290], "group_by_dynam": [223, 290, 811, 855], "t_0": [223, 290, 568, 571, 573, 575, 577, 579, 582, 584, 586, 750, 811, 855], "t_1": [223, 290, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 750, 811, 855, 987, 1210], "t_n": [223, 290, 419, 568, 571, 573, 575, 577, 579, 582, 584, 586, 750, 811, 855, 987, 1210], "strptime": [223, 290, 396, 568, 750, 811, 855, 963], "set_sort": [223, 260, 290, 568, 750, 794, 811, 855, 1210], "2d": [223, 248, 249, 290, 393, 568, 710, 750, 811, 855, 935, 942], "sum_a": [223, 290, 568, 750, 811, 855], "min_a": [223, 290, 568, 750, 811, 855], "max_a": [223, 290, 568, 750, 811, 855], "by_pred": [224, 290], "accord": [224, 290, 556, 691, 692, 694, 695, 737, 738, 750, 947, 1090, 1210], "mutual": [224, 290], "exclus": [224, 290, 667, 673, 706, 707, 750, 860], "clariti": [224, 290], "toomanyrowsreturnederror": [224, 290], "norowsreturnederror": [224, 290], "inherit": [224, 290, 366, 750, 776, 855], "rowserror": [224, 290], "littl": [225, 290], "peak": [225, 290, 551, 552, 750, 1087, 1088, 1210], "flat": [226, 290, 475, 564, 750, 1038, 1097, 1210], "high": [226, 290, 556, 750, 762, 1090, 1210], "cost": [226, 290], "reoconstruct": [226, 290], "q": [226, 290, 732, 1221], "defaultdict": [226, 290], "assum": [226, 290, 798, 843, 855, 1231], "with_replac": [227, 290, 490, 589, 750, 1053, 1113, 1210], "ordereddict": [228, 290, 534, 536, 538, 732, 812, 855], "named_expr": [229, 230, 264, 265, 290, 651, 728, 732, 813, 814, 831, 832, 855], "threshold": [229, 290, 813, 855], "set_auto_structifi": [229, 264, 290, 813, 831, 855], "auto_structifi": [229, 264, 290, 813, 831, 855], "is_odd": [229, 290, 813, 855, 860], "_is_odd": [229, 290, 813, 855], "bit_set": [231, 290, 815, 855], "incorrect": [232, 290, 413, 510, 591, 750, 816, 843, 855, 980, 1117, 1210], "fill_valu": [234, 258, 290, 592, 750, 817, 855, 1119, 1210], "opposit": [234, 290, 333, 495, 592, 750, 817, 855, 894, 1058, 1119, 1210], "lag": [234, 290, 333, 495, 592, 680, 750, 817, 855, 894, 1058, 1119, 1210], "shrink": [235, 290, 593, 750, 1120, 1121, 1210], "hold": [235, 249, 290, 1191, 1210], "nulls_last": [237, 290, 314, 334, 497, 600, 601, 676, 750, 820, 855, 875, 895, 1022, 1060, 1128, 1210], "multithread": [237, 290, 601, 676, 750, 820, 855, 895, 1060, 1128, 1210], "although": [238, 290, 821, 855], "sqlcontext": [238, 290, 729, 821, 855, 1233], "registr": [238, 290, 729, 762, 821, 855, 1223], "1999": [238, 290, 393, 860, 960], "2010": [238, 290, 860], "2077": [238, 290, 860, 1231], "alias": [238, 290, 517, 821, 855], "AS": [238, 290, 729, 730, 821, 855, 1218, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1236], "a_is_even": [238, 290, 729, 821, 855], "concat_w": [238, 290, 729, 821, 855, 1228], "b_b": [238, 290], "float4": [238, 290, 729, 821, 855], "ddof": [239, 261, 290, 335, 340, 498, 504, 581, 582, 585, 586, 603, 665, 682, 684, 726, 727, 731, 739, 750, 822, 829, 855, 896, 901, 1061, 1067, 1108, 1110, 1130, 1200, 1210], "deviat": [239, 290, 420, 581, 582, 603, 731, 750, 822, 855, 988, 1130, 1210, 1225], "degre": [239, 261, 290, 498, 504, 558, 581, 582, 585, 586, 603, 665, 675, 682, 684, 726, 727, 731, 739, 750, 822, 829, 855, 1108, 1110, 1130, 1200, 1210, 1228], "freedom": [239, 261, 290, 498, 504, 581, 582, 585, 586, 603, 665, 682, 684, 726, 727, 731, 739, 750, 822, 829, 855, 1108, 1110, 1130, 1200, 1210], "divisor": [239, 261, 290, 498, 504, 581, 582, 585, 586, 603, 665, 682, 684, 726, 727, 731, 739, 750, 822, 829, 855, 1108, 1110, 1130, 1200, 1210], "816497": [239, 290], "mostli": [243, 290, 428, 750], "categoricaltyp": [243, 290], "fruit": [244, 290, 565, 610, 631, 638, 750, 1137, 1158, 1165], "beetl": [244, 290, 565, 750], "audi": [244, 290, 565, 750], "28": [244, 249, 290, 298, 396, 413, 750, 963, 980, 1191, 1210, 1231, 1232, 1236, 1237], "300": [244, 290, 440, 547, 750, 860, 1102, 1103, 1105, 1210, 1227], "drop_first": [246, 290, 1186, 1210], "dummi": [246, 290, 1186, 1210], "foo_1": [246, 290], "foo_2": [246, 290], "bar_3": [246, 290], "bar_4": [246, 290], "ham_a": [246, 290], "ham_b": [246, 290], "instantiat": [247, 290, 1188, 1210], "from_repr": [247, 290, 1188, 1210], "df_from_str_repr": [247, 290], "eval": [247, 290, 510, 511, 697, 750, 1072, 1188, 1210], "return_typ": [248, 253, 290], "jaxexporttyp": [248, 290], "devic": [248, 290, 1189, 1210], "jax": [248, 290, 1189, 1210], "indexord": [248, 249, 290], "fortran": [248, 249, 290], "gpu": [248, 290, 1189, 1210], "tpu": [248, 290, 1189, 1210], "design": [248, 253, 290], "32bit": [248, 290], "jax_enable_x64": [248, 290], "startup": [248, 290], "to_dummi": [248, 253, 290, 1210], "to_numpi": [248, 253, 290, 510, 750, 1210], "to_torch": [248, 290, 1210], "lbl": [248, 253, 290], "feat1": [248, 253, 290], "feat2": [248, 253, 290], "gpudevic": [248, 290], "process_index": [248, 290], "gpu_devic": [248, 290], "downstream": [249, 290, 591, 750, 1117, 1210], "applic": [249, 290, 511, 750], "prevent": [249, 290, 300, 361, 362, 532, 653, 750, 855, 925, 926, 1181, 1210], "reshap": [249, 290, 475, 750, 1038, 1210], "immut": [249, 290, 1191, 1210], "arr": [249, 290, 742, 1191, 1202, 1210], "writeabl": [249, 290, 1191, 1210], "runtimeerror": [249, 290, 1191, 1210], "c_contigu": [249, 290], "u1": [249, 290], "f4": [249, 290], "use_pyarrow_extension_arrai": [250, 290, 1192, 1210], "extens": [250, 290, 1192, 1210], "na": [250, 290, 631, 1192, 1210], "doubl": [250, 290], "four": [252, 290], "five": [252, 290, 1237], "torchexporttyp": [253, 290], "tensor": [253, 290, 1194, 1210], "polarsdataset": [253, 290], "pytorch": [253, 290, 1194, 1210], "tensordataset": [253, 290], "label_column": [253, 290], "to_jax": [253, 290, 1210], "0000": [253, 290, 1194, 1210, 1237], "5000": [253, 290, 1194, 1210], "opt": [253, 290], "half": [253, 290, 397, 418, 419, 420, 421, 750, 964, 986, 987, 988, 989, 1210], "experiment": [253, 290, 831, 855], "model": [253, 290], "float16": [253, 290], "dataload": [253, 290], "util": [253, 290, 702, 782, 855, 859], "dl": [253, 290], "scikit": [253, 290], "learn": [253, 290], "sklearn": [253, 290], "fetch_california_h": [253, 290], "hous": [253, 290], "feature_nam": [253, 290], "train": [253, 290], "loader": [253, 290], "bottom_k": [254, 290, 348, 658, 659, 750, 825, 855, 1195, 1210], "header_nam": [255, 290], "perhap": [255, 290], "column_2": [255, 290, 1232], "name_gener": [255, 290], "base_nam": [255, 290], "my_column_": [255, 290], "my_column_0": [255, 290], "my_column_1": [255, 290], "my_column_2": [255, 290], "j": [255, 290], "new_id": [255, 290], "uniquekeepstrategi": [256, 290, 826, 855], "kept": [256, 290, 826, 855], "decompos": [257, 290, 827, 855], "t_a": [257, 290, 827, 855], "t_b": [257, 290, 827, 855], "t_c": [257, 290, 827, 855], "t_d": [257, 290, 827, 855], "womp": [257, 290, 827, 855], "t_": [257, 290, 419, 750, 827, 855, 987, 1210], "t_struct": [257, 290, 827, 855], "step": [258, 290, 432, 673, 706, 707, 750], "unstackdirect": [258, 290], "pivot": [258, 290, 860], "ascii_uppercas": [258, 290], "h": [258, 290, 298, 399, 402, 593, 623, 624, 637, 640, 644, 750, 1150, 1151, 1164, 1167, 1171, 1231], "x_0": [258, 290, 418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "x_1": [258, 290, 419, 750, 987, 1210], "y_0": [258, 290, 418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "y_1": [258, 290], "z_0": [258, 290], "z_1": [258, 290], "include_nul": [259, 290, 828, 855], "implicit": [259, 290, 828, 855], "syntact": [259, 290, 563, 668, 670, 672, 683, 685, 688, 698, 703, 704, 705, 713, 715, 717, 718, 720, 722, 723, 728, 731, 733, 735, 739, 741, 750, 828, 855, 1096, 1129, 1210], "sugar": [259, 290, 563, 668, 670, 672, 683, 685, 688, 698, 703, 704, 705, 713, 715, 717, 718, 720, 722, 723, 728, 731, 733, 735, 739, 741, 750, 828, 855, 1096, 1129, 1210], "400": [259, 290, 405, 406, 408, 828, 855, 1102, 1103, 1105, 1210, 1227], "600": [259, 290, 405, 406, 408, 828, 855, 860], "700": [259, 290, 828, 855], "new_df": [259, 290, 828, 855], "time_column": [260, 290], "frequenc": [260, 290], "forward_fil": [260, 290, 341, 359, 362, 592, 750], "varianc": [261, 290, 421, 460, 585, 586, 665, 739, 750, 829, 855, 989, 1025, 1110, 1200, 1210, 1228], "grow": [262, 290], "not_": [264, 290, 750, 831, 855, 860, 1210], "not_c": [264, 290, 831, 855], "52": [264, 290, 411, 587, 750, 794, 831, 855], "diff": [264, 290, 403, 404, 405, 406, 407, 408, 409, 491, 750, 831, 855, 970, 971, 972, 973, 974, 975, 976, 1054, 1210], "_diff": [264, 290, 831, 855], "row_nr": [266, 290, 834, 855], "1001": [267, 290, 835, 855], "1002": [267, 290, 835, 855], "named_agg": [269, 836], "_sum": [269, 836], "_mean_squar": [269, 836], "b_sum": [269, 836], "c_mean_squar": [269, 836], "toward": [271, 463, 483, 685, 750, 838, 1026, 1046, 1210], "nr": [273, 284, 840, 851], "sub": [276, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 340, 481, 488, 750, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 901, 1044, 1051], "triangl": [276, 843], "group_df": [276, 843], "maxim": [277, 312, 750, 844, 873, 1210], "833333": [278, 845], "minim": [280, 313, 320, 468, 593, 601, 750, 847, 874, 881, 1031, 1076, 1120, 1210], "overview": [290, 750, 762, 855, 1210, 1233, 1237], "frameinittyp": [290, 855], "entri": [290, 855, 1234], "workaround": 290, "pola": 290, "2846": 290, "df4": 290, "df5": 290, "df6": 290, "approx_n_uniqu": [290, 750, 855], "corr": 290, "deseri": [290, 434, 523, 750, 815, 855], "drop_in_plac": 290, "drop_nul": [290, 369, 750, 855, 932, 1210], "estimated_s": [290, 1210], "explod": [290, 348, 430, 549, 564, 659, 750, 855, 859, 1097, 1210, 1226], "fold": [290, 521, 679, 686, 687, 724], "gather_everi": [290, 750, 855, 1210], "get_column_index": 290, "hash_row": 290, "insert_column": 290, "is_dupl": [290, 750, 1210], "is_empti": [290, 1210], "is_uniqu": [290, 750, 1210], "iter_column": 290, "iter_slic": 290, "map_row": 290, "max_horizont": [290, 713], "mean_horizont": [290, 715], "melt": [290, 855], "merge_sort": [290, 855], "min_horizont": [290, 718, 728], "n_chunk": [290, 866, 992, 1093, 1210], "n_uniqu": [290, 305, 750, 1210], "pipe": [290, 750, 855], "plot": [290, 807, 818, 855, 1210], "hvplottabularpolar": [290, 1210], "defer": [290, 293, 1210, 1214], "galleri": [290, 293, 1210, 1214], "scatter": [290, 293, 1210], "speci": [290, 293], "setosa": [290, 293], "versicolor": [290, 293], "stock_1": [290, 293], "stock_2": [290, 293], "quantil": [290, 556, 578, 579, 750, 855, 1090, 1106, 1210], "replace_column": 290, "select_seq": [290, 855], "shrink_to_fit": [290, 1210], "to_panda": [290, 1210], "to_struct": [290, 613], "unnest": [290, 364, 556, 566, 613, 614, 629, 630, 650, 651, 664, 750, 855, 899, 928, 1065, 1090, 1099, 1156, 1157, 1210, 1228, 1233], "unstack": 290, "with_columns_seq": [290, 855], "with_row_count": [290, 855], "write_avro": 290, "write_databas": 290, "write_delta": 290, "write_excel": 290, "write_ipc_stream": 290, "write_json": 290, "write_parquet": 290, "cum_prod": [298, 750, 1210], "ghi": [298, 613, 750, 860, 1140], "94": [299, 750], "to_uppercas": [300, 539, 614, 750], "confus": [301, 455, 456, 625, 750], "kleen": [301, 303, 668, 669, 670, 671, 750, 864, 865, 1210], "bitwis": [302, 548, 667, 668, 669, 670, 671, 750], "upcast": [304, 750], "approx": [305, 750], "1005": [305, 750], "invers": [306, 307, 308, 309, 310, 311, 750, 867, 868, 869, 870, 871, 872, 1191, 1210, 1232], "cosin": [306, 307, 354, 355, 510, 750, 867, 868, 919, 920, 1210, 1232], "570796": [306, 308, 750, 867, 869, 1210, 1232], "hyperbol": [307, 309, 311, 355, 597, 656, 750, 868, 870, 872, 920, 1125, 1184, 1210], "sine": [308, 309, 510, 596, 597, 750, 869, 870, 1124, 1125, 1210, 1232], "881374": [309, 750, 870, 1210], "tangent": [310, 311, 655, 656, 750, 871, 872, 1183, 1184, 1210, 1232], "785398": [310, 674, 675, 750, 871, 1210, 1232], "rank": [314, 474, 676, 682, 697, 750, 875, 1037, 1210], "arg_wher": [315, 750], "subarrai": [317, 318, 878, 879], "membership": [321, 470, 882, 1033], "number_of_two": [322, 471], "null_on_oob": [325, 477, 479, 886, 1040, 1042], "sublist": [325, 467, 468, 470, 472, 476, 477, 478, 479, 480, 481, 482, 491, 496, 500, 502, 886, 1015, 1030, 1031, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1054, 1059, 1063, 1065, 1210], "propag": [326, 417, 481, 541, 542, 544, 604, 681, 750, 887, 1044, 1081, 1082, 1131, 1210], "x_y": [326, 481], "707107": [335, 420, 581, 582, 674, 750, 896, 988, 1210, 1232], "i8": [337, 338, 379, 382, 385, 387, 388, 389, 392, 394, 395, 398, 411, 412, 501, 593, 722, 725, 741, 750, 898, 899, 930, 942, 945, 955, 956, 962, 965, 978, 979, 1064, 1098, 1120, 1198, 1210, 1231], "field_0": [338, 502, 899, 1065], "field_1": [338, 502, 899, 1065], "field_n": [338, 502, 899, 1065], "n0": [338, 502], "n1": [338, 502], "c1": 338, "c2": 338, "c3": 338, "seen": [341, 433, 750], "substr": [342, 345, 346, 605, 610, 615, 623, 624, 627, 628, 629, 630, 631, 860, 902, 905, 906, 1132, 1137, 1142, 1150, 1151, 1154, 1155, 1156, 1157, 1158, 1228], "ends_with": [342, 346, 605, 631, 860, 1158, 1228], "yellow": [342, 343, 344, 345, 346], "code": [342, 343, 344, 345, 346, 366, 511, 591, 750, 776, 782, 796, 855, 1117, 1210], "x00": [342, 343, 344, 345, 346, 608, 902, 903, 904, 905, 906, 1135], "xff": [342, 343, 344, 345, 346, 608, 902, 903, 904, 905, 906, 1135], "contains_with_lit": 342, "contains_with_expr": 342, "transferencod": [343, 344, 608, 609, 903, 904, 1135, 1136], "hex": [343, 344, 608, 609, 642, 903, 904, 1135, 1136, 1169], "base64": [343, 344, 608, 609, 903, 904, 1135, 1136], "000000": [343, 344, 608, 903, 904, 1135], "ffff00": [343, 344, 608, 903, 904, 1135], "0000ff": [343, 344, 608, 903, 904, 1135], "anywher": [345, 346, 637, 639, 640, 1164, 1166, 1167], "ends_with_lit": 345, "ends_with_expr": 345, "starts_with_lit": 346, "starts_with_expr": 346, "top_k_bi": [347, 348, 658, 750], "bottom_k_bi": [347, 658, 659, 750], "_btm_by_a": [348, 750], "_btm_by_b": [348, 750], "a_btm_by_a": [348, 750], "b_btm_by_a": [348, 750], "c_btm_by_a": [348, 750], "a_btm_by_b": [348, 750], "b_btm_by_b": [348, 750], "c_btm_by_b": [348, 750], "_by_ca": [348, 659, 750], "_by_cb": [348, 659, 750], "a_by_ca": [348, 659, 750], "b_by_ca": [348, 659, 750], "c_by_ca": [348, 659, 750], "a_by_cb": [348, 659, 750], "b_by_cb": [348, 659, 750], "c_by_cb": [348, 659, 750], "wrap_numer": [349, 750, 908, 1210], "mark": [349, 750, 908, 1210], "to_fram": [350, 381, 397, 401, 410, 637, 928, 1090, 1114, 1116, 1156, 1157, 1164, 1210], "259921": [351, 750, 913, 1210, 1229], "587401": [351, 750, 1229], "numericliter": [353, 750, 917, 1210], "temporalliter": [353, 750, 917, 949, 950, 1210], "outsid": [353, 750, 917, 1210], "543081": [355, 750, 920, 1210], "cotang": [356, 750, 921, 1210, 1232], "cumul": [358, 359, 360, 361, 362, 685, 686, 687, 688, 689, 750, 922, 923, 924, 925, 926, 1210], "cum_count_revers": [358, 750], "cum_max_revers": [359, 750], "cum_max_all_fil": [359, 750], "cum_min_revers": [360, 750], "cum_prod_revers": [361, 750], "cum_sum_revers": [362, 750], "value_cum_sum": [362, 750], "value_cum_sum_all_fil": [362, 750], "min_period": [363, 418, 420, 421, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 726, 727, 750, 927, 986, 988, 989, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1210], "slide": [363, 750, 927, 1210], "slot": [363, 367, 472, 750, 927, 930, 1035, 1210], "realli": [363, 606, 625, 750, 927, 1133, 1152, 1210], "visit": [363, 750, 927, 1210], "left_clos": [364, 556, 750, 928, 1090, 1210], "include_break": [364, 556, 750, 928, 1090, 1210], "bin": [364, 443, 556, 642, 667, 743, 750, 928, 1006, 1090, 1169, 1204, 1210], "discret": [364, 367, 415, 443, 472, 491, 556, 750, 928, 930, 983, 1006, 1035, 1054, 1090, 1210], "plu": [364, 507, 750, 928, 1070, 1090, 1210, 1229], "endpoint": [364, 556, 750, 928, 1090, 1210], "observ": [364, 418, 419, 420, 421, 556, 750, 928, 986, 987, 988, 989, 1090, 1210], "fall": [364, 556, 750, 928, 1090, 1210], "qcut": [364, 750, 928, 1210], "breakpoint": [364, 443, 556, 750, 928, 1006, 1090, 1210], "radian": [365, 674, 750, 1228], "720": [365, 558, 750], "540": [365, 558, 750], "360": [365, 558, 750, 1232], "180": [365, 558, 750, 1232], "pickl": [366, 750, 776, 855], "secur": [366, 750, 776, 855], "implic": [366, 750, 776, 855], "trust": [366, 750, 776, 855], "meta": [366, 750], "ba": [366, 422, 523, 631, 698, 750, 860], "null_behavior": [367, 472, 750, 930, 1035, 1210], "nullbehavior": [367, 472, 750, 930, 1035, 1210], "drop_nan": [370, 750, 933, 1210], "week_mask": [371, 678, 934], "holidai": [371, 678, 934], "busi": [371, 678, 934], "handi": [371, 678, 934], "pip": [371, 678, 934], "dutch": [371, 678, 934], "my_holidai": [371, 678, 934], "country_holidai": [371, 678, 934], "nl": [371, 678, 934], "2025": [371, 678, 860, 934], "business_day_count": [371, 934], "land": [371, 934], "weekend": [371, 678, 934], "rolled_forward": 371, "vari": [372, 935, 1237], "rare": [372, 935], "switch": [372, 935], "samoa": [372, 935], "apia": [372, 935], "did": [372, 935], "2011": [372, 935], "dst_offset": [372, 935], "2012": [372, 935], "replace_time_zon": [372, 378, 380, 940, 941, 967], "pacif": [372, 935], "11h": [372, 935], "13h": [372, 935], "lose": [373, 936], "time_unit_m": [373, 936], "time_unit_n": [373, 936], "999": [374, 386, 860, 937, 952, 1227, 1237], "1897": [374, 386, 937, 952], "2000": [374, 383, 386, 390, 391, 393, 860, 937, 946, 952, 957, 958, 960, 965, 1218], "3002": [374, 386, 937, 952], "cent": 374, "0999": [374, 386], "naiv": [375, 376, 938, 939], "compon": [375, 398, 637, 640, 696, 938, 965, 1164, 1167], "resolv": [375, 773, 779, 812, 830, 855], "tm": [375, 860], "456000": [375, 938], "101000": 375, "d1": 375, "d2": 375, "d3": 375, "europ": [376, 380, 396, 939, 943, 963], "london": [376, 380, 396, 939, 943, 963], "gmt": [376, 380, 396, 939, 943, 963], "bst": [376, 380, 396, 939, 943, 963], "1978": [377, 378, 382, 384, 385, 387, 388, 392, 398, 400, 414], "500_000": [377, 378, 382, 385, 387, 388, 392, 398, 400], "2065": [377, 378, 382, 385, 387, 388, 392, 398, 400], "60_000": [377, 378, 382, 385, 387, 388, 392, 398, 400], "060": [377, 378, 382, 385, 387, 388, 392, 398, 400], "weekdai": [379, 394], "ordinal_dai": [379, 412], "day_of_month": [379, 394, 412], "day_of_year": [379, 394, 412], "356": [379, 394, 412], "357": [379, 394, 412], "358": [379, 394, 412], "359": [379, 394, 412], "base_utc_offset": [380, 943], "0m": [380, 943], "epochtimeunit": [381, 702, 944], "epoch_n": [381, 944], "epoch_": [381, 944], "978307200000000": [381, 401, 944, 968], "978307200": [381, 944], "978393600000000": [381, 401, 944, 968], "978393600": [381, 944], "978480000000000": [381, 401, 944, 968], "978480000": [381, 944], "leap": [383, 393, 946, 960], "leap_year": 383, "iso": [384, 411, 412, 947, 978, 979, 1231], "1977": [384, 414], "1979": [384, 414], "calendar_year": [384, 414], "1976": [384, 414], "500000": [385, 951], "60000": 385, "mlnm": 386, "think": [390, 391, 957, 958], "vectoris": [390, 391, 957, 958], "tseri": [390, 391, 957, 958], "monthend": [390, 957], "rollforward": [390, 957], "monthbegin": [391, 958], "rollback": [391, 958], "500000000": [392, 959], "60000000": 392, "minu": [393, 545, 750, 960], "dictat": [393, 750, 859, 960], "2005": [393, 960], "date_plus_1i": [393, 960], "1y2mo": [393, 960], "date_min": 393, "1998": [393, 960], "2003": [393, 702, 960], "2004": [393, 960], "2006": [393, 960], "new_dat": 393, "ordin": [394, 559, 750, 961, 1092, 1210, 1235], "366": [394, 961], "non_exist": [396, 963], "nonexist": [396, 963], "convert_time_zon": [396, 963], "london_timezon": [396, 963], "amsterdam": [396, 963], "london_to_amsterdam": [396, 963], "cet": [396, 963], "cest": [396, 963], "ts_local": [396, 963], "brussel": [396, 963], "localis": [397, 410, 977], "dst": [397, 410, 964, 977], "cst": [397, 410, 964, 977], "cdt": [397, 410, 964, 977], "225": [397, 410, 1232], "10m": [397, 410, 964, 977], "milli": [398, 965], "micro": [398, 965], "to_str": [399, 966], "datetime_str": [399, 402], "day_nam": [399, 402], "month_nam": [399, 402], "march": [399, 402, 966, 969], "april": [399, 402, 966, 969], "timestamp_u": [401, 968], "timestamp_m": 401, "978307200000": 401, "978393600000": 401, "978480000000": 401, "strftime": [402, 969, 1231], "days_diff": 403, "hours_diff": 404, "200m": [405, 406, 408], "milliseconds_diff": [405, 406, 408], "200": [405, 406, 408, 563, 750, 860, 1096, 1102, 1103, 1105, 1210, 1227], "200000": [405, 798, 855], "800": [405, 406, 408], "minutes_diff": 407, "1440": [407, 974], "200000000": 408, "seconds_diff": 409, "truncate_str": 410, "truncate_td": 410, "53": [411, 978], "time_unit_u": 413, "32971": [413, 980], "32974": [413, 980], "32976": [413, 980], "iso_year": 414, "pk": [415, 750, 983, 1210], "probabl": [415, 556, 750, 983, 1090, 1210], "459148": [415, 750], "754888": [415, 750], "span": [418, 420, 421, 750, 986, 988, 989, 1210], "half_lif": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "alpha": [418, 420, 421, 750, 780, 782, 807, 818, 855, 860, 986, 988, 989, 1210], "adjust": [418, 420, 421, 598, 750, 986, 988, 989, 1126, 1210], "exponenti": [418, 419, 420, 421, 423, 554, 750, 986, 987, 988, 989, 990, 1210, 1229], "weight": [418, 419, 420, 421, 569, 570, 572, 574, 576, 578, 581, 583, 585, 598, 750, 986, 987, 988, 989, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1126, 1210], "decai": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "term": [418, 420, 421, 616, 627, 638, 750, 986, 988, 989, 1143, 1154, 1165, 1210], "mass": [418, 420, 421, 750, 986, 988, 989, 1210], "gamma": [418, 420, 421, 750, 986, 988, 989, 1210], "frac": [418, 420, 421, 598, 750, 986, 988, 989, 1126, 1210], "foral": [418, 420, 421, 750, 986, 988, 989, 1210], "geq": [418, 420, 421, 750, 986, 988, 989, 1210], "theta": [418, 420, 421, 750, 986, 988, 989, 1210], "life": [418, 420, 421, 750, 986, 988, 989, 1210], "exp": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210, 1228], "ln": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210, 1228], "smooth": [418, 420, 421, 750, 986, 988, 989, 1210], "factor": [418, 420, 421, 657, 750, 986, 988, 989, 1193, 1210], "leq": [418, 420, 421, 750, 986, 988, 989, 1210], "imbal": [418, 420, 421, 750, 986, 988, 989, 1210], "ew": [418, 420, 421, 750, 986, 988, 989, 1210], "w_i": [418, 420, 421, 750, 986, 988, 989, 1210], "recurs": [418, 420, 421, 750, 986, 988, 989, 1210], "y_t": [418, 420, 421, 750, 986, 988, 989, 1210], "y_": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "x_t": [418, 420, 421, 750, 986, 988, 989, 1210], "x_2": [418, 419, 420, 421, 750, 986, 987, 988, 989, 1210], "428571": [418, 750, 986, 1210], "ldot": [419, 750, 987, 1210], "x_n": [419, 750, 987, 1210], "t_2": [419, 750, 987, 1210], "ewma": [419, 750, 987, 1210], "alpha_i": [419, 750, 987, 1210], "t_i": [419, 750, 987, 1210], "y_i": [419, 750, 987, 1210], "x_i": [419, 750, 987, 1210], "quad": [419, 750, 987, 1210], "370h": [419, 750, 987, 1210], "4d": [419, 750, 987, 1210], "292893": [419, 750, 987, 1210], "492474": [419, 750, 987, 1210], "254508": [419, 750, 987, 1210], "bia": [420, 421, 460, 580, 598, 750, 988, 989, 1025, 1107, 1126, 1210], "unbias": [420, 421, 750, 988, 989, 1210], "963624": [420, 750, 988, 1210], "928571": [421, 750, 989, 1210], "wildcard": [422, 648, 686, 687, 700, 724, 750, 859], "regex": [422, 517, 518, 605, 607, 610, 612, 613, 614, 615, 623, 624, 631, 648, 698, 750, 860, 1132, 1134, 1137, 1139, 1140, 1141, 1142, 1150, 1151, 1158], "aa": [422, 605, 615, 698, 750, 860, 929, 1132, 1142, 1210, 1230], "cc": [422, 698, 750, 860, 929, 1210, 1230], "718282": [423, 750, 990, 1210, 1229], "389056": [423, 750, 990, 1210, 1229], "54": [423, 750, 1025, 1210, 1229, 1237], "59815": [423, 750, 1229], "extrem": [425, 569, 750, 993, 1101, 1210], "expressioin": [425, 750, 993, 1210], "group_col": [428, 666, 750], "g1": [428, 666, 750], "g2": [428, 666, 750], "lt": [428, 666, 750, 1210], "gte": [428, 666, 750], "n_1": [428, 750], "n_2": [428, 750], "n_3": [428, 750], "exprlistnamespac": [430, 750], "divis": [432, 660, 750, 1229], "truediv": [432, 750], "subtli": [432, 750], "intuit": [432, 750, 860], "backward_fil": [433, 592, 750], "enclos": [434, 750], "350": [440, 547, 750, 1103, 1210], "650": [440, 547, 750], "850": [440, 547, 750], "9774092659964970114": [441, 750], "13614470193936745724": [441, 750], "1101441246220388612": [441, 750], "11638928888656214026": [441, 750], "13382926553367784577": [441, 750], "bin_count": [443, 750, 1006, 1210], "include_categori": [443, 750, 1006, 1210], "include_breakpoint": [443, 750, 1006, 1210], "occurr": [443, 451, 454, 664, 750, 1006, 1014, 1017, 1199, 1210], "cum_sum": [445, 652, 689, 750, 791, 855, 1024, 1210], "interpolationmethod": [446, 750, 1008, 1210], "regrid": [446, 750], "grid": [446, 750], "df_original_grid": [446, 750], "grid_point": [446, 750], "df_new_grid": [446, 750], "a_interpol": [447, 750], "285714": [447, 750, 1009, 1210], "714286": [447, 750, 1009, 1210], "satisfi": [448, 750, 1010, 1210], "conflat": [448, 750], "between_ab": [448, 750], "finit": [450, 660, 682, 750, 1013, 1210], "optional_memb": [452, 750, 1015, 1210], "infinit": [453, 660, 750, 1016, 1210], "_isnan": [455, 750], "b_isnan": [455, 750], "_is_not_nan": [456, 750], "b_is_not_nan": [456, 750], "_not_nul": [457, 750], "a_not_nul": [457, 750], "b_not_nul": [457, 750], "_isnul": [458, 750], "a_isnul": [458, 750], "b_isnul": [458, 750], "fisher": [460, 598, 750, 1025, 1126, 1210], "fourth": [460, 750, 1025, 1210], "subtract": [460, 652, 750, 1025, 1210], "distribut": [460, 598, 750, 1025, 1126, 1210], "elimin": [460, 750, 1025, 1210], "bias": [460, 598, 750, 1025, 1126, 1210], "scipi": [460, 598, 750, 1025, 1126, 1210, 1214], "stat": [460, 598, 750, 815, 855, 1025, 1126, 1210], "153061": [460, 750], "blindli": [474, 1037], "worth": [474, 1037], "enough": [474, 598, 750, 1037, 1126, 1210], "concat_list": [474, 697], "exprnamespac": 475, "cheaper": [477, 1040], "symmetr": [493, 1056], "sdiff": 493, "taken": [496, 627, 1059, 1154], "363961": [498, 1061], "n_field_strategi": [502, 1065], "tostructstrategi": [502, 1065], "first_non_nul": [502, 1065], "max_width": [502, 1065], "pre": [502, 511, 556, 722, 725, 741, 750, 1090, 1210], "eagerli": [502, 1218], "obtain": 502, "ok": 502, "longest": 502, "logarithm": [505, 506, 507, 750, 1068, 1069, 1070, 1210, 1229], "584963": [505, 750], "30103": [506, 750, 1229], "60206": [506, 750, 1229], "natur": [507, 750, 1070, 1210, 1229], "693147": [507, 750, 1068, 1070, 1210, 1229], "098612": [507, 750, 1068, 1070, 1210, 1229], "386294": [507, 750, 1070, 1210, 1229], "lowest": [508, 750], "9223372036854775808": [508, 750], "agg_list": [510, 750], "is_elementwis": [510, 750, 859], "returns_scalar": [510, 712, 750, 859], "whole": [510, 600, 601, 612, 750, 843, 855, 1139], "presum": [510, 750], "stai": [510, 750], "elementwis": [510, 569, 570, 572, 574, 576, 578, 581, 583, 585, 750, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1210], "third": [510, 750], "parti": [510, 750], "map_to_scalar": [510, 750], "invok": [510, 750], "assumpt": [510, 750], "someth": [510, 750], "bug": [510, 511, 750, 798, 843, 855, 1072, 1210], "argmax": [510, 750], "skip_nul": [511, 750, 1072, 1210], "pass_nam": [511, 750], "mapelementsstrategi": [511, 750], "thread_loc": [511, 750], "suppos": [511, 750, 1072, 1210], "sqrt": [511, 598, 651, 750, 1072, 1126, 1210, 1228], "field_nam": [511, 750, 1072, 1210], "with_field": [511, 750], "gil": [511, 750], "discourag": [511, 750], "loop": [511, 750], "a_times_2": [511, 750], "tip": [511, 750], "view": [511, 750], "again": [511, 750], "exprmetanamespac": [515, 519], "foo_bar": [515, 519, 628, 710, 1222], "foo_bar2": [515, 519], "_foo": 516, "allow_alias": 517, "bare": [517, 860], "foo_": [518, 628, 701], "raise_if_undetermin": 520, "computeerror": [520, 642, 1169], "e_filt": [520, 522], "e_sum_ov": [520, 522], "e_sum_slic": [520, 522], "order_bi": [523, 549, 750], "groupstorow": 523, "tree": [524, 780, 855], "undo": [525, 532, 533, 535, 537, 539, 540], "modulu": [528, 750], "xlog2": [530, 554, 750], "purpos": [531, 750, 771, 782, 855], "x_uniqu": [531, 750], "y_uniqu": [531, 750], "chain": [532, 533, 535, 537, 539, 540, 740], "a_revers": [533, 537, 565, 750], "b_revers": [533, 537, 565, 750], "rstrip": 533, "_revers": [533, 537, 565, 750], "reverse_": 535, "reverse_a": 535, "reverse_b": 535, "prefix_": 536, "prefix_a": 536, "prefix_b": 536, "_suffix": 538, "a_suffix": 538, "b_suffix": 538, "lowercas": [539, 643, 1170, 1230], "uppercas": [540, 646, 1173, 1230], "to_lowercas": 540, "poison": [541, 542, 750, 1081, 1082, 1210], "nanmax": [541, 542, 750, 1081, 1082, 1210], "inequ": [543, 750], "ne": [544, 750, 1210], "unari": [545, 750], "negat": [546, 750, 1084, 1210], "more_expr": [549, 676, 679, 680, 681, 750], "mapping_strategi": [549, 750], "windowmappingstrategi": [549, 750], "group_to_row": [549, 750], "outcom": [549, 750], "group_dtyp": [549, 750], "warn": [549, 750, 1210], "_max": [549, 750], "c_max": [549, 750], "_min": [549, 750], "c_min": [549, 750], "sort_bi": [549, 750], "percent": [550, 750, 1086, 1210], "090909": [550, 750], "extract_numb": [553, 750], "scale_negative_even": [553, 750], "expon": [554, 750, 1210, 1229], "x_squar": [554, 750], "x_invers": [554, 750], "allow_dupl": [556, 750, 1090, 1210], "duplicateerror": [556, 750, 1090, 1210], "cut": [556, 750, 1090, 1210], "566371": [558, 750], "424778": [558, 750], "283185": [558, 750], "141593": [558, 750, 867, 1210, 1229, 1232], "rankmethod": [559, 750, 1092, 1210], "ti": [559, 750, 1092, 1210], "competit": [559, 750, 1092, 1210], "highest": [559, 663, 682, 750, 855, 1092, 1210], "immedi": [559, 673, 677, 691, 692, 694, 695, 706, 707, 722, 725, 732, 737, 738, 741, 750, 1092, 1210], "safe": [561, 750, 1094, 1210], "nodefault": [563, 750, 1096, 1210], "_nodefault": [563, 750, 1096, 1210], "no_default": [563, 750, 1096, 1210], "fruits_revers": [565, 750], "cars_revers": [565, 750], "rle_id": [566, 750, 1210], "rle": [567, 750, 1100, 1210], "rle_id_a": [567, 750], "rle_id_ab": [567, 750], "window_s": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 726, 727, 750, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1210], "multipli": [569, 570, 572, 574, 576, 578, 581, 583, 585, 651, 750, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1210], "rolling_sum": [569, 750, 1101, 1210], "nansum": [569, 750, 1101, 1210], "travers": [570, 572, 574, 576, 578, 581, 583, 585, 750, 1102, 1103, 1105, 1108, 1109, 1110, 1210], "vector": [570, 572, 574, 576, 578, 581, 583, 585, 750, 1102, 1103, 1105, 1108, 1109, 1110, 1210], "df_tempor": [571, 573, 575, 577, 579, 582, 584, 586, 750], "rolling_row_max": [571, 750], "2h": [571, 573, 575, 577, 579, 582, 584, 586, 750], "closur": [571, 573, 582, 584, 586, 750], "rolling_row_mean": [573, 750], "rolling_row_median": [575, 750], "rolling_row_min": [577, 750], "625": [578, 750], "rolling_row_quantil": [579, 750], "skew": [580, 750, 1107, 1210], "381802": [580, 750, 1107, 1210], "47033": [580, 750, 1107, 1210], "38180177416060584": [580, 750, 1107, 1210], "47033046033698594": [580, 750, 1107, 1210], "433013": [581, 750, 822, 855], "rolling_row_std": [582, 750], "rolling_row_sum": [584, 750], "39": [584, 702, 750], "57": [584, 750, 1111, 1210, 1232, 1237], "63": [584, 750], "69": [584, 750, 1025, 1210], "1875": [585, 750, 829, 855], "rolling_row_var": [586, 750], "figur": [588, 750, 818, 855, 1112, 1210], "01234": [588, 750, 1112, 1210], "012": [588, 750, 1112, 1210], "1200": [588, 750, 1112, 1210], "searchsortedsid": [590, 750, 1115, 1210], "leftmost": [590, 750, 1115, 1210, 1230], "rightmost": [590, 750, 1115, 1210, 1230], "six": [590, 750], "extrema": [593, 750, 1120, 1210], "112": [593, 750, 1237], "129": [593, 750], "8589934592": [593, 750], "1073741824": [593, 750], "175201": [597, 750, 1125, 1210], "unimod": [598, 750, 1126, 1210], "skewtest": [598, 750, 1126, 1210], "speak": [598, 750, 1126, 1210], "g_1": [598, 750, 1126, 1210], "m_3": [598, 750, 1126, 1210], "m_2": [598, 750, 1126, 1210], "m_i": [598, 750, 1126, 1210], "sum_": [598, 750, 1126, 1210], "texttt": [598, 750, 1126, 1210], "k_3": [598, 750, 1126, 1210], "k_2": [598, 750, 1126, 1210], "343622": [598, 750], "value1": [601, 750], "value2": [601, 750], "attain": [601, 750], "414214": [602, 750, 1129, 1210, 1229], "sensit": [605, 613, 615, 623, 624, 1132, 1140, 1142, 1150, 1151], "ilmsuxu": [605, 612, 613, 615, 623, 624, 1132, 1139, 1140, 1142, 1150, 1151], "default_match": [605, 615], "insensitive_match": [605, 615], "crab": [605, 615, 1132, 1142], "dog": [605, 643, 646, 681, 1132, 1170, 1173], "rab": [605, 626, 1132, 1153, 1226], "ascii_case_insensit": [606, 625, 1133, 1152], "aho": [606, 625, 1133, 1152], "corasick": [606, 625, 1133, 1152], "insensit": [606, 613, 623, 624, 625, 860, 1132, 1133, 1140, 1142, 1150, 1151, 1152], "set_fmt_str_length": [606, 625, 1133, 1152], "lyric": [606, 625, 1133, 1152], "everybodi": [606, 625, 1133, 1152], "tell": [606, 625, 1133, 1152], "me": [606, 625, 1133, 1152], "feel": [606, 625, 1133, 1152], "love": [606, 625, 1133, 1152], "tonight": [606, 625, 1133, 1152], "success": [607, 613, 1134, 1140], "overlap": [607, 613, 1134, 1140], "bla": [607, 613, 1134, 1140], "asd": [607, 613, 1134, 1140], "678": [607, 613, 1134, 1140], "910t": [607, 613, 1134, 1140], "count_digit": 607, "dbc": [607, 1134], "3xy": [607, 1134], "1zy3": [607, 1134], "strings_hex": 609, "666f6f": [609, 1136], "626172": [609, 1136], "mango": [610, 631, 1137, 1158], "has_suffix": 610, "le": [610, 750, 1210], "nu": 610, "group_index": [612, 1139], "captur": [612, 614, 623, 624, 1139, 1141, 1150, 1151], "nthose": [612, 1139], "nodd": [612, 1139], "nthe": [612, 1139], "odd": 612, "vote": [612, 614, 1139, 1141], "ballon_dor": [612, 614, 1139, 1141], "404": [612, 614, 1139, 1141], "ref": [612, 614, 1139, 1141], "unknown": [612, 710, 1139], "candid": [612, 614, 1139, 1141], "messi": [612, 614, 1139, 1141], "ronaldo": [612, 1139], "haystack": [613, 1140], "email": [613, 1140], "real": [613, 1140], "some_account": [613, 1140], "somewher": [613, 1140], "net": [613, 1140], "jkl": [613, 1140], "uvw": [613, 1140], "co": [613, 750, 1140, 1210, 1228], "uk": [613, 1140], "address": 613, "xi": [613, 1140], "quantifi": [613, 1140], "email_part": [613, 1140], "extracted_nr": 613, "unnam": [614, 1141], "weghorst": [614, 1141], "err": 614, "lobster": [615, 1142], "crustaceon": [615, 1142], "pat": [615, 1142], "bc": [615, 624, 733, 1142], "aeiuo": [615, 1142], "find_pat": 615, "fewer": [616, 638, 782, 855, 1143, 1165], "pear": [616, 627, 638, 1143, 1154, 1165], "papaya": [616, 627, 638, 1143, 1154, 1165], "dragonfruit": [616, 627, 638, 1143, 1154, 1165], "s_head_5": 616, "papai": [616, 1143], "drago": [616, 1143], "s_head_n": 616, "pea": 616, "papa": 616, "dragon": 616, "json_path_match": [617, 1144], "jsonpath": [617, 618, 1144, 1145], "json_path": [618, 1145], "json_val": [618, 1145], "len_char": [619, 1146], "_o": [619, 620, 1146, 1147], "caf\u00e9": [619, 620, 860, 1146, 1147], "345": [619, 620, 1146, 1147], "\u6771\u4eac": [619, 620, 860, 1146, 1147], "n_byte": [619, 620, 1230], "n_char": [619, 620, 1230], "fill_char": [621, 622, 1148, 1149], "pad": [621, 622, 647, 1148, 1149, 1174], "reach": [621, 622, 647, 1148, 1149, 1174], "pad_start": [621, 647, 1148, 1174], "cow": [621, 622, 1148, 1149], "monkei": [621, 622, 1148, 1149], "hippopotamu": [621, 622, 1148, 1149], "pad_end": [622, 1149], "zfill": [622, 667, 750, 1149], "replace_al": [623, 1150], "dollar": [623, 624, 1150, 1151], "123abc": [623, 1150, 1151], "abc456": [623, 1150, 1151, 1230], "hat": [623, 624, 1150, 1151], "hut": [623, 624, 1150, 1151], "vowel": [623, 624, 1150, 1151], "bad": [623, 624, 1150, 1151], "bud": [623, 624, 1150, 1151], "citi": [623, 624], "philadelphia": [623, 624], "season": [623, 624], "spring": [623, 624], "summer": [623, 624], "autumn": [623, 624], "winter": [623, 624], "weather": [623, 624, 1150, 1151], "raini": [623, 624, 1150, 1151], "sunni": [623, 624, 1150, 1151], "cloudi": [623, 624], "snowi": [623, 624], "foggi": [623, 624, 1150, 1151], "abcabc": 624, "123a123": 624, "replace_with": [625, 1152], "broadcast": [625, 860, 1152], "removes_pronoun": 625, "man": [626, 1153], "ana": [626, 1153], "oof": [626, 1153, 1226, 1230], "anan": [626, 1153], "am": [626, 1153], "ear": [627, 638, 1154], "aya": [627, 1154, 1165], "uit": [627, 1154], "ya": [627, 1154], "onf": [627, 1154], "foo_bar_baz": 628, "split_inclus": 628, "bar_": 628, "a_1": [629, 1156, 1186, 1210], "d_4": [629, 1156], "rename_field": [629, 630, 1156, 1157], "first_part": [629, 630, 1156, 1157], "second_part": [629, 630, 1156, 1157], "remaind": [630, 1157, 1229], "app": [631, 1158], "has_prefix": 631, "nworld": 632, "foo_strip": 632, "ow": 632, "hell": [632, 1159], "rld": [632, 634, 1161], "strip_suffix": [633, 635], "strip_chars_start": [633, 635], "foo_strip_end": 633, "oldw": 633, "he": 633, "abcdeff": 633, "fed": 633, "strip_prefix": [634, 636], "strip_chars_end": [634, 636], "tworld": [634, 1159, 1161], "foo_strip_start": 634, "wod": [634, 1161], "aabcdef": 634, "cba": 634, "foobar": [635, 636, 1162, 1163, 1230], "foofoobar": [635, 1162], "foobarbar": [636, 1163], "polarstemporaltyp": [637, 1164], "penalti": [637, 639, 640, 1164, 1166, 1167], "clean": [637, 639, 640, 1164, 1166, 1167], "beforehand": [637, 639, 640, 1164, 1166, 1167], "certainli": [637, 639, 640, 1164, 1166, 1167], "00z": [637, 640, 1164, 1167], "sun": [637, 1164], "jul": [637, 1164], "s_tail_5": 638, "apaya": [638, 1165], "s_tail_n": 638, "paya": 638, "nfruit": 638, "inference_length": [641, 1168], "3420": [641, 1168], "120134": [641, 1168], "3212": [641, 1168], "143": [641, 1168, 1237], "numbers_decim": 641, "radix": [642, 1169], "parseerror": [642, 1169], "silent": [642, 1169], "110": [642, 1169], "fa1e": [642, 1169], "ff00": [642, 1169], "cafe": [642, 1169], "64030": [642, 1169], "65280": [642, 1169], "51966": [642, 1169], "variant": [643, 645, 646], "foo_low": [643, 1230], "titlecas": [645, 1172], "sing": [645, 1172], "welcom": [645, 1172], "THERE": [645, 1172], "NO": [645, 860, 1172], "foo_titl": 645, "There": [645, 1172], "foo_upp": [646, 1230], "999999": [647, 693, 736, 737, 738, 860, 1174], "0123": [647, 1174], "more_nam": [648, 746], "__getitem__": 648, "struct_col": [648, 650], "cd": [648, 650, 860], "expans": 648, "www": 650, "xxx": 650, "yyi": 650, "zzz": 650, "obvious": 650, "structfieldnotfounderror": 650, "coord": 651, "y_mul": 651, "761594": [656, 750, 1184, 1210], "replic": [657, 750, 1193, 1210], "vals_phys": [657, 750], "_top_by_a": [659, 750], "_top_by_b": [659, 750], "a_top_by_a": [659, 750], "b_top_by_a": [659, 750], "c_top_by_a": [659, 750], "a_top_by_b": [659, 750], "b_top_by_b": [659, 750], "c_top_by_b": [659, 750], "floordiv": [660, 750], "ieee": [660, 750], "754": [660, 750], "mathemat": [660, 697, 750, 1228], "undefin": [660, 750], "On": [660, 750], "operand": [660, 750], "infin": [660, 750], "value_count": [662, 750, 1210], "9223372036854775807": [663, 750], "binary_str": [667, 750], "250": [667, 750, 1103, 1210, 1227, 1237], "bin_x": [667, 750], "bin_i": [667, 750], "xor_xi": [667, 750], "bin_xor_xi": [667, 750], "00001010": [667, 750], "00001011": [667, 750], "00001000": [667, 750], "00000010": [667, 750], "11111010": [667, 750], "00000011": [667, 750], "249": [667, 750], "11111001": [667, 750], "01000010": [667, 750], "00000100": [667, 750], "01000110": [667, 750], "AND": [668, 669, 729, 860], "OR": [670, 671, 785, 855, 860], "any_horizont": 670, "polarsintegertyp": [673, 706, 707], "arctan": [674, 675, 750, 1210], "angl": [674, 675], "plane": [674, 675], "rai": [674, 675], "atan2": [674, 675, 1228], "356194": [674, 675, 1232], "arctan2": 675, "atan2d": [675, 1228], "135": [675, 1232], "arg_tru": [677, 750, 1210], "oppos": 678, "mimic": 680, "a_lag_": 680, "a_rol": 680, "swim": 681, "walk": 681, "full_sent": 681, "correlationmethod": 682, "propagate_nan": 682, "spearman": 682, "544705": 682, "covari": [684, 727, 750, 859], "acc": [686, 687, 700, 724], "include_init": 686, "accumul": [686, 687, 700, 724], "fn": [686, 687, 700, 724], "new_valu": [686, 687, 700, 724], "cum_reduc": 686, "cumsum_horizont": 688, "1w2d": [691, 692], "1985": [691, 694], "australia": 693, "sydnei": 693, "aedt": 693, "america": 694, "new_york": 694, "est": 694, "contrast": 696, "offset_bi": 696, "sometim": [696, 749], "tbl_width_char": 696, "120": [696, 1232], "add_week": 696, "add_dai": 696, "add_second": 696, "add_milli": 696, "add_hour": 696, "002": [696, 972, 973, 975], "add_calendar_dai": 696, "add_calendar_month": 696, "mo": 696, "add_calendar_year": 696, "a_b_doubl": 697, "presenc": [699, 708, 860, 1003, 1210], "f_string": 701, "placehold": 701, "hello_": 701, "_world": 701, "_bar_": 701, "foo_a_bar_1": 701, "foo_b_bar_2": 701, "foo_c_bar_3": 701, "timestep": 702, "1666683077": 702, "1666683099": 702, "12345": [702, 914, 998, 1111, 1210], "12346": 702, "agg_group": [703, 750], "allow_object": 710, "valueexcept": 710, "test_func": 711, "list_of_seri": 712, "my_custom_aggreg": 712, "understood": 712, "lf1": [729, 821, 855, 1221, 1223, 1235], "lf2": [729, 821, 855, 1221, 1223, 1235], "888": [729, 821, 855], "freeli": [729, 821, 855, 860], "c_c_c": [729, 821, 855], "BY": [729, 821, 855, 1218, 1220, 1233], "pl_frame": 729, "pd_frame": 729, "pa_tabl": 729, "from_arrai": 729, "power": [730, 1210, 1229], "a_a": 730, "a_txt": 730, "605551": 731, "605551275463989": 731, "my_struct": 732, "statement": [740, 1222, 1235], "elif": 740, "met": 740, "own": [740, 1191, 1210, 1237], "isn": 740, "technic": 746, "further": 746, "columnfactori": 746, "__call__": 746, "helper": 746, "lookup": 746, "__getattr__": 746, "idiomat": [746, 843], "quick": [746, 929, 1210, 1237], "prototyp": 746, "keystrok": 746, "drawback": 746, "readabl": 746, "and_": 750, "arcco": [750, 1210], "arccosh": [750, 1210], "arcsin": [750, 1210], "arcsinh": [750, 1210], "arctanh": [750, 1210], "arg_max": [750, 1210], "arg_min": [750, 1210], "arg_sort": [750, 1210], "arg_uniqu": [750, 1210], "cbrt": [750, 1210, 1228], "clip": [750, 1210], "cosh": [750, 1210], "cot": [750, 1210, 1228], "cum_count": [750, 1210], "cum_max": [750, 1210], "cum_min": [750, 1210], "cumulative_ev": [750, 1210], "entropi": [750, 1210], "eq_miss": [750, 1210], "ewm_mean": [750, 1210], "ewm_mean_bi": [750, 1210], "ewm_std": [750, 1210], "ewm_var": [750, 1210], "extend_const": [750, 1210], "flatten": 750, "from_json": 750, "ge": [750, 1210], "gt": [750, 1210], "has_nul": [750, 1003, 1210], "hist": [750, 1210, 1214], "implod": [750, 1210], "inspect": [750, 855], "interpolate_bi": [750, 1210], "is_between": [750, 1210], "is_finit": [750, 1210], "is_first_distinct": [750, 1210], "is_infinit": [750, 1210], "is_last_distinct": [750, 1210], "is_nan": [750, 1210], "is_not_nan": [750, 1210], "is_not_nul": [750, 1210], "kurtosi": [750, 1210], "log10": [750, 1210, 1228], "log1p": [750, 1210, 1228], "map_batch": [750, 855], "mod": [750, 1228], "mul": 750, "nan_max": [750, 1210], "nan_min": [750, 1210], "ne_miss": [750, 1210], "or_": 750, "pct_chang": [750, 1210], "peak_max": [750, 1210], "peak_min": [750, 1210], "pow": [750, 1210, 1228], "register_plugin": 750, "lib": [750, 1185, 1210], "input_wildcard_expans": [750, 859], "cast_to_supertyp": [750, 859], "pass_name_to_appli": [750, 859], "changes_length": [750, 859], "register_plugin_funct": [750, 859], "guid": [750, 859, 1237], "serializ": [750, 859], "ran": [750, 859], "highli": [750, 859], "unsaf": [750, 859], "reinterpret": [750, 1210], "repeat_bi": 750, "rolling_map": [750, 1210], "rolling_max": [750, 1210], "rolling_max_bi": 750, "rolling_mean": [750, 1210], "rolling_mean_bi": 750, "rolling_median": [750, 1210], "rolling_median_bi": 750, "rolling_min": [750, 1210], "rolling_min_bi": 750, "rolling_quantil": [750, 1210], "rolling_quantile_bi": 750, "rolling_skew": [750, 1210], "rolling_std": [750, 1210], "rolling_std_bi": 750, "rolling_sum_bi": 750, "rolling_var": [750, 1210], "rolling_var_bi": 750, "round_sig_fig": [750, 1210], "search_sort": [750, 1210], "shrink_dtyp": [750, 1210], "sin": [750, 1210, 1228], "sinh": [750, 1210], "tan": [750, 1210, 1228], "to_phys": [750, 911, 1210], "unique_count": [750, 1210], "xor": 750, "expos": 762, "miscellan": 762, "claus": [762, 1233], "parametr": 762, "hit": [767, 855], "node": [767, 771, 791, 798, 802, 807, 809, 855], "job": [767, 855], "background": [771, 855], "_eager": [771, 855], "_kwarg": [771, 855], "inprocessqueri": [771, 855], "cancel": [771, 855], "set_streaming_chunk_s": [771, 855], "collect_all_async": [772, 855], "repeatedli": [773, 779, 812, 830, 855], "snippet": [778, 855], "explainformat": [780, 855], "plain": [780, 855], "tree_format": [780, 855], "Be": [782, 855], "suscept": [782, 855], "lazygroupbi": [788, 789, 811, 855], "other_lf": [793, 855], "jan": [794, 855], "1st": [794, 855], "12th": [794, 855], "validate_output_schema": [798, 855], "streamabl": [798, 802, 855], "paramount": [798, 855], "elig": [798, 855], "invari": [798, 855], "upheld": [798, 855], "100_000": [798, 855], "199998": [798, 855], "199996": [798, 855], "199994": [798, 855], "199992": [798, 855], "show_plot": [807, 855], "truncate_nod": [807, 855], "figsiz": [807, 818, 855], "gantt": [807, 855], "group_by_partit": [807, 855], "470": [807, 855], "475": [807, 855], "1964": [807, 855], "swap": [809, 855], "mapfunct": [815, 855], "dataframescan": [815, 855], "output_schema": [815, 855], "output_path": [818, 855], "raw_output": [818, 855], "render": [818, 855], "download": [818, 855], "wors": [820, 855], "290994": [822, 855], "118034": [822, 855], "new_lf": [828, 855], "extern": [833, 855], "lf_other": [833, 855], "afoo": [833, 855], "cfoo": [833, 855], "train_lf": [833, 855], "feature_0": [833, 855], "feature_1": [833, 855], "test_lf": [833, 855], "_train": [833, 855], "feature_0_train": [833, 855], "opaqu": 843, "my_column": 843, "struct_seri": 843, "lf3": [855, 1221], "lf4": [855, 1221], "lf5": 855, "lf6": 855, "sink_csv": 855, "sink_ipc": 855, "sink_ndjson": 855, "sink_parquet": 855, "with_context": 855, "resourc": 859, "plugin_path": 859, "function_nam": 859, "emploi": 860, "complement": 860, "plenti": 860, "cde": [860, 1230], "fgg": 860, "jjk": 860, "lmn": 860, "opp": 860, "qqr": 860, "by_dtyp": 860, "as_expr": 860, "dispatch": 860, "1_234_500": 860, "5_000_555": 860, "1234500": 860, "5000555": 860, "ascii_onli": 860, "ignore_spac": 860, "alphabet": [860, 1237], "accent": 860, "idiograph": 860, "no1": 860, "espresso": 860, "latt": 860, "mocha": 860, "hmm": 860, "\u90fd\u5e02": 860, "\u5927\u962a": 860, "\u4eac\u90fd": 860, "kanji": 860, "alphanumer": 860, "1st_col": 860, "00prefix": 860, "bb": [860, 929, 1210, 1230], "n_even": 860, "invert": 860, "by_nam": 860, "by_index": 860, "4_500_000": 860, "4500000": 860, "3265500": 860, "c00": 860, "c01": 860, "c02": 860, "c96": 860, "c97": 860, "c98": 860, "c99": 860, "c20": 860, "c40": 860, "c60": 860, "c80": 860, "c75": 860, "c50": 860, "c25": 860, "ones": 860, "51": 860, "c03": 860, "c05": 860, "c93": 860, "c95": 860, "46": 860, "require_al": 860, "zap": 860, "moos": 860, "bear": 860, "2031": 860, "tstamp_tokyo": 860, "123465": 860, "tstamp_utc": 860, "999000": 860, "666000": 860, "tstamp": 860, "600000": 860, "123000": 860, "666": 860, "0005": 860, "5555": 860, "00050": 860, "55550": 860, "\u0967\u096f\u096f\u096f": 860, "\u0968\u0966\u096d\u096d": 860, "3000": 860, "td1": 860, "987000": 860, "td2": 860, "456789": [860, 965], "td3": 860, "2m": [860, 955], "456m": 860, "7d": 860, "456789\u00b5": 860, "18d": 860, "999999\u00b5": 860, "23h": 860, "987m": 860, "14d": 860, "16h": 860, "39m": 860, "21d": 860, "456001\u00b5": 860, "simpler": 860, "expand_selector": 860, "broader": 860, "colz": [860, 1237], "desc": [860, 1218, 1220, 1224], "everyth": 860, "signed_integ": 860, "unsigned_integ": 860, "is_selector": 860, "obj": 860, "3456": 860, "7654": 860, "4321": 860, "include_categor": 860, "2345": 860, "292432": [868, 1210], "549306": [872, 1210], "innter": 886, "field_2": [899, 1065], "n00": [899, 1065], "n01": [899, 1065], "n02": [899, 1065], "hexadecim": [903, 904], "aaaa": [903, 904], "8a": [903, 904], "aad": [903, 904], "invalid_valu": 903, "44225": [913, 1210], "56789": [914, 998, 1111, 1210], "901234": [914, 998, 1111, 1210], "1232e": [919, 921, 1210], "1656e15": [921, 1210], "581139": [929, 1210], "arraylik": [931, 1210], "ser": [940, 941, 967], "kathmandu": [940, 941, 967], "0545": [940, 941, 967], "500m": [951, 953, 959], "date_minus_1y_2mon": 960, "165": [964, 977], "round_str": 964, "round_td": 964, "111110": 965, "765431": 965, "11111": 965, "timestamp_n": 968, "978307200000000000": 968, "978393600000000000": 968, "978480000000000000": 968, "005": [983, 1210], "06293300616044681": [983, 1210], "65": [983, 1210], "8568409950394724": [983, 1210], "4000000": [985, 1210], "814697265625": [985, 1210], "085537": [990, 1210], "sorted_asc": [997, 1210], "sorted_desc": [997, 1210], "bitmask": [1003, 1210], "absenc": [1003, 1210], "confirm": [1003, 1210], "10734580197236529959": [1004, 1210], "3022416320763508302": [1004, 1210], "13756996518000038261": [1004, 1210], "grade": [1025, 1210], "79": [1025, 1210], "93": [1025, 1210], "0522623626787952": [1025, 1210], "9477376373212048": [1025, 1210], "1040361802642726": [1025, 1210], "2147483648": [1071, 1210], "pythonliter": [1073, 1074, 1075, 1076, 1114, 1210], "166667": [1086, 1210], "142857": [1086, 1210], "1152921504606846976": [1094, 1210], "17293822569102704640": [1094, 1210], "18446744073709551614": [1094, 1210], "150": [1103, 1210], "450": [1103, 1210], "dev": [1108, 1210], "527525": [1108, 1210], "frequent": [1114, 1116, 1210], "2246e": [1124, 1183, 1210], "34776706224699483": [1126, 1210], "732051": [1129, 1210], "idx_rx": 1142, "idx_lit": 1142, "3rd": [1143, 1165], "pap": 1143, "dragonfr": 1143, "orld": 1160, "gonfruit": 1165, "6331e16": [1183, 1210, 1232], "int64arrai": [1185, 1210], "a_2": [1186, 1210], "a_3": [1186, 1210], "s_from_str_repr": [1188, 1210], "zero_copy_onli": [1191, 1210], "127": [1198, 1210], "position": 1210, "scenario": 1210, "chunk_length": 1210, "get_chunk": 1210, "has_valid": 1210, "is_sort": 1210, "new_from_index": 1210, "histogram": [1210, 1214], "kde": [1210, 1214], "037037": 1210, "015625": 1210, "godfath": 1218, "1972": 1218, "6_000_000": 1218, "134_821_952": 1218, "dark": 1218, "knight": 1218, "2008": 1218, "185_000_000": 1218, "533_316_061": 1218, "schindler": 1218, "1993": 1218, "22_000_000": 1218, "96_067_179": 1218, "pulp": 1218, "fiction": 1218, "1994": 1218, "8_000_000": 1218, "107_930_000": 1218, "shawshank": 1218, "redempt": 1218, "25_000_000": 1218, "28_341_469": 1218, "release_year": 1218, "budget": 1218, "gross": 1218, "imdb_scor": 1218, "ctx": [1218, 1219, 1220, 1221, 1222, 1223], "film": 1218, "decad": [1218, 1231], "total_gross": 1218, "n_film": 1218, "533316061": 1218, "232338648": 1218, "134821952": 1218, "compatibleframetyp": [1219, 1221, 1234], "register_glob": [1219, 1221, 1223, 1234], "register_mani": [1219, 1220, 1223], "unregist": [1219, 1220, 1221, 1234], "frame_data": [1219, 1222], "all_compat": 1220, "named_fram": [1221, 1234], "tbl1": [1221, 1223], "tbl2": [1221, 1223], "tbl3": 1221, "tbl4": 1221, "hello_world": 1222, "hello_data": 1222, "persist": 1223, "tbl0": 1223, "misc": 1223, "testing1234": 1223, "test1": 1223, "test2": 1223, "test3": 1223, "delet": [1224, 1236], "greatest": [1225, 1228], "bar_avg": 1225, "n_bar": 1225, "n_foo_uniqu": 1225, "ff": 1225, "bar_max": [1225, 1226], "bar_median": 1225, "bar_min": 1225, "foo_std": 1225, "bar_std": 1225, "429101": 1225, "686241": 1225, "foo_sum": [1225, 1226], "bar_sum": [1225, 1226], "foo_var": 1225, "bar_var": 1225, "foo_mean": 1226, "bar_mean": 1226, "foo_str": 1226, "foo_uniqu": 1226, "foo_max": 1226, "expr1": 1227, "expr2": 1227, "avg": 1228, "stddev": 1228, "array_contain": 1228, "array_get": 1228, "array_length": 1228, "array_low": 1228, "array_mean": 1228, "array_revers": 1228, "array_sum": 1228, "array_to_str": 1228, "array_uniqu": 1228, "array_upp": 1228, "IF": 1228, "ifnul": 1228, "nullif": 1228, "div": 1228, "log2": 1228, "bit_length": 1228, "initcap": 1228, "ltrim": 1228, "octet_length": 1228, "regexp_lik": 1228, "rtrim": 1228, "strpo": 1228, "date_part": 1228, "trigonometri": [1228, 1233], "aco": 1228, "acosd": 1228, "asin": 1228, "asind": 1228, "atan": 1228, "atand": 1228, "cotd": 1228, "cosd": 1228, "sind": 1228, "tand": 1228, "quotient": 1229, "awai": 1229, "\ud835\udf0b": 1229, "abs_a": 1229, "cbrt_a": 1229, "ceil_a": 1229, "a_div_2": 1229, "a_div_5": 1229, "exp_a": 1229, "floor_a": 1229, "ln_a": 1229, "log16_a": 1229, "a_log2": 1229, "log10_a": 1229, "log1p_a": 1229, "609438": 1229, "a_mod_2": 1229, "x_pow_8": 1229, "65536": 1229, "81": 1229, "x_round": 1229, "x_round_1": 1229, "sign_x": 1229, "4096": 1229, "sqrt_x": 1229, "togeth": 1230, "interleav": 1230, "capit": 1230, "strpost": 1230, "portion": 1230, "dddd": 1230, "n_bit": 1230, "ww": [1230, 1236], "aazz": 1230, "byi": 1230, "cxx": 1230, "ddww": 1230, "ends_a": 1230, "abcd": 1230, "efgh": 1230, "ijkl": 1230, "mnop": 1230, "foo1": 1230, "bar2": 1230, "iso_lang": 1230, "de": 1230, "ru": 1230, "wei\u00df": 1230, "\u0441\u0438\u043d\u0438\u0439": 1230, "amarillo": 1230, "abc123": 1230, "4ab4a": 1230, "321cba": 1230, "ends_in_digit": 1230, "11aabb": 1230, "bcbc45": 1230, "c123": 1230, "11aa": 1230, "c45": 1230, "grape": 1230, "elppa": 1230, "ananab": 1230, "egnaro": 1230, "eparg": 1230, "fghi": 1230, "jklmn": 1230, "mn": 1230, "avocado": 1230, "starts_a": 1230, "pos_a": 1230, "foo_3_4": 1230, "ple": 1230, "nana": 1230, "ang": 1230, "ap": 1230, "8601": 1231, "str_date": 1231, "1969": 1231, "millennium": 1231, "millennia": 1231, "centuri": 1231, "isoyear": 1231, "mon": 1231, "dayofyear": 1231, "doi": 1231, "dayofweek": 1231, "dow": 1231, "isoweek": 1231, "isodow": 1231, "sec": [1231, 1237], "2026": 1231, "196": 1231, "202": 1231, "207": 1231, "rad": 1232, "094395": 1232, "047198": 1232, "deg": 1232, "848062": 1232, "523599": 1232, "107149": 1232, "atan2_ab": 1232, "927295": 1232, "270": 1232, "atan2d_ab": 1232, "434949": 1232, "963757": 1232, "457658": 1232, "642093": 1232, "636253": 1232, "289962": 1232, "416147": 1232, "540302": 1232, "712389": 1232, "execute_glob": 1234, "two_a": 1234, "__enter__": 1234, "__exit__": 1234, "exc_typ": 1234, "baseexcept": 1234, "exc_val": 1234, "exc_tb": 1234, "tracebacktyp": 1234, "compos": 1235, "david": 1235, "lf_union": 1235, "lf_union_al": 1235, "lf_union_by_nam": 1235, "new_tabl": 1236, "old_tabl": 1236, "machin": 1237, "xdist": 1237, "hardwar": 1237, "setup": 1237, "numeric_dtyp": 1237, "test_numer": 1237, "is_numer": 1237, "col4": 1237, "29096": 1237, "485": 1237, "2147483647": 1237, "8257e14": 1237, "7508": 1237, "37338": 1237, "7264": 1237, "16996": 1237, "121": 1237, "361": 1237, "63204": 1237, "1443e235": 1237, "conform": 1237, "st": 1237, "ascii_lett": 1237, "id_char": 1237, "ccy": 1237, "sampled_from": 1237, "gbp": 1237, "jpy": 1237, "price": 1237, "min_valu": 1237, "max_valu": 1237, "test_price_calcul": 1237, "a101": 1237, "8nin": 1237, "qhoo": 1237, "714": 1237, "544": 1237, "i0e0": 1237, "uint8_pair": 1237, "drawfn": 1237, "uint": 1237, "zip": 1237, "test_miscellan": 1237, "235": 1237, "87": 1237, "186": 1237, "174": 1237, "179": 1237, "213": 1237, "149": 1237, "221": 1237, "86": 1237, "255": 1237}, "objects": {"polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[153, 0, 1, "", "__dataframe__"], [154, 0, 1, "", "approx_n_unique"], [155, 0, 1, "", "bottom_k"], [156, 0, 1, "", "cast"], [157, 0, 1, "", "clear"], [158, 0, 1, "", "clone"], [159, 1, 1, "", "columns"], [160, 0, 1, "", "corr"], [161, 0, 1, "", "count"], [162, 0, 1, "", "describe"], [163, 0, 1, "", "deserialize"], [164, 0, 1, "", "drop"], [165, 0, 1, "", "drop_in_place"], [166, 0, 1, "", "drop_nulls"], [167, 1, 1, "", "dtypes"], [168, 0, 1, "", "equals"], [169, 0, 1, "", "estimated_size"], [170, 0, 1, "", "explode"], [171, 0, 1, "", "extend"], [172, 0, 1, "", "fill_nan"], [173, 0, 1, "", "fill_null"], [174, 0, 1, "", "filter"], [175, 1, 1, "", "flags"], [176, 0, 1, "", "fold"], [177, 0, 1, "", "gather_every"], [178, 0, 1, "", "get_column"], [179, 0, 1, "", "get_column_index"], [180, 0, 1, "", "get_columns"], [181, 0, 1, "", "glimpse"], [182, 0, 1, "", "group_by"], [183, 0, 1, "", "group_by_dynamic"], [184, 0, 1, "", "hash_rows"], [185, 0, 1, "", "head"], [186, 1, 1, "", "height"], [187, 0, 1, "", "hstack"], [188, 0, 1, "", "insert_column"], [189, 0, 1, "", "interpolate"], [190, 0, 1, "", "is_duplicated"], [191, 0, 1, "", "is_empty"], [192, 0, 1, "", "is_unique"], [193, 0, 1, "", "item"], [194, 0, 1, "", "iter_columns"], [195, 0, 1, "", "iter_rows"], [196, 0, 1, "", "iter_slices"], [197, 0, 1, "", "join"], [198, 0, 1, "", "join_asof"], [199, 0, 1, "", "lazy"], [200, 0, 1, "", "limit"], [201, 0, 1, "", "map_rows"], [202, 0, 1, "", "max"], [203, 0, 1, "", "max_horizontal"], [204, 0, 1, "", "mean"], [205, 0, 1, "", "mean_horizontal"], [206, 0, 1, "", "median"], [207, 0, 1, "", "melt"], [208, 0, 1, "", "merge_sorted"], [209, 0, 1, "", "min"], [210, 0, 1, "", "min_horizontal"], [211, 0, 1, "", "n_chunks"], [212, 0, 1, "", "n_unique"], [213, 0, 1, "", "null_count"], [214, 0, 1, "", "partition_by"], [215, 0, 1, "", "pipe"], [216, 0, 1, "", "pivot"], [217, 0, 1, "", "product"], [218, 0, 1, "", "quantile"], [219, 0, 1, "", "rechunk"], [220, 0, 1, "", "rename"], [221, 0, 1, "", "replace_column"], [222, 0, 1, "", "reverse"], [223, 0, 1, "", "rolling"], [224, 0, 1, "", "row"], [225, 0, 1, "", "rows"], [226, 0, 1, "", "rows_by_key"], [227, 0, 1, "", "sample"], [228, 1, 1, "", "schema"], [229, 0, 1, "", "select"], [230, 0, 1, "", "select_seq"], [231, 0, 1, "", "serialize"], [232, 0, 1, "", "set_sorted"], [233, 1, 1, "", "shape"], [234, 0, 1, "", "shift"], [235, 0, 1, "", "shrink_to_fit"], [236, 0, 1, "", "slice"], [237, 0, 1, "", "sort"], [238, 0, 1, "", "sql"], [239, 0, 1, "", "std"], [240, 0, 1, "", "sum"], [241, 0, 1, "", "sum_horizontal"], [242, 0, 1, "", "tail"], [243, 0, 1, "", "to_arrow"], [244, 0, 1, "", "to_dict"], [245, 0, 1, "", "to_dicts"], [246, 0, 1, "", "to_dummies"], [247, 0, 1, "", "to_init_repr"], [248, 0, 1, "", "to_jax"], [249, 0, 1, "", "to_numpy"], [250, 0, 1, "", "to_pandas"], [251, 0, 1, "", "to_series"], [252, 0, 1, "", "to_struct"], [253, 0, 1, "", "to_torch"], [254, 0, 1, "", "top_k"], [255, 0, 1, "", "transpose"], [256, 0, 1, "", "unique"], [257, 0, 1, "", "unnest"], [258, 0, 1, "", "unstack"], [259, 0, 1, "", "update"], [260, 0, 1, "", "upsample"], [261, 0, 1, "", "var"], [262, 0, 1, "", "vstack"], [263, 1, 1, "", "width"], [264, 0, 1, "", "with_columns"], [265, 0, 1, "", "with_columns_seq"], [266, 0, 1, "", "with_row_count"], [267, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[297, 0, 1, "", "abs"], [298, 0, 1, "", "add"], [299, 0, 1, "", "agg_groups"], [300, 0, 1, "", "alias"], [301, 0, 1, "", "all"], [302, 0, 1, "", "and_"], [303, 0, 1, "", "any"], [304, 0, 1, "", "append"], [305, 0, 1, "", "approx_n_unique"], [306, 0, 1, "", "arccos"], [307, 0, 1, "", "arccosh"], [308, 0, 1, "", "arcsin"], [309, 0, 1, "", "arcsinh"], [310, 0, 1, "", "arctan"], [311, 0, 1, "", "arctanh"], [312, 0, 1, "", "arg_max"], [313, 0, 1, "", "arg_min"], [314, 0, 1, "", "arg_sort"], [315, 0, 1, "", "arg_true"], [316, 0, 1, "", "arg_unique"], [341, 0, 1, "", "backward_fill"], [347, 0, 1, "", "bottom_k"], [348, 0, 1, "", "bottom_k_by"], [349, 0, 1, "", "cast"], [351, 0, 1, "", "cbrt"], [352, 0, 1, "", "ceil"], [353, 0, 1, "", "clip"], [354, 0, 1, "", "cos"], [355, 0, 1, "", "cosh"], [356, 0, 1, "", "cot"], [357, 0, 1, "", "count"], [358, 0, 1, "", "cum_count"], [359, 0, 1, "", "cum_max"], [360, 0, 1, "", "cum_min"], [361, 0, 1, "", "cum_prod"], [362, 0, 1, "", "cum_sum"], [363, 0, 1, "", "cumulative_eval"], [364, 0, 1, "", "cut"], [365, 0, 1, "", "degrees"], [366, 0, 1, "", "deserialize"], [367, 0, 1, "", "diff"], [368, 0, 1, "", "dot"], [369, 0, 1, "", "drop_nans"], [370, 0, 1, "", "drop_nulls"], [415, 0, 1, "", "entropy"], [416, 0, 1, "", "eq"], [417, 0, 1, "", "eq_missing"], [418, 0, 1, "", "ewm_mean"], [419, 0, 1, "", "ewm_mean_by"], [420, 0, 1, "", "ewm_std"], [421, 0, 1, "", "ewm_var"], [422, 0, 1, "", "exclude"], [423, 0, 1, "", "exp"], [424, 0, 1, "", "explode"], [425, 0, 1, "", "extend_constant"], [426, 0, 1, "", "fill_nan"], [427, 0, 1, "", "fill_null"], [428, 0, 1, "", "filter"], [429, 0, 1, "", "first"], [430, 0, 1, "", "flatten"], [431, 0, 1, "", "floor"], [432, 0, 1, "", "floordiv"], [433, 0, 1, "", "forward_fill"], [434, 0, 1, "", "from_json"], [435, 0, 1, "", "gather"], [436, 0, 1, "", "gather_every"], [437, 0, 1, "", "ge"], [438, 0, 1, "", "get"], [439, 0, 1, "", "gt"], [440, 0, 1, "", "has_nulls"], [441, 0, 1, "", "hash"], [442, 0, 1, "", "head"], [443, 0, 1, "", "hist"], [444, 0, 1, "", "implode"], [445, 0, 1, "", "inspect"], [446, 0, 1, "", "interpolate"], [447, 0, 1, "", "interpolate_by"], [448, 0, 1, "", "is_between"], [449, 0, 1, "", "is_duplicated"], [450, 0, 1, "", "is_finite"], [451, 0, 1, "", "is_first_distinct"], [452, 0, 1, "", "is_in"], [453, 0, 1, "", "is_infinite"], [454, 0, 1, "", "is_last_distinct"], [455, 0, 1, "", "is_nan"], [456, 0, 1, "", "is_not_nan"], [457, 0, 1, "", "is_not_null"], [458, 0, 1, "", "is_null"], [459, 0, 1, "", "is_unique"], [460, 0, 1, "", "kurtosis"], [461, 0, 1, "", "last"], [462, 0, 1, "", "le"], [463, 0, 1, "", "len"], [464, 0, 1, "", "limit"], [505, 0, 1, "", "log"], [506, 0, 1, "", "log10"], [507, 0, 1, "", "log1p"], [508, 0, 1, "", "lower_bound"], [509, 0, 1, "", "lt"], [510, 0, 1, "", "map_batches"], [511, 0, 1, "", "map_elements"], [512, 0, 1, "", "max"], [513, 0, 1, "", "mean"], [514, 0, 1, "", "median"], [527, 0, 1, "", "min"], [528, 0, 1, "", "mod"], [529, 0, 1, "", "mode"], [530, 0, 1, "", "mul"], [531, 0, 1, "", "n_unique"], [541, 0, 1, "", "nan_max"], [542, 0, 1, "", "nan_min"], [543, 0, 1, "", "ne"], [544, 0, 1, "", "ne_missing"], [545, 0, 1, "", "neg"], [546, 0, 1, "", "not_"], [547, 0, 1, "", "null_count"], [548, 0, 1, "", "or_"], [549, 0, 1, "", "over"], [550, 0, 1, "", "pct_change"], [551, 0, 1, "", "peak_max"], [552, 0, 1, "", "peak_min"], [553, 0, 1, "", "pipe"], [554, 0, 1, "", "pow"], [555, 0, 1, "", "product"], [556, 0, 1, "", "qcut"], [557, 0, 1, "", "quantile"], [558, 0, 1, "", "radians"], [559, 0, 1, "", "rank"], [560, 0, 1, "", "rechunk"], [561, 0, 1, "", "reinterpret"], [562, 0, 1, "", "repeat_by"], [563, 0, 1, "", "replace"], [564, 0, 1, "", "reshape"], [565, 0, 1, "", "reverse"], [566, 0, 1, "", "rle"], [567, 0, 1, "", "rle_id"], [568, 0, 1, "", "rolling"], [569, 0, 1, "", "rolling_map"], [570, 0, 1, "", "rolling_max"], [571, 0, 1, "", "rolling_max_by"], [572, 0, 1, "", "rolling_mean"], [573, 0, 1, "", "rolling_mean_by"], [574, 0, 1, "", "rolling_median"], [575, 0, 1, "", "rolling_median_by"], [576, 0, 1, "", "rolling_min"], [577, 0, 1, "", "rolling_min_by"], [578, 0, 1, "", "rolling_quantile"], [579, 0, 1, "", "rolling_quantile_by"], [580, 0, 1, "", "rolling_skew"], [581, 0, 1, "", "rolling_std"], [582, 0, 1, "", "rolling_std_by"], [583, 0, 1, "", "rolling_sum"], [584, 0, 1, "", "rolling_sum_by"], [585, 0, 1, "", "rolling_var"], [586, 0, 1, "", "rolling_var_by"], [587, 0, 1, "", "round"], [588, 0, 1, "", "round_sig_figs"], [589, 0, 1, "", "sample"], [590, 0, 1, "", "search_sorted"], [591, 0, 1, "", "set_sorted"], [592, 0, 1, "", "shift"], [593, 0, 1, "", "shrink_dtype"], [594, 0, 1, "", "shuffle"], [595, 0, 1, "", "sign"], [596, 0, 1, "", "sin"], [597, 0, 1, "", "sinh"], [598, 0, 1, "", "skew"], [599, 0, 1, "", "slice"], [600, 0, 1, "", "sort"], [601, 0, 1, "", "sort_by"], [602, 0, 1, "", "sqrt"], [603, 0, 1, "", "std"], [652, 0, 1, "", "sub"], [653, 0, 1, "", "sum"], [654, 0, 1, "", "tail"], [655, 0, 1, "", "tan"], [656, 0, 1, "", "tanh"], [657, 0, 1, "", "to_physical"], [658, 0, 1, "", "top_k"], [659, 0, 1, "", "top_k_by"], [660, 0, 1, "", "truediv"], [661, 0, 1, "", "unique"], [662, 0, 1, "", "unique_counts"], [663, 0, 1, "", "upper_bound"], [664, 0, 1, "", "value_counts"], [665, 0, 1, "", "var"], [666, 0, 1, "", "where"], [667, 0, 1, "", "xor"]], "polars.Expr.arr": [[317, 0, 1, "", "all"], [318, 0, 1, "", "any"], [319, 0, 1, "", "arg_max"], [320, 0, 1, "", "arg_min"], [321, 0, 1, "", "contains"], [322, 0, 1, "", "count_matches"], [323, 0, 1, "", "explode"], [324, 0, 1, "", "first"], [325, 0, 1, "", "get"], [326, 0, 1, "", "join"], [327, 0, 1, "", "last"], [328, 0, 1, "", "max"], [329, 0, 1, "", "median"], [330, 0, 1, "", "min"], [331, 0, 1, "", "n_unique"], [332, 0, 1, "", "reverse"], [333, 0, 1, "", "shift"], [334, 0, 1, "", "sort"], [335, 0, 1, "", "std"], [336, 0, 1, "", "sum"], [337, 0, 1, "", "to_list"], [338, 0, 1, "", "to_struct"], [339, 0, 1, "", "unique"], [340, 0, 1, "", "var"]], "polars.Expr.bin": [[342, 0, 1, "", "contains"], [343, 0, 1, "", "decode"], [344, 0, 1, "", "encode"], [345, 0, 1, "", "ends_with"], [346, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[350, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[371, 0, 1, "", "add_business_days"], [372, 0, 1, "", "base_utc_offset"], [373, 0, 1, "", "cast_time_unit"], [374, 0, 1, "", "century"], [375, 0, 1, "", "combine"], [376, 0, 1, "", "convert_time_zone"], [377, 0, 1, "", "date"], [378, 0, 1, "", "datetime"], [379, 0, 1, "", "day"], [380, 0, 1, "", "dst_offset"], [381, 0, 1, "", "epoch"], [382, 0, 1, "", "hour"], [383, 0, 1, "", "is_leap_year"], [384, 0, 1, "", "iso_year"], [385, 0, 1, "", "microsecond"], [386, 0, 1, "", "millennium"], [387, 0, 1, "", "millisecond"], [388, 0, 1, "", "minute"], [389, 0, 1, "", "month"], [390, 0, 1, "", "month_end"], [391, 0, 1, "", "month_start"], [392, 0, 1, "", "nanosecond"], [393, 0, 1, "", "offset_by"], [394, 0, 1, "", "ordinal_day"], [395, 0, 1, "", "quarter"], [396, 0, 1, "", "replace_time_zone"], [397, 0, 1, "", "round"], [398, 0, 1, "", "second"], [399, 0, 1, "", "strftime"], [400, 0, 1, "", "time"], [401, 0, 1, "", "timestamp"], [402, 0, 1, "", "to_string"], [403, 0, 1, "", "total_days"], [404, 0, 1, "", "total_hours"], [405, 0, 1, "", "total_microseconds"], [406, 0, 1, "", "total_milliseconds"], [407, 0, 1, "", "total_minutes"], [408, 0, 1, "", "total_nanoseconds"], [409, 0, 1, "", "total_seconds"], [410, 0, 1, "", "truncate"], [411, 0, 1, "", "week"], [412, 0, 1, "", "weekday"], [413, 0, 1, "", "with_time_unit"], [414, 0, 1, "", "year"]], "polars.Expr.list": [[465, 0, 1, "", "all"], [466, 0, 1, "", "any"], [467, 0, 1, "", "arg_max"], [468, 0, 1, "", "arg_min"], [469, 0, 1, "", "concat"], [470, 0, 1, "", "contains"], [471, 0, 1, "", "count_matches"], [472, 0, 1, "", "diff"], [473, 0, 1, "", "drop_nulls"], [474, 0, 1, "", "eval"], [475, 0, 1, "", "explode"], [476, 0, 1, "", "first"], [477, 0, 1, "", "gather"], [478, 0, 1, "", "gather_every"], [479, 0, 1, "", "get"], [480, 0, 1, "", "head"], [481, 0, 1, "", "join"], [482, 0, 1, "", "last"], [483, 0, 1, "", "len"], [484, 0, 1, "", "max"], [485, 0, 1, "", "mean"], [486, 0, 1, "", "median"], [487, 0, 1, "", "min"], [488, 0, 1, "", "n_unique"], [489, 0, 1, "", "reverse"], [490, 0, 1, "", "sample"], [491, 0, 1, "", "set_difference"], [492, 0, 1, "", "set_intersection"], [493, 0, 1, "", "set_symmetric_difference"], [494, 0, 1, "", "set_union"], [495, 0, 1, "", "shift"], [496, 0, 1, "", "slice"], [497, 0, 1, "", "sort"], [498, 0, 1, "", "std"], [499, 0, 1, "", "sum"], [500, 0, 1, "", "tail"], [501, 0, 1, "", "to_array"], [502, 0, 1, "", "to_struct"], [503, 0, 1, "", "unique"], [504, 0, 1, "", "var"]], "polars.Expr.meta": [[515, 0, 1, "", "eq"], [516, 0, 1, "", "has_multiple_outputs"], [517, 0, 1, "", "is_column_selection"], [518, 0, 1, "", "is_regex_projection"], [519, 0, 1, "", "ne"], [520, 0, 1, "", "output_name"], [521, 0, 1, "", "pop"], [522, 0, 1, "", "root_names"], [523, 0, 1, "", "serialize"], [524, 0, 1, "", "tree_format"], [525, 0, 1, "", "undo_aliases"], [526, 0, 1, "", "write_json"]], "polars.Expr.name": [[532, 0, 1, "", "keep"], [533, 0, 1, "", "map"], [534, 0, 1, "", "map_fields"], [535, 0, 1, "", "prefix"], [536, 0, 1, "", "prefix_fields"], [537, 0, 1, "", "suffix"], [538, 0, 1, "", "suffix_fields"], [539, 0, 1, "", "to_lowercase"], [540, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[604, 0, 1, "", "concat"], [605, 0, 1, "", "contains"], [606, 0, 1, "", "contains_any"], [607, 0, 1, "", "count_matches"], [608, 0, 1, "", "decode"], [609, 0, 1, "", "encode"], [610, 0, 1, "", "ends_with"], [611, 0, 1, "", "explode"], [612, 0, 1, "", "extract"], [613, 0, 1, "", "extract_all"], [614, 0, 1, "", "extract_groups"], [615, 0, 1, "", "find"], [616, 0, 1, "", "head"], [617, 0, 1, "", "json_decode"], [618, 0, 1, "", "json_path_match"], [619, 0, 1, "", "len_bytes"], [620, 0, 1, "", "len_chars"], [621, 0, 1, "", "pad_end"], [622, 0, 1, "", "pad_start"], [623, 0, 1, "", "replace"], [624, 0, 1, "", "replace_all"], [625, 0, 1, "", "replace_many"], [626, 0, 1, "", "reverse"], [627, 0, 1, "", "slice"], [628, 0, 1, "", "split"], [629, 0, 1, "", "split_exact"], [630, 0, 1, "", "splitn"], [631, 0, 1, "", "starts_with"], [632, 0, 1, "", "strip_chars"], [633, 0, 1, "", "strip_chars_end"], [634, 0, 1, "", "strip_chars_start"], [635, 0, 1, "", "strip_prefix"], [636, 0, 1, "", "strip_suffix"], [637, 0, 1, "", "strptime"], [638, 0, 1, "", "tail"], [639, 0, 1, "", "to_date"], [640, 0, 1, "", "to_datetime"], [641, 0, 1, "", "to_decimal"], [642, 0, 1, "", "to_integer"], [643, 0, 1, "", "to_lowercase"], [644, 0, 1, "", "to_time"], [645, 0, 1, "", "to_titlecase"], [646, 0, 1, "", "to_uppercase"], [647, 0, 1, "", "zfill"]], "polars.Expr.struct": [[648, 0, 1, "", "field"], [649, 0, 1, "", "json_encode"], [650, 0, 1, "", "rename_fields"], [651, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[765, 0, 1, "", "approx_n_unique"], [766, 0, 1, "", "bottom_k"], [767, 0, 1, "", "cache"], [768, 0, 1, "", "cast"], [769, 0, 1, "", "clear"], [770, 0, 1, "", "clone"], [771, 0, 1, "", "collect"], [772, 0, 1, "", "collect_async"], [773, 1, 1, "", "columns"], [774, 0, 1, "", "count"], [775, 0, 1, "", "describe"], [776, 0, 1, "", "deserialize"], [777, 0, 1, "", "drop"], [778, 0, 1, "", "drop_nulls"], [779, 1, 1, "", "dtypes"], [780, 0, 1, "", "explain"], [781, 0, 1, "", "explode"], [782, 0, 1, "", "fetch"], [783, 0, 1, "", "fill_nan"], [784, 0, 1, "", "fill_null"], [785, 0, 1, "", "filter"], [786, 0, 1, "", "first"], [787, 0, 1, "", "gather_every"], [788, 0, 1, "", "group_by"], [789, 0, 1, "", "group_by_dynamic"], [790, 0, 1, "", "head"], [791, 0, 1, "", "inspect"], [792, 0, 1, "", "interpolate"], [793, 0, 1, "", "join"], [794, 0, 1, "", "join_asof"], [795, 0, 1, "", "last"], [796, 0, 1, "", "lazy"], [797, 0, 1, "", "limit"], [798, 0, 1, "", "map_batches"], [799, 0, 1, "", "max"], [800, 0, 1, "", "mean"], [801, 0, 1, "", "median"], [802, 0, 1, "", "melt"], [803, 0, 1, "", "merge_sorted"], [804, 0, 1, "", "min"], [805, 0, 1, "", "null_count"], [806, 0, 1, "", "pipe"], [807, 0, 1, "", "profile"], [808, 0, 1, "", "quantile"], [809, 0, 1, "", "rename"], [810, 0, 1, "", "reverse"], [811, 0, 1, "", "rolling"], [812, 1, 1, "", "schema"], [813, 0, 1, "", "select"], [814, 0, 1, "", "select_seq"], [815, 0, 1, "", "serialize"], [816, 0, 1, "", "set_sorted"], [817, 0, 1, "", "shift"], [818, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [819, 0, 1, "", "slice"], [820, 0, 1, "", "sort"], [821, 0, 1, "", "sql"], [822, 0, 1, "", "std"], [823, 0, 1, "", "sum"], [824, 0, 1, "", "tail"], [825, 0, 1, "", "top_k"], [826, 0, 1, "", "unique"], [827, 0, 1, "", "unnest"], [828, 0, 1, "", "update"], [829, 0, 1, "", "var"], [830, 1, 1, "", "width"], [831, 0, 1, "", "with_columns"], [832, 0, 1, "", "with_columns_seq"], [833, 0, 1, "", "with_context"], [834, 0, 1, "", "with_row_count"], [835, 0, 1, "", "with_row_index"]], "polars": [[1234, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [668, 4, 1, "", "all"], [669, 4, 1, "", "all_horizontal"], [670, 4, 1, "", "any"], [671, 4, 1, "", "any_horizontal"], [672, 4, 1, "", "approx_n_unique"], [673, 4, 1, "", "arange"], [674, 4, 1, "", "arctan2"], [675, 4, 1, "", "arctan2d"], [676, 4, 1, "", "arg_sort_by"], [677, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [678, 4, 1, "", "business_day_count"], [679, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [680, 4, 1, "", "concat_list"], [681, 4, 1, "", "concat_str"], [682, 4, 1, "", "corr"], [683, 4, 1, "", "count"], [684, 4, 1, "", "cov"], [685, 4, 1, "", "cum_count"], [686, 4, 1, "", "cum_fold"], [687, 4, 1, "", "cum_reduce"], [688, 4, 1, "", "cum_sum"], [689, 4, 1, "", "cum_sum_horizontal"], [690, 4, 1, "", "date"], [691, 4, 1, "", "date_range"], [692, 4, 1, "", "date_ranges"], [693, 4, 1, "", "datetime"], [694, 4, 1, "", "datetime_range"], [695, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [696, 4, 1, "", "duration"], [697, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [698, 4, 1, "", "exclude"], [699, 4, 1, "", "first"], [700, 4, 1, "", "fold"], [701, 4, 1, "", "format"], [100, 4, 1, "", "from_arrow"], [101, 4, 1, "", "from_dataframe"], [102, 4, 1, "", "from_dict"], [103, 4, 1, "", "from_dicts"], [702, 4, 1, "", "from_epoch"], [104, 4, 1, "", "from_numpy"], [105, 4, 1, "", "from_pandas"], [106, 4, 1, "", "from_records"], [107, 4, 1, "", "from_repr"], [108, 4, 1, "", "get_index_type"], [703, 4, 1, "", "groups"], [704, 4, 1, "", "head"], [705, 4, 1, "", "implode"], [706, 4, 1, "", "int_range"], [707, 4, 1, "", "int_ranges"], [708, 4, 1, "", "last"], [709, 4, 1, "", "len"], [710, 4, 1, "", "lit"], [711, 4, 1, "", "map_batches"], [712, 4, 1, "", "map_groups"], [713, 4, 1, "", "max"], [714, 4, 1, "", "max_horizontal"], [715, 4, 1, "", "mean"], [716, 4, 1, "", "mean_horizontal"], [717, 4, 1, "", "median"], [718, 4, 1, "", "min"], [719, 4, 1, "", "min_horizontal"], [720, 4, 1, "", "n_unique"], [721, 4, 1, "", "nth"], [722, 4, 1, "", "ones"], [859, 6, 0, "-", "plugins"], [723, 4, 1, "", "quantile"], [110, 4, 1, "", "read_avro"], [111, 4, 1, "", "read_clipboard"], [112, 4, 1, "", "read_csv"], [113, 4, 1, "", "read_csv_batched"], [114, 4, 1, "", "read_database"], [115, 4, 1, "", "read_database_uri"], [116, 4, 1, "", "read_delta"], [117, 4, 1, "", "read_excel"], [118, 4, 1, "", "read_ipc"], [119, 4, 1, "", "read_ipc_schema"], [120, 4, 1, "", "read_ipc_stream"], [121, 4, 1, "", "read_json"], [122, 4, 1, "", "read_ndjson"], [123, 4, 1, "", "read_ods"], [124, 4, 1, "", "read_parquet"], [125, 4, 1, "", "read_parquet_schema"], [724, 4, 1, "", "reduce"], [725, 4, 1, "", "repeat"], [726, 4, 1, "", "rolling_corr"], [727, 4, 1, "", "rolling_cov"], [126, 4, 1, "", "scan_csv"], [127, 4, 1, "", "scan_delta"], [128, 4, 1, "", "scan_iceberg"], [129, 4, 1, "", "scan_ipc"], [130, 4, 1, "", "scan_ndjson"], [131, 4, 1, "", "scan_parquet"], [132, 4, 1, "", "scan_pyarrow_dataset"], [728, 4, 1, "", "select"], [860, 6, 0, "-", "selectors"], [133, 4, 1, "", "set_random_seed"], [134, 4, 1, "", "show_versions"], [729, 4, 1, "", "sql"], [730, 4, 1, "", "sql_expr"], [731, 4, 1, "", "std"], [732, 4, 1, "", "struct"], [733, 4, 1, "", "sum"], [734, 4, 1, "", "sum_horizontal"], [735, 4, 1, "", "tail"], [148, 4, 1, "", "thread_pool_size"], [149, 4, 1, "", "threadpool_size"], [736, 4, 1, "", "time"], [737, 4, 1, "", "time_range"], [738, 4, 1, "", "time_ranges"], [150, 4, 1, "", "using_string_cache"], [739, 4, 1, "", "var"], [740, 4, 1, "", "when"], [741, 4, 1, "", "zeros"]], "polars.SQLContext": [[1234, 0, 1, "", "__enter__"], [1234, 0, 1, "", "__exit__"], [1234, 0, 1, "", "__init__"], [1218, 0, 1, "", "execute"], [1219, 0, 1, "", "register"], [1220, 0, 1, "", "register_globals"], [1221, 0, 1, "", "register_many"], [1222, 0, 1, "", "tables"], [1223, 0, 1, "", "unregister"]], "polars.Series": [[862, 0, 1, "", "abs"], [863, 0, 1, "", "alias"], [864, 0, 1, "", "all"], [865, 0, 1, "", "any"], [866, 0, 1, "", "append"], [867, 0, 1, "", "arccos"], [868, 0, 1, "", "arccosh"], [869, 0, 1, "", "arcsin"], [870, 0, 1, "", "arcsinh"], [871, 0, 1, "", "arctan"], [872, 0, 1, "", "arctanh"], [873, 0, 1, "", "arg_max"], [874, 0, 1, "", "arg_min"], [875, 0, 1, "", "arg_sort"], [876, 0, 1, "", "arg_true"], [877, 0, 1, "", "arg_unique"], [907, 0, 1, "", "bottom_k"], [908, 0, 1, "", "cast"], [913, 0, 1, "", "cbrt"], [914, 0, 1, "", "ceil"], [915, 0, 1, "", "chunk_lengths"], [916, 0, 1, "", "clear"], [917, 0, 1, "", "clip"], [918, 0, 1, "", "clone"], [919, 0, 1, "", "cos"], [920, 0, 1, "", "cosh"], [921, 0, 1, "", "cot"], [922, 0, 1, "", "cum_count"], [923, 0, 1, "", "cum_max"], [924, 0, 1, "", "cum_min"], [925, 0, 1, "", "cum_prod"], [926, 0, 1, "", "cum_sum"], [927, 0, 1, "", "cumulative_eval"], [928, 0, 1, "", "cut"], [929, 0, 1, "", "describe"], [930, 0, 1, "", "diff"], [931, 0, 1, "", "dot"], [932, 0, 1, "", "drop_nans"], [933, 0, 1, "", "drop_nulls"], [982, 3, 1, "", "dtype"], [983, 0, 1, "", "entropy"], [984, 0, 1, "", "equals"], [985, 0, 1, "", "estimated_size"], [986, 0, 1, "", "ewm_mean"], [987, 0, 1, "", "ewm_mean_by"], [988, 0, 1, "", "ewm_std"], [989, 0, 1, "", "ewm_var"], [990, 0, 1, "", "exp"], [991, 0, 1, "", "explode"], [992, 0, 1, "", "extend"], [993, 0, 1, "", "extend_constant"], [994, 0, 1, "", "fill_nan"], [995, 0, 1, "", "fill_null"], [996, 0, 1, "", "filter"], [997, 3, 1, "", "flags"], [998, 0, 1, "", "floor"], [999, 0, 1, "", "gather"], [1000, 0, 1, "", "gather_every"], [1001, 0, 1, "", "get_chunks"], [1002, 0, 1, "", "has_nulls"], [1003, 0, 1, "", "has_validity"], [1004, 0, 1, "", "hash"], [1005, 0, 1, "", "head"], [1006, 0, 1, "", "hist"], [1007, 0, 1, "", "implode"], [1008, 0, 1, "", "interpolate"], [1009, 0, 1, "", "interpolate_by"], [1010, 0, 1, "", "is_between"], [1011, 0, 1, "", "is_duplicated"], [1012, 0, 1, "", "is_empty"], [1013, 0, 1, "", "is_finite"], [1014, 0, 1, "", "is_first_distinct"], [1015, 0, 1, "", "is_in"], [1016, 0, 1, "", "is_infinite"], [1017, 0, 1, "", "is_last_distinct"], [1018, 0, 1, "", "is_nan"], [1019, 0, 1, "", "is_not_nan"], [1020, 0, 1, "", "is_not_null"], [1021, 0, 1, "", "is_null"], [1022, 0, 1, "", "is_sorted"], [1023, 0, 1, "", "is_unique"], [1024, 0, 1, "", "item"], [1025, 0, 1, "", "kurtosis"], [1026, 0, 1, "", "len"], [1027, 0, 1, "", "limit"], [1068, 0, 1, "", "log"], [1069, 0, 1, "", "log10"], [1070, 0, 1, "", "log1p"], [1071, 0, 1, "", "lower_bound"], [1072, 0, 1, "", "map_elements"], [1073, 0, 1, "", "max"], [1074, 0, 1, "", "mean"], [1075, 0, 1, "", "median"], [1076, 0, 1, "", "min"], [1077, 0, 1, "", "mode"], [1078, 0, 1, "", "n_chunks"], [1079, 0, 1, "", "n_unique"], [1080, 3, 1, "", "name"], [1081, 0, 1, "", "nan_max"], [1082, 0, 1, "", "nan_min"], [1083, 0, 1, "", "new_from_index"], [1084, 0, 1, "", "not_"], [1085, 0, 1, "", "null_count"], [1086, 0, 1, "", "pct_change"], [1087, 0, 1, "", "peak_max"], [1088, 0, 1, "", "peak_min"], [1089, 0, 1, "", "product"], [1090, 0, 1, "", "qcut"], [1091, 0, 1, "", "quantile"], [1092, 0, 1, "", "rank"], [1093, 0, 1, "", "rechunk"], [1094, 0, 1, "", "reinterpret"], [1095, 0, 1, "", "rename"], [1096, 0, 1, "", "replace"], [1097, 0, 1, "", "reshape"], [1098, 0, 1, "", "reverse"], [1099, 0, 1, "", "rle"], [1100, 0, 1, "", "rle_id"], [1101, 0, 1, "", "rolling_map"], [1102, 0, 1, "", "rolling_max"], [1103, 0, 1, "", "rolling_mean"], [1104, 0, 1, "", "rolling_median"], [1105, 0, 1, "", "rolling_min"], [1106, 0, 1, "", "rolling_quantile"], [1107, 0, 1, "", "rolling_skew"], [1108, 0, 1, "", "rolling_std"], [1109, 0, 1, "", "rolling_sum"], [1110, 0, 1, "", "rolling_var"], [1111, 0, 1, "", "round"], [1112, 0, 1, "", "round_sig_figs"], [1113, 0, 1, "", "sample"], [1114, 0, 1, "", "scatter"], [1115, 0, 1, "", "search_sorted"], [1116, 0, 1, "", "set"], [1117, 0, 1, "", "set_sorted"], [1118, 3, 1, "", "shape"], [1119, 0, 1, "", "shift"], [1120, 0, 1, "", "shrink_dtype"], [1121, 0, 1, "", "shrink_to_fit"], [1122, 0, 1, "", "shuffle"], [1123, 0, 1, "", "sign"], [1124, 0, 1, "", "sin"], [1125, 0, 1, "", "sinh"], [1126, 0, 1, "", "skew"], [1127, 0, 1, "", "slice"], [1128, 0, 1, "", "sort"], [1129, 0, 1, "", "sqrt"], [1130, 0, 1, "", "std"], [1181, 0, 1, "", "sum"], [1182, 0, 1, "", "tail"], [1183, 0, 1, "", "tan"], [1184, 0, 1, "", "tanh"], [1185, 0, 1, "", "to_arrow"], [1186, 0, 1, "", "to_dummies"], [1187, 0, 1, "", "to_frame"], [1188, 0, 1, "", "to_init_repr"], [1189, 0, 1, "", "to_jax"], [1190, 0, 1, "", "to_list"], [1191, 0, 1, "", "to_numpy"], [1192, 0, 1, "", "to_pandas"], [1193, 0, 1, "", "to_physical"], [1194, 0, 1, "", "to_torch"], [1195, 0, 1, "", "top_k"], [1196, 0, 1, "", "unique"], [1197, 0, 1, "", "unique_counts"], [1198, 0, 1, "", "upper_bound"], [1199, 0, 1, "", "value_counts"], [1200, 0, 1, "", "var"], [1201, 0, 1, "", "zip_with"]], "polars.Series.arr": [[878, 0, 1, "", "all"], [879, 0, 1, "", "any"], [880, 0, 1, "", "arg_max"], [881, 0, 1, "", "arg_min"], [882, 0, 1, "", "contains"], [883, 0, 1, "", "count_matches"], [884, 0, 1, "", "explode"], [885, 0, 1, "", "first"], [886, 0, 1, "", "get"], [887, 0, 1, "", "join"], [888, 0, 1, "", "last"], [889, 0, 1, "", "max"], [890, 0, 1, "", "median"], [891, 0, 1, "", "min"], [892, 0, 1, "", "n_unique"], [893, 0, 1, "", "reverse"], [894, 0, 1, "", "shift"], [895, 0, 1, "", "sort"], [896, 0, 1, "", "std"], [897, 0, 1, "", "sum"], [898, 0, 1, "", "to_list"], [899, 0, 1, "", "to_struct"], [900, 0, 1, "", "unique"], [901, 0, 1, "", "var"]], "polars.Series.bin": [[902, 0, 1, "", "contains"], [903, 0, 1, "", "decode"], [904, 0, 1, "", "encode"], [905, 0, 1, "", "ends_with"], [906, 0, 1, "", "starts_with"]], "polars.Series.cat": [[909, 0, 1, "", "get_categories"], [910, 0, 1, "", "is_local"], [911, 0, 1, "", "to_local"], [912, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[934, 0, 1, "", "add_business_days"], [935, 0, 1, "", "base_utc_offset"], [936, 0, 1, "", "cast_time_unit"], [937, 0, 1, "", "century"], [938, 0, 1, "", "combine"], [939, 0, 1, "", "convert_time_zone"], [940, 0, 1, "", "date"], [941, 0, 1, "", "datetime"], [942, 0, 1, "", "day"], [943, 0, 1, "", "dst_offset"], [944, 0, 1, "", "epoch"], [945, 0, 1, "", "hour"], [946, 0, 1, "", "is_leap_year"], [947, 0, 1, "", "iso_year"], [948, 0, 1, "", "max"], [949, 0, 1, "", "mean"], [950, 0, 1, "", "median"], [951, 0, 1, "", "microsecond"], [952, 0, 1, "", "millennium"], [953, 0, 1, "", "millisecond"], [954, 0, 1, "", "min"], [955, 0, 1, "", "minute"], [956, 0, 1, "", "month"], [957, 0, 1, "", "month_end"], [958, 0, 1, "", "month_start"], [959, 0, 1, "", "nanosecond"], [960, 0, 1, "", "offset_by"], [961, 0, 1, "", "ordinal_day"], [962, 0, 1, "", "quarter"], [963, 0, 1, "", "replace_time_zone"], [964, 0, 1, "", "round"], [965, 0, 1, "", "second"], [966, 0, 1, "", "strftime"], [967, 0, 1, "", "time"], [968, 0, 1, "", "timestamp"], [969, 0, 1, "", "to_string"], [970, 0, 1, "", "total_days"], [971, 0, 1, "", "total_hours"], [972, 0, 1, "", "total_microseconds"], [973, 0, 1, "", "total_milliseconds"], [974, 0, 1, "", "total_minutes"], [975, 0, 1, "", "total_nanoseconds"], [976, 0, 1, "", "total_seconds"], [977, 0, 1, "", "truncate"], [978, 0, 1, "", "week"], [979, 0, 1, "", "weekday"], [980, 0, 1, "", "with_time_unit"], [981, 0, 1, "", "year"]], "polars.Series.list": [[1028, 0, 1, "", "all"], [1029, 0, 1, "", "any"], [1030, 0, 1, "", "arg_max"], [1031, 0, 1, "", "arg_min"], [1032, 0, 1, "", "concat"], [1033, 0, 1, "", "contains"], [1034, 0, 1, "", "count_matches"], [1035, 0, 1, "", "diff"], [1036, 0, 1, "", "drop_nulls"], [1037, 0, 1, "", "eval"], [1038, 0, 1, "", "explode"], [1039, 0, 1, "", "first"], [1040, 0, 1, "", "gather"], [1041, 0, 1, "", "gather_every"], [1042, 0, 1, "", "get"], [1043, 0, 1, "", "head"], [1044, 0, 1, "", "join"], [1045, 0, 1, "", "last"], [1046, 0, 1, "", "len"], [1047, 0, 1, "", "max"], [1048, 0, 1, "", "mean"], [1049, 0, 1, "", "median"], [1050, 0, 1, "", "min"], [1051, 0, 1, "", "n_unique"], [1052, 0, 1, "", "reverse"], [1053, 0, 1, "", "sample"], [1054, 0, 1, "", "set_difference"], [1055, 0, 1, "", "set_intersection"], [1056, 0, 1, "", "set_symmetric_difference"], [1057, 0, 1, "", "set_union"], [1058, 0, 1, "", "shift"], [1059, 0, 1, "", "slice"], [1060, 0, 1, "", "sort"], [1061, 0, 1, "", "std"], [1062, 0, 1, "", "sum"], [1063, 0, 1, "", "tail"], [1064, 0, 1, "", "to_array"], [1065, 0, 1, "", "to_struct"], [1066, 0, 1, "", "unique"], [1067, 0, 1, "", "var"]], "polars.Series.str": [[1131, 0, 1, "", "concat"], [1132, 0, 1, "", "contains"], [1133, 0, 1, "", "contains_any"], [1134, 0, 1, "", "count_matches"], [1135, 0, 1, "", "decode"], [1136, 0, 1, "", "encode"], [1137, 0, 1, "", "ends_with"], [1138, 0, 1, "", "explode"], [1139, 0, 1, "", "extract"], [1140, 0, 1, "", "extract_all"], [1141, 0, 1, "", "extract_groups"], [1142, 0, 1, "", "find"], [1143, 0, 1, "", "head"], [1144, 0, 1, "", "json_decode"], [1145, 0, 1, "", "json_path_match"], [1146, 0, 1, "", "len_bytes"], [1147, 0, 1, "", "len_chars"], [1148, 0, 1, "", "pad_end"], [1149, 0, 1, "", "pad_start"], [1150, 0, 1, "", "replace"], [1151, 0, 1, "", "replace_all"], [1152, 0, 1, "", "replace_many"], [1153, 0, 1, "", "reverse"], [1154, 0, 1, "", "slice"], [1155, 0, 1, "", "split"], [1156, 0, 1, "", "split_exact"], [1157, 0, 1, "", "splitn"], [1158, 0, 1, "", "starts_with"], [1159, 0, 1, "", "strip_chars"], [1160, 0, 1, "", "strip_chars_end"], [1161, 0, 1, "", "strip_chars_start"], [1162, 0, 1, "", "strip_prefix"], [1163, 0, 1, "", "strip_suffix"], [1164, 0, 1, "", "strptime"], [1165, 0, 1, "", "tail"], [1166, 0, 1, "", "to_date"], [1167, 0, 1, "", "to_datetime"], [1168, 0, 1, "", "to_decimal"], [1169, 0, 1, "", "to_integer"], [1170, 0, 1, "", "to_lowercase"], [1171, 0, 1, "", "to_time"], [1172, 0, 1, "", "to_titlecase"], [1173, 0, 1, "", "to_uppercase"], [1174, 0, 1, "", "zfill"]], "polars.Series.struct": [[1175, 0, 1, "", "field"], [1176, 3, 1, "", "fields"], [1177, 0, 1, "", "json_encode"], [1178, 0, 1, "", "rename_fields"], [1179, 3, 1, "", "schema"], [1180, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[268, 0, 1, "", "__iter__"], [269, 0, 1, "", "agg"], [270, 0, 1, "", "all"], [271, 0, 1, "", "count"], [272, 0, 1, "", "first"], [273, 0, 1, "", "head"], [274, 0, 1, "", "last"], [275, 0, 1, "", "len"], [276, 0, 1, "", "map_groups"], [277, 0, 1, "", "max"], [278, 0, 1, "", "mean"], [279, 0, 1, "", "median"], [280, 0, 1, "", "min"], [281, 0, 1, "", "n_unique"], [282, 0, 1, "", "quantile"], [283, 0, 1, "", "sum"], [284, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "ColumnNotFoundError"], [87, 5, 1, "", "ComputeError"], [88, 5, 1, "", "DuplicateError"], [89, 5, 1, "", "InvalidOperationError"], [90, 5, 1, "", "NoDataError"], [91, 5, 1, "", "NoRowsReturnedError"], [92, 5, 1, "", "PolarsError"], [93, 5, 1, "", "PolarsPanicError"], [94, 5, 1, "", "RowsError"], [95, 5, 1, "", "SchemaError"], [96, 5, 1, "", "SchemaFieldNotFoundError"], [97, 5, 1, "", "ShapeError"], [98, 5, 1, "", "StructFieldNotFoundError"], [99, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[109, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[836, 0, 1, "", "agg"], [837, 0, 1, "", "all"], [838, 0, 1, "", "count"], [839, 0, 1, "", "first"], [840, 0, 1, "", "head"], [841, 0, 1, "", "last"], [842, 0, 1, "", "len"], [843, 0, 1, "", "map_groups"], [844, 0, 1, "", "max"], [845, 0, 1, "", "mean"], [846, 0, 1, "", "median"], [847, 0, 1, "", "min"], [848, 0, 1, "", "n_unique"], [849, 0, 1, "", "quantile"], [850, 0, 1, "", "sum"], [851, 0, 1, "", "tail"]], "polars.plugins": [[859, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[860, 4, 1, "", "all"], [860, 4, 1, "", "alpha"], [860, 4, 1, "", "alphanumeric"], [860, 4, 1, "", "binary"], [860, 4, 1, "", "boolean"], [860, 4, 1, "", "by_dtype"], [860, 4, 1, "", "by_index"], [860, 4, 1, "", "by_name"], [860, 4, 1, "", "categorical"], [860, 4, 1, "", "contains"], [860, 4, 1, "", "date"], [860, 4, 1, "", "datetime"], [860, 4, 1, "", "decimal"], [860, 4, 1, "", "digit"], [860, 4, 1, "", "duration"], [860, 4, 1, "", "ends_with"], [860, 4, 1, "", "exclude"], [860, 4, 1, "", "expand_selector"], [860, 4, 1, "", "first"], [860, 4, 1, "", "float"], [860, 4, 1, "", "integer"], [860, 4, 1, "", "is_selector"], [860, 4, 1, "", "last"], [860, 4, 1, "", "matches"], [860, 4, 1, "", "numeric"], [860, 4, 1, "", "signed_integer"], [860, 4, 1, "", "starts_with"], [860, 4, 1, "", "string"], [860, 4, 1, "", "temporal"], [860, 4, 1, "", "time"], [860, 4, 1, "", "unsigned_integer"]], "polars.testing": [[135, 4, 1, "", "assert_frame_equal"], [136, 4, 1, "", "assert_frame_not_equal"], [137, 4, 1, "", "assert_series_equal"], [138, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[139, 2, 1, "", "column"], [140, 4, 1, "", "columns"], [141, 4, 1, "", "create_list_strategy"], [142, 4, 1, "", "dataframes"], [143, 4, 1, "", "dtypes"], [144, 4, 1, "", "lists"], [145, 4, 1, "", "load_profile"], [146, 4, 1, "", "series"], [147, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[139, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 171, 992], "api": [1, 48, 49, 50, 51, 762, 1234], "provid": 1, "new": 1, "function": [1, 749, 761, 860, 1228], "avail": 1, "registr": 1, "exampl": [1, 293, 860, 1214, 1237], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1218, 1219, 1220, 1221, 1222, 1223, 1237], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 151], "load": [2, 151], "load_from_fil": 3, "restore_default": 4, "save": [5, 151], "save_to_fil": 6, "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_streaming_chunk_s": 14, "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_verbos": 29, "state": [30, 151], "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 142, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 526], "write_ndjson": 40, "write_parquet": 41, "lazyfram": [42, 43, 44, 45, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "stringcach": [46, 761], "align_fram": 47, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_lazyframe_namespac": 50, "register_series_namespac": 51, "build_info": 52, "collect_al": 53, "collect_all_async": 54, "concat": [55, 469, 604, 1032, 1131, 1230], "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 294], "arrai": [56, 742, 1202, 1226], "binari": [57, 743, 756, 1204], "boolean": [58, 744, 1205], "categor": 59, "date": [61, 377, 690, 940, 1231], "datetim": [62, 378, 693, 941], "decim": 63, "durat": [64, 696], "enum": 65, "float32": 66, "float64": 67, "int16": 68, "int32": 69, "int64": 70, "int8": 71, "list": [72, 144, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 751, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1211], "null": 73, "object": 74, "string": [75, 294, 757, 1215, 1230], "struct": [76, 648, 649, 650, 651, 732, 758, 1175, 1176, 1177, 1178, 1179, 1180, 1216], "time": [77, 400, 736, 967], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "unknown": 82, "utf8": 83, "disable_string_cach": 84, "enable_string_cach": 85, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 295], "columnnotfounderror": 86, "computeerror": 87, "duplicateerror": 88, "invalidoperationerror": 89, "nodataerror": 90, "norowsreturnederror": 91, "polarserror": 92, "polarspanicerror": 93, "rowserror": 94, "schemaerror": 95, "schemafieldnotfounderror": 96, "shapeerror": 97, "structfieldnotfounderror": 98, "toomanyrowsreturnederror": 99, "from_arrow": 100, "from_datafram": 101, "from_dict": [102, 103], "from_numpi": 104, "from_panda": 105, "from_record": 106, "from_repr": 107, "get_index_typ": 108, "io": 109, "csv": [109, 763], "batched_read": 109, "batchedcsvread": 109, "next_batch": 109, "read_avro": 110, "read_clipboard": 111, "read_csv": 112, "read_csv_batch": 113, "read_databas": 114, "read_database_uri": 115, "read_delta": 116, "read_excel": 117, "read_ipc": 118, "read_ipc_schema": 119, "read_ipc_stream": 120, "read_json": 121, "read_ndjson": 122, "read_od": 123, "read_parquet": 124, "read_parquet_schema": 125, "scan_csv": 126, "scan_delta": 127, "scan_iceberg": 128, "scan_ipc": 129, "scan_ndjson": 130, "scan_parquet": 131, "scan_pyarrow_dataset": 132, "set_random_se": 133, "show_vers": 134, "test": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 1237], "assert_frame_equ": 135, "assert_frame_not_equ": 136, "assert_series_equ": 137, "assert_series_not_equ": 138, "parametr": [139, 140, 141, 142, 143, 144, 145, 146, 147, 1237], "column": [139, 140, 159, 747, 773], "create_list_strategi": 141, "dtype": [143, 167, 779, 982], "load_profil": 145, "seri": [146, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1210], "set_profil": 147, "thread_pool_s": 148, "threadpool_s": 149, "using_string_cach": 150, "option": 151, "us": 151, "context": 151, "manag": 151, "decor": 151, "aggreg": [152, 296, 764, 861, 1225], "__dataframe__": 153, "approx_n_uniqu": [154, 305, 672, 765], "bottom_k": [155, 347, 766, 907], "cast": [156, 349, 768, 908], "clear": [157, 769, 916], "clone": [158, 770, 918], "corr": [160, 682], "count": [161, 271, 357, 683, 774, 838, 1225], "describ": [162, 775, 929], "deseri": [163, 366, 776], "drop": [164, 777, 1236], "drop_in_plac": 165, "drop_nul": [166, 370, 473, 778, 933, 1036], "equal": [168, 984], "estimated_s": [169, 985], "explod": [170, 323, 424, 475, 611, 781, 884, 991, 1038, 1138], "fill_nan": [172, 426, 783, 994], "fill_nul": [173, 427, 784, 995], "filter": [174, 428, 785, 996], "flag": [175, 997], "fold": [176, 700], "gather_everi": [177, 436, 478, 787, 1000, 1041], "get_column": [178, 180], "get_column_index": 179, "glimps": 181, "group_bi": [182, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 788, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851], "group_by_dynam": [183, 789], "hash_row": 184, "head": [185, 273, 442, 480, 616, 704, 790, 840, 1005, 1043, 1143], "height": 186, "hstack": 187, "insert_column": 188, "interpol": [189, 446, 792, 1008], "is_dupl": [190, 449, 1011], "is_empti": [191, 1012], "is_uniqu": [192, 459, 1023], "item": [193, 1024], "iter_column": 194, "iter_row": 195, "iter_slic": 196, "join": [197, 326, 481, 793, 887, 1044, 1224], "join_asof": [198, 794], "lazi": [199, 796], "limit": [200, 464, 797, 1027, 1224], "map_row": 201, "max": [202, 277, 328, 484, 512, 713, 799, 844, 889, 948, 1047, 1073, 1225], "max_horizont": [203, 714], "mean": [204, 278, 485, 513, 715, 800, 845, 949, 1048, 1074], "mean_horizont": [205, 716], "median": [206, 279, 329, 486, 514, 717, 801, 846, 890, 950, 1049, 1075, 1225], "melt": [207, 802], "merge_sort": [208, 803], "min": [209, 280, 330, 487, 527, 718, 804, 847, 891, 954, 1050, 1076, 1225], "min_horizont": [210, 719], "n_chunk": [211, 1078], "n_uniqu": [212, 281, 331, 488, 531, 720, 848, 892, 1051, 1079], "null_count": [213, 547, 805, 1085], "partition_bi": 214, "pipe": [215, 553, 806], "pivot": 216, "product": [217, 555, 1089], "quantil": [218, 282, 557, 723, 808, 849, 1091], "rechunk": [219, 560, 1093], "renam": [220, 809, 1095], "replace_column": 221, "revers": [222, 332, 489, 565, 626, 810, 893, 1052, 1098, 1153, 1230], "roll": [223, 568, 811], "row": [224, 225], "rows_by_kei": 226, "sampl": [227, 490, 589, 1053, 1113], "schema": [228, 812, 1179], "select": [229, 292, 728, 754, 813, 857, 1213, 1224], "select_seq": [230, 814], "serial": [231, 291, 523, 815, 856], "set_sort": [232, 591, 816, 1117], "shape": [233, 1118], "shift": [234, 333, 495, 592, 817, 894, 1058, 1119], "shrink_to_fit": [235, 1121], "slice": [236, 496, 599, 627, 819, 1059, 1127, 1154], "sort": [237, 334, 497, 600, 820, 895, 1060, 1128], "sql": [238, 729, 821, 1224, 1228, 1233], "std": [239, 335, 498, 603, 731, 822, 896, 1061, 1130], "sum": [240, 283, 336, 499, 653, 733, 823, 850, 897, 1062, 1181, 1225], "sum_horizont": [241, 734], "tail": [242, 284, 500, 638, 654, 735, 824, 851, 1063, 1165, 1182], "to_arrow": [243, 1185], "to_dict": [244, 245], "to_dummi": [246, 1186], "to_init_repr": [247, 1188], "to_jax": [248, 1189], "to_numpi": [249, 1191], "to_panda": [250, 1192], "to_seri": 251, "to_struct": [252, 338, 502, 899, 1065], "to_torch": [253, 1194], "top_k": [254, 658, 825, 1195], "transpos": 255, "uniqu": [256, 339, 503, 661, 826, 900, 1066, 1196], "unnest": [257, 827, 1180, 1226, 1236], "unstack": 258, "updat": [259, 828], "upsampl": 260, "var": [261, 340, 504, 665, 739, 829, 901, 1067, 1200], "vstack": 262, "width": [263, 830], "with_column": [264, 831], "with_columns_seq": [265, 832], "with_row_count": [266, 834], "with_row_index": [267, 835], "groupbi": [268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 289, 854], "__iter__": 268, "agg": [269, 836], "all": [270, 301, 317, 465, 668, 837, 864, 878, 1028, 1235], "first": [272, 324, 429, 476, 699, 786, 839, 885, 1039, 1225], "last": [274, 327, 461, 482, 708, 795, 841, 888, 1045, 1225], "len": [275, 463, 483, 709, 842, 1026, 1046], "map_group": [276, 712, 843], "attribut": [285, 852, 1203], "comput": [286, 748, 1207], "descript": [287, 853, 1208], "export": [288, 1209], "miscellan": [291, 753, 761, 856, 1212], "manipul": [292, 754, 857, 1213], "plot": [293, 1214], "data": 294, "type": 294, "numer": [294, 756], "tempor": [294, 759, 1217, 1231], "nest": 294, "other": 294, "expr": [297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667], "ab": [297, 862, 1229], "add": 298, "agg_group": 299, "alia": [300, 863], "and_": 302, "ani": [303, 318, 466, 670, 865, 879, 1029], "append": [304, 866], "arcco": [306, 867], "arccosh": [307, 868], "arcsin": [308, 869], "arcsinh": [309, 870], "arctan": [310, 871], "arctanh": [311, 872], "arg_max": [312, 319, 467, 873, 880, 1030], "arg_min": [313, 320, 468, 874, 881, 1031], "arg_sort": [314, 875], "arg_tru": [315, 876], "arg_uniqu": [316, 877], "arr": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901], "contain": [321, 342, 470, 605, 882, 902, 1033, 1132], "count_match": [322, 471, 607, 883, 1034, 1134], "get": [325, 438, 479, 886, 1042], "to_list": [337, 898, 1190], "backward_fil": 341, "bin": [342, 343, 344, 345, 346, 902, 903, 904, 905, 906], "decod": [343, 608, 903, 1135], "encod": [344, 609, 904, 1136], "ends_with": [345, 610, 905, 1137, 1230], "starts_with": [346, 631, 906, 1158, 1230], "bottom_k_bi": 348, "cat": [350, 909, 910, 911, 912], "get_categori": [350, 909], "cbrt": [351, 913, 1229], "ceil": [352, 914, 1229], "clip": [353, 917], "co": [354, 919, 1232], "cosh": [355, 920], "cot": [356, 921, 1232], "cum_count": [358, 685, 922], "cum_max": [359, 923], "cum_min": [360, 924], "cum_prod": [361, 925], "cum_sum": [362, 688, 926], "cumulative_ev": [363, 927], "cut": [364, 928], "degre": [365, 1232], "diff": [367, 472, 930, 1035], "dot": [368, 931], "drop_nan": [369, 932], "dt": [371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981], "add_business_dai": [371, 934], "base_utc_offset": [372, 935], "cast_time_unit": [373, 936], "centuri": [374, 937], "combin": [375, 938], "convert_time_zon": [376, 939], "dai": [379, 942], "dst_offset": [380, 943], "epoch": [381, 944], "hour": [382, 945], "is_leap_year": [383, 946], "iso_year": [384, 947], "microsecond": [385, 951], "millennium": [386, 952], "millisecond": [387, 953], "minut": [388, 955], "month": [389, 956], "month_end": [390, 957], "month_start": [391, 958], "nanosecond": [392, 959], "offset_bi": [393, 960], "ordinal_dai": [394, 961], "quarter": [395, 962], "replace_time_zon": [396, 963], "round": [397, 587, 964, 1111, 1229], "second": [398, 965], "strftime": [399, 966], "timestamp": [401, 968], "to_str": [402, 969], "total_dai": [403, 970], "total_hour": [404, 971], "total_microsecond": [405, 972], "total_millisecond": [406, 973], "total_minut": [407, 974], "total_nanosecond": [408, 975], "total_second": [409, 976], "truncat": [410, 977, 1236], "week": [411, 978], "weekdai": [412, 979], "with_time_unit": [413, 980], "year": [414, 981], "entropi": [415, 983], "eq": [416, 515], "eq_miss": 417, "ewm_mean": [418, 986], "ewm_mean_bi": [419, 987], "ewm_std": [420, 988], "ewm_var": [421, 989], "exclud": [422, 698], "exp": [423, 990, 1229], "extend_const": [425, 993], "flatten": 430, "floor": [431, 998, 1229], "floordiv": 432, "forward_fil": 433, "from_json": 434, "gather": [435, 477, 999, 1040], "ge": 437, "gt": 439, "has_nul": [440, 1002], "hash": [441, 1004], "hist": [443, 1006], "implod": [444, 705, 1007], "inspect": [445, 791], "interpolate_bi": [447, 1009], "is_between": [448, 1010], "is_finit": [450, 1013], "is_first_distinct": [451, 1014], "is_in": [452, 1015], "is_infinit": [453, 1016], "is_last_distinct": [454, 1017], "is_nan": [455, 1018], "is_not_nan": [456, 1019], "is_not_nul": [457, 1020], "is_nul": [458, 1021], "kurtosi": [460, 1025], "le": 462, "eval": [474, 1037], "set_differ": [491, 1054], "set_intersect": [492, 1055], "set_symmetric_differ": [493, 1056], "set_union": [494, 1057], "to_arrai": [501, 1064], "log": [505, 1068, 1229], "log10": [506, 1069, 1229], "log1p": [507, 1070, 1229], "lower_bound": [508, 1071], "lt": 509, "map_batch": [510, 711, 798], "map_el": [511, 1072], "meta": [515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 752], "has_multiple_output": 516, "is_column_select": 517, "is_regex_project": 518, "ne": [519, 543], "output_nam": 520, "pop": 521, "root_nam": 522, "tree_format": 524, "undo_alias": 525, "mod": [528, 1229], "mode": [529, 1077], "mul": 530, "name": [532, 533, 534, 535, 536, 537, 538, 539, 540, 747, 755, 1080, 1235], "keep": 532, "map": 533, "map_field": 534, "prefix": 535, "prefix_field": 536, "suffix": 537, "suffix_field": 538, "to_lowercas": [539, 643, 1170], "to_uppercas": [540, 646, 1173], "nan_max": [541, 1081], "nan_min": [542, 1082], "ne_miss": 544, "neg": 545, "not_": [546, 1084], "or_": 548, "over": 549, "pct_chang": [550, 1086], "peak_max": [551, 1087], "peak_min": [552, 1088], "pow": [554, 1229], "qcut": [556, 1090], "radian": [558, 1232], "rank": [559, 1092], "reinterpret": [561, 1094], "repeat_bi": 562, "replac": [563, 623, 1096, 1150, 1230], "reshap": [564, 1097], "rle": [566, 1099], "rle_id": [567, 1100], "rolling_map": [569, 1101], "rolling_max": [570, 1102], "rolling_max_bi": 571, "rolling_mean": [572, 1103], "rolling_mean_bi": 573, "rolling_median": [574, 1104], "rolling_median_bi": 575, "rolling_min": [576, 1105], "rolling_min_bi": 577, "rolling_quantil": [578, 1106], "rolling_quantile_bi": 579, "rolling_skew": [580, 1107], "rolling_std": [581, 1108], "rolling_std_bi": 582, "rolling_sum": [583, 1109], "rolling_sum_bi": 584, "rolling_var": [585, 1110], "rolling_var_bi": 586, "round_sig_fig": [588, 1112], "search_sort": [590, 1115], "shrink_dtyp": [593, 1120], "shuffl": [594, 1122], "sign": [595, 1123, 1229], "sin": [596, 1124, 1232], "sinh": [597, 1125], "skew": [598, 1126], "sort_bi": 601, "sqrt": [602, 1129, 1229], "str": [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174], "contains_ani": [606, 1133], "extract": [612, 1139, 1231], "extract_al": [613, 1140], "extract_group": [614, 1141], "find": [615, 1142], "json_decod": [617, 1144], "json_path_match": [618, 1145], "len_byt": [619, 1146], "len_char": [620, 1147], "pad_end": [621, 1148], "pad_start": [622, 1149], "replace_al": [624, 1151], "replace_mani": [625, 1152], "split": [628, 1155], "split_exact": [629, 1156], "splitn": [630, 1157], "strip_char": [632, 1159], "strip_chars_end": [633, 1160], "strip_chars_start": [634, 1161], "strip_prefix": [635, 1162], "strip_suffix": [636, 1163], "strptime": [637, 1164], "to_dat": [639, 1166], "to_datetim": [640, 1167], "to_decim": [641, 1168], "to_integ": [642, 1169], "to_tim": [644, 1171], "to_titlecas": [645, 1172], "zfill": [647, 1174], "field": [648, 1175, 1176], "json_encod": [649, 1177], "rename_field": [650, 1178], "with_field": 651, "sub": 652, "tan": [655, 1183, 1232], "tanh": [656, 1184], "to_phys": [657, 1193], "top_k_bi": 659, "truediv": 660, "unique_count": [662, 1197], "upper_bound": [663, 1198], "value_count": [664, 1199], "where": [666, 1224], "xor": 667, "all_horizont": 669, "any_horizont": 671, "arang": 673, "arctan2": 674, "arctan2d": 675, "arg_sort_bi": 676, "arg_wher": 677, "business_day_count": 678, "coalesc": [679, 1227], "concat_list": 680, "concat_str": 681, "cov": 684, "cum_fold": 686, "cum_reduc": 687, "cum_sum_horizont": 689, "date_rang": [691, 692], "datetime_rang": [694, 695], "element": 697, "format": 701, "from_epoch": 702, "group": [703, 1224], "int_rang": [706, 707], "lit": 710, "nth": 721, "ones": 722, "reduc": 724, "repeat": 725, "rolling_corr": 726, "rolling_cov": 727, "sql_expr": 730, "time_rang": [737, 738], "when": 740, "zero": 741, "categori": [745, 1206], "col": 746, "express": 750, "oper": [756, 860, 1235, 1236], "conjunct": 756, "comparison": 756, "window": 760, "convers": 761, "parallel": 761, "random": 761, "python": [762, 1234], "refer": 762, "input": 763, "output": 763, "avro": 763, "clipboard": 763, "databas": 763, "delta": 763, "lake": 763, "excel": 763, "od": 763, "feather": 763, "ipc": 763, "iceberg": 763, "json": 763, "parquet": 763, "pyarrow": 763, "dataset": 763, "cach": 767, "collect": 771, "collect_async": 772, "explain": [780, 1236], "fetch": 782, "profil": [807, 1237], "show_graph": 818, "with_context": 833, "lazygroupbi": [836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851], "metadata": 858, "plugin": 859, "selector": 860, "import": 860, "set": [860, 1116, 1235], "is_loc": 910, "to_loc": 911, "uses_lexical_ord": 912, "chunk_length": 915, "get_chunk": 1001, "has_valid": 1003, "is_sort": 1022, "new_from_index": 1083, "scatter": 1114, "to_fram": 1187, "zip_with": 1201, "sqlcontext": [1218, 1219, 1220, 1221, 1222, 1223, 1234], "execut": 1218, "regist": 1219, "register_glob": 1220, "register_mani": 1221, "tabl": [1222, 1236], "unregist": 1223, "claus": 1224, "from": 1224, "BY": [1224, 1235], "have": 1224, "order": 1224, "offset": 1224, "avg": 1225, "stddev": 1225, "varianc": 1225, "array_contain": 1226, "array_get": 1226, "array_length": 1226, "array_low": 1226, "array_mean": 1226, "array_revers": 1226, "array_sum": 1226, "array_to_str": 1226, "array_uniqu": 1226, "array_upp": 1226, "condit": 1227, "greatest": 1227, "IF": 1227, "ifnul": 1227, "least": 1227, "nullif": 1227, "math": 1229, "div": 1229, "ln": 1229, "log2": 1229, "pi": 1229, "bit_length": 1230, "concat_w": 1230, "initcap": 1230, "left": 1230, "length": 1230, "lower": 1230, "ltrim": 1230, "octet_length": 1230, "regexp_lik": 1230, "right": 1230, "rtrim": 1230, "strpo": 1230, "substr": 1230, "upper": 1230, "date_part": 1231, "trigonometri": 1232, "aco": 1232, "acosd": 1232, "asin": 1232, "asind": 1232, "atan": 1232, "atand": 1232, "atan2": 1232, "atan2d": 1232, "cotd": 1232, "cosd": 1232, "sind": 1232, "tand": 1232, "interfac": 1233, "method": 1234, "union": 1235, "creat": 1236, "show": 1236, "assert": 1237, "strategi": 1237, "helper": 1237}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.hash_rows": [[184, "polars-dataframe-hash-rows"]], "polars.DataFrame.merge_sorted": [[208, "polars-dataframe-merge-sorted"]], "polars.DataFrame.mean_horizontal": [[205, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.n_unique": [[212, "polars-dataframe-n-unique"]], "polars.DataFrame.head": [[185, "polars-dataframe-head"]], "polars.DataFrame.insert_column": [[188, "polars-dataframe-insert-column"]], "polars.DataFrame.iter_rows": [[195, "polars-dataframe-iter-rows"]], "polars.DataFrame.min_horizontal": [[210, "polars-dataframe-min-horizontal"]], "polars.DataFrame.filter": [[174, "polars-dataframe-filter"]], "polars.DataFrame.max_horizontal": [[203, "polars-dataframe-max-horizontal"]], "polars.DataFrame.partition_by": [[214, "polars-dataframe-partition-by"]], "polars.DataFrame.is_unique": [[192, "polars-dataframe-is-unique"]], "polars.DataFrame.extend": [[171, "polars-dataframe-extend"]], "polars.DataFrame.melt": [[207, "polars-dataframe-melt"]], "polars.DataFrame.max": [[202, "polars-dataframe-max"]], "polars.DataFrame.drop_nulls": [[166, "polars-dataframe-drop-nulls"]], "polars.DataFrame.group_by": [[182, "polars-dataframe-group-by"]], "polars.DataFrame.gather_every": [[177, "polars-dataframe-gather-every"]], "polars.DataFrame.item": [[193, "polars-dataframe-item"]], "polars.DataFrame.interpolate": [[189, "polars-dataframe-interpolate"]], "polars.DataFrame.fold": [[176, "polars-dataframe-fold"]], "polars.DataFrame.iter_columns": [[194, "polars-dataframe-iter-columns"]], "polars.DataFrame.explode": [[170, "polars-dataframe-explode"]], "polars.DataFrame.iter_slices": [[196, "polars-dataframe-iter-slices"]], "polars.DataFrame.product": [[217, "polars-dataframe-product"]], "polars.DataFrame.hstack": [[187, "polars-dataframe-hstack"]], "polars.DataFrame.map_rows": [[201, "polars-dataframe-map-rows"]], "polars.DataFrame.quantile": [[218, "polars-dataframe-quantile"]], "polars.DataFrame.equals": [[168, "polars-dataframe-equals"]], "polars.DataFrame.median": [[206, "polars-dataframe-median"]], "polars.DataFrame.n_chunks": [[211, "polars-dataframe-n-chunks"]], "polars.DataFrame.pivot": [[216, "polars-dataframe-pivot"]], "polars.DataFrame.dtypes": [[167, "polars-dataframe-dtypes"]], "polars.DataFrame.get_column": [[178, "polars-dataframe-get-column"]], "polars.DataFrame.is_empty": [[191, "polars-dataframe-is-empty"]], "polars.DataFrame.join_asof": [[198, "polars-dataframe-join-asof"]], "polars.DataFrame.rechunk": [[219, "polars-dataframe-rechunk"]], "polars.DataFrame.flags": [[175, "polars-dataframe-flags"]], "polars.DataFrame.drop_in_place": [[165, "polars-dataframe-drop-in-place"]], "polars.DataFrame.fill_nan": [[172, "polars-dataframe-fill-nan"]], "polars.DataFrame.lazy": [[199, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[200, "polars-dataframe-limit"]], "polars.DataFrame.get_columns": [[180, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_null": [[173, "polars-dataframe-fill-null"]], "polars.DataFrame.mean": [[204, "polars-dataframe-mean"]], "polars.DataFrame.min": [[209, "polars-dataframe-min"]], "polars.DataFrame.is_duplicated": [[190, "polars-dataframe-is-duplicated"]], "polars.DataFrame.get_column_index": [[179, "polars-dataframe-get-column-index"]], "polars.DataFrame.estimated_size": [[169, "polars-dataframe-estimated-size"]], "polars.DataFrame.height": [[186, "polars-dataframe-height"]], "polars.DataFrame.join": [[197, "polars-dataframe-join"]], "polars.DataFrame.pipe": [[215, "polars-dataframe-pipe"]], "polars.DataFrame.group_by_dynamic": [[183, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.null_count": [[213, "polars-dataframe-null-count"]], "polars.DataFrame.glimpse": [[181, "polars-dataframe-glimpse"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.build_info": [[52, "polars-build-info"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1237, "examples"], [1214, "examples"], [860, "examples"], [293, "examples"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "Index": [[0, "index"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.read_ipc": [[118, "polars-read-ipc"]], "polars.DataFrame.describe": [[162, "polars-dataframe-describe"]], "polars.read_delta": [[116, "polars-read-delta"]], "polars.read_excel": [[117, "polars-read-excel"]], "polars.read_parquet": [[124, "polars-read-parquet"]], "polars.read_database_uri": [[115, "polars-read-database-uri"]], "polars.DataFrame.cast": [[156, "polars-dataframe-cast"]], "polars.read_database": [[114, "polars-read-database"]], "polars.read_clipboard": [[111, "polars-read-clipboard"]], "polars.scan_csv": [[126, "polars-scan-csv"]], "polars.set_random_seed": [[133, "polars-set-random-seed"]], "polars.read_parquet_schema": [[125, "polars-read-parquet-schema"]], "polars.testing.parametric.column": [[139, "polars-testing-parametric-column"]], "polars.read_json": [[121, "polars-read-json"]], "polars.testing.parametric.series": [[146, "polars-testing-parametric-series"]], "polars.testing.parametric.create_list_strategy": [[141, "polars-testing-parametric-create-list-strategy"]], "Config": [[151, "config"]], "Config options": [[151, "config-options"]], "Config load, save, state": [[151, "config-load-save-state"]], "Use as a context manager": [[151, "use-as-a-context-manager"]], "Use as a decorator": [[151, "use-as-a-decorator"]], "polars.scan_parquet": [[131, "polars-scan-parquet"]], "Aggregation": [[152, "aggregation"], [861, "aggregation"], [764, "aggregation"], [296, "aggregation"]], "polars.DataFrame.columns": [[159, "polars-dataframe-columns"]], "polars.read_ipc_schema": [[119, "polars-read-ipc-schema"]], "polars.testing.assert_series_equal": [[137, "polars-testing-assert-series-equal"]], "polars.scan_iceberg": [[128, "polars-scan-iceberg"]], "polars.testing.assert_frame_equal": [[135, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_not_equal": [[138, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.dtypes": [[143, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[144, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[145, "polars-testing-parametric-load-profile"]], "polars.DataFrame.deserialize": [[163, "polars-dataframe-deserialize"]], "polars.testing.parametric.columns": [[140, "polars-testing-parametric-columns"]], "polars.DataFrame.__dataframe__": [[153, "polars-dataframe-dataframe"]], "polars.DataFrame.clear": [[157, "polars-dataframe-clear"]], "polars.DataFrame.corr": [[160, "polars-dataframe-corr"]], "polars.read_ipc_stream": [[120, "polars-read-ipc-stream"]], "polars.scan_pyarrow_dataset": [[132, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.drop": [[164, "polars-dataframe-drop"]], "polars.testing.parametric.dataframes": [[142, "polars-testing-parametric-dataframes"]], "polars.read_ndjson": [[122, "polars-read-ndjson"]], "polars.threadpool_size": [[149, "polars-threadpool-size"]], "polars.DataFrame.approx_n_unique": [[154, "polars-dataframe-approx-n-unique"]], "polars.scan_delta": [[127, "polars-scan-delta"]], "polars.DataFrame.bottom_k": [[155, "polars-dataframe-bottom-k"]], "polars.scan_ipc": [[129, "polars-scan-ipc"]], "polars.show_versions": [[134, "polars-show-versions"]], "polars.DataFrame.clone": [[158, "polars-dataframe-clone"]], "polars.using_string_cache": [[150, "polars-using-string-cache"]], "polars.thread_pool_size": [[148, "polars-thread-pool-size"]], "polars.scan_ndjson": [[130, "polars-scan-ndjson"]], "polars.read_csv_batched": [[113, "polars-read-csv-batched"]], "polars.read_avro": [[110, "polars-read-avro"]], "polars.read_csv": [[112, "polars-read-csv"]], "polars.testing.assert_frame_not_equal": [[136, "polars-testing-assert-frame-not-equal"]], "polars.read_ods": [[123, "polars-read-ods"]], "polars.DataFrame.count": [[161, "polars-dataframe-count"]], "polars.testing.parametric.set_profile": [[147, "polars-testing-parametric-set-profile"]], "polars.Series.std": [[1130, "polars-series-std"]], "polars.Series.str.len_bytes": [[1146, "polars-series-str-len-bytes"]], "polars.Series.str.count_matches": [[1134, "polars-series-str-count-matches"]], "polars.Series.rolling_min": [[1105, "polars-series-rolling-min"]], "polars.Series.str.replace_many": [[1152, "polars-series-str-replace-many"]], "polars.Series.str.extract": [[1139, "polars-series-str-extract"]], "polars.Series.sin": [[1124, "polars-series-sin"]], "polars.Series.round_sig_figs": [[1112, "polars-series-round-sig-figs"]], "polars.Series.search_sorted": [[1115, "polars-series-search-sorted"]], "polars.Series.str.concat": [[1131, "polars-series-str-concat"]], "polars.Series.sqrt": [[1129, "polars-series-sqrt"]], "polars.Series.str.decode": [[1135, "polars-series-str-decode"]], "polars.Series.rolling_sum": [[1109, "polars-series-rolling-sum"]], "polars.Series.rle_id": [[1100, "polars-series-rle-id"]], "polars.Series.rolling_quantile": [[1106, "polars-series-rolling-quantile"]], "polars.Series.str.json_decode": [[1144, "polars-series-str-json-decode"]], "polars.Series.str.slice": [[1154, "polars-series-str-slice"]], "polars.Series.str.explode": [[1138, "polars-series-str-explode"]], "polars.Series.str.find": [[1142, "polars-series-str-find"]], "polars.Series.str.replace": [[1150, "polars-series-str-replace"]], "polars.Series.rolling_skew": [[1107, "polars-series-rolling-skew"]], "polars.Series.str.encode": [[1136, "polars-series-str-encode"]], "polars.Series.skew": [[1126, "polars-series-skew"]], "polars.Series.shift": [[1119, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1120, "polars-series-shrink-dtype"]], "polars.Series.rolling_max": [[1102, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1103, "polars-series-rolling-mean"]], "polars.Series.scatter": [[1114, "polars-series-scatter"]], "polars.Series.set": [[1116, "polars-series-set"]], "polars.Series.str.len_chars": [[1147, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1148, "polars-series-str-pad-end"]], "polars.Series.str.replace_all": [[1151, "polars-series-str-replace-all"]], "polars.Series.shape": [[1118, "polars-series-shape"]], "polars.Series.str.ends_with": [[1137, "polars-series-str-ends-with"]], "polars.Series.sample": [[1113, "polars-series-sample"]], "polars.Series.str.pad_start": [[1149, "polars-series-str-pad-start"]], "polars.Series.str.reverse": [[1153, "polars-series-str-reverse"]], "polars.Series.sinh": [[1125, "polars-series-sinh"]], "polars.Series.rolling_map": [[1101, "polars-series-rolling-map"]], "polars.Series.str.json_path_match": [[1145, "polars-series-str-json-path-match"]], "polars.Series.set_sorted": [[1117, "polars-series-set-sorted"]], "polars.Series.str.extract_all": [[1140, "polars-series-str-extract-all"]], "polars.Series.sign": [[1123, "polars-series-sign"]], "polars.Series.str.contains": [[1132, "polars-series-str-contains"]], "polars.Series.shuffle": [[1122, "polars-series-shuffle"]], "polars.Series.shrink_to_fit": [[1121, "polars-series-shrink-to-fit"]], "polars.Series.rolling_var": [[1110, "polars-series-rolling-var"]], "polars.Series.str.extract_groups": [[1141, "polars-series-str-extract-groups"]], "polars.Series.sort": [[1128, "polars-series-sort"]], "polars.Series.slice": [[1127, "polars-series-slice"]], "polars.Series.rolling_std": [[1108, "polars-series-rolling-std"]], "polars.Series.str.contains_any": [[1133, "polars-series-str-contains-any"]], "polars.Series.rolling_median": [[1104, "polars-series-rolling-median"]], "polars.Series.round": [[1111, "polars-series-round"]], "polars.Series.str.head": [[1143, "polars-series-str-head"]], "polars.Series.struct.fields": [[1176, "polars-series-struct-fields"]], "polars.Series.struct.schema": [[1179, "polars-series-struct-schema"]], "polars.Series.str.strip_chars": [[1159, "polars-series-str-strip-chars"]], "polars.Series.struct.field": [[1175, "polars-series-struct-field"]], "polars.Series.struct.json_encode": [[1177, "polars-series-struct-json-encode"]], "polars.Series.tail": [[1182, "polars-series-tail"]], "polars.Series.unique": [[1196, "polars-series-unique"]], "polars.Series.str.strip_suffix": [[1163, "polars-series-str-strip-suffix"]], "polars.Series.upper_bound": [[1198, "polars-series-upper-bound"]], "polars.Series.str.to_time": [[1171, "polars-series-str-to-time"]], "polars.Series.to_arrow": [[1185, "polars-series-to-arrow"]], "polars.Series.zip_with": [[1201, "polars-series-zip-with"]], "polars.Series.to_init_repr": [[1188, "polars-series-to-init-repr"]], "polars.Series.to_list": [[1190, "polars-series-to-list"]], "Descriptive": [[1208, "descriptive"], [853, "descriptive"], [287, "descriptive"]], "polars.Series.to_frame": [[1187, "polars-series-to-frame"]], "polars.Series.var": [[1200, "polars-series-var"]], "Export": [[1209, "export"], [288, "export"]], "polars.Series.str.starts_with": [[1158, "polars-series-str-starts-with"]], "Array": [[1202, "array"], [1226, "array"], [742, "array"]], "polars.Series.struct.unnest": [[1180, "polars-series-struct-unnest"]], "polars.Series.to_pandas": [[1192, "polars-series-to-pandas"]], "polars.Series.sum": [[1181, "polars-series-sum"]], "polars.Series.str.strptime": [[1164, "polars-series-str-strptime"]], "polars.Series.str.strip_chars_end": [[1160, "polars-series-str-strip-chars-end"]], "polars.Series.str.to_lowercase": [[1170, "polars-series-str-to-lowercase"]], "polars.Series.to_jax": [[1189, "polars-series-to-jax"]], "Categories": [[1206, "categories"], [745, "categories"]], "polars.Series.str.to_date": [[1166, "polars-series-str-to-date"]], "polars.Series.top_k": [[1195, "polars-series-top-k"]], "polars.Series.struct.rename_fields": [[1178, "polars-series-struct-rename-fields"]], "polars.Series.tanh": [[1184, "polars-series-tanh"]], "polars.Series.value_counts": [[1199, "polars-series-value-counts"]], "polars.Series.str.split_exact": [[1156, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1157, "polars-series-str-splitn"]], "polars.Series.str.tail": [[1165, "polars-series-str-tail"]], "polars.Series.to_torch": [[1194, "polars-series-to-torch"]], "polars.Series.unique_counts": [[1197, "polars-series-unique-counts"]], "polars.Series.to_numpy": [[1191, "polars-series-to-numpy"]], "polars.Series.str.zfill": [[1174, "polars-series-str-zfill"]], "Boolean": [[1205, "boolean"], [744, "boolean"]], "polars.Series.str.strip_prefix": [[1162, "polars-series-str-strip-prefix"]], "polars.Series.to_physical": [[1193, "polars-series-to-physical"]], "Attributes": [[1203, "attributes"], [852, "attributes"], [285, "attributes"]], "polars.Series.str.to_datetime": [[1167, "polars-series-str-to-datetime"]], "polars.Series.str.split": [[1155, "polars-series-str-split"]], "polars.Series.str.strip_chars_start": [[1161, "polars-series-str-strip-chars-start"]], "polars.Series.str.to_uppercase": [[1173, "polars-series-str-to-uppercase"]], "polars.Series.tan": [[1183, "polars-series-tan"]], "polars.Series.to_dummies": [[1186, "polars-series-to-dummies"]], "polars.Series.str.to_titlecase": [[1172, "polars-series-str-to-titlecase"]], "Binary": [[1204, "binary"], [743, "binary"], [756, "binary"]], "Computation": [[1207, "computation"], [748, "computation"], [286, "computation"]], "polars.Series.str.to_decimal": [[1168, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1169, "polars-series-str-to-integer"]], "polars.Series.list.shift": [[1058, "polars-series-list-shift"]], "polars.Series.reverse": [[1098, "polars-series-reverse"]], "polars.Series.pct_change": [[1086, "polars-series-pct-change"]], "polars.Series.list.sum": [[1062, "polars-series-list-sum"]], "polars.Series.list.n_unique": [[1051, "polars-series-list-n-unique"]], "polars.Series.reshape": [[1097, "polars-series-reshape"]], "polars.Series.log1p": [[1070, "polars-series-log1p"]], "polars.Series.mode": [[1077, "polars-series-mode"]], "polars.Series.mean": [[1074, "polars-series-mean"]], "polars.Series.lower_bound": [[1071, "polars-series-lower-bound"]], "polars.Series.max": [[1073, "polars-series-max"]], "polars.Series.map_elements": [[1072, "polars-series-map-elements"]], "polars.Series.nan_min": [[1082, "polars-series-nan-min"]], "polars.Series.list.set_union": [[1057, "polars-series-list-set-union"]], "polars.Series.log10": [[1069, "polars-series-log10"]], "polars.Series.list.std": [[1061, "polars-series-list-std"]], "polars.Series.list.unique": [[1066, "polars-series-list-unique"]], "polars.Series.list.to_array": [[1064, "polars-series-list-to-array"]], "polars.Series.median": [[1075, "polars-series-median"]], "polars.Series.min": [[1076, "polars-series-min"]], "polars.Series.list.tail": [[1063, "polars-series-list-tail"]], "polars.Series.new_from_index": [[1083, "polars-series-new-from-index"]], "polars.Series.list.max": [[1047, "polars-series-list-max"]], "polars.Series.quantile": [[1091, "polars-series-quantile"]], "polars.Series.list.slice": [[1059, "polars-series-list-slice"]], "polars.Series.reinterpret": [[1094, "polars-series-reinterpret"]], "polars.Series.not_": [[1084, "polars-series-not"]], "polars.Series.list.mean": [[1048, "polars-series-list-mean"]], "polars.Series.rle": [[1099, "polars-series-rle"]], "polars.Series.list.set_symmetric_difference": [[1056, "polars-series-list-set-symmetric-difference"]], "polars.Series.nan_max": [[1081, "polars-series-nan-max"]], "polars.Series.n_unique": [[1079, "polars-series-n-unique"]], "polars.Series.n_chunks": [[1078, "polars-series-n-chunks"]], "polars.Series.list.len": [[1046, "polars-series-list-len"]], "polars.Series.list.sort": [[1060, "polars-series-list-sort"]], "polars.Series.product": [[1089, "polars-series-product"]], "polars.Series.qcut": [[1090, "polars-series-qcut"]], "polars.Series.rechunk": [[1093, "polars-series-rechunk"]], "polars.Series.list.min": [[1050, "polars-series-list-min"]], "polars.Series.list.reverse": [[1052, "polars-series-list-reverse"]], "polars.Series.list.set_intersection": [[1055, "polars-series-list-set-intersection"]], "polars.Series.list.median": [[1049, "polars-series-list-median"]], "polars.Series.list.sample": [[1053, "polars-series-list-sample"]], "polars.Series.list.to_struct": [[1065, "polars-series-list-to-struct"]], "polars.Series.peak_max": [[1087, "polars-series-peak-max"]], "polars.Series.null_count": [[1085, "polars-series-null-count"]], "polars.Series.replace": [[1096, "polars-series-replace"]], "polars.Series.list.last": [[1045, "polars-series-list-last"]], "polars.Series.rename": [[1095, "polars-series-rename"]], "polars.Series.list.var": [[1067, "polars-series-list-var"]], "polars.Series.name": [[1080, "polars-series-name"]], "polars.Series.log": [[1068, "polars-series-log"]], "polars.Series.list.set_difference": [[1054, "polars-series-list-set-difference"]], "polars.Series.rank": [[1092, "polars-series-rank"]], "polars.Series.peak_min": [[1088, "polars-series-peak-min"]], "polars.Series.extend": [[992, "polars-series-extend"]], "polars.Series.is_finite": [[1013, "polars-series-is-finite"]], "polars.Series.is_in": [[1015, "polars-series-is-in"]], "polars.Series.fill_null": [[995, "polars-series-fill-null"]], "polars.Series.is_sorted": [[1022, "polars-series-is-sorted"]], "polars.Series.list.explode": [[1038, "polars-series-list-explode"]], "polars.Series.is_duplicated": [[1011, "polars-series-is-duplicated"]], "polars.Series.filter": [[996, "polars-series-filter"]], "polars.Series.limit": [[1027, "polars-series-limit"]], "polars.Series.list.gather_every": [[1041, "polars-series-list-gather-every"]], "polars.Series.floor": [[998, "polars-series-floor"]], "polars.Series.list.first": [[1039, "polars-series-list-first"]], "polars.Series.list.join": [[1044, "polars-series-list-join"]], "polars.Series.flags": [[997, "polars-series-flags"]], "polars.Series.list.concat": [[1032, "polars-series-list-concat"]], "polars.Series.gather": [[999, "polars-series-gather"]], "polars.Series.list.count_matches": [[1034, "polars-series-list-count-matches"]], "polars.Series.extend_constant": [[993, "polars-series-extend-constant"]], "polars.Series.get_chunks": [[1001, "polars-series-get-chunks"]], "polars.Series.is_between": [[1010, "polars-series-is-between"]], "polars.Series.implode": [[1007, "polars-series-implode"]], "polars.Series.is_null": [[1021, "polars-series-is-null"]], "polars.Series.explode": [[991, "polars-series-explode"]], "polars.Series.is_infinite": [[1016, "polars-series-is-infinite"]], "polars.Series.fill_nan": [[994, "polars-series-fill-nan"]], "polars.Series.is_empty": [[1012, "polars-series-is-empty"]], "polars.Series.list.diff": [[1035, "polars-series-list-diff"]], "polars.Series.list.arg_min": [[1031, "polars-series-list-arg-min"]], "polars.Series.list.arg_max": [[1030, "polars-series-list-arg-max"]], "polars.Series.is_last_distinct": [[1017, "polars-series-is-last-distinct"]], "polars.Series.is_not_nan": [[1019, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1020, "polars-series-is-not-null"]], "polars.Series.head": [[1005, "polars-series-head"]], "polars.Series.hist": [[1006, "polars-series-hist"]], "polars.Series.has_nulls": [[1002, "polars-series-has-nulls"]], "polars.Series.len": [[1026, "polars-series-len"]], "polars.Series.is_first_distinct": [[1014, "polars-series-is-first-distinct"]], "polars.Series.item": [[1024, "polars-series-item"]], "polars.Series.interpolate_by": [[1009, "polars-series-interpolate-by"]], "polars.Series.list.contains": [[1033, "polars-series-list-contains"]], "polars.Series.interpolate": [[1008, "polars-series-interpolate"]], "polars.Series.list.head": [[1043, "polars-series-list-head"]], "polars.Series.is_nan": [[1018, "polars-series-is-nan"]], "polars.Series.list.all": [[1028, "polars-series-list-all"]], "polars.Series.list.gather": [[1040, "polars-series-list-gather"]], "polars.Series.list.eval": [[1037, "polars-series-list-eval"]], "polars.Series.kurtosis": [[1025, "polars-series-kurtosis"]], "polars.Series.list.get": [[1042, "polars-series-list-get"]], "polars.Series.is_unique": [[1023, "polars-series-is-unique"]], "polars.Series.list.drop_nulls": [[1036, "polars-series-list-drop-nulls"]], "polars.Series.list.any": [[1029, "polars-series-list-any"]], "polars.Series.hash": [[1004, "polars-series-hash"]], "polars.Series.has_validity": [[1003, "polars-series-has-validity"]], "polars.Series.gather_every": [[1000, "polars-series-gather-every"]], "polars.Series.exp": [[990, "polars-series-exp"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.exceptions.PolarsError": [[92, "polars-exceptions-polarserror"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.from_dataframe": [[101, "polars-from-dataframe"]], "polars.exceptions.InvalidOperationError": [[89, "polars-exceptions-invalidoperationerror"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.from_dicts": [[103, "polars-from-dicts"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.concat": [[55, "polars-concat"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.exceptions.StructFieldNotFoundError": [[98, "polars-exceptions-structfieldnotfounderror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[109, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.SchemaError": [[95, "polars-exceptions-schemaerror"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.exceptions.NoRowsReturnedError": [[91, "polars-exceptions-norowsreturnederror"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.from_records": [[106, "polars-from-records"]], "polars.exceptions.NoDataError": [[90, "polars-exceptions-nodataerror"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.exceptions.SchemaFieldNotFoundError": [[96, "polars-exceptions-schemafieldnotfounderror"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.get_index_type": [[108, "polars-get-index-type"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.exceptions.ColumnNotFoundError": [[86, "polars-exceptions-columnnotfounderror"]], "polars.from_dict": [[102, "polars-from-dict"]], "polars.exceptions.ShapeError": [[97, "polars-exceptions-shapeerror"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.exceptions.PolarsPanicError": [[93, "polars-exceptions-polarspanicerror"]], "polars.from_pandas": [[105, "polars-from-pandas"]], "polars.exceptions.RowsError": [[94, "polars-exceptions-rowserror"]], "polars.from_numpy": [[104, "polars-from-numpy"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.exceptions.DuplicateError": [[88, "polars-exceptions-duplicateerror"]], "polars.exceptions.TooManyRowsReturnedError": [[99, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_arrow": [[100, "polars-from-arrow"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.exceptions.ComputeError": [[87, "polars-exceptions-computeerror"]], "polars.from_repr": [[107, "polars-from-repr"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.Series.ewm_mean": [[986, "polars-series-ewm-mean"]], "polars.Series.dt.mean": [[949, "polars-series-dt-mean"]], "polars.Series.dt.replace_time_zone": [[963, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.nanosecond": [[959, "polars-series-dt-nanosecond"]], "polars.Series.dt.datetime": [[941, "polars-series-dt-datetime"]], "polars.Series.dt.round": [[964, "polars-series-dt-round"]], "polars.Series.dt.total_milliseconds": [[973, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[974, "polars-series-dt-total-minutes"]], "polars.Series.dt.truncate": [[977, "polars-series-dt-truncate"]], "polars.Series.ewm_var": [[989, "polars-series-ewm-var"]], "polars.Series.dt.with_time_unit": [[980, "polars-series-dt-with-time-unit"]], "polars.Series.dt.min": [[954, "polars-series-dt-min"]], "polars.Series.dt.day": [[942, "polars-series-dt-day"]], "polars.Series.equals": [[984, "polars-series-equals"]], "polars.Series.dt.microsecond": [[951, "polars-series-dt-microsecond"]], "polars.Series.dt.timestamp": [[968, "polars-series-dt-timestamp"]], "polars.Series.dt.month": [[956, "polars-series-dt-month"]], "polars.Series.dt.convert_time_zone": [[939, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.epoch": [[944, "polars-series-dt-epoch"]], "polars.Series.dt.combine": [[938, "polars-series-dt-combine"]], "polars.Series.dt.month_start": [[958, "polars-series-dt-month-start"]], "polars.Series.dt.total_seconds": [[976, "polars-series-dt-total-seconds"]], "polars.Series.dt.median": [[950, "polars-series-dt-median"]], "polars.Series.dt.minute": [[955, "polars-series-dt-minute"]], "polars.Series.dt.total_nanoseconds": [[975, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.to_string": [[969, "polars-series-dt-to-string"]], "polars.Series.dt.century": [[937, "polars-series-dt-century"]], "polars.Series.dt.millennium": [[952, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[953, "polars-series-dt-millisecond"]], "polars.Series.dt.iso_year": [[947, "polars-series-dt-iso-year"]], "polars.Series.dt.total_microseconds": [[972, "polars-series-dt-total-microseconds"]], "polars.Series.estimated_size": [[985, "polars-series-estimated-size"]], "polars.Series.dt.year": [[981, "polars-series-dt-year"]], "polars.Series.dt.weekday": [[979, "polars-series-dt-weekday"]], "polars.Series.ewm_std": [[988, "polars-series-ewm-std"]], "polars.Series.dt.total_days": [[970, "polars-series-dt-total-days"]], "polars.Series.dt.max": [[948, "polars-series-dt-max"]], "polars.Series.dt.cast_time_unit": [[936, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.second": [[965, "polars-series-dt-second"]], "polars.Series.dt.time": [[967, "polars-series-dt-time"]], "polars.Series.dtype": [[982, "polars-series-dtype"]], "polars.Series.dt.week": [[978, "polars-series-dt-week"]], "polars.Series.dt.dst_offset": [[943, "polars-series-dt-dst-offset"]], "polars.Series.ewm_mean_by": [[987, "polars-series-ewm-mean-by"]], "polars.Series.dt.offset_by": [[960, "polars-series-dt-offset-by"]], "polars.Series.dt.quarter": [[962, "polars-series-dt-quarter"]], "polars.Series.dt.date": [[940, "polars-series-dt-date"]], "polars.Series.dt.total_hours": [[971, "polars-series-dt-total-hours"]], "polars.Series.dt.is_leap_year": [[946, "polars-series-dt-is-leap-year"]], "polars.Series.dt.ordinal_day": [[961, "polars-series-dt-ordinal-day"]], "polars.Series.entropy": [[983, "polars-series-entropy"]], "polars.Series.dt.base_utc_offset": [[935, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.month_end": [[957, "polars-series-dt-month-end"]], "polars.Series.dt.hour": [[945, "polars-series-dt-hour"]], "polars.Series.dt.strftime": [[966, "polars-series-dt-strftime"]], "polars.Series.describe": [[929, "polars-series-describe"]], "polars.Series.clip": [[917, "polars-series-clip"]], "polars.Series.cum_count": [[922, "polars-series-cum-count"]], "polars.Series.arr.shift": [[894, "polars-series-arr-shift"]], "polars.Series.arr.median": [[890, "polars-series-arr-median"]], "polars.Series.arr.var": [[901, "polars-series-arr-var"]], "polars.Series.cum_max": [[923, "polars-series-cum-max"]], "polars.Series.arr.contains": [[882, "polars-series-arr-contains"]], "polars.Series.arr.arg_min": [[881, "polars-series-arr-arg-min"]], "polars.Series.bin.ends_with": [[905, "polars-series-bin-ends-with"]], "polars.Series.arr.last": [[888, "polars-series-arr-last"]], "polars.Series.bin.encode": [[904, "polars-series-bin-encode"]], "polars.Series.cosh": [[920, "polars-series-cosh"]], "polars.Series.dot": [[931, "polars-series-dot"]], "polars.Series.arr.to_struct": [[899, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[900, "polars-series-arr-unique"]], "polars.Series.dt.add_business_days": [[934, "polars-series-dt-add-business-days"]], "polars.Series.bin.contains": [[902, "polars-series-bin-contains"]], "polars.Series.cum_prod": [[925, "polars-series-cum-prod"]], "polars.Series.chunk_lengths": [[915, "polars-series-chunk-lengths"]], "polars.Series.arr.first": [[885, "polars-series-arr-first"]], "polars.Series.bin.decode": [[903, "polars-series-bin-decode"]], "polars.Series.arr.to_list": [[898, "polars-series-arr-to-list"]], "polars.Series.cum_sum": [[926, "polars-series-cum-sum"]], "polars.Series.cos": [[919, "polars-series-cos"]], "polars.Series.arr.count_matches": [[883, "polars-series-arr-count-matches"]], "polars.Series.arr.arg_max": [[880, "polars-series-arr-arg-max"]], "polars.Series.cat.get_categories": [[909, "polars-series-cat-get-categories"]], "polars.Series.ceil": [[914, "polars-series-ceil"]], "polars.Series.drop_nulls": [[933, "polars-series-drop-nulls"]], "polars.Series.arr.sum": [[897, "polars-series-arr-sum"]], "polars.Series.bottom_k": [[907, "polars-series-bottom-k"]], "polars.Series.cat.uses_lexical_ordering": [[912, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.drop_nans": [[932, "polars-series-drop-nans"]], "polars.Series.arr.get": [[886, "polars-series-arr-get"]], "polars.Series.arr.n_unique": [[892, "polars-series-arr-n-unique"]], "polars.Series.arr.explode": [[884, "polars-series-arr-explode"]], "polars.Series.arr.reverse": [[893, "polars-series-arr-reverse"]], "polars.Series.bin.starts_with": [[906, "polars-series-bin-starts-with"]], "polars.Series.arr.min": [[891, "polars-series-arr-min"]], "polars.Series.arr.join": [[887, "polars-series-arr-join"]], "polars.Series.cbrt": [[913, "polars-series-cbrt"]], "polars.Series.clear": [[916, "polars-series-clear"]], "polars.Series.cat.to_local": [[911, "polars-series-cat-to-local"]], "polars.Series.arr.max": [[889, "polars-series-arr-max"]], "polars.Series.arr.std": [[896, "polars-series-arr-std"]], "polars.Series.cut": [[928, "polars-series-cut"]], "polars.Series.arr.sort": [[895, "polars-series-arr-sort"]], "polars.Series.cumulative_eval": [[927, "polars-series-cumulative-eval"]], "polars.Series.cast": [[908, "polars-series-cast"]], "polars.Series.cum_min": [[924, "polars-series-cum-min"]], "polars.Series.cat.is_local": [[910, "polars-series-cat-is-local"]], "polars.Series.clone": [[918, "polars-series-clone"]], "polars.Series.cot": [[921, "polars-series-cot"]], "polars.Series.diff": [[930, "polars-series-diff"]], "polars.LazyFrame.rolling": [[811, "polars-lazyframe-rolling"]], "polars.LazyFrame.null_count": [[805, "polars-lazyframe-null-count"]], "polars.LazyFrame.explain": [[780, "polars-lazyframe-explain"]], "polars.LazyFrame.select_seq": [[814, "polars-lazyframe-select-seq"]], "polars.LazyFrame.profile": [[807, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[808, "polars-lazyframe-quantile"]], "polars.LazyFrame.lazy": [[796, "polars-lazyframe-lazy"]], "polars.LazyFrame.set_sorted": [[816, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.join": [[793, "polars-lazyframe-join"]], "polars.LazyFrame.shift": [[817, "polars-lazyframe-shift"]], "polars.LazyFrame.inspect": [[791, "polars-lazyframe-inspect"]], "polars.LazyFrame.merge_sorted": [[803, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.explode": [[781, "polars-lazyframe-explode"]], "polars.LazyFrame.min": [[804, "polars-lazyframe-min"]], "polars.LazyFrame.clone": [[770, "polars-lazyframe-clone"]], "polars.LazyFrame.schema": [[812, "polars-lazyframe-schema"]], "polars.LazyFrame.fill_null": [[784, "polars-lazyframe-fill-null"]], "polars.LazyFrame.collect": [[771, "polars-lazyframe-collect"]], "polars.LazyFrame.sum": [[823, "polars-lazyframe-sum"]], "polars.LazyFrame.sql": [[821, "polars-lazyframe-sql"]], "polars.LazyFrame.collect_async": [[772, "polars-lazyframe-collect-async"]], "polars.LazyFrame.filter": [[785, "polars-lazyframe-filter"]], "polars.LazyFrame.reverse": [[810, "polars-lazyframe-reverse"]], "polars.LazyFrame.fill_nan": [[783, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.gather_every": [[787, "polars-lazyframe-gather-every"]], "polars.LazyFrame.last": [[795, "polars-lazyframe-last"]], "polars.LazyFrame.show_graph": [[818, "polars-lazyframe-show-graph"]], "polars.LazyFrame.first": [[786, "polars-lazyframe-first"]], "polars.LazyFrame.tail": [[824, "polars-lazyframe-tail"]], "polars.LazyFrame.limit": [[797, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[798, "polars-lazyframe-map-batches"]], "polars.LazyFrame.melt": [[802, "polars-lazyframe-melt"]], "polars.LazyFrame.serialize": [[815, "polars-lazyframe-serialize"]], "polars.LazyFrame.max": [[799, "polars-lazyframe-max"]], "polars.LazyFrame.group_by_dynamic": [[789, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.drop": [[777, "polars-lazyframe-drop"]], "polars.LazyFrame.columns": [[773, "polars-lazyframe-columns"]], "polars.LazyFrame.mean": [[800, "polars-lazyframe-mean"]], "polars.LazyFrame.sort": [[820, "polars-lazyframe-sort"]], "polars.LazyFrame.fetch": [[782, "polars-lazyframe-fetch"]], "polars.LazyFrame.drop_nulls": [[778, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.count": [[774, "polars-lazyframe-count"]], "polars.LazyFrame.median": [[801, "polars-lazyframe-median"]], "polars.LazyFrame.join_asof": [[794, "polars-lazyframe-join-asof"]], "polars.LazyFrame.dtypes": [[779, "polars-lazyframe-dtypes"]], "polars.LazyFrame.group_by": [[788, "polars-lazyframe-group-by"]], "polars.LazyFrame.deserialize": [[776, "polars-lazyframe-deserialize"]], "polars.LazyFrame.std": [[822, "polars-lazyframe-std"]], "polars.LazyFrame.select": [[813, "polars-lazyframe-select"]], "polars.LazyFrame.rename": [[809, "polars-lazyframe-rename"]], "polars.LazyFrame.describe": [[775, "polars-lazyframe-describe"]], "polars.LazyFrame.slice": [[819, "polars-lazyframe-slice"]], "polars.LazyFrame.pipe": [[806, "polars-lazyframe-pipe"]], "polars.LazyFrame.head": [[790, "polars-lazyframe-head"]], "polars.LazyFrame.interpolate": [[792, "polars-lazyframe-interpolate"]], "polars.arctan2": [[674, "polars-arctan2"]], "polars.int_range": [[706, "polars-int-range"]], "polars.datetime": [[693, "polars-datetime"]], "polars.corr": [[682, "polars-corr"]], "polars.any": [[670, "polars-any"]], "polars.arctan2d": [[675, "polars-arctan2d"]], "polars.duration": [[696, "polars-duration"]], "polars.datetime_range": [[694, "polars-datetime-range"]], "polars.max_horizontal": [[714, "polars-max-horizontal"]], "polars.approx_n_unique": [[672, "polars-approx-n-unique"]], "polars.arg_where": [[677, "polars-arg-where"]], "polars.Expr.value_counts": [[664, "polars-expr-value-counts"]], "polars.cum_count": [[685, "polars-cum-count"]], "polars.last": [[708, "polars-last"]], "polars.Expr.unique_counts": [[662, "polars-expr-unique-counts"]], "polars.exclude": [[698, "polars-exclude"]], "polars.implode": [[705, "polars-implode"]], "polars.head": [[704, "polars-head"]], "polars.datetime_ranges": [[695, "polars-datetime-ranges"]], "polars.Expr.xor": [[667, "polars-expr-xor"]], "polars.concat_str": [[681, "polars-concat-str"]], "polars.concat_list": [[680, "polars-concat-list"]], "polars.date": [[690, "polars-date"]], "polars.Expr.unique": [[661, "polars-expr-unique"]], "polars.cum_sum": [[688, "polars-cum-sum"]], "polars.any_horizontal": [[671, "polars-any-horizontal"]], "polars.count": [[683, "polars-count"]], "polars.cov": [[684, "polars-cov"]], "polars.business_day_count": [[678, "polars-business-day-count"]], "polars.first": [[699, "polars-first"]], "polars.date_ranges": [[692, "polars-date-ranges"]], "polars.map_batches": [[711, "polars-map-batches"]], "polars.Expr.var": [[665, "polars-expr-var"]], "polars.Expr.upper_bound": [[663, "polars-expr-upper-bound"]], "polars.cum_fold": [[686, "polars-cum-fold"]], "polars.Expr.where": [[666, "polars-expr-where"]], "polars.format": [[701, "polars-format"]], "polars.cum_sum_horizontal": [[689, "polars-cum-sum-horizontal"]], "polars.from_epoch": [[702, "polars-from-epoch"]], "polars.max": [[713, "polars-max"]], "polars.arg_sort_by": [[676, "polars-arg-sort-by"]], "polars.groups": [[703, "polars-groups"]], "polars.map_groups": [[712, "polars-map-groups"]], "polars.date_range": [[691, "polars-date-range"]], "polars.all_horizontal": [[669, "polars-all-horizontal"]], "polars.coalesce": [[679, "polars-coalesce"]], "polars.int_ranges": [[707, "polars-int-ranges"]], "polars.lit": [[710, "polars-lit"]], "polars.arange": [[673, "polars-arange"]], "polars.cum_reduce": [[687, "polars-cum-reduce"]], "polars.len": [[709, "polars-len"]], "polars.all": [[668, "polars-all"]], "polars.Expr.truediv": [[660, "polars-expr-truediv"]], "polars.fold": [[700, "polars-fold"]], "polars.element": [[697, "polars-element"]], "SQL Interface": [[1233, "sql-interface"]], "polars.SQLContext.unregister": [[1223, "polars-sqlcontext-unregister"]], "Math": [[1229, "math"]], "ABS": [[1229, "abs"]], "CBRT": [[1229, "cbrt"]], "CEIL": [[1229, "ceil"]], "DIV": [[1229, "div"]], "EXP": [[1229, "exp"]], "FLOOR": [[1229, "floor"]], "LN": [[1229, "ln"]], "LOG": [[1229, "log"]], "LOG2": [[1229, "log2"]], "LOG10": [[1229, "log10"]], "LOG1P": [[1229, "log1p"]], "MOD": [[1229, "mod"]], "PI": [[1229, "pi"]], "POW": [[1229, "pow"]], "ROUND": [[1229, "round"]], "SIGN": [[1229, "sign"]], "SQRT": [[1229, "sqrt"]], "SQL Clauses": [[1224, "sql-clauses"]], "SELECT": [[1224, "select"]], "FROM": [[1224, "from"]], "JOIN": [[1224, "join"]], "WHERE": [[1224, "where"]], "GROUP BY": [[1224, "group-by"]], "HAVING": [[1224, "having"]], "ORDER BY": [[1224, "order-by"]], "LIMIT": [[1224, "limit"]], "OFFSET": [[1224, "offset"]], "polars.SQLContext.tables": [[1222, "polars-sqlcontext-tables"]], "Series": [[1210, "series"]], "List": [[1211, "list"], [751, "list"]], "SQL Functions": [[1228, "sql-functions"]], "Manipulation/selection": [[1213, "manipulation-selection"], [857, "manipulation-selection"], [754, "manipulation-selection"], [292, "manipulation-selection"]], "String": [[1215, "string"], [1230, "string"], [757, "string"], [294, "string"]], "Testing": [[1237, "testing"]], "Asserts": [[1237, "asserts"]], "Parametric testing": [[1237, "parametric-testing"]], "Polars strategies": [[1237, "polars-strategies"]], "Strategy helpers": [[1237, "strategy-helpers"]], "Profiles": [[1237, "profiles"]], "Set Operations": [[1235, "set-operations"]], "UNION": [[1235, "union"]], "UNION ALL": [[1235, "union-all"]], "UNION BY NAME": [[1235, "union-by-name"]], "Conditional": [[1227, "conditional"]], "COALESCE": [[1227, "coalesce"]], "GREATEST": [[1227, "greatest"]], "IF": [[1227, "if"]], "IFNULL": [[1227, "ifnull"]], "LEAST": [[1227, "least"]], "NULLIF": [[1227, "nullif"]], "polars.SQLContext.register_many": [[1221, "polars-sqlcontext-register-many"]], "Table Operations": [[1236, "table-operations"]], "CREATE TABLE": [[1236, "create-table"]], "DROP TABLES": [[1236, "drop-tables"]], "EXPLAIN": [[1236, "explain"]], "SHOW TABLES": [[1236, "show-tables"]], "UNNEST": [[1236, "unnest"], [1226, "unnest"]], "TRUNCATE": [[1236, "truncate"]], "polars.SQLContext.execute": [[1218, "polars-sqlcontext-execute"]], "Temporal": [[1231, "temporal"], [1217, "temporal"], [759, "temporal"], [294, "temporal"]], "DATE": [[1231, "date"]], "DATE_PART": [[1231, "date-part"]], "EXTRACT": [[1231, "extract"]], "Aggregate": [[1225, "aggregate"]], "AVG": [[1225, "avg"]], "COUNT": [[1225, "count"]], "FIRST": [[1225, "first"]], "LAST": [[1225, "last"]], "MAX": [[1225, "max"]], "MEDIAN": [[1225, "median"]], "MIN": [[1225, "min"]], "STDDEV": [[1225, "stddev"]], "SUM": [[1225, "sum"]], "VARIANCE": [[1225, "variance"]], "BIT_LENGTH": [[1230, "bit-length"]], "CONCAT": [[1230, "concat"]], "CONCAT_WS": [[1230, "concat-ws"]], "ENDS_WITH": [[1230, "ends-with"]], "INITCAP": [[1230, "initcap"]], "LEFT": [[1230, "left"]], "LENGTH": [[1230, "length"]], "LOWER": [[1230, "lower"]], "LTRIM": [[1230, "ltrim"]], "OCTET_LENGTH": [[1230, "octet-length"]], "REGEXP_LIKE": [[1230, "regexp-like"]], "REPLACE": [[1230, "replace"]], "REVERSE": [[1230, "reverse"]], "RIGHT": [[1230, "right"]], "RTRIM": [[1230, "rtrim"]], "STARTS_WITH": [[1230, "starts-with"]], "STRPOS": [[1230, "strpos"]], "SUBSTRING": [[1230, "substring"]], "UPPER": [[1230, "upper"]], "Plot": [[1214, "plot"], [293, "plot"]], "Trigonometry": [[1232, "trigonometry"]], "ACOS": [[1232, "acos"]], "ACOSD": [[1232, "acosd"]], "ASIN": [[1232, "asin"]], "ASIND": [[1232, "asind"]], "ATAN": [[1232, "atan"]], "ATAND": [[1232, "atand"]], "ATAN2": [[1232, "atan2"]], "ATAN2D": [[1232, "atan2d"]], "COT": [[1232, "cot"]], "COTD": [[1232, "cotd"]], "COS": [[1232, "cos"]], "COSD": [[1232, "cosd"]], "DEGREES": [[1232, "degrees"]], "RADIANS": [[1232, "radians"]], "SIN": [[1232, "sin"]], "SIND": [[1232, "sind"]], "TAN": [[1232, "tan"]], "TAND": [[1232, "tand"]], "Miscellaneous": [[1212, "miscellaneous"], [856, "miscellaneous"], [761, "miscellaneous"], [753, "miscellaneous"], [291, "miscellaneous"]], "polars.SQLContext.register_globals": [[1220, "polars-sqlcontext-register-globals"]], "Struct": [[1216, "struct"], [758, "struct"]], "Python API": [[1234, "python-api"]], "SQLContext": [[1234, "sqlcontext"]], "Methods": [[1234, "methods"]], "polars.SQLContext.register": [[1219, "polars-sqlcontext-register"]], "ARRAY_CONTAINS": [[1226, "array-contains"]], "ARRAY_GET": [[1226, "array-get"]], "ARRAY_LENGTH": [[1226, "array-length"]], "ARRAY_LOWER": [[1226, "array-lower"]], "ARRAY_MEAN": [[1226, "array-mean"]], "ARRAY_REVERSE": [[1226, "array-reverse"]], "ARRAY_SUM": [[1226, "array-sum"]], "ARRAY_TO_STRING": [[1226, "array-to-string"]], "ARRAY_UNIQUE": [[1226, "array-unique"]], "ARRAY_UPPER": [[1226, "array-upper"]], "polars.Expr.str.json_decode": [[617, "polars-expr-str-json-decode"]], "polars.Expr.str.explode": [[611, "polars-expr-str-explode"]], "polars.Expr.str.replace_many": [[625, "polars-expr-str-replace-many"]], "polars.Expr.str.head": [[616, "polars-expr-str-head"]], "polars.Expr.str.len_bytes": [[619, "polars-expr-str-len-bytes"]], "polars.Expr.str.encode": [[609, "polars-expr-str-encode"]], "polars.Expr.str.extract_all": [[613, "polars-expr-str-extract-all"]], "polars.Expr.to_physical": [[657, "polars-expr-to-physical"]], "polars.Expr.struct.field": [[648, "polars-expr-struct-field"]], "polars.Expr.str.slice": [[627, "polars-expr-str-slice"]], "polars.Expr.str.len_chars": [[620, "polars-expr-str-len-chars"]], "polars.Expr.str.replace": [[623, "polars-expr-str-replace"]], "polars.Expr.str.starts_with": [[631, "polars-expr-str-starts-with"]], "polars.Expr.str.to_datetime": [[640, "polars-expr-str-to-datetime"]], "polars.Expr.str.strip_chars_end": [[633, "polars-expr-str-strip-chars-end"]], "polars.Expr.tanh": [[656, "polars-expr-tanh"]], "polars.Expr.str.extract": [[612, "polars-expr-str-extract"]], "polars.Expr.str.reverse": [[626, "polars-expr-str-reverse"]], "polars.Expr.str.json_path_match": [[618, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_integer": [[642, "polars-expr-str-to-integer"]], "polars.Expr.str.strip_chars_start": [[634, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.zfill": [[647, "polars-expr-str-zfill"]], "polars.Expr.str.pad_start": [[622, "polars-expr-str-pad-start"]], "polars.Expr.str.to_uppercase": [[646, "polars-expr-str-to-uppercase"]], "polars.Expr.str.replace_all": [[624, "polars-expr-str-replace-all"]], "polars.Expr.struct.rename_fields": [[650, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[651, "polars-expr-struct-with-fields"]], "polars.Expr.top_k": [[658, "polars-expr-top-k"]], "polars.Expr.struct.json_encode": [[649, "polars-expr-struct-json-encode"]], "polars.Expr.str.extract_groups": [[614, "polars-expr-str-extract-groups"]], "polars.Expr.str.strip_prefix": [[635, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_titlecase": [[645, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_date": [[639, "polars-expr-str-to-date"]], "polars.Expr.str.to_time": [[644, "polars-expr-str-to-time"]], "polars.Expr.sub": [[652, "polars-expr-sub"]], "polars.Expr.str.ends_with": [[610, "polars-expr-str-ends-with"]], "polars.Expr.str.contains_any": [[606, "polars-expr-str-contains-any"]], "polars.Expr.sum": [[653, "polars-expr-sum"]], "polars.Expr.str.split_exact": [[629, "polars-expr-str-split-exact"]], "polars.Expr.str.strip_chars": [[632, "polars-expr-str-strip-chars"]], "polars.Expr.str.find": [[615, "polars-expr-str-find"]], "polars.Expr.top_k_by": [[659, "polars-expr-top-k-by"]], "polars.Expr.str.decode": [[608, "polars-expr-str-decode"]], "polars.Expr.str.contains": [[605, "polars-expr-str-contains"]], "polars.Expr.str.to_lowercase": [[643, "polars-expr-str-to-lowercase"]], "polars.Expr.tail": [[654, "polars-expr-tail"]], "polars.Expr.str.splitn": [[630, "polars-expr-str-splitn"]], "polars.Expr.str.tail": [[638, "polars-expr-str-tail"]], "polars.Expr.str.to_decimal": [[641, "polars-expr-str-to-decimal"]], "polars.Expr.str.count_matches": [[607, "polars-expr-str-count-matches"]], "polars.Expr.str.strptime": [[637, "polars-expr-str-strptime"]], "polars.Expr.str.split": [[628, "polars-expr-str-split"]], "polars.Expr.tan": [[655, "polars-expr-tan"]], "polars.Expr.str.pad_end": [[621, "polars-expr-str-pad-end"]], "polars.Expr.str.strip_suffix": [[636, "polars-expr-str-strip-suffix"]], "polars.LazyFrame.var": [[829, "polars-lazyframe-var"]], "polars.Series.arg_unique": [[877, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[842, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.Series.arctanh": [[872, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[846, "polars-lazyframe-group-by-lazygroupby-median"]], "Serialization": [[856, "serialization"], [291, "serialization"]], "polars.Series.arccos": [[867, "polars-series-arccos"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[845, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.append": [[866, "polars-series-append"]], "polars.LazyFrame.with_row_index": [[835, "polars-lazyframe-with-row-index"]], "polars.Series.arcsinh": [[870, "polars-series-arcsinh"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[838, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.any": [[865, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[840, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arg_max": [[873, "polars-series-arg-max"]], "polars.LazyFrame.with_columns": [[831, "polars-lazyframe-with-columns"]], "polars.Series.arr.any": [[879, "polars-series-arr-any"]], "Selectors": [[860, "selectors"]], "Importing": [[860, "importing"]], "Set operations": [[860, "set-operations"]], "Functions": [[860, "functions"], [761, "functions"], [749, "functions"]], "polars.LazyFrame.top_k": [[825, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[843, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.all": [[864, "polars-series-all"]], "polars.Series.arg_sort": [[875, "polars-series-arg-sort"]], "Plugins": [[859, "plugins"]], "polars.Series.alias": [[863, "polars-series-alias"]], "polars.Series.arccosh": [[868, "polars-series-arccosh"]], "Metadata": [[858, "metadata"]], "polars.LazyFrame.with_context": [[833, "polars-lazyframe-with-context"]], "polars.Series.arg_min": [[874, "polars-series-arg-min"]], "polars.Series.arcsin": [[869, "polars-series-arcsin"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[850, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[841, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.unique": [[826, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[827, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[849, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.Series.arg_true": [[876, "polars-series-arg-true"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[848, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[839, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.with_columns_seq": [[832, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[837, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.update": [[828, "polars-lazyframe-update"]], "LazyFrame": [[855, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[844, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.abs": [[862, "polars-series-abs"]], "polars.Series.arr.all": [[878, "polars-series-arr-all"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[851, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.width": [[830, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[847, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.with_row_count": [[834, "polars-lazyframe-with-row-count"]], "polars.Series.arctan": [[871, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[836, "polars-lazyframe-group-by-lazygroupby-agg"]], "GroupBy": [[854, "groupby"], [289, "groupby"]], "polars.Expr.rolling_quantile_by": [[579, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_max_by": [[571, "polars-expr-rolling-max-by"]], "polars.Expr.repeat_by": [[562, "polars-expr-repeat-by"]], "polars.Expr.rolling_map": [[569, "polars-expr-rolling-map"]], "polars.Expr.rolling_median": [[574, "polars-expr-rolling-median"]], "polars.Expr.search_sorted": [[590, "polars-expr-search-sorted"]], "polars.Expr.round": [[587, "polars-expr-round"]], "polars.Expr.sqrt": [[602, "polars-expr-sqrt"]], "polars.Expr.rolling_sum": [[583, "polars-expr-rolling-sum"]], "polars.Expr.sinh": [[597, "polars-expr-sinh"]], "polars.Expr.reinterpret": [[561, "polars-expr-reinterpret"]], "polars.Expr.peak_min": [[552, "polars-expr-peak-min"]], "polars.Expr.sign": [[595, "polars-expr-sign"]], "polars.Expr.skew": [[598, "polars-expr-skew"]], "polars.Expr.rolling_std_by": [[582, "polars-expr-rolling-std-by"]], "polars.Expr.radians": [[558, "polars-expr-radians"]], "polars.Expr.sin": [[596, "polars-expr-sin"]], "polars.Expr.rolling_min": [[576, "polars-expr-rolling-min"]], "polars.Expr.pow": [[554, "polars-expr-pow"]], "polars.Expr.pct_change": [[550, "polars-expr-pct-change"]], "polars.Expr.rolling_var_by": [[586, "polars-expr-rolling-var-by"]], "polars.Expr.std": [[603, "polars-expr-std"]], "polars.Expr.rolling_sum_by": [[584, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_skew": [[580, "polars-expr-rolling-skew"]], "polars.Expr.pipe": [[553, "polars-expr-pipe"]], "polars.Expr.rolling_median_by": [[575, "polars-expr-rolling-median-by"]], "polars.Expr.product": [[555, "polars-expr-product"]], "polars.Expr.sort_by": [[601, "polars-expr-sort-by"]], "polars.Expr.slice": [[599, "polars-expr-slice"]], "polars.Expr.rolling_std": [[581, "polars-expr-rolling-std"]], "polars.Expr.peak_max": [[551, "polars-expr-peak-max"]], "polars.Expr.set_sorted": [[591, "polars-expr-set-sorted"]], "polars.Expr.str.concat": [[604, "polars-expr-str-concat"]], "polars.Expr.quantile": [[557, "polars-expr-quantile"]], "polars.Expr.rolling_min_by": [[577, "polars-expr-rolling-min-by"]], "polars.Expr.round_sig_figs": [[588, "polars-expr-round-sig-figs"]], "polars.Expr.shrink_dtype": [[593, "polars-expr-shrink-dtype"]], "polars.Expr.rle_id": [[567, "polars-expr-rle-id"]], "polars.Expr.shift": [[592, "polars-expr-shift"]], "polars.Expr.sort": [[600, "polars-expr-sort"]], "polars.Expr.rolling_quantile": [[578, "polars-expr-rolling-quantile"]], "polars.Expr.qcut": [[556, "polars-expr-qcut"]], "polars.Expr.rolling_max": [[570, "polars-expr-rolling-max"]], "polars.Expr.reshape": [[564, "polars-expr-reshape"]], "polars.Expr.rolling": [[568, "polars-expr-rolling"]], "polars.Expr.shuffle": [[594, "polars-expr-shuffle"]], "polars.Expr.rechunk": [[560, "polars-expr-rechunk"]], "polars.Expr.rolling_mean": [[572, "polars-expr-rolling-mean"]], "polars.Expr.rle": [[566, "polars-expr-rle"]], "polars.Expr.rank": [[559, "polars-expr-rank"]], "polars.Expr.rolling_var": [[585, "polars-expr-rolling-var"]], "polars.Expr.sample": [[589, "polars-expr-sample"]], "polars.Expr.reverse": [[565, "polars-expr-reverse"]], "polars.Expr.rolling_mean_by": [[573, "polars-expr-rolling-mean-by"]], "polars.Expr.replace": [[563, "polars-expr-replace"]], "polars.Expr.name.prefix_fields": [[536, "polars-expr-name-prefix-fields"]], "polars.Expr.meta.tree_format": [[524, "polars-expr-meta-tree-format"]], "polars.Expr.list.to_array": [[501, "polars-expr-list-to-array"]], "polars.Expr.mean": [[513, "polars-expr-mean"]], "polars.Expr.meta.root_names": [[522, "polars-expr-meta-root-names"]], "polars.Expr.min": [[527, "polars-expr-min"]], "polars.Expr.meta.is_regex_projection": [[518, "polars-expr-meta-is-regex-projection"]], "polars.Expr.median": [[514, "polars-expr-median"]], "polars.Expr.list.sum": [[499, "polars-expr-list-sum"]], "polars.Expr.name.map_fields": [[534, "polars-expr-name-map-fields"]], "polars.Expr.map_batches": [[510, "polars-expr-map-batches"]], "polars.Expr.neg": [[545, "polars-expr-neg"]], "polars.Expr.name.suffix": [[537, "polars-expr-name-suffix"]], "polars.Expr.nan_min": [[542, "polars-expr-nan-min"]], "polars.Expr.map_elements": [[511, "polars-expr-map-elements"]], "polars.Expr.list.to_struct": [[502, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[503, "polars-expr-list-unique"]], "polars.Expr.max": [[512, "polars-expr-max"]], "polars.Expr.meta.ne": [[519, "polars-expr-meta-ne"]], "polars.Expr.meta.has_multiple_outputs": [[516, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.nan_max": [[541, "polars-expr-nan-max"]], "polars.Expr.list.shift": [[495, "polars-expr-list-shift"]], "polars.Expr.mod": [[528, "polars-expr-mod"]], "polars.Expr.list.sort": [[497, "polars-expr-list-sort"]], "polars.Expr.mode": [[529, "polars-expr-mode"]], "polars.Expr.ne": [[543, "polars-expr-ne"]], "polars.Expr.n_unique": [[531, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[532, "polars-expr-name-keep"]], "polars.Expr.list.var": [[504, "polars-expr-list-var"]], "polars.Expr.lt": [[509, "polars-expr-lt"]], "polars.Expr.meta.output_name": [[520, "polars-expr-meta-output-name"]], "polars.Expr.log10": [[506, "polars-expr-log10"]], "polars.Expr.meta.write_json": [[526, "polars-expr-meta-write-json"]], "polars.Expr.meta.eq": [[515, "polars-expr-meta-eq"]], "polars.Expr.name.suffix_fields": [[538, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_uppercase": [[540, "polars-expr-name-to-uppercase"]], "polars.Expr.log1p": [[507, "polars-expr-log1p"]], "polars.Expr.list.tail": [[500, "polars-expr-list-tail"]], "polars.Expr.list.std": [[498, "polars-expr-list-std"]], "polars.Expr.log": [[505, "polars-expr-log"]], "polars.Expr.name.map": [[533, "polars-expr-name-map"]], "polars.Expr.lower_bound": [[508, "polars-expr-lower-bound"]], "polars.Expr.mul": [[530, "polars-expr-mul"]], "polars.Expr.null_count": [[547, "polars-expr-null-count"]], "polars.Expr.name.prefix": [[535, "polars-expr-name-prefix"]], "polars.Expr.meta.is_column_selection": [[517, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.undo_aliases": [[525, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.slice": [[496, "polars-expr-list-slice"]], "polars.Expr.not_": [[546, "polars-expr-not"]], "polars.Expr.meta.pop": [[521, "polars-expr-meta-pop"]], "polars.Expr.name.to_lowercase": [[539, "polars-expr-name-to-lowercase"]], "polars.Expr.meta.serialize": [[523, "polars-expr-meta-serialize"]], "polars.Expr.ne_missing": [[544, "polars-expr-ne-missing"]], "polars.Expr.over": [[549, "polars-expr-over"]], "polars.Expr.or_": [[548, "polars-expr-or"]], "polars.Expr.is_unique": [[459, "polars-expr-is-unique"]], "polars.Expr.list.all": [[465, "polars-expr-list-all"]], "polars.Expr.limit": [[464, "polars-expr-limit"]], "polars.Expr.list.diff": [[472, "polars-expr-list-diff"]], "polars.Expr.list.n_unique": [[488, "polars-expr-list-n-unique"]], "polars.Expr.list.concat": [[469, "polars-expr-list-concat"]], "polars.Expr.list.set_union": [[494, "polars-expr-list-set-union"]], "polars.Expr.is_not_nan": [[456, "polars-expr-is-not-nan"]], "polars.Expr.list.contains": [[470, "polars-expr-list-contains"]], "polars.Expr.has_nulls": [[440, "polars-expr-has-nulls"]], "polars.Expr.hist": [[443, "polars-expr-hist"]], "polars.Expr.list.gather": [[477, "polars-expr-list-gather"]], "polars.Expr.list.get": [[479, "polars-expr-list-get"]], "polars.Expr.kurtosis": [[460, "polars-expr-kurtosis"]], "polars.Expr.inspect": [[445, "polars-expr-inspect"]], "polars.Expr.hash": [[441, "polars-expr-hash"]], "polars.Expr.list.arg_max": [[467, "polars-expr-list-arg-max"]], "polars.Expr.head": [[442, "polars-expr-head"]], "polars.Expr.list.join": [[481, "polars-expr-list-join"]], "polars.Expr.list.last": [[482, "polars-expr-list-last"]], "polars.Expr.list.mean": [[485, "polars-expr-list-mean"]], "polars.Expr.list.explode": [[475, "polars-expr-list-explode"]], "polars.Expr.list.set_symmetric_difference": [[493, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.gather_every": [[478, "polars-expr-list-gather-every"]], "polars.Expr.le": [[462, "polars-expr-le"]], "polars.Expr.list.any": [[466, "polars-expr-list-any"]], "polars.Expr.is_in": [[452, "polars-expr-is-in"]], "polars.Expr.last": [[461, "polars-expr-last"]], "polars.Expr.list.min": [[487, "polars-expr-list-min"]], "polars.Expr.list.arg_min": [[468, "polars-expr-list-arg-min"]], "polars.Expr.implode": [[444, "polars-expr-implode"]], "polars.Expr.list.head": [[480, "polars-expr-list-head"]], "polars.Expr.list.reverse": [[489, "polars-expr-list-reverse"]], "polars.Expr.list.eval": [[474, "polars-expr-list-eval"]], "polars.Expr.is_nan": [[455, "polars-expr-is-nan"]], "polars.Expr.is_infinite": [[453, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[454, "polars-expr-is-last-distinct"]], "polars.Expr.is_duplicated": [[449, "polars-expr-is-duplicated"]], "polars.Expr.list.set_intersection": [[492, "polars-expr-list-set-intersection"]], "polars.Expr.is_not_null": [[457, "polars-expr-is-not-null"]], "polars.Expr.list.max": [[484, "polars-expr-list-max"]], "polars.Expr.interpolate": [[446, "polars-expr-interpolate"]], "polars.Expr.list.len": [[483, "polars-expr-list-len"]], "polars.Expr.len": [[463, "polars-expr-len"]], "polars.Expr.list.sample": [[490, "polars-expr-list-sample"]], "polars.Expr.list.drop_nulls": [[473, "polars-expr-list-drop-nulls"]], "polars.Expr.is_first_distinct": [[451, "polars-expr-is-first-distinct"]], "polars.Expr.list.set_difference": [[491, "polars-expr-list-set-difference"]], "polars.Expr.interpolate_by": [[447, "polars-expr-interpolate-by"]], "polars.Expr.list.count_matches": [[471, "polars-expr-list-count-matches"]], "polars.Expr.list.median": [[486, "polars-expr-list-median"]], "polars.Expr.is_finite": [[450, "polars-expr-is-finite"]], "polars.Expr.list.first": [[476, "polars-expr-list-first"]], "polars.Expr.is_between": [[448, "polars-expr-is-between"]], "polars.Expr.is_null": [[458, "polars-expr-is-null"]], "polars.Expr.dt.year": [[414, "polars-expr-dt-year"]], "polars.Expr.dt.weekday": [[412, "polars-expr-dt-weekday"]], "polars.Expr.ewm_mean": [[418, "polars-expr-ewm-mean"]], "polars.Expr.dt.truncate": [[410, "polars-expr-dt-truncate"]], "polars.Expr.dt.quarter": [[395, "polars-expr-dt-quarter"]], "polars.Expr.dt.minute": [[388, "polars-expr-dt-minute"]], "polars.Expr.gather": [[435, "polars-expr-gather"]], "polars.Expr.dt.timestamp": [[401, "polars-expr-dt-timestamp"]], "polars.Expr.dt.millennium": [[386, "polars-expr-dt-millennium"]], "polars.Expr.ewm_var": [[421, "polars-expr-ewm-var"]], "polars.Expr.eq": [[416, "polars-expr-eq"]], "polars.Expr.dt.to_string": [[402, "polars-expr-dt-to-string"]], "polars.Expr.entropy": [[415, "polars-expr-entropy"]], "polars.Expr.explode": [[424, "polars-expr-explode"]], "polars.Expr.fill_nan": [[426, "polars-expr-fill-nan"]], "polars.Expr.first": [[429, "polars-expr-first"]], "polars.Expr.dt.week": [[411, "polars-expr-dt-week"]], "polars.Expr.dt.total_minutes": [[407, "polars-expr-dt-total-minutes"]], "polars.Expr.ewm_std": [[420, "polars-expr-ewm-std"]], "polars.Expr.flatten": [[430, "polars-expr-flatten"]], "polars.Expr.eq_missing": [[417, "polars-expr-eq-missing"]], "polars.Expr.from_json": [[434, "polars-expr-from-json"]], "polars.Expr.dt.total_microseconds": [[405, "polars-expr-dt-total-microseconds"]], "polars.Expr.extend_constant": [[425, "polars-expr-extend-constant"]], "polars.Expr.exp": [[423, "polars-expr-exp"]], "polars.Expr.dt.total_hours": [[404, "polars-expr-dt-total-hours"]], "polars.Expr.floor": [[431, "polars-expr-floor"]], "polars.Expr.dt.total_milliseconds": [[406, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_days": [[403, "polars-expr-dt-total-days"]], "polars.Expr.ewm_mean_by": [[419, "polars-expr-ewm-mean-by"]], "polars.Expr.dt.month": [[389, "polars-expr-dt-month"]], "polars.Expr.dt.millisecond": [[387, "polars-expr-dt-millisecond"]], "polars.Expr.filter": [[428, "polars-expr-filter"]], "polars.Expr.dt.second": [[398, "polars-expr-dt-second"]], "polars.Expr.forward_fill": [[433, "polars-expr-forward-fill"]], "polars.Expr.dt.total_seconds": [[409, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.replace_time_zone": [[396, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[397, "polars-expr-dt-round"]], "polars.Expr.dt.with_time_unit": [[413, "polars-expr-dt-with-time-unit"]], "polars.Expr.gather_every": [[436, "polars-expr-gather-every"]], "polars.Expr.dt.month_end": [[390, "polars-expr-dt-month-end"]], "polars.Expr.gt": [[439, "polars-expr-gt"]], "polars.Expr.dt.microsecond": [[385, "polars-expr-dt-microsecond"]], "polars.Expr.dt.total_nanoseconds": [[408, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.exclude": [[422, "polars-expr-exclude"]], "polars.Expr.ge": [[437, "polars-expr-ge"]], "polars.Expr.dt.time": [[400, "polars-expr-dt-time"]], "polars.Expr.dt.month_start": [[391, "polars-expr-dt-month-start"]], "polars.Expr.dt.offset_by": [[393, "polars-expr-dt-offset-by"]], "polars.Expr.get": [[438, "polars-expr-get"]], "polars.Expr.dt.strftime": [[399, "polars-expr-dt-strftime"]], "polars.Expr.fill_null": [[427, "polars-expr-fill-null"]], "polars.Expr.dt.ordinal_day": [[394, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.nanosecond": [[392, "polars-expr-dt-nanosecond"]], "polars.Expr.floordiv": [[432, "polars-expr-floordiv"]], "polars.Expr.drop_nulls": [[370, "polars-expr-drop-nulls"]], "polars.Expr.cum_prod": [[361, "polars-expr-cum-prod"]], "polars.Expr.dt.hour": [[382, "polars-expr-dt-hour"]], "polars.Expr.cosh": [[355, "polars-expr-cosh"]], "polars.Expr.cum_max": [[359, "polars-expr-cum-max"]], "polars.Expr.diff": [[367, "polars-expr-diff"]], "polars.Expr.arr.var": [[340, "polars-expr-arr-var"]], "polars.Expr.dt.day": [[379, "polars-expr-dt-day"]], "polars.Expr.dt.add_business_days": [[371, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.iso_year": [[384, "polars-expr-dt-iso-year"]], "polars.Expr.dt.date": [[377, "polars-expr-dt-date"]], "polars.Expr.cbrt": [[351, "polars-expr-cbrt"]], "polars.Expr.dot": [[368, "polars-expr-dot"]], "polars.Expr.bin.contains": [[342, "polars-expr-bin-contains"]], "polars.Expr.bottom_k_by": [[348, "polars-expr-bottom-k-by"]], "polars.Expr.cos": [[354, "polars-expr-cos"]], "polars.Expr.dt.epoch": [[381, "polars-expr-dt-epoch"]], "polars.Expr.arr.shift": [[333, "polars-expr-arr-shift"]], "polars.Expr.arr.to_struct": [[338, "polars-expr-arr-to-struct"]], "polars.Expr.cot": [[356, "polars-expr-cot"]], "polars.Expr.cumulative_eval": [[363, "polars-expr-cumulative-eval"]], "polars.Expr.count": [[357, "polars-expr-count"]], "polars.Expr.degrees": [[365, "polars-expr-degrees"]], "polars.Expr.dt.century": [[374, "polars-expr-dt-century"]], "polars.Expr.arr.reverse": [[332, "polars-expr-arr-reverse"]], "polars.Expr.drop_nans": [[369, "polars-expr-drop-nans"]], "polars.Expr.backward_fill": [[341, "polars-expr-backward-fill"]], "polars.Expr.cum_min": [[360, "polars-expr-cum-min"]], "polars.Expr.dt.cast_time_unit": [[373, "polars-expr-dt-cast-time-unit"]], "polars.Expr.bottom_k": [[347, "polars-expr-bottom-k"]], "polars.Expr.deserialize": [[366, "polars-expr-deserialize"]], "polars.Expr.arr.std": [[335, "polars-expr-arr-std"]], "polars.Expr.dt.convert_time_zone": [[376, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.combine": [[375, "polars-expr-dt-combine"]], "polars.Expr.cast": [[349, "polars-expr-cast"]], "polars.Expr.bin.decode": [[343, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[344, "polars-expr-bin-encode"]], "polars.Expr.cut": [[364, "polars-expr-cut"]], "polars.Expr.arr.min": [[330, "polars-expr-arr-min"]], "polars.Expr.bin.starts_with": [[346, "polars-expr-bin-starts-with"]], "polars.Expr.cat.get_categories": [[350, "polars-expr-cat-get-categories"]], "polars.Expr.arr.n_unique": [[331, "polars-expr-arr-n-unique"]], "polars.Expr.dt.base_utc_offset": [[372, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.is_leap_year": [[383, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.datetime": [[378, "polars-expr-dt-datetime"]], "polars.Expr.clip": [[353, "polars-expr-clip"]], "polars.Expr.bin.ends_with": [[345, "polars-expr-bin-ends-with"]], "polars.Expr.arr.sort": [[334, "polars-expr-arr-sort"]], "polars.Expr.cum_sum": [[362, "polars-expr-cum-sum"]], "polars.Expr.arr.sum": [[336, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[337, "polars-expr-arr-to-list"]], "polars.Expr.ceil": [[352, "polars-expr-ceil"]], "polars.Expr.dt.dst_offset": [[380, "polars-expr-dt-dst-offset"]], "polars.Expr.cum_count": [[358, "polars-expr-cum-count"]], "polars.Expr.arr.unique": [[339, "polars-expr-arr-unique"]], "polars.DataFrame.rows_by_key": [[226, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sum": [[240, "polars-dataframe-sum"]], "polars.DataFrame.select": [[229, "polars-dataframe-select"]], "polars.DataFrame.to_dicts": [[245, "polars-dataframe-to-dicts"]], "polars.DataFrame.select_seq": [[230, "polars-dataframe-select-seq"]], "polars.DataFrame.to_struct": [[252, "polars-dataframe-to-struct"]], "polars.DataFrame.rows": [[225, "polars-dataframe-rows"]], "polars.DataFrame.shift": [[234, "polars-dataframe-shift"]], "polars.dataframe.group_by.GroupBy.last": [[274, "polars-dataframe-group-by-groupby-last"]], "polars.DataFrame.to_dict": [[244, "polars-dataframe-to-dict"]], "polars.DataFrame.update": [[259, "polars-dataframe-update"]], "polars.DataFrame.var": [[261, "polars-dataframe-var"]], "polars.DataFrame.sort": [[237, "polars-dataframe-sort"]], "polars.DataFrame.slice": [[236, "polars-dataframe-slice"]], "polars.DataFrame.rename": [[220, "polars-dataframe-rename"]], "polars.DataFrame.tail": [[242, "polars-dataframe-tail"]], "polars.DataFrame.reverse": [[222, "polars-dataframe-reverse"]], "polars.DataFrame.with_row_count": [[266, "polars-dataframe-with-row-count"]], "polars.DataFrame.std": [[239, "polars-dataframe-std"]], "polars.DataFrame.with_columns_seq": [[265, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.sum_horizontal": [[241, "polars-dataframe-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.agg": [[269, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.to_jax": [[248, "polars-dataframe-to-jax"]], "polars.dataframe.group_by.GroupBy.count": [[271, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.replace_column": [[221, "polars-dataframe-replace-column"]], "polars.DataFrame.top_k": [[254, "polars-dataframe-top-k"]], "polars.DataFrame.to_series": [[251, "polars-dataframe-to-series"]], "polars.DataFrame.vstack": [[262, "polars-dataframe-vstack"]], "polars.DataFrame.unstack": [[258, "polars-dataframe-unstack"]], "polars.dataframe.group_by.GroupBy.__iter__": [[268, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.schema": [[228, "polars-dataframe-schema"]], "polars.DataFrame.to_torch": [[253, "polars-dataframe-to-torch"]], "polars.DataFrame.sample": [[227, "polars-dataframe-sample"]], "polars.DataFrame.set_sorted": [[232, "polars-dataframe-set-sorted"]], "polars.DataFrame.to_numpy": [[249, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_init_repr": [[247, "polars-dataframe-to-init-repr"]], "polars.DataFrame.with_row_index": [[267, "polars-dataframe-with-row-index"]], "polars.DataFrame.rolling": [[223, "polars-dataframe-rolling"]], "polars.DataFrame.serialize": [[231, "polars-dataframe-serialize"]], "polars.DataFrame.unnest": [[257, "polars-dataframe-unnest"]], "polars.DataFrame.upsample": [[260, "polars-dataframe-upsample"]], "polars.DataFrame.width": [[263, "polars-dataframe-width"]], "polars.dataframe.group_by.GroupBy.all": [[270, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.first": [[272, "polars-dataframe-group-by-groupby-first"]], "polars.DataFrame.sql": [[238, "polars-dataframe-sql"]], "polars.DataFrame.with_columns": [[264, "polars-dataframe-with-columns"]], "polars.DataFrame.row": [[224, "polars-dataframe-row"]], "polars.DataFrame.to_dummies": [[246, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_arrow": [[243, "polars-dataframe-to-arrow"]], "polars.DataFrame.transpose": [[255, "polars-dataframe-transpose"]], "polars.dataframe.group_by.GroupBy.head": [[273, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.to_pandas": [[250, "polars-dataframe-to-pandas"]], "polars.DataFrame.shrink_to_fit": [[235, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.unique": [[256, "polars-dataframe-unique"]], "polars.DataFrame.shape": [[233, "polars-dataframe-shape"]], "polars.LazyFrame.cast": [[768, "polars-lazyframe-cast"]], "Expressions": [[750, "expressions"]], "Meta": [[752, "meta"]], "polars.sql_expr": [[730, "polars-sql-expr"]], "polars.var": [[739, "polars-var"]], "polars.time": [[736, "polars-time"]], "polars.min_horizontal": [[719, "polars-min-horizontal"]], "polars.std": [[731, "polars-std"]], "polars.LazyFrame.approx_n_unique": [[765, "polars-lazyframe-approx-n-unique"]], "polars.col": [[746, "polars-col"]], "polars.tail": [[735, "polars-tail"]], "polars.mean_horizontal": [[716, "polars-mean-horizontal"]], "polars.when": [[740, "polars-when"]], "Name": [[755, "name"]], "Columns / names": [[747, "columns-names"]], "Input/output": [[763, "input-output"]], "Avro": [[763, "avro"]], "Clipboard": [[763, "clipboard"]], "CSV": [[763, "csv"]], "Database": [[763, "database"]], "Delta Lake": [[763, "delta-lake"]], "Excel / ODS": [[763, "excel-ods"]], "Feather / IPC": [[763, "feather-ipc"]], "Iceberg": [[763, "iceberg"]], "JSON": [[763, "json"]], "Parquet": [[763, "parquet"]], "PyArrow Datasets": [[763, "pyarrow-datasets"]], "polars.time_ranges": [[738, "polars-time-ranges"]], "polars.struct": [[732, "polars-struct"]], "polars.mean": [[715, "polars-mean"]], "polars.sum_horizontal": [[734, "polars-sum-horizontal"]], "polars.median": [[717, "polars-median"]], "polars.time_range": [[737, "polars-time-range"]], "polars.LazyFrame.cache": [[767, "polars-lazyframe-cache"]], "polars.sql": [[729, "polars-sql"]], "Conversion": [[761, "conversion"]], "Parallelization": [[761, "parallelization"]], "Random": [[761, "random"]], "StringCache": [[761, "stringcache"]], "polars.ones": [[722, "polars-ones"]], "polars.zeros": [[741, "polars-zeros"]], "polars.repeat": [[725, "polars-repeat"]], "Python API reference": [[762, "python-api-reference"]], "polars.rolling_corr": [[726, "polars-rolling-corr"]], "polars.reduce": [[724, "polars-reduce"]], "polars.quantile": [[723, "polars-quantile"]], "Operators": [[756, "operators"]], "Conjunction": [[756, "conjunction"]], "Comparison": [[756, "comparison"]], "Numeric": [[756, "numeric"], [294, "numeric"]], "polars.LazyFrame.clear": [[769, "polars-lazyframe-clear"]], "polars.n_unique": [[720, "polars-n-unique"]], "polars.select": [[728, "polars-select"]], "polars.LazyFrame.bottom_k": [[766, "polars-lazyframe-bottom-k"]], "polars.rolling_cov": [[727, "polars-rolling-cov"]], "polars.min": [[718, "polars-min"]], "Window": [[760, "window"]], "polars.nth": [[721, "polars-nth"]], "polars.sum": [[733, "polars-sum"]], "polars.Expr.arcsin": [[308, "polars-expr-arcsin"]], "polars.Expr.arr.count_matches": [[322, "polars-expr-arr-count-matches"]], "polars.dataframe.group_by.GroupBy.min": [[280, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.sum": [[283, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arr.explode": [[323, "polars-expr-arr-explode"]], "polars.dataframe.group_by.GroupBy.tail": [[284, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.add": [[298, "polars-expr-add"]], "polars.Expr.arr.arg_max": [[319, "polars-expr-arr-arg-max"]], "polars.Expr.agg_groups": [[299, "polars-expr-agg-groups"]], "polars.Expr.arg_unique": [[316, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[317, "polars-expr-arr-all"]], "polars.Expr.arr.get": [[325, "polars-expr-arr-get"]], "polars.Expr.arr.last": [[327, "polars-expr-arr-last"]], "polars.Expr.alias": [[300, "polars-expr-alias"]], "polars.Expr.arcsinh": [[309, "polars-expr-arcsinh"]], "polars.Expr.arr.max": [[328, "polars-expr-arr-max"]], "polars.dataframe.group_by.GroupBy.map_groups": [[276, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.n_unique": [[281, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.len": [[275, "polars-dataframe-group-by-groupby-len"]], "polars.Expr.arr.join": [[326, "polars-expr-arr-join"]], "polars.Expr.arr.contains": [[321, "polars-expr-arr-contains"]], "polars.dataframe.group_by.GroupBy.median": [[279, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.append": [[304, "polars-expr-append"]], "DataFrame": [[290, "dataframe"]], "polars.Expr.arg_max": [[312, "polars-expr-arg-max"]], "Data types": [[294, "data-types"]], "DataType": [[294, "datatype"]], "Nested": [[294, "nested"]], "Other": [[294, "other"]], "polars.Expr.arr.any": [[318, "polars-expr-arr-any"]], "polars.Expr.arccosh": [[307, "polars-expr-arccosh"]], "polars.Expr.arr.arg_min": [[320, "polars-expr-arr-arg-min"]], "polars.Expr.approx_n_unique": [[305, "polars-expr-approx-n-unique"]], "polars.Expr.arr.first": [[324, "polars-expr-arr-first"]], "polars.Expr.arg_true": [[315, "polars-expr-arg-true"]], "polars.Expr.arccos": [[306, "polars-expr-arccos"]], "polars.Expr.arg_min": [[313, "polars-expr-arg-min"]], "polars.Expr.all": [[301, "polars-expr-all"]], "polars.Expr.and_": [[302, "polars-expr-and"]], "polars.Expr.any": [[303, "polars-expr-any"]], "polars.Expr.abs": [[297, "polars-expr-abs"]], "polars.Expr.arg_sort": [[314, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.max": [[277, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arr.median": [[329, "polars-expr-arr-median"]], "polars.Expr.arctanh": [[311, "polars-expr-arctanh"]], "Exceptions": [[295, "exceptions"]], "polars.dataframe.group_by.GroupBy.quantile": [[282, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.mean": [[278, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arctan": [[310, "polars-expr-arctan"]]}, "indexentries": {"load() (polars.config class method)": [[2, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[5, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[30, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[47, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[52, "polars.build_info"]], "collect_all() (in module polars)": [[53, "polars.collect_all"]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async"]], "concat() (in module polars)": [[55, "polars.concat"]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache"]], "columnnotfounderror": [[86, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[87, "polars.exceptions.ComputeError"]], "duplicateerror": [[88, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[89, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[90, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[91, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[92, "polars.exceptions.PolarsError"]], "polarspanicerror": [[93, "polars.exceptions.PolarsPanicError"]], "rowserror": [[94, "polars.exceptions.RowsError"]], "schemaerror": [[95, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[96, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[97, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[98, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[99, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[100, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[101, "polars.from_dataframe"]], "from_dict() (in module polars)": [[102, "polars.from_dict"]], "from_dicts() (in module polars)": [[103, "polars.from_dicts"]], "from_numpy() (in module polars)": [[104, "polars.from_numpy"]], "from_pandas() (in module polars)": [[105, "polars.from_pandas"]], "from_records() (in module polars)": [[106, "polars.from_records"]], "from_repr() (in module polars)": [[107, "polars.from_repr"]], "get_index_type() (in module polars)": [[108, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[109, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[110, "polars.read_avro"]], "read_clipboard() (in module polars)": [[111, "polars.read_clipboard"]], "read_csv() (in module polars)": [[112, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[113, "polars.read_csv_batched"]], "read_database() (in module polars)": [[114, "polars.read_database"]], "read_database_uri() (in module polars)": [[115, "polars.read_database_uri"]], "read_delta() (in module polars)": [[116, "polars.read_delta"]], "read_excel() (in module polars)": [[117, "polars.read_excel"]], "read_ipc() (in module polars)": [[118, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[119, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[120, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[121, "polars.read_json"]], "read_ndjson() (in module polars)": [[122, "polars.read_ndjson"]], "read_ods() (in module polars)": [[123, "polars.read_ods"]], "read_parquet() (in module polars)": [[124, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[125, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[126, "polars.scan_csv"]], "scan_delta() (in module polars)": [[127, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[128, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[129, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[130, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[131, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[132, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[133, "polars.set_random_seed"]], "show_versions() (in module polars)": [[134, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[135, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[136, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[137, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[139, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[139, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[140, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[141, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[148, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[149, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[150, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[153, "polars.DataFrame.__dataframe__"]], "approx_n_unique() (polars.dataframe method)": [[154, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[155, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[156, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[157, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[158, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[159, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[160, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[161, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[162, "polars.DataFrame.describe"]], "deserialize() (polars.dataframe class method)": [[163, "polars.DataFrame.deserialize"]], "drop() (polars.dataframe method)": [[164, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[165, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[166, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[167, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[168, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[169, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[170, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[171, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[172, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[173, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[174, "polars.DataFrame.filter"]], "flags (polars.dataframe property)": [[175, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[176, "polars.DataFrame.fold"]], "gather_every() (polars.dataframe method)": [[177, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[178, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[179, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[180, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[181, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[182, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[183, "polars.DataFrame.group_by_dynamic"]], "hash_rows() (polars.dataframe method)": [[184, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[185, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[186, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[187, "polars.DataFrame.hstack"]], "insert_column() (polars.dataframe method)": [[188, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[189, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[190, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[191, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[192, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[193, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[194, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[195, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[196, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[197, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[198, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[199, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[200, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[201, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[202, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[203, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[204, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[205, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[206, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[207, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[208, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[209, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[210, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[211, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[212, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[213, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[214, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[215, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[216, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[217, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[218, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[219, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[220, "polars.DataFrame.rename"]], "replace_column() (polars.dataframe method)": [[221, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[222, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[223, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[224, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[225, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[226, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[227, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[228, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[229, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[230, "polars.DataFrame.select_seq"]], "serialize() (polars.dataframe method)": [[231, "polars.DataFrame.serialize"]], "set_sorted() (polars.dataframe method)": [[232, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[233, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[234, "polars.DataFrame.shift"]], "shrink_to_fit() (polars.dataframe method)": [[235, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[236, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[237, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[238, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[239, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[240, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[241, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[242, "polars.DataFrame.tail"]], "to_arrow() (polars.dataframe method)": [[243, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[244, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[245, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[246, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[247, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[248, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[249, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[250, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[251, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[252, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[253, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[254, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[255, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[256, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[257, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[258, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[259, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[260, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[261, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[262, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[263, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[264, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[265, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[266, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[267, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[270, "polars.dataframe.group_by.GroupBy.all"]], "count() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[297, "polars.Expr.abs"]], "add() (polars.expr method)": [[298, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[299, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[300, "polars.Expr.alias"]], "all() (polars.expr method)": [[301, "polars.Expr.all"]], "and_() (polars.expr method)": [[302, "polars.Expr.and_"]], "any() (polars.expr method)": [[303, "polars.Expr.any"]], "append() (polars.expr method)": [[304, "polars.Expr.append"]], "approx_n_unique() (polars.expr method)": [[305, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[306, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[307, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[308, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[309, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[310, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[311, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[312, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[313, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[314, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[315, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[316, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[317, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[318, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[319, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[320, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[321, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[322, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[323, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[324, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[325, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[326, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[327, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[328, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[329, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[330, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[331, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[332, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[333, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[334, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[335, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[336, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[337, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[338, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[339, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[340, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[341, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[342, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[343, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[344, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[345, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[346, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[347, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[348, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[349, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[350, "polars.Expr.cat.get_categories"]], "cbrt() (polars.expr method)": [[351, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[352, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[353, "polars.Expr.clip"]], "cos() (polars.expr method)": [[354, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[355, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[356, "polars.Expr.cot"]], "count() (polars.expr method)": [[357, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[358, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[359, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[360, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[361, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[362, "polars.Expr.cum_sum"]], "cumulative_eval() (polars.expr method)": [[363, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[364, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[365, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[366, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[367, "polars.Expr.diff"]], "dot() (polars.expr method)": [[368, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[369, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[370, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[371, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[372, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[373, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[374, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[375, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[376, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[377, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[378, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[379, "polars.Expr.dt.day"]], "dst_offset() (polars.expr.dt method)": [[380, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[381, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[382, "polars.Expr.dt.hour"]], "is_leap_year() (polars.expr.dt method)": [[383, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[384, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[385, "polars.Expr.dt.microsecond"]], "millennium() (polars.expr.dt method)": [[386, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[387, "polars.Expr.dt.millisecond"]], "minute() (polars.expr.dt method)": [[388, "polars.Expr.dt.minute"]], "month() (polars.expr.dt method)": [[389, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[390, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[391, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[392, "polars.Expr.dt.nanosecond"]], "offset_by() (polars.expr.dt method)": [[393, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[394, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[395, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[396, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[397, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[398, "polars.Expr.dt.second"]], "strftime() (polars.expr.dt method)": [[399, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[400, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[401, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[402, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[406, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[407, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[408, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[409, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[410, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[411, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[412, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[413, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[414, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[415, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[416, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[417, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[418, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[419, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[420, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[421, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[422, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[423, "polars.Expr.exp"]], "explode() (polars.expr method)": [[424, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[425, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[426, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[427, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[428, "polars.Expr.filter"]], "first() (polars.expr method)": [[429, "polars.Expr.first"]], "flatten() (polars.expr method)": [[430, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[431, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[432, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[433, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[434, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[435, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[436, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[437, "polars.Expr.ge"]], "get() (polars.expr method)": [[438, "polars.Expr.get"]], "gt() (polars.expr method)": [[439, "polars.Expr.gt"]], "has_nulls() (polars.expr method)": [[440, "polars.Expr.has_nulls"]], "hash() (polars.expr method)": [[441, "polars.Expr.hash"]], "head() (polars.expr method)": [[442, "polars.Expr.head"]], "hist() (polars.expr method)": [[443, "polars.Expr.hist"]], "implode() (polars.expr method)": [[444, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[445, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[446, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[447, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[448, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[449, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[450, "polars.Expr.is_finite"]], "is_first_distinct() (polars.expr method)": [[451, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[452, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[453, "polars.Expr.is_infinite"]], "is_last_distinct() (polars.expr method)": [[454, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[455, "polars.Expr.is_nan"]], "is_not_nan() (polars.expr method)": [[456, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[457, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[458, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[459, "polars.Expr.is_unique"]], "kurtosis() (polars.expr method)": [[460, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[461, "polars.Expr.last"]], "le() (polars.expr method)": [[462, "polars.Expr.le"]], "len() (polars.expr method)": [[463, "polars.Expr.len"]], "limit() (polars.expr method)": [[464, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[465, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[466, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[467, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[468, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[469, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[470, "polars.Expr.list.contains"]], "count_matches() (polars.expr.list method)": [[471, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[472, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[473, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[474, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[475, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[476, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[477, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[478, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[479, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[480, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[481, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[482, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[483, "polars.Expr.list.len"]], "max() (polars.expr.list method)": [[484, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[485, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[486, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[487, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[488, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[489, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[490, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[491, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[492, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[493, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[494, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[495, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[496, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[497, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[498, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[499, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[500, "polars.Expr.list.tail"]], "to_array() (polars.expr.list method)": [[501, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[502, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[503, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[504, "polars.Expr.list.var"]], "log() (polars.expr method)": [[505, "polars.Expr.log"]], "log10() (polars.expr method)": [[506, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[507, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[508, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[509, "polars.Expr.lt"]], "map_batches() (polars.expr method)": [[510, "polars.Expr.map_batches"]], "map_elements() (polars.expr method)": [[511, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[512, "polars.Expr.max"]], "mean() (polars.expr method)": [[513, "polars.Expr.mean"]], "median() (polars.expr method)": [[514, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[515, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[516, "polars.Expr.meta.has_multiple_outputs"]], "is_column_selection() (polars.expr.meta method)": [[517, "polars.Expr.meta.is_column_selection"]], "is_regex_projection() (polars.expr.meta method)": [[518, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[519, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[520, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[521, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[522, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[523, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[524, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[525, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[526, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[527, "polars.Expr.min"]], "mod() (polars.expr method)": [[528, "polars.Expr.mod"]], "mode() (polars.expr method)": [[529, "polars.Expr.mode"]], "mul() (polars.expr method)": [[530, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[531, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[532, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[533, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[534, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[535, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[536, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[537, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[538, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[539, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[540, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[541, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[542, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[543, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[544, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[545, "polars.Expr.neg"]], "not_() (polars.expr method)": [[546, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[547, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[548, "polars.Expr.or_"]], "over() (polars.expr method)": [[549, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[550, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[551, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[552, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[553, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[554, "polars.Expr.pow"]], "product() (polars.expr method)": [[555, "polars.Expr.product"]], "qcut() (polars.expr method)": [[556, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[557, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[558, "polars.Expr.radians"]], "rank() (polars.expr method)": [[559, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[560, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[561, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[562, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[563, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[564, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[565, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[566, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[567, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[568, "polars.Expr.rolling"]], "rolling_map() (polars.expr method)": [[569, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[570, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[571, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[572, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[573, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[574, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[575, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[576, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[577, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[578, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[579, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[580, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[581, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[582, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[583, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[584, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[585, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[586, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[587, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[588, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[589, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[590, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[591, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[592, "polars.Expr.shift"]], "shrink_dtype() (polars.expr method)": [[593, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[594, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[595, "polars.Expr.sign"]], "sin() (polars.expr method)": [[596, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[597, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[598, "polars.Expr.skew"]], "slice() (polars.expr method)": [[599, "polars.Expr.slice"]], "sort() (polars.expr method)": [[600, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[601, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[602, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[603, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[604, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[605, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[606, "polars.Expr.str.contains_any"]], "count_matches() (polars.expr.str method)": [[607, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[608, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[609, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[610, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[611, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[612, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[613, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[614, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[615, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[616, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[617, "polars.Expr.str.json_decode"]], "json_path_match() (polars.expr.str method)": [[618, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[619, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[620, "polars.Expr.str.len_chars"]], "pad_end() (polars.expr.str method)": [[621, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[622, "polars.Expr.str.pad_start"]], "replace() (polars.expr.str method)": [[623, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[624, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[625, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[626, "polars.Expr.str.reverse"]], "slice() (polars.expr.str method)": [[627, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[628, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[629, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[630, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[631, "polars.Expr.str.starts_with"]], "strip_chars() (polars.expr.str method)": [[632, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[633, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[634, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[635, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[636, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[637, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[638, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[639, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[640, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[641, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[642, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[643, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[644, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[645, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[646, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[647, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[648, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[649, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[650, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[651, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[652, "polars.Expr.sub"]], "sum() (polars.expr method)": [[653, "polars.Expr.sum"]], "tail() (polars.expr method)": [[654, "polars.Expr.tail"]], "tan() (polars.expr method)": [[655, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[656, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[657, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[658, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[659, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[660, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[661, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[662, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[663, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[664, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[665, "polars.Expr.var"]], "where() (polars.expr method)": [[666, "polars.Expr.where"]], "xor() (polars.expr method)": [[667, "polars.Expr.xor"]], "all() (in module polars)": [[668, "polars.all"]], "all_horizontal() (in module polars)": [[669, "polars.all_horizontal"]], "any() (in module polars)": [[670, "polars.any"]], "any_horizontal() (in module polars)": [[671, "polars.any_horizontal"]], "approx_n_unique() (in module polars)": [[672, "polars.approx_n_unique"]], "arange() (in module polars)": [[673, "polars.arange"]], "arctan2() (in module polars)": [[674, "polars.arctan2"]], "arctan2d() (in module polars)": [[675, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[676, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[677, "polars.arg_where"]], "business_day_count() (in module polars)": [[678, "polars.business_day_count"]], "coalesce() (in module polars)": [[679, "polars.coalesce"]], "concat_list() (in module polars)": [[680, "polars.concat_list"]], "concat_str() (in module polars)": [[681, "polars.concat_str"]], "corr() (in module polars)": [[682, "polars.corr"]], "count() (in module polars)": [[683, "polars.count"]], "cov() (in module polars)": [[684, "polars.cov"]], "cum_count() (in module polars)": [[685, "polars.cum_count"]], "cum_fold() (in module polars)": [[686, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[687, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[688, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[689, "polars.cum_sum_horizontal"]], "date() (in module polars)": [[690, "polars.date"]], "date_range() (in module polars)": [[691, "polars.date_range"]], "date_ranges() (in module polars)": [[692, "polars.date_ranges"]], "datetime() (in module polars)": [[693, "polars.datetime"]], "datetime_range() (in module polars)": [[694, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[695, "polars.datetime_ranges"]], "duration() (in module polars)": [[696, "polars.duration"]], "element() (in module polars)": [[697, "polars.element"]], "exclude() (in module polars)": [[698, "polars.exclude"]], "first() (in module polars)": [[699, "polars.first"]], "fold() (in module polars)": [[700, "polars.fold"]], "format() (in module polars)": [[701, "polars.format"]], "from_epoch() (in module polars)": [[702, "polars.from_epoch"]], "groups() (in module polars)": [[703, "polars.groups"]], "head() (in module polars)": [[704, "polars.head"]], "implode() (in module polars)": [[705, "polars.implode"]], "int_range() (in module polars)": [[706, "polars.int_range"]], "int_ranges() (in module polars)": [[707, "polars.int_ranges"]], "last() (in module polars)": [[708, "polars.last"]], "len() (in module polars)": [[709, "polars.len"]], "lit() (in module polars)": [[710, "polars.lit"]], "map_batches() (in module polars)": [[711, "polars.map_batches"]], "map_groups() (in module polars)": [[712, "polars.map_groups"]], "max() (in module polars)": [[713, "polars.max"]], "max_horizontal() (in module polars)": [[714, "polars.max_horizontal"]], "mean() (in module polars)": [[715, "polars.mean"]], "mean_horizontal() (in module polars)": [[716, "polars.mean_horizontal"]], "median() (in module polars)": [[717, "polars.median"]], "min() (in module polars)": [[718, "polars.min"]], "min_horizontal() (in module polars)": [[719, "polars.min_horizontal"]], "n_unique() (in module polars)": [[720, "polars.n_unique"]], "nth() (in module polars)": [[721, "polars.nth"]], "ones() (in module polars)": [[722, "polars.ones"]], "quantile() (in module polars)": [[723, "polars.quantile"]], "reduce() (in module polars)": [[724, "polars.reduce"]], "repeat() (in module polars)": [[725, "polars.repeat"]], "rolling_corr() (in module polars)": [[726, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[727, "polars.rolling_cov"]], "select() (in module polars)": [[728, "polars.select"]], "sql() (in module polars)": [[729, "polars.sql"]], "sql_expr() (in module polars)": [[730, "polars.sql_expr"]], "std() (in module polars)": [[731, "polars.std"]], "struct() (in module polars)": [[732, "polars.struct"]], "sum() (in module polars)": [[733, "polars.sum"]], "sum_horizontal() (in module polars)": [[734, "polars.sum_horizontal"]], "tail() (in module polars)": [[735, "polars.tail"]], "time() (in module polars)": [[736, "polars.time"]], "time_range() (in module polars)": [[737, "polars.time_range"]], "time_ranges() (in module polars)": [[738, "polars.time_ranges"]], "var() (in module polars)": [[739, "polars.var"]], "when() (in module polars)": [[740, "polars.when"]], "zeros() (in module polars)": [[741, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[765, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[766, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[767, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[768, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[769, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[770, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[771, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[772, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[773, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[774, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[775, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[776, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[777, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[778, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[779, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[780, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[781, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[782, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[783, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[784, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[785, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[786, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[787, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[788, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[789, "polars.LazyFrame.group_by_dynamic"]], "head() (polars.lazyframe method)": [[790, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[791, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[792, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[793, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[794, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[795, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[796, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[797, "polars.LazyFrame.limit"]], "map_batches() (polars.lazyframe method)": [[798, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[799, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[800, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[801, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[802, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[803, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[804, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[805, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[806, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[807, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[808, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[809, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[810, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[811, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[812, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[813, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[814, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[815, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[816, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[817, "polars.LazyFrame.shift"]], "show_graph() (polars.lazyframe method)": [[818, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[819, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[820, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[821, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[822, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[823, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[824, "polars.LazyFrame.tail"]], "top_k() (polars.lazyframe method)": [[825, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[826, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[827, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[828, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[829, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[830, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[831, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[832, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[833, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[834, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[835, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[836, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[837, "polars.lazyframe.group_by.LazyGroupBy.all"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[838, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[850, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[859, "module-polars.plugins"], [860, "module-polars.selectors"]], "polars.plugins": [[859, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[859, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[860, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[860, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[860, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[860, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[860, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[860, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[860, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[860, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[860, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[860, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[860, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[860, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[860, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[860, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[860, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[860, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[860, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[860, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[860, "polars.selectors.first"]], "float() (in module polars.selectors)": [[860, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[860, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[860, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[860, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[860, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[860, "polars.selectors.numeric"]], "polars.selectors": [[860, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[860, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[860, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[860, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[860, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[860, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[860, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[862, "polars.Series.abs"]], "alias() (polars.series method)": [[863, "polars.Series.alias"]], "all() (polars.series method)": [[864, "polars.Series.all"]], "any() (polars.series method)": [[865, "polars.Series.any"]], "append() (polars.series method)": [[866, "polars.Series.append"]], "arccos() (polars.series method)": [[867, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[868, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[869, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[870, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[871, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[872, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[873, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[874, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[875, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[876, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[877, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[878, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[879, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[880, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[881, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[882, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[883, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[884, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[885, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[886, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[887, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[888, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[889, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[890, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[891, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[892, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[893, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[894, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[895, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[896, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[897, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[898, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[899, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[900, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[901, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[902, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[903, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[904, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[905, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[906, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[907, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[908, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[909, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[910, "polars.Series.cat.is_local"]], "to_local() (polars.series.cat method)": [[911, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[912, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[913, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[914, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[915, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[916, "polars.Series.clear"]], "clip() (polars.series method)": [[917, "polars.Series.clip"]], "clone() (polars.series method)": [[918, "polars.Series.clone"]], "cos() (polars.series method)": [[919, "polars.Series.cos"]], "cosh() (polars.series method)": [[920, "polars.Series.cosh"]], "cot() (polars.series method)": [[921, "polars.Series.cot"]], "cum_count() (polars.series method)": [[922, "polars.Series.cum_count"]], "cum_max() (polars.series method)": [[923, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[924, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[925, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[926, "polars.Series.cum_sum"]], "cumulative_eval() (polars.series method)": [[927, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[928, "polars.Series.cut"]], "describe() (polars.series method)": [[929, "polars.Series.describe"]], "diff() (polars.series method)": [[930, "polars.Series.diff"]], "dot() (polars.series method)": [[931, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[932, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[933, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[934, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[935, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[936, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[937, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[938, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[939, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[940, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[941, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[942, "polars.Series.dt.day"]], "dst_offset() (polars.series.dt method)": [[943, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[944, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[945, "polars.Series.dt.hour"]], "is_leap_year() (polars.series.dt method)": [[946, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[947, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[948, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[949, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[950, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[951, "polars.Series.dt.microsecond"]], "millennium() (polars.series.dt method)": [[952, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[953, "polars.Series.dt.millisecond"]], "min() (polars.series.dt method)": [[954, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[955, "polars.Series.dt.minute"]], "month() (polars.series.dt method)": [[956, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[957, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[958, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[959, "polars.Series.dt.nanosecond"]], "offset_by() (polars.series.dt method)": [[960, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[961, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[962, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[963, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[964, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[965, "polars.Series.dt.second"]], "strftime() (polars.series.dt method)": [[966, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[967, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[968, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[969, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[970, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[971, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[972, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[973, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[974, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[975, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[976, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[977, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[978, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[979, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[980, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[981, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[982, "polars.Series.dtype"]], "entropy() (polars.series method)": [[983, "polars.Series.entropy"]], "equals() (polars.series method)": [[984, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[985, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[986, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[987, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[988, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[989, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[990, "polars.Series.exp"]], "explode() (polars.series method)": [[991, "polars.Series.explode"]], "extend() (polars.series method)": [[992, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[993, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[994, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[995, "polars.Series.fill_null"]], "filter() (polars.series method)": [[996, "polars.Series.filter"]], "flags (polars.series attribute)": [[997, "polars.Series.flags"]], "floor() (polars.series method)": [[998, "polars.Series.floor"]], "gather() (polars.series method)": [[999, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1000, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1001, "polars.Series.get_chunks"]], "has_nulls() (polars.series method)": [[1002, "polars.Series.has_nulls"]], "has_validity() (polars.series method)": [[1003, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1004, "polars.Series.hash"]], "head() (polars.series method)": [[1005, "polars.Series.head"]], "hist() (polars.series method)": [[1006, "polars.Series.hist"]], "implode() (polars.series method)": [[1007, "polars.Series.implode"]], "interpolate() (polars.series method)": [[1008, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1009, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1010, "polars.Series.is_between"]], "is_duplicated() (polars.series method)": [[1011, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1012, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1013, "polars.Series.is_finite"]], "is_first_distinct() (polars.series method)": [[1014, "polars.Series.is_first_distinct"]], "is_in() (polars.series method)": [[1015, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1016, "polars.Series.is_infinite"]], "is_last_distinct() (polars.series method)": [[1017, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1018, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1019, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1020, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1021, "polars.Series.is_null"]], "is_sorted() (polars.series method)": [[1022, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[1023, "polars.Series.is_unique"]], "item() (polars.series method)": [[1024, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1025, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1026, "polars.Series.len"]], "limit() (polars.series method)": [[1027, "polars.Series.limit"]], "all() (polars.series.list method)": [[1028, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1029, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1030, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1031, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1032, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1033, "polars.Series.list.contains"]], "count_matches() (polars.series.list method)": [[1034, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1035, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1036, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1037, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1038, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1039, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1040, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1041, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1042, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1043, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1044, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1045, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1046, "polars.Series.list.len"]], "max() (polars.series.list method)": [[1047, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1048, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1049, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1050, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1051, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1052, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1053, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1054, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1055, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1056, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1057, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1058, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1059, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1060, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1061, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1062, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1063, "polars.Series.list.tail"]], "to_array() (polars.series.list method)": [[1064, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1065, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1066, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1067, "polars.Series.list.var"]], "log() (polars.series method)": [[1068, "polars.Series.log"]], "log10() (polars.series method)": [[1069, "polars.Series.log10"]], "log1p() (polars.series method)": [[1070, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1071, "polars.Series.lower_bound"]], "map_elements() (polars.series method)": [[1072, "polars.Series.map_elements"]], "max() (polars.series method)": [[1073, "polars.Series.max"]], "mean() (polars.series method)": [[1074, "polars.Series.mean"]], "median() (polars.series method)": [[1075, "polars.Series.median"]], "min() (polars.series method)": [[1076, "polars.Series.min"]], "mode() (polars.series method)": [[1077, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1078, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1079, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1080, "polars.Series.name"]], "nan_max() (polars.series method)": [[1081, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1082, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1083, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1084, "polars.Series.not_"]], "null_count() (polars.series method)": [[1085, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1086, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1087, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1088, "polars.Series.peak_min"]], "product() (polars.series method)": [[1089, "polars.Series.product"]], "qcut() (polars.series method)": [[1090, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1091, "polars.Series.quantile"]], "rank() (polars.series method)": [[1092, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1093, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1094, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1095, "polars.Series.rename"]], "replace() (polars.series method)": [[1096, "polars.Series.replace"]], "reshape() (polars.series method)": [[1097, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1098, "polars.Series.reverse"]], "rle() (polars.series method)": [[1099, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1100, "polars.Series.rle_id"]], "rolling_map() (polars.series method)": [[1101, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1102, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1103, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1104, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1105, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1106, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1107, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1108, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1109, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1110, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1111, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1112, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1113, "polars.Series.sample"]], "scatter() (polars.series method)": [[1114, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1115, "polars.Series.search_sorted"]], "set() (polars.series method)": [[1116, "polars.Series.set"]], "set_sorted() (polars.series method)": [[1117, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1118, "polars.Series.shape"]], "shift() (polars.series method)": [[1119, "polars.Series.shift"]], "shrink_dtype() (polars.series method)": [[1120, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1121, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1122, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1123, "polars.Series.sign"]], "sin() (polars.series method)": [[1124, "polars.Series.sin"]], "sinh() (polars.series method)": [[1125, "polars.Series.sinh"]], "skew() (polars.series method)": [[1126, "polars.Series.skew"]], "slice() (polars.series method)": [[1127, "polars.Series.slice"]], "sort() (polars.series method)": [[1128, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1129, "polars.Series.sqrt"]], "std() (polars.series method)": [[1130, "polars.Series.std"]], "concat() (polars.series.str method)": [[1131, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1132, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1133, "polars.Series.str.contains_any"]], "count_matches() (polars.series.str method)": [[1134, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1135, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1136, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1137, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1138, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1139, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1140, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1141, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1142, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1143, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1144, "polars.Series.str.json_decode"]], "json_path_match() (polars.series.str method)": [[1145, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1146, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1147, "polars.Series.str.len_chars"]], "pad_end() (polars.series.str method)": [[1148, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1149, "polars.Series.str.pad_start"]], "replace() (polars.series.str method)": [[1150, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1151, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1152, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1153, "polars.Series.str.reverse"]], "slice() (polars.series.str method)": [[1154, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1155, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1156, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1157, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1158, "polars.Series.str.starts_with"]], "strip_chars() (polars.series.str method)": [[1159, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1160, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1161, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1162, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1163, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1164, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1165, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1166, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1167, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1168, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1169, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1170, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1171, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1172, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1173, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1174, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1175, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1176, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1177, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1178, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1179, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1180, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1181, "polars.Series.sum"]], "tail() (polars.series method)": [[1182, "polars.Series.tail"]], "tan() (polars.series method)": [[1183, "polars.Series.tan"]], "tanh() (polars.series method)": [[1184, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1185, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1186, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1187, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1188, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1189, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1190, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1191, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1192, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1193, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1194, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1195, "polars.Series.top_k"]], "unique() (polars.series method)": [[1196, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1197, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1198, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1199, "polars.Series.value_counts"]], "var() (polars.series method)": [[1200, "polars.Series.var"]], "zip_with() (polars.series method)": [[1201, "polars.Series.zip_with"]], "execute() (polars.sqlcontext method)": [[1218, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[1219, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[1220, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[1221, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[1222, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[1223, "polars.SQLContext.unregister"]], "sqlcontext (class in polars)": [[1234, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1234, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1234, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1234, "polars.SQLContext.__init__"]]}})