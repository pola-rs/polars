[build-system]
requires = ["maturin>=0.14,<0.15"]
build-backend = "maturin"

[project]
name = "polars"
description = "Blazingly fast DataFrame library"
readme = "README.md"
authors = [
  { name = "Ritchie Vink", email = "ritchie46@gmail.com" },
]
license = { file = "LICENSE" }
requires-python = ">=3.7"
dependencies = [
  "typing_extensions >= 4.0.1; python_version < '3.11'",
]
keywords = ["dataframe", "arrow", "out-of-core"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Rust",
  "Topic :: Scientific/Engineering",
]

[project.urls]
Homepage = "https://www.pola.rs/"
Documentation = "https://pola-rs.github.io/polars/py-polars/html/reference/"
Repository = "https://github.com/pola-rs/polars"
Changelog = "https://github.com/pola-rs/polars/releases"

[project.optional-dependencies]
# the Arrow memory format is stable between 4.0 and 5.0-SNAPSHOTS
# (which the Rust libraries use to take advantage of Rust API changes).
# NOTE: keep this list in sync with show_versions()
pyarrow = ["pyarrow>=4.0.0"]
pandas = ["pyarrow>=4.0.0", "pandas"]
numpy = ["numpy >= 1.16.0"]
fsspec = ["fsspec"]
connectorx = ["connectorx"]
xlsx2csv = ["xlsx2csv >= 0.8.0"]
deltalake = ["deltalake >= 0.6.2"]
timezone = ["backports.zoneinfo; python_version < '3.9'", "tzdata; platform_system == 'Windows'"]
matplotlib = ["matplotlib"]
all = [
  "polars[pyarrow,pandas,numpy,fsspec,connectorx,xlsx2csv,deltalake,timezone,matplotlib]",
]

[tool.mypy]
files = ["polars", "tests"]
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
disable_error_code = [
  "empty-body",
]

[[tool.mypy.overrides]]
module = [
  "backports",
  "pyarrow.*",
  "polars.polars",
  "matplotlib.*",
  "fsspec.*",
  "connectorx",
  "deltalake",
  "IPython.*",
  "zoneinfo",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["IPython.*"]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = ["polars.*"]
# We exclude the polars module from warn_return_any, because the PyO3 api does not have Python
# type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
# this capability. We could add a stub file for polars.polars (the PyO3 api), but that
# amounts to duplicating almost all type annotations on our api, as the Python api itself is a
# thin wrapper around the PyO3 api to start with.
warn_return_any = false

[tool.ruff]
target-version = "py37"
line-length = 88
fix = true

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D202", # No blank lines allowed after function docstring -> clashes with Black
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105",
  "D100",
  "D103",
  "D102",
  "D104",
  "D101",
]

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"polars/datatypes.py" = ["B019"]
"tests/**/*.py" = ["D100", "D103"]

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--import-mode=importlib",
  # Default to running fast tests only. To run ALL tests, run: pytest -m ""
  "-m not slow and not hypothesis and not benchmark",
]
markers = [
  "slow: Tests with a longer than average runtime.",
  "benchmark: Tests that should be run on a Polars release build.",
]
filterwarnings = "error" # Fail on warnings

[tool.coverage.run]
source = ["polars"]
branch = true

[tool.coverage.report]
fail_under = 85
skip_covered = true
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "except ImportError",
  "if TYPE_CHECKING:",
  "from typing_extensions import ",
]
