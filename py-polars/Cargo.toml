[package]
name = "py-polars"
version = "1.5.0"
edition = "2021"

[lib]
name = "polars"
crate-type = ["cdylib"]

[dependencies]
polars-python = { workspace = true, default-features = true }
pyo3 = { workspace = true, features = ["abi3-py38", "chrono", "extension-module", "multiple-pymethods"] }

[build-dependencies]
built = { version = "0.7", features = ["chrono", "git2", "cargo-lock"], optional = true }

[target.'cfg(all(any(not(target_family = "unix"), allocator = "mimalloc"), not(allocator = "default")))'.dependencies]
mimalloc = { version = "0.1", default-features = false }

# Feature background_threads is unsupported on MacOS (https://github.com/jemalloc/jemalloc/issues/843).
[target.'cfg(all(target_family = "unix", not(target_os = "macos"), not(allocator = "mimalloc"), not(allocator = "default")))'.dependencies]
jemallocator = { version = "0.5", features = ["disable_initial_exec_tls", "background_threads"] }

[target.'cfg(all(target_family = "unix", target_os = "macos", not(allocator = "mimalloc"), not(allocator = "default")))'.dependencies]
jemallocator = { version = "0.5", features = ["disable_initial_exec_tls"] }

[features]
build_info = ["dep:built"]
ffi_plugin = ["polars-python/ffi_plugin"]
csv = ["polars-python/csv"]
polars_cloud = ["polars-python/polars_cloud"]
object = ["polars-python/object"]
clipboard = ["polars-python/clipboard"]
sql = ["polars-python/sql"]
trigonometry = ["polars-python/trigonometry"]
parquet = ["polars-python/parquet"]
ipc = ["polars-python/ipc"]

all = [
    "build_info",
    "ffi_plugin",
    "csv",
    "polars_cloud",
    "object",
    "clipboard",
    "sql",
    "trigonometry",
    "parquet",
    "ipc",
]

# we cannot conditionally activate simd
# https://github.com/rust-lang/cargo/issues/1197
# so we have an indirection and compile
# with --no-default-features --features=all for targets without simd
default = [
  "all",
#   "nightly",
]

# # Features below are only there to enable building a slim binary during development.
# avro = ["polars/avro"]
# ipc_streaming = ["polars/ipc_streaming"]
# is_in = ["polars/is_in"]
# json = ["polars/serde", "serde_json", "polars/json"]
# sign = ["polars/sign"]
# asof_join = ["polars/asof_join"]
# cross_join = ["polars/cross_join"]
# pct_change = ["polars/pct_change"]
# repeat_by = ["polars/repeat_by"]
# # also includes simd
# nightly = ["polars/nightly"]
# streaming = ["polars/streaming"]
# meta = ["polars/meta"]
# search_sorted = ["polars/search_sorted"]
# decompress = ["polars/decompress-fast"]
# regex = ["polars/regex"]
# extract_jsonpath = ["polars/extract_jsonpath"]
# pivot = ["polars/pivot"]
# top_k = ["polars/top_k"]
# propagate_nans = ["polars/propagate_nans"]

# performant = ["polars/performant"]
# timezones = ["polars/timezones"]
# cse = ["polars/cse"]
# merge_sorted = ["polars/merge_sorted"]
# list_gather = ["polars/list_gather"]
# list_count = ["polars/list_count"]
# array_count = ["polars/array_count", "polars/dtype-array"]
# binary_encoding = ["polars/binary_encoding"]
# list_sets = ["polars-lazy/list_sets"]
# list_any_all = ["polars/list_any_all"]
# array_any_all = ["polars/array_any_all", "polars/dtype-array"]
# list_drop_nulls = ["polars/list_drop_nulls"]
# list_sample = ["polars/list_sample"]
# cutqcut = ["polars/cutqcut"]
# rle = ["polars/rle"]
# extract_groups = ["polars/extract_groups"]
# cloud = ["polars/cloud", "polars/aws", "polars/gcp", "polars/azure", "polars/http"]
# peaks = ["polars/peaks"]
# hist = ["polars/hist"]
# find_many = ["polars/find_many"]
# new_streaming = ["polars-lazy/new_streaming"]

# dtype-i8 = []
# dtype-i16 = []
# dtype-u8 = []
# dtype-u16 = []
# dtype-array = []

# dtypes = [
#   "dtype-array",
#   "dtype-i16",
#   "dtype-i8",
#   "dtype-u16",
#   "dtype-u8",
#   "object",
# ]

# operations = [
#   "array_any_all",
#   "array_count",
#   "is_in",
#   "repeat_by",
#   "trigonometry",
#   "sign",
#   "performant",
#   "list_gather",
#   "list_count",
#   "list_sets",
#   "list_any_all",
#   "list_drop_nulls",
#   "list_sample",
#   "cutqcut",
#   "rle",
#   "extract_groups",
#   "pivot",
#   "extract_jsonpath",
#   "asof_join",
#   "cross_join",
#   "pct_change",
#   "search_sorted",
#   "merge_sorted",
#   "top_k",
#   "propagate_nans",
#   "timezones",
#   "peaks",
#   "hist",
#   "find_many",
# ]

# io = [
#   "json",
#   "parquet",
#   "ipc",
#   "ipc_streaming",
#   "avro",
#   "csv",
#   "cloud",
#   "clipboard",
# ]

# optimizations = [
#   "cse",
#   "polars/fused",
#   "streaming",
# ]

# polars_cloud = ["polars/polars_cloud"]

# all = [
#   "optimizations",
#   "io",
#   "operations",
#   "dtypes",
#   "meta",
#   "decompress",
#   "regex",
#   "build_info",
#   "sql",
#   "binary_encoding",
#   "ffi_plugin",
#   "polars_cloud",
#   # "new_streaming",
# ]

