[package]
name = "py-polars"
version = "0.19.10"
edition = "2021"

[lib]
name = "polars"
crate-type = ["cdylib"]

[dependencies]
polars-algo = { path = "../crates/polars-algo", default-features = false }
polars-core = { path = "../crates/polars-core", default-features = false, features = ["python"] }
polars-error = { path = "../crates/polars-error" }
polars-lazy = { path = "../crates/polars-lazy", default-features = false, features = ["python"] }
polars-ops = { path = "../crates/polars-ops", default-features = false, features = ["convert_index"] }
polars-plan = { path = "../crates/polars-plan", default-features = false }

ahash = "0.8"
ciborium = "0.2"
either = "1.8"
lexical-core = "0.8"
libc = "0.2"
ndarray = { version = "0.15", default-features = false }
numpy = { version = "0.20", default-features = false }
once_cell = "1"
pyo3 = { version = "0.20", features = ["abi3-py38", "extension-module", "multiple-pymethods"] }
pyo3-built = { version = "0.4", optional = true }
serde_json = { version = "1", optional = true }
smartstring = "1"
thiserror = "1"

[dependencies.polars]
path = "../crates/polars"
default-features = false
features = [
  "abs",
  "approx_unique",
  "arg_where",
  "concat_str",
  "cum_agg",
  "cumulative_eval",
  "dataframe_arithmetic",
  "date_offset",
  "diagonal_concat",
  "diff",
  "dot_diagram",
  "dot_product",
  "dtype-categorical",
  "dtype-full",
  "dynamic_group_by",
  "ewma",
  "fmt",
  "horizontal_concat",
  "interpolate",
  "is_first_distinct",
  "is_last_distinct",
  "is_unique",
  "lazy",
  "list_eval",
  "list_to_struct",
  "log",
  "mode",
  "moment",
  "ndarray",
  "partition_by",
  "product",
  "random",
  "range",
  "rank",
  "reinterpret",
  "rolling_window",
  "round_series",
  "row_hash",
  "rows",
  "semi_anti_join",
  "serde-lazy",
  "string_encoding",
  "string_from_radix",
  "string_justify",
  "strings",
  "temporal",
  "to_dummies",
  "true_div",
  "unique_counts",
  "zip_with",
]

[build-dependencies]
built = { version = "0.6", features = ["chrono", "git2"], optional = true }

[target.'cfg(any(not(target_os = "linux"), use_mimalloc))'.dependencies]
mimalloc = { version = "0.1", default-features = false }

[target.'cfg(all(target_os = "linux", not(use_mimalloc)))'.dependencies]
jemallocator = { version = "0.5", features = ["disable_initial_exec_tls"] }

# features are only there to enable building a slim binary for the benchmark in CI
[features]
# needed for macro
dtype-i8 = []
dtype-i16 = []
dtype-u8 = []
dtype-u16 = []
avro = ["polars/avro"]
parquet = ["polars/parquet"]
ipc = ["polars/ipc"]
ipc_streaming = ["polars/ipc_streaming"]
is_in = ["polars/is_in"]
json = ["polars/serde", "serde_json", "polars/json"]
trigonometry = ["polars/trigonometry"]
sign = ["polars/sign"]
asof_join = ["polars/asof_join"]
cross_join = ["polars/cross_join"]
pct_change = ["polars/pct_change"]
repeat_by = ["polars/repeat_by"]
# also includes simd
nightly = ["polars/nightly"]
streaming = ["polars/streaming"]
meta = ["polars/meta"]
search_sorted = ["polars/search_sorted"]
decompress = ["polars/decompress-fast"]
lazy_regex = ["polars/lazy_regex"]
csv = ["polars/csv"]
object = ["polars/object"]
extract_jsonpath = ["polars/extract_jsonpath"]
pivot = ["polars/pivot"]
top_k = ["polars/top_k"]
propagate_nans = ["polars/propagate_nans"]
sql = ["polars/sql"]
build_info = ["dep:pyo3-built", "dep:built"]
performant = ["polars/performant"]
timezones = ["polars/timezones"]
cse = ["polars/cse"]
merge_sorted = ["polars/merge_sorted"]
list_take = ["polars/list_take"]
list_count = ["polars/list_count"]
binary_encoding = ["polars/binary_encoding"]
list_sets = ["polars-lazy/list_sets"]
list_any_all = ["polars/list_any_all"]
list_drop_nulls = ["polars/list_drop_nulls"]
list_sample = ["polars/list_sample"]
cutqcut = ["polars/cutqcut"]
rle = ["polars/rle"]
extract_groups = ["polars/extract_groups"]
ffi_plugin = ["polars-plan/ffi_plugin"]
cloud = ["polars/cloud", "polars/aws", "polars/gcp", "polars/azure"]
peaks = ["polars/peaks"]

dtypes = [
  "dtype-i8",
  "dtype-i16",
  "dtype-u8",
  "dtype-u16",
  "polars/group_by_list",
  "object",
]

operations = [
  "is_in",
  "repeat_by",
  "trigonometry",
  "sign",
  "performant",
  "list_take",
  "list_count",
  "list_sets",
  "list_any_all",
  "list_drop_nulls",
  "list_sample",
  "cutqcut",
  "rle",
  "extract_groups",
  "pivot",
  "extract_jsonpath",
  "asof_join",
  "cross_join",
  "pct_change",
  "search_sorted",
  "merge_sorted",
  "top_k",
  "propagate_nans",
  "timezones",
  "peaks",
]

io = [
  "json",
  "parquet",
  "ipc",
  "ipc_streaming",
  "avro",
  "csv",
  "cloud",
]

optimizations = [
  "cse",
  "polars/fused",
  "streaming",
]

all = [
  "optimizations",
  "io",
  "operations",
  "dtypes",
  "meta",
  "decompress",
  "lazy_regex",
  "build_info",
  "sql",
  "binary_encoding",
  "ffi_plugin",
]

# we cannot conditionally activate simd
# https://github.com/rust-lang/cargo/issues/1197
# so we have an indirection and compile
# with --no-default-features --features=all for targets without simd
default = [
  "all",
  "nightly",
]

[profile.opt-dev]
inherits = "dev"
opt-level = 1

[profile.debug-release]
inherits = "release"
debug = true
incremental = true
codegen-units = 16
lto = "thin"

[profile.release]
codegen-units = 1
lto = "fat"

[patch.crates-io]
ahash = { git = "https://github.com/orlp/aHash", branch = "fix-arm-intrinsics" }

# This is ignored here; would be set in .cargo/config.toml.
# Should not be used when packaging
# target-cpu = "native"

# Prevent package from thinking it's in the workspace
[workspace]
