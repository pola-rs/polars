[package]
name = "polars-lazy"
version.workspace = true
authors = ["ritchie46 <ritchie46@gmail.com>"]
edition = "2021"
license = "MIT"
repository = "https://github.com/pola-rs/polars"
description = "Lazy query engine for the Polars DataFrame library"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dev-dependencies]
serde_json = "1"

[dependencies]
ahash.workspace = true
bitflags.workspace = true
glob = "0.3"
polars-arrow = { version = "0.26.1", path = "../polars-arrow" }
polars-core = { version = "0.26.1", path = "../polars-core", features = ["lazy", "private", "zip_with", "random"], default-features = false }
polars-io = { version = "0.26.1", path = "../polars-io", features = ["lazy", "csv-file", "private"], default-features = false }
polars-ops = { version = "0.26.1", path = "../polars-ops", default-features = false }
polars-pipe = { version = "0.26.1", path = "./polars-pipe", optional = true }
polars-plan = { version = "0.26.1", path = "./polars-plan" }
polars-time = { version = "0.26.1", path = "../polars-time", optional = true }
polars-utils = { version = "0.26.1", path = "../polars-utils" }
pyo3 = { version = "0.18", optional = true }
rayon.workspace = true

[features]
nightly = ["polars-core/nightly", "polars-pipe/nightly"]
compile = ["polars-plan/compile"]
streaming = ["chunked_ids", "polars-pipe/compile", "polars-plan/streaming"]
default = ["compile", "private"]
parquet = ["polars-core/parquet", "polars-io/parquet", "polars-plan/parquet", "polars-pipe/parquet"]
async = [
  "polars-plan/async",
  "polars-io/async",
  "polars-pipe/async",
  "streaming",
]
ipc = ["polars-io/ipc", "polars-plan/ipc", "polars-pipe/ipc"]
json = ["polars-io/json", "polars-plan/json"]
csv-file = ["polars-io/csv-file", "polars-plan/csv-file", "polars-pipe/csv-file"]
temporal = ["dtype-datetime", "dtype-date", "dtype-time", "dtype-duration", "polars-plan/temporal"]
# debugging purposes
fmt = ["polars-core/fmt", "polars-plan/fmt"]
strings = ["polars-plan/strings"]
future = []
dtype-u8 = ["polars-plan/dtype-u8", "polars-pipe/dtype-u8"]
dtype-u16 = ["polars-plan/dtype-u16", "polars-pipe/dtype-u16"]
dtype-i8 = ["polars-plan/dtype-i8", "polars-pipe/dtype-i8"]
dtype-i16 = ["polars-plan/dtype-i16", "polars-pipe/dtype-i16"]
dtype-date = ["polars-plan/dtype-date", "polars-time/dtype-date", "temporal"]
dtype-datetime = ["polars-plan/dtype-datetime", "polars-time/dtype-datetime", "temporal"]
dtype-duration = ["polars-plan/dtype-duration", "polars-time/dtype-duration", "temporal"]
dtype-time = ["polars-core/dtype-time", "temporal"]
dtype-categorical = ["polars-plan/dtype-categorical", "polars-pipe/dtype-categorical"]
dtype-struct = ["polars-plan/dtype-struct"]
dtype-binary = ["polars-plan/dtype-binary"]
object = ["polars-plan/object"]
date_offset = ["polars-plan/date_offset"]
trigonometry = ["polars-plan/trigonometry"]
sign = ["polars-plan/sign"]
timezones = ["polars-plan/timezones"]
list_take = ["polars-ops/list_take", "polars-plan/list_take"]

true_div = ["polars-plan/true_div"]

# operations
is_in = ["polars-plan/is_in"]
repeat_by = ["polars-plan/repeat_by"]
round_series = ["polars-plan/round_series", "polars-ops/round_series"]
is_first = ["polars-plan/is_first"]
cross_join = ["polars-plan/cross_join", "polars-pipe/cross_join"]
asof_join = ["polars-plan/asof_join", "polars-time"]
dot_product = ["polars-plan/dot_product"]
concat_str = ["polars-plan/concat_str"]
arange = ["polars-plan/arange"]
mode = ["polars-plan/mode"]
cum_agg = ["polars-plan/cum_agg"]
interpolate = ["polars-plan/interpolate"]
rolling_window = [
  "polars-plan/rolling_window",
  "polars-time/rolling_window",
]
rank = ["polars-plan/rank"]
diff = ["polars-plan/diff", "polars-plan/diff"]
pct_change = ["polars-plan/pct_change"]
moment = ["polars-plan/moment", "polars-ops/moment"]
abs = ["polars-plan/abs"]
random = ["polars-plan/random"]
dynamic_groupby = ["polars-plan/dynamic_groupby", "polars-time", "temporal"]
ewma = ["polars-plan/ewma"]
dot_diagram = ["polars-plan/dot_diagram"]
diagonal_concat = []
unique_counts = ["polars-plan/unique_counts"]
log = ["polars-plan/log"]
list_eval = []
cumulative_eval = []
chunked_ids = ["polars-plan/chunked_ids", "polars-core/chunked_ids"]
list_to_struct = ["polars-plan/list_to_struct"]
python = ["pyo3", "polars-plan/python"]
row_hash = ["polars-plan/row_hash"]
string_justify = ["polars-plan/string_justify"]
string_from_radix = ["polars-plan/string_from_radix"]
arg_where = ["polars-plan/arg_where"]
search_sorted = ["polars-plan/search_sorted"]
merge_sorted = ["polars-plan/merge_sorted"]
meta = ["polars-plan/meta"]
pivot = ["polars-core/rows", "polars-ops/pivot"]
top_k = ["polars-plan/top_k"]
semi_anti_join = ["polars-plan/semi_anti_join"]
cse = ["polars-plan/cse"]
propagate_nans = ["polars-plan/propagate_nans"]
coalesce = ["polars-plan/coalesce"]
regex = ["polars-plan/regex"]
serde = [
  "polars-plan/serde",
  "polars-arrow/serde",
  "polars-core/serde-lazy",
  "polars-time/serde",
  "polars-io/serde",
  "polars-ops/serde",
]

# no guarantees whatsoever
private = ["polars-plan/private"]

bigidx = ["polars-plan/bigidx"]

panic_on_schema = ["polars-plan/panic_on_schema"]

test = [
  "polars-plan/debugging",
  "panic_on_schema",
  "private",
  "rolling_window",
  "rank",
  "round_series",
  "csv-file",
  "dtype-categorical",
  "cum_agg",
  "regex",
  "polars-core/fmt",
  "diff",
  "abs",
  "parquet",
  "ipc",
  "dtype-date",
]

test_all = [
  "test",
  "strings",
  "regex",
  "ipc",
  "row_hash",
  "string_justify",
  "string_from_radix",
  "search_sorted",
  "top_k",
  "pivot",
  "semi_anti_join",
  "cse",
]

[package.metadata.docs.rs]
all-features = true
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]
