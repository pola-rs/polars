use crate::lazy::dsl::*;
use crate::prelude::JsResult;
use napi::JsObject;

impl JsExpr {
    pub fn to_object(env: &napi::Env) -> JsResult<JsObject> {
        let mut expr = env.create_object()?;
        let mut lst_obj = env.create_object()?;
        let mut date_obj = env.create_object()?;
        let mut str_obj = env.create_object()?;

        lst_obj.define_properties(&[
            napi::Property::new(env, "lengths")?.with_method(arr_lengths),
            napi::Property::new(env, "max")?.with_method(lst_max),
            napi::Property::new(env, "mean")?.with_method(lst_mean),
            napi::Property::new(env, "min")?.with_method(lst_min),
            napi::Property::new(env, "reverse")?.with_method(lst_reverse),
            napi::Property::new(env, "sort")?.with_method(lst_sort),
            napi::Property::new(env, "sum")?.with_method(lst_sum),
            napi::Property::new(env, "unique")?.with_method(lst_unique),
        ])?;
        str_obj.define_properties(&[
            napi::Property::new(env, "concat")?.with_method(str_concat),
            napi::Property::new(env, "contains")?.with_method(str_contains),
            napi::Property::new(env, "extract")?.with_method(str_extract),
            napi::Property::new(env, "jsonPathMatch")?.with_method(str_json_path_match),
            napi::Property::new(env, "lengths")?.with_method(str_lengths),
            napi::Property::new(env, "parseDate")?.with_method(str_parse_date),
            napi::Property::new(env, "parseDateTime")?.with_method(str_parse_datetime),
            napi::Property::new(env, "replace")?.with_method(str_replace),
            napi::Property::new(env, "replaceAll")?.with_method(str_replace_all),
            napi::Property::new(env, "slice")?.with_method(str_slice),
            napi::Property::new(env, "toLowerCase")?.with_method(str_to_lowercase),
            napi::Property::new(env, "toUpperCase")?.with_method(str_to_uppercase),
        ])?;
        date_obj.define_properties(&[
            napi::Property::new(env, "buckets")?.with_method(date_buckets),
            napi::Property::new(env, "day")?.with_method(day),
            napi::Property::new(env, "hour")?.with_method(hour),
            napi::Property::new(env, "minute")?.with_method(minute),
            napi::Property::new(env, "month")?.with_method(month),
            napi::Property::new(env, "nanosecond")?.with_method(nanosecond),
            napi::Property::new(env, "ordinalDay")?.with_method(ordinal_day),
            napi::Property::new(env, "second")?.with_method(second),
            napi::Property::new(env, "strftime")?.with_method(strftime),
            napi::Property::new(env, "timestamp")?.with_method(timestamp),
            napi::Property::new(env, "week")?.with_method(week),
            napi::Property::new(env, "weekday")?.with_method(weekday),
            napi::Property::new(env, "year")?.with_method(year),
        ])?;

        expr.define_properties(&[
            napi::Property::new(env, "str")?.with_value(str_obj),
            napi::Property::new(env, "lst")?.with_value(lst_obj),
            napi::Property::new(env, "date")?.with_value(date_obj),
            napi::Property::new(env, "as_str")?.with_method(as_str),
            napi::Property::new(env, "abs")?.with_method(abs),
            napi::Property::new(env, "aggGroups")?.with_method(agg_groups),
            napi::Property::new(env, "alias")?.with_method(alias),
            napi::Property::new(env, "and")?.with_method(and),
            napi::Property::new(env, "argMax")?.with_method(arg_max),
            napi::Property::new(env, "argSort")?.with_method(arg_sort),
            napi::Property::new(env, "argUnique")?.with_method(arg_unique),
            napi::Property::new(env, "argMin")?.with_method(arg_min),
            napi::Property::new(env, "backwardFill")?.with_method(backward_fill),
            napi::Property::new(env, "cast")?.with_method(crate::lazy::dsl::cast),
            napi::Property::new(env, "count")?.with_method(crate::lazy::dsl::count),
            napi::Property::new(env, "cumCount")?.with_method(cumcount),
            napi::Property::new(env, "cumMax")?.with_method(cummax),
            napi::Property::new(env, "cumMin")?.with_method(cummin),
            napi::Property::new(env, "cumProd")?.with_method(cumprod),
            napi::Property::new(env, "cumSum")?.with_method(cumsum),
            napi::Property::new(env, "diff")?.with_method(diff),
            napi::Property::new(env, "dot")?.with_method(dot),
            napi::Property::new(env, "eq")?.with_method(eq),
            napi::Property::new(env, "exclude")?.with_method(exclude),
            napi::Property::new(env, "explode")?.with_method(explode),
            napi::Property::new(env, "fillNan")?.with_method(fill_nan),
            napi::Property::new(env, "fillNullWithStrategy")?.with_method(fill_null_with_strategy),
            napi::Property::new(env, "fillNull")?.with_method(fill_null),
            napi::Property::new(env, "filter")?.with_method(filter),
            napi::Property::new(env, "first")?.with_method(first),
            napi::Property::new(env, "floor")?.with_method(floor),
            napi::Property::new(env, "forwardFill")?.with_method(forward_fill),
            napi::Property::new(env, "gtEq")?.with_method(gt_eq),
            napi::Property::new(env, "gt")?.with_method(gt),
            napi::Property::new(env, "hash")?.with_method(hash),
            napi::Property::new(env, "head")?.with_method(head),
            napi::Property::new(env, "interpolate")?.with_method(interpolate),
            napi::Property::new(env, "isDuplicated")?.with_method(is_duplicated),
            napi::Property::new(env, "isFinite")?.with_method(is_finite),
            napi::Property::new(env, "isFirst")?.with_method(is_first),
            napi::Property::new(env, "isIn")?.with_method(is_in),
            napi::Property::new(env, "isInfinite")?.with_method(is_infinite),
            napi::Property::new(env, "isNan")?.with_method(is_nan),
            napi::Property::new(env, "isNotNan")?.with_method(is_not_nan),
            napi::Property::new(env, "isNotNull")?.with_method(crate::lazy::dsl::is_not_null),
            napi::Property::new(env, "isNull")?.with_method(crate::lazy::dsl::is_null),
            napi::Property::new(env, "isUnique")?.with_method(is_unique),
            napi::Property::new(env, "keepName")?.with_method(keep_name),
            napi::Property::new(env, "kurtosis")?.with_method(kurtosis),
            napi::Property::new(env, "last")?.with_method(last),
            napi::Property::new(env, "list")?.with_method(list),
            napi::Property::new(env, "lowerBound")?.with_method(lower_bound),
            napi::Property::new(env, "ltEq")?.with_method(lt_eq),
            napi::Property::new(env, "lt")?.with_method(lt),
            napi::Property::new(env, "max")?.with_method(crate::lazy::dsl::max),
            napi::Property::new(env, "mean")?.with_method(crate::lazy::dsl::mean),
            napi::Property::new(env, "median")?.with_method(crate::lazy::dsl::median),
            napi::Property::new(env, "min")?.with_method(crate::lazy::dsl::min),
            napi::Property::new(env, "mode")?.with_method(mode),
            napi::Property::new(env, "nUnique")?.with_method(n_unique),
            napi::Property::new(env, "neq")?.with_method(neq),
            napi::Property::new(env, "not")?.with_method(crate::lazy::dsl::not),
            napi::Property::new(env, "or")?.with_method(or),
            napi::Property::new(env, "over")?.with_method(over),
            napi::Property::new(env, "pow")?.with_method(pow),
            napi::Property::new(env, "prefix")?.with_method(prefix),
            napi::Property::new(env, "quantile")?.with_method(crate::lazy::dsl::quantile),
            napi::Property::new(env, "rank")?.with_method(rank),
            napi::Property::new(env, "reinterpret")?.with_method(crate::lazy::dsl::reinterpret),
            napi::Property::new(env, "repeatBy")?.with_method(repeat_by),
            napi::Property::new(env, "reshape")?.with_method(reshape),
            napi::Property::new(env, "reverse")?.with_method(reverse),
            napi::Property::new(env, "rollingMedian")?.with_method(rolling_median),
            napi::Property::new(env, "rollingQuantile")?.with_method(rolling_quantile),
            napi::Property::new(env, "rollingSkew")?.with_method(rolling_skew),
            napi::Property::new(env, "round")?.with_method(round),
            napi::Property::new(env, "shiftAndFill")?.with_method(shift_and_fill),
            napi::Property::new(env, "shift")?.with_method(shift),
            napi::Property::new(env, "skew")?.with_method(skew),
            napi::Property::new(env, "slice")?.with_method(slice),
            napi::Property::new(env, "sort")?.with_method(sort),
            napi::Property::new(env, "std")?.with_method(std),
            napi::Property::new(env, "suffix")?.with_method(suffix),
            napi::Property::new(env, "sum")?.with_method(crate::lazy::dsl::sum),
            napi::Property::new(env, "tail")?.with_method(tail),
            napi::Property::new(env, "takeEvery")?.with_method(take_every),
            napi::Property::new(env, "take")?.with_method(take),
            napi::Property::new(env, "unique")?.with_method(unique),
            napi::Property::new(env, "upperBound")?.with_method(upper_bound),
            napi::Property::new(env, "var")?.with_method(var),
            napi::Property::new(env, "xor")?.with_method(xor),
        ])?;

        Ok(expr)
    }
}
