use crate::series::JsSeries;

use neon::prelude::*;

impl JsSeries {
  pub fn to_object<'a>(cx: &mut ModuleContext<'a>) -> JsResult<'a, JsObject> {
    let obj = cx.empty_object();
    macro_rules! set_method {
      ($name:ident,$name_str:expr) => {
        let $name: Handle<JsFunction> = JsFunction::new(cx, Self::$name)?;
        obj.set(cx, $name_str, $name)?;
      };
    }

    // Constructors
    set_method!(new_bool, "new_bool");
    set_method!(new_i8, "new_i8");
    set_method!(new_i16, "new_i16");
    set_method!(new_i32, "new_i32");
    set_method!(new_i64, "new_i64");
    set_method!(new_u8, "new_u8");
    set_method!(new_u16, "new_u16");
    set_method!(new_u32, "new_u32");
    set_method!(new_u64, "new_u64");
    set_method!(new_f32, "new_f32");
    set_method!(new_f64, "new_f64");
    set_method!(new_opt_u16, "new_opt_u16");
    set_method!(new_opt_u32, "new_opt_u32");
    set_method!(new_opt_u64, "new_opt_u64");
    set_method!(new_opt_i8, "new_opt_i8");
    set_method!(new_opt_i16, "new_opt_i16");
    set_method!(new_opt_i32, "new_opt_i32");
    set_method!(new_opt_i64, "new_opt_i64");
    set_method!(new_opt_f32, "new_opt_f32");
    set_method!(new_opt_f64, "new_opt_f64");
    set_method!(new_opt_date, "new_opt_date");
    set_method!(new_opt_bool, "new_opt_bool");
    set_method!(new_str, "new_str");
    set_method!(new_list, "new_list");

    set_method!(repeat, "repeat");
    set_method!(dtype, "dtype");
    set_method!(get_fmt, "get_fmt");
    set_method!(chunk_lengths, "chunk_lengths");
    set_method!(name, "name");
    set_method!(rename, "rename");
    set_method!(tail, "tail");
    set_method!(head, "head");
    set_method!(get_idx, "get_idx");
    set_method!(bitand, "bitand");
    set_method!(bitor, "bitor");
    set_method!(bitxor, "bitxor");
    set_method!(n_chunks, "n_chunks");
    set_method!(limit, "limit");
    set_method!(slice, "slice");
    set_method!(append, "append");
    set_method!(filter, "filter");
    set_method!(cumsum, "cumsum");
    set_method!(cummax, "cummax");
    set_method!(cummin, "cummin");
    set_method!(cumprod, "cumprod");
    set_method!(add, "add");
    set_method!(sub, "sub");
    set_method!(mul, "mul");
    set_method!(div, "div");
    set_method!(rem, "rem");
    set_method!(mean, "mean");
    set_method!(max, "max");
    set_method!(min, "min");
    set_method!(sum, "sum");
    set_method!(sort, "sort");
    set_method!(sort_in_place, "sort_in_place");
    set_method!(argsort, "argsort");
    set_method!(unique, "unique");
    set_method!(value_counts, "value_counts");
    set_method!(arg_unique, "arg_unique");
    set_method!(arg_min, "arg_min");
    set_method!(arg_max, "arg_max");
    set_method!(take, "take");
    set_method!(take_with_series, "take_with_series");
    set_method!(null_count, "null_count");
    set_method!(has_validity, "has_validity");
    set_method!(is_null, "is_null");
    set_method!(is_not_null, "is_not_null");
    set_method!(is_not_nan, "is_not_nan");
    set_method!(is_nan, "is_nan");
    set_method!(is_finite, "is_finite");
    set_method!(is_infinite, "is_infinite");
    set_method!(is_unique, "is_unique");
    set_method!(arg_true, "arg_true");
    set_method!(is_duplicated, "is_duplicated");
    set_method!(explode, "explode");
    set_method!(sample_n, "sample_n");
    set_method!(sample_frac, "sample_frac");
    set_method!(take_every, "take_every");
    set_method!(series_equal, "series_equal");
    set_method!(eq, "eq");
    set_method!(neq, "neq");
    set_method!(gt, "gt");
    set_method!(gt_eq, "gt_eq");
    set_method!(lt, "lt");
    set_method!(lt_eq, "lt_eq");
    set_method!(_not, "_not");
    set_method!(as_str, "as_str");
    set_method!(len, "len");
    set_method!(to_array, "to_array");
    set_method!(median, "median");
    set_method!(quantile, "quantile");
    set_method!(drop_nulls, "drop_nulls");
    set_method!(fill_null, "fill_null");


    set_method!(clone, "clone");
    set_method!(apply_lambda, "apply_lambda");

    set_method!(shift, "shift");
    set_method!(zip_with, "zip_with");
    set_method!(strftime, "strftime");
    set_method!(timestamp, "timestamp");
    set_method!(to_dummies, "to_dummies");
    set_method!(get_list, "get_list");
    set_method!(arr_lengths, "arr_lengths");

    set_method!(rolling_sum, "rolling_sum");
    set_method!(rolling_mean, "rolling_mean");
    set_method!(rolling_max, "rolling_max");
    set_method!(rolling_min, "rolling_min");
    set_method!(rolling_var, "rolling_var");

    set_method!(year, "year");
    set_method!(month, "month");
    set_method!(weekday, "weekday");
    set_method!(week, "week");
    set_method!(day, "day");
    set_method!(ordinal_day, "ordinal_day");
    set_method!(hour, "hour");
    set_method!(minute, "minute");
    set_method!(second, "second");
    set_method!(nanosecond, "nanosecond");

    set_method!(peak_max, "peak_max");
    set_method!(peak_min, "peak_min");
    set_method!(n_unique, "n_unique");
    set_method!(is_first, "is_first");
    set_method!(round, "round");
    set_method!(shrink_to_fit, "shrink_to_fit");
    set_method!(dot, "dot");
    set_method!(hash, "hash");
    set_method!(reinterpret, "reinterpret");
    set_method!(mode, "mode");
    set_method!(interpolate, "interpolate");
    set_method!(rank, "rank");
    set_method!(diff, "diff");
    set_method!(skew, "skew");
    set_method!(kurtosis, "kurtosis");
    set_method!(cast, "cast");

    set_method!(set_with_mask_str, "set_with_mask_str");
    set_method!(set_with_mask_f64, "set_with_mask_f64");
    set_method!(set_with_mask_f32, "set_with_mask_f32");
    set_method!(set_with_mask_u8, "set_with_mask_u8");
    set_method!(set_with_mask_u16, "set_with_mask_u16");
    set_method!(set_with_mask_u32, "set_with_mask_u32");
    set_method!(set_with_mask_u64, "set_with_mask_u64");
    set_method!(set_with_mask_i8, "set_with_mask_i8");
    set_method!(set_with_mask_i16, "set_with_mask_i16");
    set_method!(set_with_mask_i32, "set_with_mask_i32");
    set_method!(set_with_mask_i64, "set_with_mask_i64");
    set_method!(set_with_mask_bool, "set_with_mask_bool");

    set_method!(set_at_idx_str, "set_at_idx_str");
    set_method!(set_at_idx_f64, "set_at_idx_f64");
    set_method!(set_at_idx_f32, "set_at_idx_f32");
    set_method!(set_at_idx_u8, "set_at_idx_u8");
    set_method!(set_at_idx_u16, "set_at_idx_u16");
    set_method!(set_at_idx_u32, "set_at_idx_u32");
    set_method!(set_at_idx_u64, "set_at_idx_u64");
    set_method!(set_at_idx_i8, "set_at_idx_i8");
    set_method!(set_at_idx_i16, "set_at_idx_i16");
    set_method!(set_at_idx_i32, "set_at_idx_i32");
    set_method!(set_at_idx_i64, "set_at_idx_i64");

    set_method!(get_f32, "get_f32");
    set_method!(get_f64, "get_f64");
    set_method!(get_u8, "get_u8");
    set_method!(get_u16, "get_u16");
    set_method!(get_u32, "get_u32");
    set_method!(get_u64, "get_u64");
    set_method!(get_i8, "get_i8");
    set_method!(get_i16, "get_i16");
    set_method!(get_i32, "get_i32");
    set_method!(get_i64, "get_i64");
    set_method!(get_date, "get_date");
    set_method!(get_datetime, "get_datetime");
    set_method!(get_str, "get_str");

    set_method!(add_u8, "add_u8");
    set_method!(add_u16, "add_u16");
    set_method!(add_u32, "add_u32");
    set_method!(add_u64, "add_u64");
    set_method!(add_i8, "add_i8");
    set_method!(add_i16, "add_i16");
    set_method!(add_i32, "add_i32");
    set_method!(add_i64, "add_i64");
    set_method!(add_f32, "add_f32");
    set_method!(add_f64, "add_f64");
    set_method!(sub_u8, "sub_u8");
    set_method!(sub_u16, "sub_u16");
    set_method!(sub_u32, "sub_u32");
    set_method!(sub_u64, "sub_u64");
    set_method!(sub_i8, "sub_i8");
    set_method!(sub_i16, "sub_i16");
    set_method!(sub_i32, "sub_i32");
    set_method!(sub_i64, "sub_i64");
    set_method!(sub_f32, "sub_f32");
    set_method!(sub_f64, "sub_f64");
    set_method!(div_u8, "div_u8");
    set_method!(div_u16, "div_u16");
    set_method!(div_u32, "div_u32");
    set_method!(div_u64, "div_u64");
    set_method!(div_i8, "div_i8");
    set_method!(div_i16, "div_i16");
    set_method!(div_i32, "div_i32");
    set_method!(div_i64, "div_i64");
    set_method!(div_f32, "div_f32");
    set_method!(div_f64, "div_f64");
    set_method!(mul_u8, "mul_u8");
    set_method!(mul_u16, "mul_u16");
    set_method!(mul_u32, "mul_u32");
    set_method!(mul_u64, "mul_u64");
    set_method!(mul_i8, "mul_i8");
    set_method!(mul_i16, "mul_i16");
    set_method!(mul_i32, "mul_i32");
    set_method!(mul_i64, "mul_i64");
    set_method!(mul_f32, "mul_f32");
    set_method!(mul_f64, "mul_f64");
    set_method!(rem_u8, "rem_u8");
    set_method!(rem_u16, "rem_u16");
    set_method!(rem_u32, "rem_u32");
    set_method!(rem_u64, "rem_u64");
    set_method!(rem_i8, "rem_i8");
    set_method!(rem_i16, "rem_i16");
    set_method!(rem_i32, "rem_i32");
    set_method!(rem_i64, "rem_i64");
    set_method!(rem_f32, "rem_f32");
    set_method!(rem_f64, "rem_f64");

    set_method!(add_u8_rhs, "add_u8_rhs");
    set_method!(add_u16_rhs, "add_u16_rhs");
    set_method!(add_u32_rhs, "add_u32_rhs");
    set_method!(add_u64_rhs, "add_u64_rhs");
    set_method!(add_i8_rhs, "add_i8_rhs");
    set_method!(add_i16_rhs, "add_i16_rhs");
    set_method!(add_i32_rhs, "add_i32_rhs");
    set_method!(add_i64_rhs, "add_i64_rhs");
    set_method!(add_f32_rhs, "add_f32_rhs");
    set_method!(add_f64_rhs, "add_f64_rhs");
    set_method!(sub_u8_rhs, "sub_u8_rhs");
    set_method!(sub_u16_rhs, "sub_u16_rhs");
    set_method!(sub_u32_rhs, "sub_u32_rhs");
    set_method!(sub_u64_rhs, "sub_u64_rhs");
    set_method!(sub_i8_rhs, "sub_i8_rhs");
    set_method!(sub_i16_rhs, "sub_i16_rhs");
    set_method!(sub_i32_rhs, "sub_i32_rhs");
    set_method!(sub_i64_rhs, "sub_i64_rhs");
    set_method!(sub_f32_rhs, "sub_f32_rhs");
    set_method!(sub_f64_rhs, "sub_f64_rhs");
    set_method!(div_u8_rhs, "div_u8_rhs");
    set_method!(div_u16_rhs, "div_u16_rhs");
    set_method!(div_u32_rhs, "div_u32_rhs");
    set_method!(div_u64_rhs, "div_u64_rhs");
    set_method!(div_i8_rhs, "div_i8_rhs");
    set_method!(div_i16_rhs, "div_i16_rhs");
    set_method!(div_i32_rhs, "div_i32_rhs");
    set_method!(div_i64_rhs, "div_i64_rhs");
    set_method!(div_f32_rhs, "div_f32_rhs");
    set_method!(div_f64_rhs, "div_f64_rhs");
    set_method!(mul_u8_rhs, "mul_u8_rhs");
    set_method!(mul_u16_rhs, "mul_u16_rhs");
    set_method!(mul_u32_rhs, "mul_u32_rhs");
    set_method!(mul_u64_rhs, "mul_u64_rhs");
    set_method!(mul_i8_rhs, "mul_i8_rhs");
    set_method!(mul_i16_rhs, "mul_i16_rhs");
    set_method!(mul_i32_rhs, "mul_i32_rhs");
    set_method!(mul_i64_rhs, "mul_i64_rhs");
    set_method!(mul_f32_rhs, "mul_f32_rhs");
    set_method!(mul_f64_rhs, "mul_f64_rhs");
    set_method!(rem_u8_rhs, "rem_u8_rhs");
    set_method!(rem_u16_rhs, "rem_u16_rhs");
    set_method!(rem_u32_rhs, "rem_u32_rhs");
    set_method!(rem_u64_rhs, "rem_u64_rhs");
    set_method!(rem_i8_rhs, "rem_i8_rhs");
    set_method!(rem_i16_rhs, "rem_i16_rhs");
    set_method!(rem_i32_rhs, "rem_i32_rhs");
    set_method!(rem_i64_rhs, "rem_i64_rhs");
    set_method!(rem_f32_rhs, "rem_f32_rhs");
    set_method!(rem_f64_rhs, "rem_f64_rhs");

    set_method!(eq_u8, "eq_u8");
    set_method!(eq_u16, "eq_u16");
    set_method!(eq_u32, "eq_u32");
    set_method!(eq_u64, "eq_u64");
    set_method!(eq_i8, "eq_i8");
    set_method!(eq_i16, "eq_i16");
    set_method!(eq_i32, "eq_i32");
    set_method!(eq_i64, "eq_i64");
    set_method!(eq_f32, "eq_f32");
    set_method!(eq_f64, "eq_f64");
    set_method!(eq_str, "eq_str");

    set_method!(neq_u8, "neq_u8");
    set_method!(neq_u16, "neq_u16");
    set_method!(neq_u32, "neq_u32");
    set_method!(neq_u64, "neq_u64");
    set_method!(neq_i8, "neq_i8");
    set_method!(neq_i16, "neq_i16");
    set_method!(neq_i32, "neq_i32");
    set_method!(neq_i64, "neq_i64");
    set_method!(neq_f32, "neq_f32");
    set_method!(neq_f64, "neq_f64");
    set_method!(neq_str, "neq_str");

    set_method!(gt_u8, "gt_u8");
    set_method!(gt_u16, "gt_u16");
    set_method!(gt_u32, "gt_u32");
    set_method!(gt_u64, "gt_u64");
    set_method!(gt_i8, "gt_i8");
    set_method!(gt_i16, "gt_i16");
    set_method!(gt_i32, "gt_i32");
    set_method!(gt_i64, "gt_i64");
    set_method!(gt_f32, "gt_f32");
    set_method!(gt_f64, "gt_f64");
    set_method!(gt_str, "gt_str");

    set_method!(gt_eq_u8, "gt_eq_u8");
    set_method!(gt_eq_u16, "gt_eq_u16");
    set_method!(gt_eq_u32, "gt_eq_u32");
    set_method!(gt_eq_u64, "gt_eq_u64");
    set_method!(gt_eq_i8, "gt_eq_i8");
    set_method!(gt_eq_i16, "gt_eq_i16");
    set_method!(gt_eq_i32, "gt_eq_i32");
    set_method!(gt_eq_i64, "gt_eq_i64");
    set_method!(gt_eq_f32, "gt_eq_f32");
    set_method!(gt_eq_f64, "gt_eq_f64");
    set_method!(gt_eq_str, "gt_eq_str");

    set_method!(lt_u8, "lt_u8");
    set_method!(lt_u16, "lt_u16");
    set_method!(lt_u32, "lt_u32");
    set_method!(lt_u64, "lt_u64");
    set_method!(lt_i8, "lt_i8");
    set_method!(lt_i16, "lt_i16");
    set_method!(lt_i32, "lt_i32");
    set_method!(lt_i64, "lt_i64");
    set_method!(lt_f32, "lt_f32");
    set_method!(lt_f64, "lt_f64");
    set_method!(lt_str, "lt_str");

    set_method!(lt_eq_u8, "lt_eq_u8");
    set_method!(lt_eq_u16, "lt_eq_u16");
    set_method!(lt_eq_u32, "lt_eq_u32");
    set_method!(lt_eq_u64, "lt_eq_u64");
    set_method!(lt_eq_i8, "lt_eq_i8");
    set_method!(lt_eq_i16, "lt_eq_i16");
    set_method!(lt_eq_i32, "lt_eq_i32");
    set_method!(lt_eq_i64, "lt_eq_i64");
    set_method!(lt_eq_f32, "lt_eq_f32");
    set_method!(lt_eq_f64, "lt_eq_f64");
    set_method!(lt_eq_str, "lt_eq_str");

    #[cfg(feature = "is_in")]
    set_method!(is_in, "is_in");
    let str_obj = cx.empty_object();
    macro_rules! set_str_method {
      ($name:ident,$name_str:expr) => {
        let $name: Handle<JsFunction> = JsFunction::new(cx, Self::$name)?;
        str_obj.set(cx, $name_str, $name)?;
      };
    }

    set_str_method!(str_lengths, "lengths");
    set_str_method!(str_contains, "contains");
    set_str_method!(str_json_path_match, "json_path_match");
    set_str_method!(str_extract, "extract");
    set_str_method!(str_replace, "replace");
    set_str_method!(str_to_uppercase, "to_uppercase");
    set_str_method!(str_parse_date, "parse_date");
    set_str_method!(str_parse_datetime, "parse_datetime");
    set_str_method!(str_slice, "slice");

    obj.set(cx, "str", str_obj)?;
    Ok(obj)
  }
}
