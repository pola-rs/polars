[package]
name = "polars"
version = { workspace = true }
authors = { workspace = true }
edition = { workspace = true }
homepage = { workspace = true }
keywords = ["dataframe", "query-engine", "arrow"]
license = { workspace = true }
readme = "../../README.md"
repository = { workspace = true }
description = "DataFrame library based on Apache Arrow"

[dependencies]
polars-algo = { workspace = true, optional = true }
polars-core = { workspace = true }
polars-io = { workspace = true, optional = true }
polars-lazy = { workspace = true, default-features = false, optional = true }
polars-ops = { workspace = true }
polars-sql = { workspace = true, optional = true }
polars-time = { workspace = true, optional = true }

[dev-dependencies]
ahash = { workspace = true }
rand = { workspace = true }

[build-dependencies]
version_check = { workspace = true }

# enable js feature for getrandom to work in wasm
[target.'cfg(target_family = "wasm")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }

[features]
sql = ["polars-sql"]
rows = ["polars-core/rows"]
simd = ["polars-core/simd", "polars-io/simd", "polars-ops/simd"]
avx512 = ["polars-core/avx512"]
nightly = ["polars-core/nightly", "polars-ops/nightly", "simd", "polars-lazy?/nightly"]
docs = ["polars-core/docs"]
temporal = ["polars-core/temporal", "polars-lazy?/temporal", "polars-io/temporal", "polars-time"]
random = ["polars-core/random", "polars-lazy?/random", "polars-ops/random"]
default = [
  "docs",
  "zip_with",
  "csv",
  "temporal",
  "fmt",
  "dtype-slim",
]
ndarray = ["polars-core/ndarray"]
# serde support for dataframes and series
serde = ["polars-core/serde"]
serde-lazy = [
  "polars-core/serde-lazy",
  "polars-lazy?/serde",
  "polars-time?/serde",
  "polars-io/serde",
  "polars-ops/serde",
]
parquet = ["polars-io", "polars-core/parquet", "polars-lazy?/parquet", "polars-io/parquet", "polars-sql?/parquet"]
async = ["polars-lazy?/async"]
cloud = ["polars-lazy?/cloud", "polars-io/cloud"]
cloud_write = ["cloud", "polars-lazy?/cloud_write"]
aws = ["async", "cloud", "polars-io/aws"]
azure = ["async", "cloud", "polars-io/azure"]
gcp = ["async", "cloud", "polars-io/gcp"]
lazy = ["polars-core/lazy", "polars-lazy"]
# commented out until UB is fixed
# parallel = ["polars-core/parallel"]

# extra utilities for Utf8Chunked
strings = ["polars-core/strings", "polars-lazy?/strings", "polars-ops/strings"]

# support for ObjectChunked<T> (downcastable Series of any type)
object = ["polars-core/object", "polars-lazy?/object", "polars-io/object"]

# support for arrows json parsing
json = ["polars-io", "polars-io/json", "polars-lazy?/json", "polars-sql?/json", "dtype-struct"]

# support for arrows ipc file parsing
ipc = ["polars-io", "polars-io/ipc", "polars-lazy?/ipc", "polars-sql?/ipc"]

# support for arrows streaming ipc file parsing
ipc_streaming = ["polars-io", "polars-io/ipc_streaming", "polars-lazy?/ipc"]

# support for apache avro file parsing
avro = ["polars-io", "polars-io/avro"]

# support for arrows csv file parsing
csv = ["polars-io", "polars-io/csv", "polars-lazy?/csv", "polars-sql?/csv"]

# slower builds
performant = [
  "polars-core/performant",
  "chunked_ids",
  "dtype-u8",
  "dtype-u16",
  "dtype-struct",
  "cse",
  "polars-ops/performant",
  "streaming",
  "fused",
]

# Dataframe formatting.
fmt = ["polars-core/fmt"]
fmt_no_tty = ["polars-core/fmt_no_tty"]

# sort by multiple columns
sort_multiple = ["polars-core/sort_multiple"]

# extra operations
approx_unique = ["polars-lazy?/approx_unique", "polars-ops/approx_unique"]
is_in = ["polars-lazy?/is_in"]
zip_with = ["polars-core/zip_with", "polars-ops/zip_with"]
round_series = ["polars-core/round_series", "polars-lazy?/round_series", "polars-ops/round_series"]
checked_arithmetic = ["polars-core/checked_arithmetic"]
repeat_by = ["polars-ops/repeat_by", "polars-lazy?/repeat_by"]
is_first_distinct = ["polars-lazy?/is_first_distinct", "polars-ops/is_first_distinct"]
is_last_distinct = ["polars-lazy?/is_last_distinct", "polars-ops/is_last_distinct"]
is_unique = ["polars-lazy?/is_unique", "polars-ops/is_unique"]
asof_join = ["polars-core/asof_join", "polars-lazy?/asof_join", "polars-ops/asof_join"]
cross_join = ["polars-lazy?/cross_join", "polars-ops/cross_join"]
dot_product = ["polars-core/dot_product"]
concat_str = ["polars-lazy?/concat_str"]
row_hash = ["polars-core/row_hash", "polars-lazy?/row_hash"]
reinterpret = ["polars-core/reinterpret"]
decompress = ["polars-io/decompress"]
decompress-fast = ["polars-io/decompress-fast"]
mode = ["polars-ops/mode", "polars-lazy?/mode"]
take_opt_iter = ["polars-core/take_opt_iter"]
extract_jsonpath = [
  "polars-core/strings",
  "polars-ops/extract_jsonpath",
  "polars-ops/strings",
  "polars-lazy?/extract_jsonpath",
]
string_encoding = ["polars-ops/string_encoding", "polars-core/strings"]
binary_encoding = ["polars-ops/binary_encoding"]
group_by_list = ["polars-core/group_by_list", "polars-ops/group_by_list"]
lazy_regex = ["polars-lazy?/regex"]
cum_agg = ["polars-ops/cum_agg", "polars-lazy?/cum_agg"]
rolling_window = ["polars-core/rolling_window", "polars-lazy?/rolling_window", "polars-time/rolling_window"]
interpolate = ["polars-ops/interpolate", "polars-lazy?/interpolate"]
rank = ["polars-lazy?/rank", "polars-ops/rank"]
diff = ["polars-core/diff", "polars-lazy?/diff", "polars-ops/diff"]
pct_change = ["polars-ops/pct_change", "polars-lazy?/pct_change"]
moment = ["polars-core/moment", "polars-lazy?/moment", "polars-ops/moment"]
range = ["polars-lazy?/range"]
true_div = ["polars-lazy?/true_div"]
diagonal_concat = ["polars-core/diagonal_concat", "polars-lazy?/diagonal_concat", "polars-sql?/diagonal_concat"]
horizontal_concat = ["polars-core/horizontal_concat"]
abs = ["polars-core/abs", "polars-lazy?/abs"]
dynamic_group_by = ["polars-core/dynamic_group_by", "polars-lazy?/dynamic_group_by"]
ewma = ["polars-core/ewma", "polars-lazy?/ewma"]
dot_diagram = ["polars-lazy?/dot_diagram"]
dataframe_arithmetic = ["polars-core/dataframe_arithmetic"]
product = ["polars-core/product"]
unique_counts = ["polars-core/unique_counts", "polars-lazy?/unique_counts"]
log = ["polars-ops/log", "polars-lazy?/log"]
partition_by = ["polars-core/partition_by"]
semi_anti_join = ["polars-lazy?/semi_anti_join", "polars-ops/semi_anti_join", "polars-sql?/semi_anti_join"]
list_eval = ["polars-lazy?/list_eval"]
cumulative_eval = ["polars-lazy?/cumulative_eval"]
chunked_ids = ["polars-lazy?/chunked_ids", "polars-core/chunked_ids", "polars-ops/chunked_ids"]
to_dummies = ["polars-ops/to_dummies"]
bigidx = ["polars-core/bigidx", "polars-lazy?/bigidx", "polars-ops/big_idx"]
list_to_struct = ["polars-ops/list_to_struct", "polars-lazy?/list_to_struct"]
list_count = ["polars-ops/list_count", "polars-lazy?/list_count"]
list_take = ["polars-ops/list_take", "polars-lazy?/list_take"]
describe = ["polars-core/describe"]
timezones = ["polars-core/timezones", "polars-lazy?/timezones", "polars-io/timezones"]
string_justify = ["polars-lazy?/string_justify", "polars-ops/string_justify"]
string_from_radix = ["polars-lazy?/string_from_radix", "polars-ops/string_from_radix"]
arg_where = ["polars-lazy?/arg_where"]
search_sorted = ["polars-lazy?/search_sorted"]
merge_sorted = ["polars-lazy?/merge_sorted"]
meta = ["polars-lazy?/meta"]
date_offset = ["polars-lazy?/date_offset"]
trigonometry = ["polars-lazy?/trigonometry"]
sign = ["polars-lazy?/sign"]
pivot = ["polars-lazy?/pivot"]
top_k = ["polars-lazy?/top_k"]
algo = ["polars-algo"]
cse = ["polars-lazy?/cse"]
propagate_nans = ["polars-lazy?/propagate_nans"]
coalesce = ["polars-lazy?/coalesce"]
streaming = ["polars-lazy?/streaming"]
fused = ["polars-ops/fused", "polars-lazy?/fused"]
list_sets = ["polars-lazy?/list_sets"]
list_any_all = ["polars-lazy?/list_any_all"]
list_drop_nulls = ["polars-lazy?/list_drop_nulls"]
cutqcut = ["polars-lazy?/cutqcut"]
rle = ["polars-lazy?/rle"]
extract_groups = ["polars-lazy?/extract_groups"]
peaks = ["polars-lazy/peaks"]

test = [
  "lazy",
  "rolling_window",
  "rank",
  "round_series",
  "csv",
  "dtype-categorical",
  "cum_agg",
  "fmt",
  "diff",
  "abs",
  "parquet",
  "ipc",
  "ipc_streaming",
  "json",
]

# all opt-in datatypes
dtype-full = [
  "dtype-date",
  "dtype-datetime",
  "dtype-duration",
  "dtype-time",
  "dtype-array",
  "dtype-i8",
  "dtype-i16",
  "dtype-decimal",
  "dtype-u8",
  "dtype-u16",
  "dtype-categorical",
  "dtype-struct",
]

# sensible minimal set of opt-in datatypes
dtype-slim = [
  "dtype-date",
  "dtype-datetime",
  "dtype-duration",
]

# opt-in datatypes for Series
dtype-date = [
  "polars-core/dtype-date",
  "polars-lazy?/dtype-date",
  "polars-io/dtype-date",
  "polars-time?/dtype-date",
  "polars-core/dtype-date",
  "polars-ops/dtype-date",
]
dtype-datetime = [
  "polars-core/dtype-datetime",
  "polars-lazy?/dtype-datetime",
  "polars-io/dtype-datetime",
  "polars-time?/dtype-datetime",
  "polars-ops/dtype-datetime",
]
dtype-duration = [
  "polars-core/dtype-duration",
  "polars-lazy?/dtype-duration",
  "polars-time?/dtype-duration",
  "polars-core/dtype-duration",
  "polars-ops/dtype-duration",
]
dtype-time = ["polars-core/dtype-time", "polars-io/dtype-time", "polars-time?/dtype-time", "polars-ops/dtype-time"]
dtype-array = [
  "polars-core/dtype-array",
  "polars-lazy?/dtype-array",
  "polars-ops/dtype-array",
]
dtype-i8 = ["polars-core/dtype-i8", "polars-lazy?/dtype-i8", "polars-ops/dtype-i8"]
dtype-i16 = ["polars-core/dtype-i16", "polars-lazy?/dtype-i16", "polars-ops/dtype-i16"]
dtype-decimal = [
  "polars-core/dtype-decimal",
  "polars-lazy?/dtype-decimal",
  "polars-ops/dtype-decimal",
  "polars-io/dtype-decimal",
]
dtype-u8 = ["polars-core/dtype-u8", "polars-lazy?/dtype-u8", "polars-ops/dtype-u8"]
dtype-u16 = ["polars-core/dtype-u16", "polars-lazy?/dtype-u16", "polars-ops/dtype-u16"]
dtype-categorical = [
  "polars-core/dtype-categorical",
  "polars-io/dtype-categorical",
  "polars-lazy?/dtype-categorical",
  "polars-ops/dtype-categorical",
]
dtype-struct = [
  "polars-core/dtype-struct",
  "polars-lazy?/dtype-struct",
  "polars-ops/dtype-struct",
  "polars-io/dtype-struct",
]

docs-selection = [
  "csv",
  "json",
  "parquet",
  "ipc",
  "ipc_streaming",
  "dtype-full",
  "is_in",
  "rows",
  "docs",
  "strings",
  "object",
  "lazy",
  "temporal",
  "random",
  "zip_with",
  "round_series",
  "checked_arithmetic",
  "ndarray",
  "repeat_by",
  "is_first_distinct",
  "is_last_distinct",
  "asof_join",
  "cross_join",
  "concat_str",
  "string_from_radix",
  "decompress",
  "mode",
  "take_opt_iter",
  "cum_agg",
  "rolling_window",
  "interpolate",
  "diff",
  "rank",
  "range",
  "diagonal_concat",
  "horizontal_concat",
  "abs",
  "dot_diagram",
  "string_encoding",
  "product",
  "to_dummies",
  "describe",
  "list_eval",
  "cumulative_eval",
  "timezones",
  "arg_where",
  "propagate_nans",
  "coalesce",
  "dynamic_group_by",
  "extract_groups",
]

bench = [
  "lazy",
]

[package.metadata.docs.rs]
# all-features = true
features = ["docs-selection"]
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]
