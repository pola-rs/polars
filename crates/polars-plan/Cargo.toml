[package]
name = "polars-plan"
version = { workspace = true }
authors = { workspace = true }
edition = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
description = "Lazy query engine for the Polars DataFrame library"

[lib]
doctest = false

[dependencies]
polars-arrow = { version = "0.31.1", path = "../polars-arrow" }
polars-core = { version = "0.31.1", path = "../polars-core", features = ["lazy", "zip_with", "random"], default-features = false }
polars-io = { version = "0.31.1", path = "../polars-io", features = ["lazy", "csv"], default-features = false }
polars-ops = { version = "0.31.1", path = "../polars-ops", default-features = false }
polars-time = { version = "0.31.1", path = "../polars-time", optional = true }
polars-utils = { version = "0.31.1", path = "../polars-utils" }

ahash = { workspace = true }
arrow = { workspace = true }
chrono = { workspace = true, optional = true }
chrono-tz = { workspace = true, optional = true }
ciborium = { workspace = true, optional = true }
futures = { workspace = true, optional = true }
once_cell = { workspace = true }
pyo3 = { workspace = true, optional = true }
rayon = { workspace = true }
regex = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive", "rc"], optional = true }
smartstring = { workspace = true }
strum_macros = { workspace = true }

[build-dependencies]
version_check = { workspace = true }

[features]
# debugging utility
debugging = []
python = ["pyo3", "ciborium"]
# make sure we don't compile unneeded things even though
# this dependency gets activated
compile = []
default = ["compile"]
streaming = []
parquet = ["polars-core/parquet", "polars-io/parquet"]
async = []
ipc = ["polars-io/ipc"]
json = ["polars-io/json"]
csv = ["polars-io/csv"]
temporal = ["polars-core/temporal", "dtype-date", "dtype-datetime", "dtype-time"]
# debugging purposes
fmt = ["polars-core/fmt"]
strings = ["polars-core/strings", "polars-ops/strings"]
future = []
dtype-u8 = ["polars-core/dtype-u8"]
dtype-u16 = ["polars-core/dtype-u16"]
dtype-i8 = ["polars-core/dtype-i8"]
dtype-i16 = ["polars-core/dtype-i16"]
dtype-decimal = ["polars-core/dtype-decimal"]
dtype-date = ["polars-core/dtype-date", "polars-time/dtype-date", "temporal"]
dtype-datetime = ["polars-core/dtype-datetime", "polars-time/dtype-datetime", "temporal"]
dtype-duration = ["polars-core/dtype-duration", "polars-time/dtype-duration", "temporal"]
dtype-time = ["polars-core/dtype-time", "polars-time/dtype-time"]
dtype-array = ["polars-core/dtype-array"]
dtype-categorical = ["polars-core/dtype-categorical"]
dtype-struct = ["polars-core/dtype-struct"]
object = ["polars-core/object"]
date_offset = ["polars-time", "chrono"]
list_take = ["polars-ops/list_take"]
list_count = ["polars-ops/list_count"]
trigonometry = []
sign = []
timezones = ["chrono-tz", "polars-time/timezones", "polars-core/timezones", "regex"]
binary_encoding = ["polars-ops/binary_encoding"]
true_div = []
nightly = ["polars-utils/nightly", "polars-ops/nightly"]
extract_jsonpath = []

# operations
approx_unique = ["polars-ops/approx_unique"]
is_in = ["polars-core/is_in"]
repeat_by = ["polars-core/repeat_by"]
round_series = ["polars-core/round_series"]
is_first = ["polars-core/is_first", "polars-ops/is_first"]
is_unique = ["polars-ops/is_unique"]
cross_join = ["polars-core/cross_join"]
asof_join = ["polars-core/asof_join", "polars-time", "polars-ops/asof_join"]
concat_str = ["polars-core/concat_str"]
range = []
mode = ["polars-core/mode"]
cum_agg = ["polars-core/cum_agg"]
interpolate = ["polars-ops/interpolate"]
rolling_window = [
  "polars-core/rolling_window",
  "polars-time/rolling_window",
  "polars-ops/rolling_window",
  "polars-time/rolling_window",
]
rank = ["polars-core/rank"]
diff = ["polars-core/diff", "polars-ops/diff"]
pct_change = ["polars-core/pct_change"]
moment = ["polars-core/moment"]
abs = ["polars-core/abs"]
random = ["polars-core/random"]
dynamic_groupby = ["polars-core/dynamic_groupby"]
ewma = ["polars-core/ewma"]
dot_diagram = []
unique_counts = ["polars-core/unique_counts"]
log = ["polars-ops/log"]
chunked_ids = ["polars-core/chunked_ids"]
list_to_struct = ["polars-ops/list_to_struct"]
row_hash = ["polars-core/row_hash", "polars-ops/hash"]
string_justify = ["polars-ops/string_justify"]
string_from_radix = ["polars-ops/string_from_radix"]
arg_where = []
search_sorted = ["polars-ops/search_sorted"]
merge_sorted = ["polars-ops/merge_sorted"]
meta = []
pivot = ["polars-core/rows", "polars-ops/pivot"]
top_k = ["polars-ops/top_k"]
semi_anti_join = ["polars-core/semi_anti_join", "polars-ops/semi_anti_join"]
cse = []
propagate_nans = ["polars-ops/propagate_nans"]
coalesce = []
fused = []
list_sets = ["polars-ops/list_sets"]
list_any_all = ["polars-ops/list_any_all"]
cutqcut = ["polars-ops/cutqcut"]
rle = ["polars-ops/rle"]
extract_groups = ["regex", "dtype-struct", "polars-ops/extract_groups"]

bigidx = ["polars-arrow/bigidx", "polars-core/bigidx", "polars-utils/bigidx"]

panic_on_schema = []

[package.metadata.docs.rs]
all-features = true
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]
