name: nodejs-polars

on:
  push:
     # Sequence of patterns matched against refs/tags
    tags:
      - 'nodejs-polars-v*' # Push events to matching nodejs-polars-v*, i.e. nodejs-polars-v1.0, nodejs-polars-v20.15.10
jobs:
  build-js:
    defaults:
      run:
        working-directory: nodejs-polars
    strategy:
      fail-fast: false
      matrix:
        settings:
          # MAC
          ######

          - host: macos-latest
            target: 'x86_64-apple-darwin'
            architecture: x64
            build: |
              yarn build
              strip -x polars/*.node

          - host: macos-latest
            target: "aarch64-apple-darwin"
            architecture: x64
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x polars/*.node

            # Windows
            ##########

          - host: windows-latest
            architecture: x64
            target: "x86_64-pc-windows-msvc"
            build: yarn build

          - host: windows-latest
            target: "i686-pc-windows-msvc"
            architecture: x86
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=128;
              export CARGO_PROFILE_RELEASE_LTO=false
              npm run build -- --target i686-pc-windows-msvc

          # py & rust versions dont support this, so dropping it 
          # - host: windows-latest
          #   architecture: x64
          #   target: "aarch64-pc-windows-msvc"
          #   build: yarn build --target aarch64-pc-windows-msvc

            # Linux
            ########

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            architecture: x64
            docker: |
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v "$GITHUB_WORKSPACE:/build" -w /build/nodejs-polars builder yarn build && strip polars/*.node

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            architecture: x64
            docker: |
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v "$GITHUB_WORKSPACE:/build" -w /build/nodejs-polars builder yarn build && strip polars/*.node

          - host: ubuntu-latest
            architecture: x64
            target: aarch64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu -y
            build: |
              yarn build --target=aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip polars/*.node
          - host: ubuntu-latest
            architecture: x64
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              yarn build --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip polars/*.node

          - host: ubuntu-latest
            target: "aarch64-linux-android"
            architecture: x64
            build: |
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              export PATH="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"
              yarn build --target aarch64-linux-android
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-strip polars/*.node

          - host: ubuntu-latest
            architecture: x64
            target: aarch64-unknown-linux-musl
            downloadTarget: aarch64-unknown-linux-musl
            docker: |
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v "$GITHUB_WORKSPACE:/build" -w /build/nodejs-polars builder sh -c "rustup toolchain install $(cat ./rust-toolchain) && rustup target add aarch64-unknown-linux-musl && yarn build --target=aarch64-unknown-linux-musl && /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip polars/*.node"

    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          architecture: ${{ matrix.settings.architecture }}
          cache: yarn
          cache-dependency-path: nodejs-polars/yarn.lock
      - name: Copy rust-toolchain to root
        run: cp rust-toolchain ..
      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@16-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@16-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}

      - name: "Setup toolchain"
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}

      - name: "Install dependencies"
        run: yarn install
        if: ${{ matrix.settings.target != 'i686-pc-windows-msvc' }}

      - name: "Install dependencies"
        run: npm install
        if: ${{ matrix.settings.target == 'i686-pc-windows-msvc' }}

      - name: "Build"
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: nodejs-polars/polars/*.node
          name: bindings-${{ matrix.settings.target }}
          if-no-files-found: error

  test-macos:
    defaults:
      run:
        working-directory: nodejs-polars
    needs:
      - build-js
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-x86_64-apple-darwin
          path: nodejs-polars
      - name: Run test
        run: yarn test

  publish:
    name: Publish
    needs:
      - test-macos
    defaults:
      run:
        working-directory: nodejs-polars
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
          cache: yarn
          cache-dependency-path: nodejs-polars/yarn.lock

      - name: "Install dependencies"
        run: yarn install

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: nodejs-polars/artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: Build TypeScript
        run: yarn build:ts

      - name: List artifacts
        run: ls -R npm
        shell: bash

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
