rd_("CbReturn whether two datatype expressions are equal.0kHuggingFace00AjContains the success value0000BgGet the scan source at specific address0BjGet the <code>dt::DateLikeNameSpace</code>0DcCompare <code>Expr</code> with other <code>Expr</code> on equality.BcEquality for two <code>Arc</code>s.01CaFree any resources which are no longer necessary.Dd\xe2\x80\x98Greater than or equal to\xe2\x80\x99 comparison for two <code>Arc</code>s.0AhGreater than comparison.CbCheck if <code>Expr</code> &gt; <code>Expr</code>.CbGreater-than comparison for two <code>Arc</code>s.CcCreate a boolean mask by checking if self &gt; rhs.0313002DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int8</code>0CnTurn the <code>ScanSources</code> into some kind of identifier0Da\xe2\x80\x98Less than or equal to\xe2\x80\x99 comparison for two <code>Arc</code>s.0AeLess than comparison.CbCheck if <code>Expr</code> &lt; <code>Expr</code>.BoLess-than comparison for two <code>Arc</code>s.CcCreate a boolean mask by checking if self &lt; rhs.0313002BeInequality for two <code>Arc</code>s.0C`The expressions you want to join both tables on.0AkBitwise \xe2\x80\x9cor\xe2\x80\x9d operation.0kConstant Pi0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt8</code>0BiSynce the file contents and the metadata.0CjKeep any of the unique rows This allows more optimizations00CnA thread-safe reference-counting pointer. \xe2\x80\x98Arc\xe2\x80\x99 stands \xe2\x80\xa60CjA dynamically inferred literal value. This needs to be \xe2\x80\xa6BhAn abstract implementation for writable.01AhContains the error value0000AeGoogle cloud platform00AkA low-level trait for keys.lLZ4 (framed)0BdA nested type that is represented as000Afmaximum value in array00Afminimal value in array00Ajreplace with the value one00CaConvert numerical values to their absolute value.CdConvert all values to their absolute/positive value.0AgGroup by and aggregate.0AdSelects all columns.BjGet a flags value with all known bits set.CnReturns whether all values in the array are <code>true</code>.CoReturns whether all values in the column are <code>true</code>.2222221213CjEvaluate whether all boolean values are true for every \xe2\x80\xa613343AlBitwise \xe2\x80\x9cand\xe2\x80\x9d operation.0DfReturns whether any of the values in the column are <code>true</code>.000ChEvaluate whether any boolean value is true for every \xe2\x80\xa61BkGet the <code>array::ArrayNameSpace</code>.0DjFind the mean of all the values in the column named <code>name</code>. \xe2\x80\xa600BjGet the <code>CategoricalNameSpace</code>.EfUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Categorical</code> or \xe2\x80\xa601BeComparison for two <code>Arc</code>s.0CbCreate a Column Expression based on a column name.00BjCompute the cosine of the given expressionBmCompute the cotangent of the given expressionBkCompute the covariance between two columns.0C`Functionality for reading and writing CSV files.BoBin continuous values into discrete categories.CiExtract day from underlying NaiveDate representation. \xe2\x80\xa60CmExtract day from underlying NaiveDateTime representation. \xe2\x80\xa6000BaGet the month of a Date/Datetime.01CfCompute the dot/inner product between two expressions.0BjDomain specific language for the Lazy API.CjCalculate the exponential of all elements in the input \xe2\x80\xa6DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Float32</code>0DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Float64</code>0AlThe function implementation.000BfGet items in every sub-array by index.BdGet items in every sublist by index.DiGet a single value from this <code>ChunkedArray</code>. If the return \xe2\x80\xa6BbTake the values by a single index.CkGet a single value by index. Don\xe2\x80\x99t use this operation \xe2\x80\xa60BgGet the scan source at specific addressCmGet a row in the <code>DataFrame</code>. Beware this is slow.40226531BlGets a mutable pointer to the wrapped value.CjGet a reference to the key from the given memory location.CnFinds the value corresponding to a key with the given hash \xe2\x80\xa6AeSelect the join type.0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int16</code>0BcUnpack to <code>ChunkedArray</code>0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int64</code>0BiReturn the number of rows in the context.AeGet length of series.CaReturns the number of categories in this mapping.BeCompute the length of every subarray.BkReturn the number of elements in each list.BbGet the length of the ChunkedArray4034521oShared library.0DiCreate a Literal Expression from <code>L</code>. A literal expression \xe2\x80\xa6AcLiteral expression.01BfCompute the logarithm to a given base.CfApply a function/closure once the logical plan get \xe2\x80\xa6CkDefine an alias by mapping a function over the original \xe2\x80\xa61011C`Creates a read-only memory map backed by a file.DkFind the maximum of all the values in the column named <code>name</code>\xe2\x80\xa6CcCompute the maximum of the items in every subarray.CbAggregate all the columns as their maximum values.CbCompute the maximum of the items in every sublist.ClReturns the maximum value in the array, according to the \xe2\x80\xa60AoReduce groups to maximum value.BoTry to get the maximum value for this datatype.CnAggregate grouped series and compute the maximum value per \xe2\x80\xa633103764275DkFind the minimum of all the values in the column named <code>name</code>\xe2\x80\xa6CcCompute the minimum of the items in every subarray.CbAggregate all the columns as their minimum values.CbCompute the minimum of the items in every sublist.AoReduce groups to minimal value.BoTry to get the minimum value for this datatype.CnAggregate grouped series and compute the minimal value per \xe2\x80\xa6ClReturns the minimum value in the array, according to the \xe2\x80\xa6210764375DgCompare <code>Expr</code> with other <code>Expr</code> on non-equality.0CcCreate a new instance of the <code>SerReader</code>AnInitialize by name and values.ChCreates a new Categories object with the given name, \xe2\x80\xa6CgCreates a new FrozenCategories object (or returns a \xe2\x80\xa6EgCreate the <code>JoinBuilder</code> with the provided <code>LazyFrame</code> as the \xe2\x80\xa6CkCreate a new CsvReader from a file/stream using default \xe2\x80\xa6BoCreate a new integer size <code>Duration</code>EcCreate a new <code>JsonWriter</code> writing to <code>buffer</code> with format \xe2\x80\xa6BoCreate a new JsonLineReader from a file/ streamDmCreate a new <code>ParquetReader</code> from an existing <code>Reader</code>.AcCreate a new writerBkConstructs a new <code>Arc&lt;T&gt;</code>.BfReturns a new <code>StructArray</code>CdCreate <code>SortOptions</code> with default values.ClCreate <code>SortMultipleOptions</code> with default values.FhConstruct a new <code>DatetimeArgs</code> set to <code>year</code>, <code>month</code>, <code>day</code>EfCreate a new <code>DurationArgs</code> with all fields set to <code>lit(0)</code>. \xe2\x80\xa6BaCreates a new <code>Field</code>.0BkCreate a DataFrame from a Vector of Series.B`Create a new UserDefinedFunctionDoConstruct a new <code>Series</code> from a collection of <code>AnyValue</code>.CkConstructs a new BlockingCloudWriter from a path and an \xe2\x80\xa6Aecreate a new iterator0BbCreate a new BinViewChunkedBuilderAnInitialize by name and values.=7C`Create a new <code>TrustMyLength</code> iterator33<;2ChCreates a new Categories object with the given name, \xe2\x80\xa6CgCreates a new FrozenCategories object (or returns a \xe2\x80\xa6:97CcCreate a new instance of the <code>SerReader</code>07CkCreate a new CsvReader from a file/stream using default \xe2\x80\xa6EcCreate a new <code>JsonWriter</code> writing to <code>buffer</code> with format \xe2\x80\xa6DmCreate a new <code>ParquetReader</code> from an existing <code>Reader</code>.AcCreate a new writerBoCreate a new JsonLineReader from a file/ streamBfReturns a new <code>StructArray</code>BjConstructs a new <code>ColumnStats</code>.BoCreate a new integer size <code>Duration</code>FhConstruct a new <code>DatetimeArgs</code> set to <code>year</code>, <code>month</code>, <code>day</code>EfCreate a new <code>DurationArgs</code> with all fields set to <code>lit(0)</code>. \xe2\x80\xa6B`Create a new UserDefinedFunctionEgCreate the <code>JoinBuilder</code> with the provided <code>LazyFrame</code> as the \xe2\x80\xa6AhCreate a new SQLContext.5fSafetyDgConstructs a new instance of <code>SyncUnsafeCell</code> which will \xe2\x80\xa6CkCreates a new hash partitioner with the given number of \xe2\x80\xa6BdCreates a new <code>RawTable</code>.AiNegates a boolean column.DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6AiNegate <code>Expr</code>.1111111201121AjNth column in a DataFrame.0CcTraits for miscellaneous operations on ChunkedArray0GaConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>\xe2\x80\xa60EhRemoves the last <code>Series</code> from the <code>DataFrame</code> and returns it, \xe2\x80\xa60ChPop latest expression and return the input(s) of the \xe2\x80\xa6CcRaise expression to the power <code>exponent</code>0BgThe low-level raw table implementation.BlGet the lengths of runs of identical values.00DhSet the values where the mask evaluates to <code>true</code> to some \xe2\x80\xa6GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa6000010001000BhCompute the sine of the given expressionBoCompute the std of the items in every subarray.CiAggregate all the columns as their standard deviation \xe2\x80\xa6CkCompute the standard deviation of this ChunkedArray/Series.0BoStandard deviation of the values of the Series.ChReturns the std value in the array Returns an option \xe2\x80\xa60DdAggregate grouped <code>Series</code> and determine the standard \xe2\x80\xa63011524BlGet the <code>string::StringNameSpace</code>DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::String</code>01CeThe intersection of a source flags value with the \xe2\x80\xa60000000000DkSum all the values in the column named <code>name</code>. Shorthand for \xe2\x80\xa6BoCompute the sum of the items in every subarray.BnAggregate all the columns as their sum values.BkCompute the sum the items in every sublist.DkAggregate the sum of the ChunkedArray. Returns <code>None</code> if not \xe2\x80\xa60BkReduce groups to the sum of all the values.CgAggregate grouped series and compute the sum per group.CiCompute the sum of all values in this Series. Returns \xe2\x80\xa6310764275BkCompute the tangent of the given expressionDjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt16</code>0DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt32</code>0DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt64</code>0BoCompute the var of the items in every subarray.CcAggregate all the columns as their variance values.CaCompute the variance of this ChunkedArray/Series.0BeVariance of the values of the Series.ChReturns the var value in the array Returns an option \xe2\x80\xa60DhAggregate grouped <code>Series</code> and determine the variance per \xe2\x80\xa63011524AlBitwise \xe2\x80\x9cxor\xe2\x80\x9d operation.0CjAutomatically determine over which unit to parallelize \xe2\x80\xa60AlSync only the file contents.0CjA 32-bit date representing the elapsed time since UNIX \xe2\x80\xa6000000jdrop nulls0CgEnum keys are not remapped, but we still track this \xe2\x80\xa60DiEvaluates the <code>evaluation</code> expression on the output of the \xe2\x80\xa60CaExpressions that can be used in various contexts.0AhAn 8-bit integer number.AbAn <code>i8</code>101010CoJoin the groups as \xe2\x80\x98List&lt;group_dtype&gt;\xe2\x80\x99 to the row \xe2\x80\xa6nJoin operation10CkA single JSON array containing each DataFrame row as an \xe2\x80\xa60AiKeep the last unique row.00AoA value of type <code>L</code>.Af<code>list.eval</code>ClNested type, contains arrays that are filled with one of \xe2\x80\xa6BnA nested list with a variable size in each rowCfA list of some logical data type whose offsets are \xe2\x80\xa62102102103Acmean value of array00BnA handle to an immutable memory mapped buffer.iNo value.AcDon\xe2\x80\x99t parallelizenFlat datatypesAmKeep None of the unique rows.AdFor testing purposesAkDon\xe2\x80\x99t call sync on close.52521430A`The literal NulliNull type0001ClExplode the aggregated list and just do a hstack instead \xe2\x80\xa60BbSome value of type <code>T</code>.00nSort the table0DcUtility struct for the <code>when-then-otherwise</code> expression.00CnA 64-bit time representing the elapsed time since midnight \xe2\x80\xa6000000nUtf8 encoding.ClA variable-length UTF-8 encoded string whose offsets are \xe2\x80\xa60CkStores the Utf8 fields and the total string length seen \xe2\x80\xa61120444dZSTD0Akreplace with the value zero00AnGet the underlying bits value.0000000000DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Boolean</code>0Cccreates a logical expression with a call of the UDF0D`Casts the column given by <code>Expr</code> to a different type.CjCast named frame columns, resulting in a new LazyFrame \xe2\x80\xa6CiCast a <code>ChunkedArray</code> to <code>DataType</code>0BeCast expression to another data type.BgImplementations of the ChunkCast Trait.024143EfUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Categorical</code> or \xe2\x80\xa60BmCompute the cube root of the given expression0CgCeil underlying floating point array to the highest \xe2\x80\xa6000CmCopy pasted from std::cell::SyncUnsafeCell can be removed \xe2\x80\xa6CkSet values outside the given boundaries to the boundary \xe2\x80\xa6BiClip underlying values to a set boundary.01B`Select multiple columns by name.00CeCompute the hyperbolic cosine of the given expressionDhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Date</code>BhGet the (local) date of a Date/Datetime.0BmExtract the days from a <code>Duration</code>00AcDiff every sublist.CfCalculate the n-th discrete difference between values.10ChRemoves columns from the DataFrame. Note that it\xe2\x80\x99s \xe2\x80\xa6AkDrops the <code>Arc</code>.CiDrop a column by name. This is a pure method and will \xe2\x80\xa6102CeReturn the index position of a regular expression \xe2\x80\xa60CfFind the index of a substring defined by a regular \xe2\x80\xa6C`This call is quite expensive, cache the results.AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EaAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.EnConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> \xe2\x80\xa62CnConverts an atomically reference-counted string slice into \xe2\x80\xa6CjCreates an atomically reference-counted pointer from a \xe2\x80\xa6DjAllocates a reference-counted slice and moves <code>v</code>\xe2\x80\x99s items \xe2\x80\xa6CkMove a boxed object to a new, reference-counted allocation.5DlConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the \xe2\x80\xa6CjCopies the string into a newly allocated Arc&lt;OsStr&gt;.7CgAllocates a reference-counted slice and fills it by \xe2\x80\xa60DcConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.CkConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>EmConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6FbConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6EnConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> \xe2\x80\xa6FdConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into \xe2\x80\xanCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000BjCreate a ChunkedArray with a single value.00BeExpand path given via globbing rules.CbList files with a prefix derived from the pattern.01CnA stable hash of this Categories object, not the contained \xe2\x80\xa6B`A stable hash of the categories.10BbCompute the hash of every element.AnGet the head of every subarrayBaReturn first n rows of each groupAmGet the head of every sublistBmGet the head of the <code>ChunkedArray</code>CiGet the first <code>n</code> elements of the Expr result.BkGet the head of the <code>DataFrame</code>.AkGet the head of the Series.CjFetch the metadata of the parquet file, do not memoize it.4210753CnTake the first <code>n</code> characters of the string values.7BcCompute the histogram of a dataset.CnExtract hour from underlying NaiveDateTime representation. \xe2\x80\xa600000BbGet the hour of a Datetime/Time64.101DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int128</code>0C`Initialize the key in the given memory location.BaCalls <code>U::from(self)</codefYield a set of contained flags values.DfReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>1CaIterator over the columns as <code>Series</code>.2Cjiterate over <code>Series</code> as <code>AnyValue</code>.33EbReturns an iterator of <code>Option&lt;&amp;T&gt;</code> over every element of \xe2\x80\xa64440213444CnJoin all string items in a sub-array and place a separator \xe2\x80\xa6BhGeneric function to join two LazyFrames.ClJoin all string items in a sublist and place a separator \xe2\x80\xa6ChGeneric join method. Can be used to join on multiple \xe2\x80\xa631BfConcat the values into a string array.31Ai(De)serialize JSON files.AkKeep the original root name0AkLast column in a DataFrame.AaGet the last row.AoGet last item of every sublist.B`Get the last value in the group.DhGet the last element of the <code>Series</code> as a <code>Scalar</code>0DgAggregate grouped <code>Series</code> and return the last value per \xe2\x80\xa60115324D`Convert the <code>DataFrame</code> into a <code>LazyFrame</code>AdPolars Lazy cookbookBhGet the <code>list::ListNameSpace</code>CaUnpack to <code>ChunkedArray</code> of dtype list01CkLock the whole memory map into RAM. Only supported on Unix.DjFind the mean of all the values in the column named <code>name</code>. \xe2\x80\xa6C`Compute the mean of the items in every subarray.BoAggregate all the columns as their mean values.DiCompute the mean of every sublist and return a <code>Series</code> of \xe2\x80\xa6DiReturns the mean value in the array. Returns <code>None</code> if the \xe2\x80\xa60B`Reduce groups to the mean value.CiReturns the mean value in the array Returns an option \xe2\x80\xa60ChAggregate grouped series and compute the mean per group.3011764275BhGet the <code>meta::MetaNameSpace</code>ChCompute the mode(s) of this column. This is the most \xe2\x80\xa60oName of series.BcThe name of this Categories object.BfName of the <code>ChunkedArray</code>.BlGet the <code>name::ExprNameNameSpace</code>CcReturns a reference to the <code>Field</code> name.hIts namednamekOutput name17256307411AaOverflow BehaviorDhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Null</code>AjNull value representation.10CmApply window function over a subgroup. This is similar to \xe2\x80\xa60CmPipe different functions/ closure operations that work on \xe2\x80\xa60CbPush an item into the <code>FixedRingBuffer</code>CkBin continuous values into discrete categories based on \xe2\x80\xa6CfAssign ranks to data, dealing with ties appropriately.0BdFunctionality for reading CSV files.BoFunctionality for reading Apache Parquet files.CmCreates a DataFrame from the supplied function &amp; scan \xe2\x80\xa60BhCompute the sign of the given expressionCcCompute the hyperbolic sine of the given expressionCfReturns the size as number of rows * number of columns0AmThe size of the key in bytes.BjCompute the sample skewness of a data set.00BlReturned a sorted <code>ChunkedArray</code>.BiAdd a sort operation to the logical plan.AcSort every sublist.2AhSort with given options.CeReturn a sorted clone of this <code>DataFrame</code>.BfSort the series with specific options.555510324BoCompute the square root of the given expression0CiSwaps inner state with the <code>array</code>. Prefer \xe2\x80\xa60AnGet the tail of every subarrayBaGet the last <code>n</code> rows.B`Return last n rows of each groupAmGet the tail of every sublistBmGet the tail of the <code>ChunkedArray</code>ChGet the last <code>n</code> elements of the Expr result.BkGet the tail of the <code>DataFrame</code>.AkGet the tail of the Series.310742CmTake the last <code>n</code> characters of the string values.76BiGather values from ChunkedArray by index.DeTake from <code>self</code> at the indexes given by <code>idx</code>.11CaTake <code>DataFrame</code> rows by index values.2122201CfCompute the hyperbolic tangent of the given expressionDcAdd a condition to the <code>when-then-otherwise</code> expression.0DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Time</code>BmGet the (local) time of a Date/Datetime/Time.0DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt128</code>CkReturns the ISO week number starting from 1. The return \xe2\x80\xa600000CmExtract the week from the underlying Date representation. \xe2\x80\xa601CdStart a <code>when-then-otherwise</code> expression.CbAttach a statement to the corresponding condition.DaAdd another condition to the <code>when-then-otherwise</code> \xe2\x80\xa62102AlThe right table in the join.0CkExtract month from underlying NaiveDate representation. \xe2\x80\xa60CkExtract month from underlying NaiveDateTime representation.0CnExtract year from underlying NaiveDateTime representation. \xe2\x80\xa60AoGet the year of a Date/Datetime01Ag<code>array.eval</code>BkA nested list with a fixed size in each row0001BgCache the input at this point in the LP0CeRun every node eagerly. This turns off multi-node \xe2\x80\xa60DaCharacterizes the name and the <code>DataType</code> of a column.000AjKeep the first unique row.00AhA 16-bit integer number.AcAn <code>i16</code>101010AhA 32-bit integer number.AcAn <code>i32</code>101010AhA 64-bit integer number.AcAn <code>i64</code>101010CmA string that indicates the start of a comment line. This \xe2\x80\xa60ChNamed functions allow for serializing arbitrary Rust \xe2\x80\xa6CiTuples that map column names to null value of that column1011ClNever quote any fields, even if it would produce invalid \xe2\x80\xa60CkError if there are extra columns outside the target schema.0AoA value of type <code>R</code>.CiGet a list literal with the dimensions of array nestings.0BjSlice is always sorted in ascending order.oSlice the table110CiToken to use for requests (passed to underlying provider)lBearer tokenBaAn unsigned 8-bit integer number.AbAn <code>u8</code>101010CkA nested datatype that can represent slots of differing \xe2\x80\xa6AfVertical concatenation1110nRename Column.0ClThe alignment necessary for the key. Must return a power \xe2\x80\xa6CbApply a closure elementwise including null values.CdApply a function over the groups as a new DataFrame.CnApply a function/closure over the groups. This should only \xe2\x80\xa6D`Apply a closure over the groups as a new <code>DataFrame</code>.ClApply a closure to a column. This is the recommended way \xe2\x80\xa6440123DdArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Array</code>0D`The bitwise or (<code>|</code>) of the bits in two flags values.0000000000CjBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.0BgCaches the result into a new LazyFrame.Cguse a cache of unique, converted dates to apply the \xe2\x80\xa601EfUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Categorical</code> or \xe2\x80\xa6000CmIf the given byte slice starts with the \xe2\x80\x9cmagic\xe2\x80\x9d bytes \xe2\x80\xa60BnMakes a clone of the <code>Arc</code> pointer.0CjCloses the writer, or returns the existing error if it \xe2\x80\xa60CiInterface with cloud storage through the object_store \xe2\x80\xa60CgReturn the number of non-null elements for each column.CmCount the values of the Series or Get counts of the group \xe2\x80\xa6CmAggregate grouped series and compute the number of values \xe2\x80\xa60CiReturns count and offset to split for remainder in slice.23BkGet data type of <code>ChunkedArray</code>.0AgGet datatype of series.0DgGet the matching <code>DataType</code> for this <code>AnyValue</code>`.CnReturns the <code>Field</code>\xe2\x80\x99s <code>ArrowDataType</code>.CgReturns a reference to the <code>Field</code> datatype.BfIts logical <code>ArrowDataType</code>5BdThis must not be a nested data type.6316642055C`Returns the <code>DataType</code> of the column.AePolars Eager cookbookAcSelects no columns.BfGet a flags value with all bits unset.0DdCreates an empty <code>DataFrame</code> usable in a compile time \xe2\x80\xa6111111021121AcCheck for equality.BoCreate a boolean mask by checking for equality.011100B`Start a window at this interval.0CjIf polars may parse matches that not contain the whole \xe2\x80\xa60AaFetch the result.0AjGet field (used in schema)000AlFirst column in a DataFrame.AbGet the first row.B`Get first item of every sublist.BaGet the first value in the group.DiGet the first element of the <code>Series</code> as a <code>Scalar</code>0DfAggregate grouped <code>Series</code> and find the first value per \xe2\x80\xa60115324CgFloor underlying floating point array to the lowest \xe2\x80\xa6000AaDataFrame module.0AlLazy variant of a DataFrame.BaGreater than or equal comparison.CcCheck if <code>Expr</code> &gt;= <code>Expr</code>.CdCreate a boolean mask by checking if self &gt;= rhs.022001BnExtract the hours from a <code>Duration</code>00Abfunction arguments000CiCheck if the values of the left expression are in the \xe2\x80\xa60BnTruncate the time column values to the window.0CeLimit the DataFrame to the first <code>n</code> rows.AmTake a view of top n elementsD`Take <code>num_elements</code> from the top as a zero copy view.0CnLimit a sort output, this is for optimization purposes and \xe2\x80\xa60000000200113CmCompute the natural logarithm of all elements plus one in \xe2\x80\xa6AmLess than or equal comparisonCcCheck if <code>Expr</code> &lt;= <code>Expr</code>.CdCreate a boolean mask by checking if self &lt;= rhs.022001CcRecursively create all the directories in the path.0CkExtract month from underlying NaiveDateTime representation.00000BaGet the month of a Date/Datetime.01CdA fast concurrent hash map, with a focus on read \xe2\x80\xa6BkParse a string into a <code>Duration</code>00ChModule containing implementation of the pivot operation.BoQueues the given command for further execution.00BfAdjust the size of the memory mapping.EfClear <code>self</code> and give <code>capacity</code>, returning the old contents \xe2\x80\xa60CgRound underlying floating point array to given decimal.CjRound underlying floating point array to given decimal \xe2\x80\xa6BkRound the Datetime/Date range into buckets.210CbGet (height, width) of the <code>DataFrame</code>.0CnShift the values by a given period and fill the parts that \xe2\x80\xa6AfShift every sub-array.1AdShift every sublist.CiShift the values in the array by some period. See the \xe2\x80\xa633332103BaGet a zero copy view of the data.AeSlice every subarray.ClSlice the DataFrame using an offset (starting row) and a \xe2\x80\xa6AdSlice every sublist.CnSlice the array. The chunks are reallocated the underlying \xe2\x80\xa6CfSlice the Series. <code>offset</code> may be negative.BeSlices this <code>StructArray</code>.C`Slice the <code>DataFrame</code> along the rows.AoTake only a slice of the result841827530AhSlice the string values.7fPanicsBoSpawns a future onto the Tokio runtime (see \xe2\x80\xa6CnSplits, but doesn\xe2\x80\x99t flatten chunks. E.g. a container can \xe2\x80\xa6CkSplit the string by a substring. The resulting dtype is \xe2\x80\xa6AaAWS_SESSION_TOKENBlReturns the <code>k</code> largest elements.D`The bitwise or (<code>|</code>) of the bits in two flags values.0000000BnReturn the SET UNION between both list arrays.111BgGet a value at a certain index location0DfGet the width of the <code>DataFrame</code> which is the number of \xe2\x80\xa60BdFunctionality for writing CSV files.CkFunctionality for reading and writing Apache Parquet files.CkPad the start of the string with zeros until it reaches \xe2\x80\xa6AjQuote every field. Always.0nArgmin/ Argmax0CkOpaque binary data of variable length whose offsets are \xe2\x80\xa6000kBucket name0DhA copy of the <code>std::slice::Chunks</code> that exposes the inner \xe2\x80\xa6nClient options00BiA column within a <code>DataFrame</code>.00DfAn <code>i32</code> representing the elapsed time since UNIX epoch \xe2\x80\xa6000DfAn <code>i64</code> representing the elapsed time since UNIX epoch \xe2\x80\xa6000AhFilter on a boolean mask0BjAdding columns to the table without a Join0lignore nulls0BoInserts full-NULL columns for the missing ones.0AiA 128-bit integer number.AdAn <code>i128</code>101010Baonly useful if periods are weekly0CmJust a wrapper structure which is useful for certain impl \xe2\x80\xa60CdCan be used to fmt and implements Any, so can be \xe2\x80\xa6DoA generic type that can be used in a <code>Series</code> &amp;\xe2\x80\x99static str \xe2\x80\xa6101010mA Path or URI0fRegionAhShared access signature.A`Time in seconds.000DjPolars\xe2\x80\x99 <code>select</code> operation, this can mean projection, but \xe2\x80\xa60fSeries00CiA single byte character that indicates the start of a \xe2\x80\xa60fSnappy0AjStatic key value metadata.0AbRaises on overflow0AkA UTF8 encoded string type.kString data101010DoA nested <code>ArrowDataType</code> with a given number of <code>Field</code>s.000CnA 32-bit time representing the elapsed time since midnight \xe2\x80\xa6000CnA 64-bit time representing the elapsed time since midnight \xe2\x80\xa6000BbAn unsigned 16-bit integer number.AcAn <code>u16</code>101010BbAn unsigned 32-bit integer number.AcAn <code>u32</code>101010BbAn unsigned 64-bit integer number.AcAn <code>u64</code>101010AkRepresents a window in timeBaPolars flavored window functions.011BoAdvise OS how this memory map will be accessed.fSafetyDkAppend in place. This is done by adding the chunks of <code>other</code>\xe2\x80\xa6ClAppend expressions. This is done by adding the chunks of \xe2\x80\xa61110AmGenerate a range of integers.00CbCompute the inverse cosine of the given expressionC`Compute the inverse sine of the given expressionCcCompute the inverse tangent of the given expressionFdGet a hold of the <code>ChunkedArray</code>, <code>Logical</code> or <code>NullChunked</code> as \xe2\x80\xa600BcProvides a raw pointer to the data.0AdAn HTTP bearer tokenBlGet the <code>binary::BinaryNameSpace</code>DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Binary</code>ChApplies a kernel that produces <code>Array</code> types.0012DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.0000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60000000000A`The bucket name.0BiCancel the query at earliest convenience.0BkSet the labels at the center of the window.0AbUnderlying chunks.AiA reference to the chunks101BeSets the <code>Field</code> datatype.0AoSelect a single column by name.0CcConcat multiple <code>LazyFrame</code>s vertically.CcConcat with the values from a second StringChunked.01D`Get the data types of the columns in the <code>DataFrame</code>.0EcCheck if <code>DataFrame</code>s are equal. Note that <code>None == None</code> \xe2\x80\xa6DbCheck if series are equal. Note that <code>None == None</code> \xe2\x80\xa610D`The bitwise or (<code>|</code>) of the bits in each flags value.CjExtend the memory backed by this array with the values \xe2\x80\xa61DkExtend the memory backed by this <code>DataFrame</code> with the values \xe2\x80\xa62122CgExtends this builder with the contents of the given \xe2\x80\xa6033231020333CdReturns the fields of this <code>StructArray</code>.DcGet a reference to the schema fields of the <code>DataFrame</code>.01CfFilter values in the ChunkedArray with a boolean mask.CcFilter by boolean mask. This operation clones data.CiApply a filter predicate, keeping the rows that match it.CdFilter frame rows that match a predicate expression.AgFilter a single column.CgTake the <code>DataFrame</code> rows by a boolean mask.54504312CaTake the SerReader and return a parsed DataFrame.nFinish builderAhGet the final LazyFrame.0BgRead the file and create the DataFrame.3DgWrite the given DataFrame in the writer <code>W</code>. Returns the \xe2\x80\xa6441CjWrites the header of the csv file if not done already. \xe2\x80\xa6BbWrites the footer of the IPC file.6ClWrites the footer of the parquet file. Returns the total \xe2\x80\xa636555AaFormatting string0AgTake the values by idx.BoGet items in every sublist by multiple indexes.1AnReturns the global Categories.0AoGet the group_by group indexes.0DgGet the height of the <code>DataFrame</code> which is the number of \xe2\x80\xa60FcAdd multiple <code>Series</code> to a <code>DataFrame</code>. The added <code>Series</code> are \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in two flags values.0000000000AnReturns the old value, if any.AmAdd a new hash to the sketch.CcWhether all known bits in this flags value are set.0000000000BiGet mask of NaN values if dtype is Float.CnCheck if numeric value is NaN (note this is different than \xe2\x80\xa601AiCheck if type is sortable0AaAWS_ACCESS_KEY_IDBdPickle serialized keyword arguments.0DjFind the median of all the values in the column named <code>name</code>\xe2\x80\xa6CbCompute the median of the items in every subarray.CaAggregate all the columns as their median values.DiReturns the mean value in the array. Returns <code>None</code> if the \xe2\x80\xa60BbReduce groups to the median value.CkReturns the median value in the array Returns an option \xe2\x80\xa60DfAggregate grouped <code>Series</code> and determine the median per \xe2\x80\xa6301165264C`Extract minute from underlying NaiveDateTime \xe2\x80\xa600000BdGet the minute of a Datetime/Time64.101DcTry to stop parsing when <code>n</code> rows are parsed. During \xe2\x80\xa600000DeConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.0AiOffset window boundaries.Celength is not yet known so we accept negative offsets10A`Window duration.000EgConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. \xe2\x80\xa60BcPolars: <em>DataFrames in Rust</em>BeAdd a prefix to the root column name.CkThe prefix inside the bucket, this will be the full key \xe2\x80\xa601EgReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation \xe2\x80\xa60CaGenerates a Categories with a random (UUID) name.0CkRemove rows matching a filter predicate (note that rows \xe2\x80\xa6CdRemove frame rows that match a predicate expression.CeThe intersection of a source flags value with the \xe2\x80\xa6000000020010CkFinds and removes the value corresponding to a key with \xe2\x80\xa6AbRename the Series.B`Rename columns in the DataFrame.BfRename this <code>ChunkedArray</code>.BnRename a column in the <code>DataFrame</code>.nRename series.421403EdCreate a column of length <code>n</code> containing <code>n</code> copies of the \xe2\x80\xa600D`Resize the <code>ScalarColumn</code> to new <code>length</code>.0ChSimilar to <code>rle</code>, but maps values to run IDs.00BaGet arrow schema of the Ipc File.BaGet schema of the Ipc Stream FileB`<code>Schema</code> of the file.Cifunction to supply the schema. Allows for an optional \xe2\x80\xa6DkReturns the <code>SchemaDescriptor</code> that describes schema of this \xe2\x80\xa6BfGet the <code>DataFrame</code> schema.CmUser-provided schema of the file. Will be inferred during \xe2\x80\xa61AkGet schema of the Avro File765341AeThe scheme (s3, \xe2\x80\xa6).0C`Extract second from underlying NaiveDateTime \xe2\x80\xa600000BdGet the second of a Datetime/Time64.101DhSelect (and optionally rename, with <code>alias</code>) columns from \xe2\x80\xa6CkSelect the column(s) that should be aggregated. You can \xe2\x80\xa6DfSelect column(s) from this <code>DataFrame</code> and return a new \xe2\x80\xa6012BfType agnostic columnar data structure.0AjReturns this array sliced.0DjSplit by a given substring, returning exactly <code>n</code> items. If \xe2\x80\xa6CgIf set then polars will return an error if any date \xe2\x80\xa60CbSubset of columns that will be taken into account.0CmSuffix to add duplicate column names in join. Defaults to \xe2\x80\xa6BeAdd a suffix to the root column name.01AmIdentifier in the shared lib.0CeGet a dot language representation of the LogicalPlan.0CmReturns the maximum value of the column as a single-value \xe2\x80\xa6CmReturns the minimum value of the column as a single-value \xe2\x80\xa6DfConvert to a <code>Vec</code> of <code>Option&lt;T::Native&gt;</code>.0CcCopy the contents into a new owned <code>Vec</code>DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60000000000DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int8</code>0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt8</code>0BcGet unique values of a ChunkedArrayBoKeep only the unique values in every sub-array.CnDrop non-unique rows without maintaining the order of kept \xe2\x80\xa6BmKeep only the unique values in every sublist.BeGet unique values of this expression.B`Get unique values in the Series.0CmUnstable distinct. See <code>DataFrame::unique_stable</code>.660115324CdUnlock the whole memory map. Only supported on Unix.EgUnnest the given <code>Struct</code> columns: the fields of the <code>Struct</code> \xe2\x80\xa6DeUnnest the given <code>Struct</code> columns. This means that the \xe2\x80\xa61CdReturns the values of this <code>StructArray</code>.0EeConcatenate a <code>DataFrame</code> to this <code>DataFrame</code> and return as \xe2\x80\xa60AgA binary true or false.Bi<code>true</code> and <code>false</code>.101010AlParallelize over the columnsCdA different null value per column, computed from \xe2\x80\xa601CmA 128-bit fixed point decimal number with a precision and \xe2\x80\xa6CcFixed point decimal type optional precision and \xe2\x80\xa6CkDecimal value with precision and scale precision is the \xe2\x80\xa6210210210CmAny operation that is done while projection/ selection of \xe2\x80\xa6gDeflate0CgGet a <code>str</code> repr of the DataType expression.0BfValues in a <code>eval</code> context.0ClExplode the aggregated list and just do a hstack instead \xe2\x80\xa60oAn 16-bit float000AoA 32-bit floating point number.AbA <code>f32</code>101010AoA 64-bit floating point number.AbA <code>f64</code>101010Cfselects the first row in the right DataFrame whose \xe2\x80\xa6Acnext value in array00CiReturned by a group_by operation on a DataFrame. This \xe2\x80\xa6AcGroupby aggregation110BjHorizontal concatenation of multiple plans0BoThis is to follow the spec for missing columns:0DhConvenience for <code>x.into_iter().map(Into::into).collect()</code> \xe2\x80\xa60fSafetyAe<code>list.agg</code>0ClMaps a logical type to a chunked array implementation of \xe2\x80\xa6000ClReturn a boolean literal signifying whether the datatype \xe2\x80\xa60BmStartup system is expensive, so we do it onceCkselects the right in the right DataFrame whose \xe2\x80\x98on\xe2\x80\x99 \xe2\x80\xa6CkUtility that allows use to send pointers to another thread.CiA ternary operation if true then \xe2\x80\x9cfoo\xe2\x80\x9d else \xe2\x80\x9cbar\xe2\x80\x9d0CkAlternative trait for Eq. By consistently using this we \xe2\x80\xa6BcAn unsigned 128-bit integer number.AdAn <code>u128</code>101010E`A type logically equivalent to <code>Vec&lt;T&gt;</code>, but which does not \xe2\x80\xa6AhA type unknown to Arrow.000AdPolars crate version==================CfCompute the inverse hyperbolic cosine of the given \xe2\x80\xa6CkCompute the inverse hyperbolic sine of the given expressionCmCompute the inverse tangent of the given expression, with \xe2\x80\xa6CgCompute the inverse hyperbolic tangent of the given \xe2\x80\xa6BbGet the index of the maximal valueCfReturn the index of the maximum value of every sublistBoGet the index value that has the maximum value.102BbGet the index of the minimal valueCfReturn the index of the minimal value of every sublistBoGet the index value that has the minimum value.102CkParsing string values and return a <code>DateChunked</code>00B`Packs every element into a list.0ClIf set to true, evaluation can output variable amount of \xe2\x80\xa6110CkParsing string values and return a <code>TimeChunked</code>00BaSelect multiple columns by dtype.00CnCalculate the millennium from the underlying NaiveDateTime \xe2\x80\xa60BbGet the century of a Date/Datetime01CkExecute all the lazy operations and collect them into a \xe2\x80\xa6CnTurn the metadata into the key/value pairs to write to the \xe2\x80\xa6BkMethods for collecting into a ChunkedArray.012BbSelected multiple columns by name.0CmCombine an existing Date/Datetime with a Time, creating a \xe2\x80\xa60CjGet an array with the cumulative max computed at every \xe2\x80\xa600CjGet an array with the cumulative min computed at every \xe2\x80\xa600CjGet an array with the cumulative sum computed at every \xe2\x80\xa600DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Decimal</code>0BbCreates an empty str inside an ArcBoCreates an empty <code>[T]</code> inside an ArcF`Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.BcCreates an empty CStr inside an Arc1302EbCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.AoConvert from radians to degreesCgDeposit values into nulls with a certain validity mask.0DdThis can be <code>None</code> to automatically enable for single \xe2\x80\xa6EeCompute the entropy as <code>-sum(pk * log(pk))</code>. where <code>pk</code> are \xe2\x80\xa6ChCalculate the exponentially-weighted moving standard \xe2\x80\xa6CeCalculate the exponentially-weighted moving variance.BdExecutes the given command directly.00ChExecute a SQL query, returning a <code>LazyFrame</code>.BlReturn a String describing the logical plan.0ChReturns a column with a separate row for every array \xe2\x80\xa6BkApply explode operation. See eager explode.AoExplode the String/List column.DgExplode <code>DataFrame</code> to long format by exploding a column \xe2\x80\xa6CkExplode a list Series. This expands every item to a new \xe2\x80\xa610423BkExtract the nth capture group from pattern.0CgExtract a regex pattern from the a string value. If \xe2\x80\xa6AoAlias for <code>explode</code>.0Acused for formatting0ClTry to convert a string to a categorical id, but don\xe2\x80\x99t \xe2\x80\xa60DiReturns a mutable reference into the given <code>Arc</code>, if there \xe2\x80\xa60CcReturns a mutable reference to the underlying data.DjGet a row from a <code>DataFrame</code>. Use of this is discouraged as \xe2\x80\xa60EdGet a reference to the <code>&amp;str</code> contained within <code>AnyValue</code>.0AmCall a user defined function.dTODO0CfGet a mutable reference to the <code>GroupsIdx</code>.0AnGroupBy the group to a Series.CmConvert the values of this Series to a ListChunked with a \xe2\x80\xa601CaCheck if this <code>DataType</code> is a boolean.0BnCheck if this <code>DataType</code> is a list.0EnA column which is <code>true</code> wherever <code>expr</code> is null, <code>false</code> \xe2\x80\xa6AnGet a mask of the null values.0BkRun is_null operation on <code>Expr</code>.111202Bc<code>true</code> if zero duration.00CcThe expressions you want to join the left table on.0A`Apply lhs / self0A`Apply lhs % self0A`Apply lhs - self0DiGet the value by index in the sublists. So index <code>0</code> would \xe2\x80\xa600CiThe mapping for this Categories object. If no mapping \xe2\x80\xa6BmThe mapping for this FrozenCategories object.10C`Extract the minutes from a <code>Duration</code>C`Extract the seconds from a <code>Duration</code>1AoReduce groups to maximum value.0AoReduce groups to minimal value.0CjSpecialization that prevents an allocation prefer this \xe2\x80\xa60AiOptions for the function.000BhReturns the day of year starting from 1.000ChPad the end of the string until it reaches the given \xe2\x80\xa6CkFunctionality for reading and writing Apache Parquet files.BoEverything you need to get started with Polars.BmGet the product aggregation of an expression.AlGet the product of an array.01AdProfile a LazyFrame.0CkExtract month from underlying NaiveDateTime representation.0CaExtract quarter from underlying NaiveDateTime \xe2\x80\xa6000000AoConvert from degrees to radiansBlGets a mutable pointer to the wrapped value.CkRechunk the memory to contiguous chunks when parsing is \xe2\x80\xa6CeAggregate all chunks to a contiguous array of memory.CjRechunks this ChunkedArray, returning a new Cow::Owned \xe2\x80\xa6CiCollect all chunks into a single chunk before continuing.21203CiReplace values by different values of the same data type.CgReplace the leftmost regex-matched (sub)string with \xe2\x80\xa6CkReplace matching string pattern in the root column name \xe2\x80\xa6BkReplace the given values with other values.BlReplace a column with a <code>Series</code>.3BaReplace the time units of a value1320DmReplace values that match a regex <code>pat</code> with a <code>value</code>.BhReturn a reversed version of this array.Bareturn a Series in reversed orderCfReverse the <code>DataFrame</code> from top to bottom.AeReverse every sublistnReverse columnDdGet a <code>DataFrame</code> with all the columns in reversed order.5450421AcReverse each string4BmCreate rolling groups based on a time column.0CmA function that returns a Python Generator. The generator \xe2\x80\xa6CjInvariant for implementations: if the scatter() fails, \xe2\x80\xa60C`Extract the seconds from a <code>Duration</code>00CfSort this column by the ordering of another column \xe2\x80\xa60B`Get the sources for this reader.0BnGet the <code>struct_::StructNameSpace</code>.DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Struct</code>1AbTesting utilities.0BkConvert a String column into a Date column.ClCast the Array column to List column with the same inner \xe2\x80\xa6ClTurn the ArrayChunked into the ListChunked with the same \xe2\x80\xa6001BkConvert a String column into a Time column.DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Float32</code>0DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Float64</code>0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int16</code>0BcUnpack to <code>ChunkedArray</code>0DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int64</code>0E`Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation \xe2\x80\xa6BgReturns a new <code>StructArray</code>.10BnAttempts to create a brotli compression level.BlAttempts to create a gzip compression level.ClAttempts to create a zstd compression level from a given \xe2\x80\xa6DmConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if \xe2\x80\xa60DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::String</code>0DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt16</code>0DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt32</code>0DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt64</code>0BoUnpivot the DataFrame from wide to long format.Aeversion of this file.00CeExtract ISO weekday from underlying NaiveDateTime \xe2\x80\xa60CnReturns the ISO weekday number where monday = 1 and sunday \xe2\x80\xa60CeExtract the ISO week day from the underlying Date \xe2\x80\xa601CmAn optional slice with the same length as the window that \xe2\x80\xa60Ad<code>arr.agg</code>0Cnselects the last row in the right DataFrame whose \xe2\x80\x98on\xe2\x80\x99 \xe2\x80\xa6Agprevious value in array00BjSet the checksum algorithm for this clientAgAggregation operations.00DeCreate a <code>ChunkedArray</code> with new values by index or by \xe2\x80\xa600BlVariance and standard deviation aggregation.00CnCombine two <code>ChunkedArray</code> based on some predicate.00CdService principal client id for authorizing requestsCjA 64-bit date representing the elapsed time since UNIX \xe2\x80\xa60DjSelector for <code>DataType::Datetime</code> with optional matching on \xe2\x80\xa6111110B`Remove duplicates from the table0CdA 64-bit integer representing difference between \xe2\x80\xa6Ck64-bit integer representing difference between times in \xe2\x80\xa6ClMeasure of elapsed time. This elapsed time is a physical \xe2\x80\xa6DjSelector for <code>DataType::Duration</code> with optional matching on \xe2\x80\xa6321321210CcSets custom endpoint for communicating with AWS S3.CkOverride the endpoint used to communicate with blob storageDhPrefer using <code>PlCredentialProvider::from_func</code> instead of \xe2\x80\xa60CnA \xe2\x80\x9ccalendar\xe2\x80\x9d interval modeling elapsed time that takes \xe2\x80\xa6000AfSet root name as Alias0lList / Array0CgA read-only reference to a slice of memory that can \xe2\x80\xa6CeIgnore all order-related flags and don\xe2\x80\x99t encode \xe2\x80\xa60CfObject id for use with managed identity authenticationChCheck if join keys are unique in both left and right \xe2\x80\xa600AfAllowed optimizations.0gOr zeroCiA pair which is ordered exclusively by the first element.AhA concurrent hash table.AiA shared access signatureClAlternative trait for Ord. By consistently using this we \xe2\x80\xa6Di<code>{&quot;type&quot;: {&quot;type&quot;: &quot;name&quot;, ..}}</code>Ao`{\xe2\x80\x9ctype\xe2\x80\x9d: \xe2\x80\x9cname\xe2\x80\x9d, ..}``AbUnique identifier.CjA string type that inlines small values and can intern \xe2\x80\xa6000fSafety00CjAggregate the groups of the group_by operation into lists.1110111AcAllow equal matchesBoRetrieve the indexes needed to sort this array.0CeGet the index values that would sort this expression.BgRetrieve the indexes needed for a sort.02222001ClTry cast the scan sources to <code>ScanSources::Paths</code>0CnBlocks this thread to evaluate the given future. Panics if \xe2\x80\xa6BmReturns the <code>k</code> smallest elements.CmCast all frame columns to the given dtype, resulting in a \xe2\x80\xa60ChSet values above the given maximum to the maximum value.BiClip underlying values to a set boundary.01ChSet values below the given minimum to the minimum value.110CnFolds the expressions from left to right keeping the first \xe2\x80\xa6BaWhether to coalesce join columns.110C`Check if the sub-array contains specific elementBfCheck if binary contains given literalCmWhether all set bits in a source flags value are also set \xe2\x80\xa6BiCheck if strings contain a regex pattern.BjCheck if the list array contain an element222122224022DkCheck if this column of strings contains a Regex. If <code>strict</code>\xe2\x80\xa6344BbCheck if a function is registered.CnGet an array with the cumulative product computed at every \xe2\x80\xa600DaConstruct a column of <code>Datetime</code> from the provided \xe2\x80\xa6DlUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Datetime</code>BgGet the (local) datetime of a Datetime.220DoAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a \xe2\x80\xa60DaConstruct a column of <code>Duration</code> from the provided \xe2\x80\xa6DlUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Duration</code>11CdCalculate the exponentially-weighted moving average.ClHelper to delay a failing method until the query plan is \xe2\x80\xa6CdFill NaN values in the DataFrame with an expression.CnReplace the floating point <code>NaN</code> values by a value.01CkConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.0AnInitialize by name and values.CmCreate a new ChunkedArray by taking ownership of the Vec. \xe2\x80\xa610EjConstruct a <code>MemSlice</code> from an existing <code>Vec&lt;u8&gt;</code>. This is \xe2\x80\xa60Aafunction to applyBgAlso has the input. i.e. avg(\xe2\x80\x9cfoo\xe2\x80\x9d)1101DfPerforms a \xe2\x80\x9cgroup-by\xe2\x80\x9d on a <code>LazyFrame</code>, producing a \xe2\x80\xa6BfGroup DataFrame using a Series column.01AjFind the index of a value.CmConsumes the <code>Arc</code>, returning the wrapped pointer.0C`Check if this <code>DataType</code> is an array.0CiCheck whether floating point values are close to each \xe2\x80\xa60BoWhether all bits in this flags value are unset.AoCheck if ChunkedArray is empty.AiCheck if Series is empty.02DiReturns <code>true</code> if the <code>DataFrame</code> contains no rows.3333323011333DfCheck if this <code>DataType</code> is a basic floating point type \xe2\x80\xa60BbCheck if the whole dtype is known.0AjAre the sources all paths?0CjThis year number might not match the calendar year number.0CeGet the iso-year of a Date/Datetime. This may not \xe2\x80\xa60EjCreate an <code>Iterator</code> that iterates over the <code>&amp;str</code> values of \xe2\x80\xa600ChKeywords that are supported by the Polars SQL interface.CfCompute the kurtosis (Fisher or Pearson) of a dataset.BiCompute the kurtosis (Fisher or Pearson).0DiIn case the inner dtype <code>DataType::String</code>, the individual \xe2\x80\xa600CjMakes a mutable reference into the given <code>Arc</code>.0BiTransition the memory map to be writable.CfApply a function/closure once the logical plan get \xe2\x80\xa60BdAdditional custom (opaque) metadata.0AmApache Parquet file metadata.AoNumber of chunks in this Series000ChNumber of unique values in the <code>ChunkedArray</code>0BnGet the number of unique values in the groups.B`Get unique values in the Series.0DjAggregate grouped <code>Series</code> by counting the number of unique \xe2\x80\xa630112BeReturns whether duration is negative.00DfCreates a null <code>StructArray</code> of length <code>length</code>.0BcNumber of rows in the parquet file.0Aknumber of rows in the file.1100BgThe physical dtype of the category ids.000CmPipe different functions/ closure operations that work on \xe2\x80\xa60CgAttempt to prefetch the memory belonging to to this \xe2\x80\xa6ClFind a specific quantile of all the values in the column \xe2\x80\xa6CcAggregate all the columns as their quantile values.CkAggregate a given quantile of the ChunkedArray. Returns \xe2\x80\xa60AoCompute the quantile per group.DhAggregate grouped <code>Series</code> and determine the quantile per \xe2\x80\xa6204143CoRegister a <code>LazyFrame</code> as a table in the SQLContext.AdRegister a function.ChThis is a heap allocated utility that can be used to \xe2\x80\xa60BkGet the function registry of the SQLContextCdThe expressions you want to join the right table on.0CdRound the given ms timestamp by the window boundary.0CdRound the given ns timestamp by the window boundary.0CdRound the given us timestamp by the window boundary.0ChSample n datapoints from this <code>ChunkedArray</code>.CeSample n datapoints from this <code>DataFrame</code>.10BlCreate a LazyFrame directly from a ipc scan.0BaSets the <code>Field</code> name.0CmStream a query result into an csv file. This is useful if \xe2\x80\xa60CiStream a query result into an ipc/arrow file. This is \xe2\x80\xa60BaGet a zero copy view of the data.CnSplit the array. The chunks are reallocated the underlying \xe2\x80\xa6CnSplit <code>DataFrame</code> at the given <code>offset</code>.2102Bmparse a SQL expression to a polars expressionCdSlice the first <code>n</code> values of the string.0CcSlice the last <code>n</code> values of the string.0ClConvert from Time into String with the given format. See \xe2\x80\xa600ClConvert from Datetime into String with the given format. \xe2\x80\xa6ClConvert from Date into String with the given format. See \xe2\x80\xa6CnConvert from Date/Time/Datetime into String with the given \xe2\x80\xa603CiConvert a String column into a Date/Datetime/Time column.BgTraits and utilities for temporal data.0ClConvert a List column into an Array column with the same \xe2\x80\xa60AnConvert to an Arrow data type.DkConverts the <code>Field</code> to an <code>arrow::datatypes::Field</code>.ClConvert a chunk in the Series to the correct Arrow type. \xe2\x80\xa621CoConvert self to <code>ArrowSchema</code> by cloning the fields.1CiGet Field result of the expression. The schema is the \xe2\x80\xa60CcCast numerical types to f64, and keep floats as is.0ChReturns the <code>k</code> largest rows by given column.BnTruncate the Datetime/Date range into buckets.0DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Boolean</code>0EfUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Categorical</code> or \xe2\x80\xa60DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Date</code>DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Int128</code>0CaUnpack to <code>ChunkedArray</code> of dtype list0DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Null</code>0DhUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Time</code>DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::UInt128</code>CiUpsample a <code>DataFrame</code> at a regular frequency.0AfThe optional validity.0BmCompute the hash for all values in the array.0CjSet the configuration for AWS connections. This is the \xe2\x80\xa6kSet the day0CjSet the configuration for GCP connections. This is the \xe2\x80\xa6DcSet <code>hour</code>, <code>minute</code>, and <code>second</code>DfSet <code>hours</code>, <code>minutes</code>, and <code>seconds</code>10CmCreate a new ChunkedArray with values from self where the \xe2\x80\xa60000BhMaster key for accessing storage accountAcA shared access keyCiContains a byte slice and a precomputed hash for that \xe2\x80\xa6DmCast <code>ChunkedArray&lt;T&gt;</code> to <code>ChunkedArray&lt;N&gt;</code>00BcFill a ChunkedArray with one value.00BmSort operations on <code>ChunkedArray</code>.00BmCreate a new DataFrame by reading a csv file.0AiWrite a DataFrame to csv.0DiA contiguous growable collection of <code>Series</code> that have the \xe2\x80\xa600AiDecimal backed by 32 bits000AiDecimal backed by 64 bits000oExtension type.000CmCreating this node is unsafe This will lead to calls over \xe2\x80\xa60CdIndexes of the groups, the first index is stored \xe2\x80\xa600AoA valid Gzip compression level.0BjRepresents a valid gzip compression level.C`Polars IdxSize type, dependent on bigidx feature0AkReverses indexing directionBgRead Arrows IPC format into a DataFrame0BiWrite a DataFrame to Arrow\xe2\x80\x99s IPC format0BlUtility extension trait of iterator methods.CjEach DataFrame row is serialized as a JSON object on a \xe2\x80\xa60CfA list of some logical data type whose offsets are \xe2\x80\xa6000ClA variable-length UTF-8 encoded string whose offsets are \xe2\x80\xa6000CfLazy abstraction over an eager <code>DataFrame</code>.0CfUtf8 encoding and unknown bytes are replaced with \xef\xbf\xbd.0BoCheck if join keys are unique in right dataset.00BfA cursor over a <code>MemSlice</code>.BaQuote fields only when necessary.0AnOverflow is replaced with null0BnCheck if join keys are unique in left dataset.00AlA reference to a Path or URI0AoParallelize over the row groups0BfEnable Support for S3 Express One ZoneBoInvariant, must be directly materialized in \xe2\x80\xa60CeWrapper type that has special equality properties \xe2\x80\xa60EfA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with \xe2\x80\xa6000CmAlternative trait for Hash. By consistently using this we \xe2\x80\xa6CkHolds a non-async writeable file, abstracted over local \xe2\x80\xa60BdA valid Zstandard compression level.0BjRepresents a valid zstd compression level.fSafety0C`Returns a reference to the underlying allocator.0CbLeft anti join this query with another lazy query.0DiGet the indices where <code>condition</code> evaluates <code>true</code>.00BiReturns a reference to the Arrow ArrayRef0CjGet a reference to all elements in the form of two slices.CdTake several expressions and collect them into a \xe2\x80\xa600DhBuild the <code>object_store::ObjectStore</code> implementation for AWS.DhBuild the <code>object_store::ObjectStore</code> implementation for GCP.DkLocal use cases often repeatedly collect the same <code>LazyFrame</code>\xe2\x80\xa60CiCast the leaf types of Lists/Arrays and keep the nesting.0BlConcat the DataFrames to a single DataFrame.CmConstant that help with creating error messages dependent \xe2\x80\xa60BhCumulatively count values from 0 to len.0AoData types supported by Polars.00CkCreates a new <code>Weak</code> pointer to this allocation.0BlDrop columns that are in <code>names</code>.0BlDrop rows containing one or more NaN values.A`Drop NaN values.01BaSelect multiple columns by dtype.00BfCheck if strings ends with a substringCeCheck if a binary value ends with the given sequence.CnCheck if a string value ends with the <code>sub</code> string.122BmThe path components that need to be expanded.0CeFill None values in the DataFrame with an expression.BcReplace the null values by a value.CiReplace None values with one of the following strategies:00012BhUses aho-corasick to find many patterns.CcFloor divide <code>self</code> by <code>rhs</code>.0BcOptional parameters for the rolling000AjConvert from a bits value.0000000000ClAccepts a function that returns (credential, expiry time \xe2\x80\xa60D`The bitwise or (<code>|</code>) of the bits in each flags value.DkTakes each element in the <code>Iterator</code> and collects it into an \xe2\x80\xa61fPanics0222212200222ClGet a flags value with the bits of a flag with the given \xe2\x80\xa60000000000CjThis is the recommended way to create a json reader as \xe2\x80\xa60DkCreate a new <code>DataFrame</code> from rows. This should only be used \xe2\x80\xa60CcFull outer join this query with another lazy query.BkPerform a full outer join on two DataFrames10DcCreate a new <code>DataFrame</code> with the given schema, only \xe2\x80\xa60iFunctions00DiLook up the name in the schema and return an owned <code>Field</code> \xe2\x80\xa6CfGets the hash, key and value at the given index by \xe2\x80\xa6CjGets the key and value at the given index by insertion \xe2\x80\xa6BkGet the inner values as <code>Series</code>DgGet the inner values as <code>Series</code>, ignoring the list offsets.1010<<BoGet the full shape of a multidimensional array.0DfReturn if any the chunks in this <code>ChunkedArray</code> have nulls.0000AoHash and combine the row valuesAmGenerate a range of integers.00DaDeconstructs the <code>StructArray</code> into its individual \xe2\x80\xa60CjIndicate if this expression is a basic (non-regex) column.BlGet mask of finite values if dtype is Float.B`Check if numeric value is finite01CeReturns whether this refers to the global categories.0CnChecks if a <code>Series</code> is sorted. Tries to fail fast.00BoCheck if this <code>DataType</code> is a struct0CiDetermine whether this is the unique reference to the \xe2\x80\xa6D`Get a mask of all the unique rows in the <code>DataFrame</code>.10AlGet a mask of unique values.BjIterates over the keys in insertion order.CcLeft outer join this query with another lazy query.BkPerform a left outer join on two DataFrames10ChReturn the length of each string as the number of bytes.CeReturn the length of each string as the number of \xe2\x80\xa6fSafetyfPanicsBjRoll forward to the last day of the month.BhThe namespace of this Categories object.0BjCreates an empty <code>StructArray</code>.AjCreate a new empty Series.01DlCreates a new <code>CommentPrefix</code> for the <code>Multi</code> variant.0AeNormalize each stringAeCheck for inequality.CaCreate a boolean mask by checking for inequality.011100EhOffset this <code>Date/Datetime</code> by a given offset <code>Duration</code>. This \xe2\x80\xa6CkReturns the equivalent slice to apply from an offsetted \xe2\x80\xa6CnGet the bitwise OR of the Series as a new Series of length \xe2\x80\xa6000DeDefine a default for the <code>when-then-otherwise</code> expression.000CjPad the start of the string until it reaches the given \xe2\x80\xa6DfApply a closure over the groups as a new <code>DataFrame</code> in \xe2\x80\xa60CjFunctionality for writing a DataFrame partitioned into \xe2\x80\xa6ClPop an item at the front of the <code>FixedRingBuffer</code>AoSlice applied before predicates0AmGet a reference to the field.0EeRepeat the column <code>n</code> times, where <code>n</code> is determined by the \xe2\x80\xa60DmReplace values that match a regex <code>pat</code> with a <code>value</code>.CiStores (physical, deleted) row counts of the table if \xe2\x80\xa60AgAdd a row index column.AnReturn the row index settings.1101CjProxy of the number of rows in both sides of the joins \xe2\x80\xa60BfEither the schema fn or schema is set.CbLeft semi join this query with another lazy query.0AbUsed as separator.0BkSet flags for the <code>ChunkedArray</code>BbReturns whether the flags were set10CmStream a query result into a JSON file. This is useful if \xe2\x80\xa60BdSkip rows according to the CSV spec.0AhSlice the string values.0D`Convert date(time) object to timestamp in <code>TimeUnit</code>.0CeReturn the timestamp (UNIX epoch) of a Datetime/Date.0DgTake the current state and materialize as a <code>Series</code> the \xe2\x80\xa6DeMaterialize the <code>ScalarColumn</code> into a <code>Series</code>.10CnConvert Time into String with the given format. See chrono \xe2\x80\xa60ClConvert from Datetime into String with the given format. \xe2\x80\xa6EhConvert from <code>Duration</code> to String; note that <code>strftime</code> format \xe2\x80\xa6ClConvert from Time into String with the given format. See \xe2\x80\xa6ClConvert from Date into String with the given format. See \xe2\x80\xa6CnConvert from Date/Time/Datetime into String with the given \xe2\x80\xa605FbConvert this <code>List</code> to a <code>Series</code> of type <code>Struct</code>. The width \xe2\x80\xa6BoA tolerance in the same unit as the asof columnCjApply a closure that may fail to a column. This is the \xe2\x80\xa60DiUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Array</code>0ClThis should be used as type information. Consider this a \xe2\x80\xa600lSet the days0BeExpand path given via globbing rules.0lSet the hour0CfReturn this <code>ChunkedArray</code> with a new name.BiReturns this <code>Field</code>, renamed.BcReturn this Series with a new name.210lSet the year0BmMultiple values that are used for all columns0C`Represents Arrow\xe2\x80\x99s metadata of a \xe2\x80\x9ccolumn\xe2\x80\x9d.0CeRead Apache Avro format into a <code>DataFrame</code>CdWrite a <code>DataFrame</code> to Apache Avro formatCjA binary type that inlines small values and can intern \xe2\x80\xa6000CdA (named) object which is used to indicate which \xe2\x80\xa6000CaFastest way to do elementwise operations on a \xe2\x80\xa600BcA wrapper trait for any closure \xe2\x80\xa60Al<code>cumulative_eval</code>0CcSort in descending order instead of ascending order0AjDecimal backed by 256 bits000EfA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where \xe2\x80\xa6000AbEncryption optionsBnThis allows expressions to access other tables0CdConvert <code>Self</code> into a <code>Column</code>00FfUsed to convert a <code>ChunkedArray</code>, <code>&amp;dyn SeriesTrait</code> and <code>Series</code>00DjThe format to use to write the DataFrame to JSON: <code>Json</code> (a \xe2\x80\xa60DfReads JSON in one of the formats in <code>JsonFormat</code> into a \xe2\x80\xa60AkWrites a DataFrame to JSON.0A`No unique checks00BnSort such that nulls / missing values are last0AdTime in nanoseconds.000AiQuote non-numeric fields.0BgString type that inlines small strings.00000CiQuote style indicating when to insert quotes around a \xe2\x80\xa60BiA cache for compiled regular expressions.ClThe SQLContext is the main entry point for executing SQL \xe2\x80\xa6AlA single source to scan from0AkDo type checking of the IR.0DkThis elides creating a <code>TotalOrdWrap</code> for types that don\xe2\x80\x99t \xe2\x80\xa6C`Get the group indexes of the group by operation.0fSafety0CoReturns whether all values in the column are <code>true</code>.00ChGet the bitwise AND of the Series as a new Series of \xe2\x80\xa6000DfReturns whether any of the values in the column are <code>true</code>.00CfApply a function/closure over the groups with many \xe2\x80\xa60DhGet first index of the unique values in a <code>ChunkedArray</code>. \xe2\x80\xa6ChGet the first index of unique values of this expression.BcGet first indexes of unique values.022001CjImplementations of arithmetic operations on ChunkedArrays.0FdGet a hold of the <code>ChunkedArray</code>, <code>Logical</code> or <code>NullChunked</code> as \xe2\x80\xa600BePerform an aggregation of bitwise ORs0ChTry to convert a categorical id to its corresponding \xe2\x80\xa60CiThe categories contained in this FrozenCategories object.0AkSize of each written chunk.00AbUnderlying chunks.BaA mutable reference to the chunks?101?DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa60000000000CmHorizontally concatenate columns into a single array-type \xe2\x80\xa6DjNote: The caller must ensure all columns in <code>args</code> have the \xe2\x80\xa611CaHorizontally concat string columns in linear time00CfReturns the values of the array as a contiguous slice.0BjConverters keyed by the Arc address of \xe2\x80\xa60CnRead the number of rows without parsing columns useful for \xe2\x80\xa60CmCount the number of rows. The slice passed must represent \xe2\x80\xa6CdString message for application that wrote this file.00CnCreates the Cartesian product from both frames, preserving \xe2\x80\xa6CmCreates the Cartesian product from both frames, preserves \xe2\x80\xa6100CnGet slices of the underlying arrow data. NOTE: null values \xe2\x80\xa60DoCreate a date range from a <code>start</code> and <code>stop</code> expression.FcCreate a <code>DatetimeChunked</code> from a given <code>start</code> and <code>end</code> date \xe2\x80\xa6CmIf true sort in descending order. Default <code>false</code>.BkOrder of the columns. Default all `false``.10101010CeThe intersection of a source flags value with the \xe2\x80\xa60000000000BmDrop rows containing one or more None values.AaDrop null values.BmDrop all null values and return a new Series.0DfReturn a new <code>DataFrame</code> where all null values are dropped.01123CjGet the additional offset from UTC currently in effect \xe2\x80\xa60BaSelect multiple columns by dtype.00FeCompare <code>Expr</code> with other <code>Expr</code> on equality where <code>None == None</code>\xe2\x80\xa60BjTry get the first path in the scan sources0CiAccumulate over multiple columns horizontally / row wise.00CiFormat the results of an array of expressions using a \xe2\x80\xa600EdConstruct a <code>MemSlice</code> from <code>bytes::Bytes</code>. This is zero-copy.0DnConstructs a new <code>ColumnStats</code> with only the <code>Field</code> \xe2\x80\xa6Cbslice outlives the returned <code>MemSlice</code>.CeReturns the fields the <code>DataType::Struct</code>.0CmGet the internal representation of the GroupBy operation. \xe2\x80\xa60CdGet a hold to an object that can be formatted or \xe2\x80\xa6CkGet the value at this index as a downcastable Any trait \xe2\x80\xa601100CcNote: This will mutably sort ranges for coalescing.0ChGet the names of all registered tables, in sorted order.DoAdd multiple <code>Column</code> to a <code>DataFrame</code>. Errors if the \xe2\x80\xa60BaSelect multiple columns by index.00CjInitializes categorical converters for all categorical \xe2\x80\xa60BnInner join this query with another lazy query.BhPerform an inner join on two DataFrames.10BeConvert a string to a categorical id.0CjGenerate a range of integers for each row of the input \xe2\x80\xa600CmWhether any set bits in a source flags value are also set \xe2\x80\xa60000000000BoConverts the reference-counted slice into a \xe2\x80\xa60DkReturns the inner value, if the <code>Arc</code> has exactly one strong \xe2\x80\xa60AbUnwraps the value.DgTry cast the scan sources to <code>ScanSources::Paths</code> with a \xe2\x80\xa60DaCheck if this <code>DataType</code> is a Decimal type (of any \xe2\x80\xa60DfCheck if this <code>DataType</code> is an integer. Note, this also \xe2\x80\xa60CjIndicate if this expression represents a literal value \xe2\x80\xa6CeCheck if this <code>DataType</code> is a logical type0CaGet inverse mask of NaN values if dtype is Float.CnCheck if numeric value is NaN (note this is different than \xe2\x80\xa601BlYield a set of contained named flags values.0000000000CjJoin on null values. By default null values will never \xe2\x80\xa60CbGet the absolute inner data type of a nested type.0AkLogical \xe2\x80\x9cor\xe2\x80\x9d operation.0CaReduce memory usage at the expense of performanceCgReduce memory consumption at the expense of performance01EgGet the max of the <code>ChunkedArray</code> as a new <code>Series</code> of length \xe2\x80\xa6CfGet the max of the Series as a new Series of length 1.01100CnCalculate the millennium from the underlying NaiveDateTime \xe2\x80\xa60BeGet the millennium of a Date/Datetime01EgGet the min of the <code>ChunkedArray</code> as a new <code>Series</code> of length \xe2\x80\xa6CfGet the min of the Series as a new Series of length 1.01100CjCreate a temporary <code>ChunkedArray</code> from a slice.0000C`Extract second from underlying NaiveDateTime \xe2\x80\xa600CnReturns the number of nanoseconds since the whole non-leap \xe2\x80\xa601BdGet the nanosecond part of a Time64.201FcConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the \xe2\x80\xa60DmCreates a new <code>CommentPrefix</code> for the <code>Single</code> variant.0CnConstructs a new <code>Arc</code> with uninitialized contents.0DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa60CmProduce the next batch Polars can consume. Implement this \xe2\x80\xa60AfCount the null values.ClAggregate all the columns as the sum of their null value \xe2\x80\xa6CeReturn the number of null values in the ChunkedArray.BgGet the null count of the column/group.DfCreate a new <code>DataFrame</code> that shows the null counts per \xe2\x80\xa64204BeReturns the null count of the column.24CkWhether place null values last. Default <code>false</code>.000000000BjComputes percentage change between values.CmPolars SQL This crate provides a SQL interface for Polars \xe2\x80\xa6AbQuoting character.0AjGet the root column names.AkThe row groups of this file00AeAWS_SECRET_ACCESS_KEYDdSet the height (i.e. number of rows) of this <code>DataFrame</code>.0BkGet the size of the binary values in bytes.CbReturn the size (number of bytes) in each element.011ClSkip lines according to newline char (e.g. escaping will \xe2\x80\xa60BdCompute and write column statistics.00DhGet the standard deviation of the <code>ChunkedArray</code> as a new \xe2\x80\xa6ClGet the standard deviation of the Series as a new Series \xe2\x80\xa60100CeThe intersection of a source flags value with the \xe2\x80\xa60000000000EgGet the sum of the <code>ChunkedArray</code> as a new <code>Series</code> of length \xe2\x80\xa6BjGet the sum of the Series as a new Scalar.0CjGet the sum of the Series as a new Series of length 1. \xe2\x80\xa622110DbTake or clone a owned copy of the inner <code>ChunkedArray</code>.0DeTake from <code>self</code> at the indexes given by <code>idx</code>.00AfGenerate a time range.FeCreate a <code>TimeChunked</code> from a given <code>start</code> and <code>end</code> date and a \xe2\x80\xa6BnConvert a String column into a Decimal column.AgCreate dummy variables.CjParse string in base radix into decimal. The resulting \xe2\x80\xa6CeSet the logical type of the <code>ListChunked</code>.fSafety1001CmReturns the minimum and maximum values of the column as a \xe2\x80\xa6ChIf data is aligned in a single chunk and has no Null \xe2\x80\xa6DkIf all nested <code>Series</code> have the same length, a 2 dimensional \xe2\x80\xa6EbCreate a 2D <code>ndarray::Array</code> from this <code>DataFrame</code>. This \xe2\x80\xa62110CnExpress a Duration in terms of its total number of integer \xe2\x80\xa60DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Binary</code>ChApplies a kernel that produces <code>Array</code> types.001DlConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, \xe2\x80\xa60EgConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, \xe2\x80\xa60DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Struct</code>DkReturns the inner value, if the <code>Arc</code> has exactly one strong \xe2\x80\xa60DkUnregister a <code>LazyFrame</code> table from the <code>SQLContext</code>.BnGet a reference to the <code>GroupsIdx</code>.0EeGet the variance of the <code>ChunkedArray</code> as a new <code>Series</code> of \xe2\x80\xa6CkGet the variance of the Series as a new Series of length 1.0100DcConcatenate a <code>DataFrame</code> to this <code>DataFrame</code>0DaGets the number of <code>Weak</code> pointers to this allocation.0ClTemporary swaps out the array, and restores the original \xe2\x80\xa60ClSet the configuration for Azure connections. This is the \xe2\x80\xa6BbCache the DataFrame after reading.0mSet the hours0mSet the month0AoSet paths of the scanned files.00mSet the weeks0ChGet the bitwise XOR of the Series as a new Series of \xe2\x80\xa6000nAWS Access KeyBeThe name of the azure storage accountBdAny operation that is done on groupsDhA <code>Series</code> that amortizes a few allocations during iteration.0BjAn ordered sequence of <code>Field</code>s0AmTenant id used in oauth flowsAfAn authorization tokenBaA valid Brotli compression level.0BlRepresents a valid brotli compression level.DcUtility struct for the <code>when-then-otherwise</code> expression.00000B`Filter values by a boolean mask.00C`Get unique values in a <code>ChunkedArray</code>00BeStatistics of the values in a column.AbValid compressionsChRust function to dynamically compute key value metadata.0BnEvery group is indicated by an array where the00AnOptions for Hive partitioning.CkOpaque binary data of variable length whose offsets are \xe2\x80\xa6000BkUtility struct for lazy group_by operation.0AiA (User Defined) Function0AeTime in microseconds.000AeTime in milliseconds.000CaEndpoint to request a imds managed identity tokenBdSupports both cloud and local files.0AhAllows wrapping overflow0AmThis hashmap uses an IdHasher000CnFirst evaluates the pushed-down predicates in parallel and \xe2\x80\xa60CkThe parameters are destination type, and whether to use \xe2\x80\xa6000AkSet of sources to scan from0B`Options that apply to all sinks.0CgUtility trait to slice concrete arrow arrays whilst \xe2\x80\xa6000000000BbOptions for single series sorting.0000AlAn UTF8 encoded string type.000EgA <code>StructArray</code> is a nested <code>Array</code> with an optional validity \xe2\x80\xa60AnGather by <code>ChunkId</code>BhUse azure cli for acquiring access tokenBnUse object store with azurite storage emulatorCeSame as <code>filter</code> but does not parallelize.0BgReturns the sum of the array as an f64.000CeRun every node eagerly. This turns off multi-node \xe2\x80\xa60BdAppends from an iterator over values0BdAppends a null slot into the builder00BaAppend a <code>null</code> value.11101111fSafety00CmFind the indexes that would sort these series in order of \xe2\x80\xa600D`Parsing string values and return a <code>DatetimeChunked</code>.00FbGet a hold of the <code>ChunkedArray</code> or <code>NullChunked</code> as an <code>Any</code> \xe2\x80\xa600BhConverts to <code>Arc&lt;[T]&gt;</code>.BfConverts to <code>Arc&lt;T&gt;</code>.01FoCompute <code>op(l, r)</code> (or equivalently <code>l op r</code>). <code>l</code> and <code>r</code> must \xe2\x80\xa600BfPerform an aggregation of bitwise ANDs0BfPerform an aggregation of bitwise XORs0CiReturns the <code>k</code> smallest rows by given column.DgBuild the <code>object_store::ObjectStore</code> implementation for \xe2\x80\xa6CgReturn whether the cast to <code>to</code> makes sense.0CgIf this dtype is a Categorical or Enum, returns the \xe2\x80\xa60ClChecked integer division. Computes self / rhs, returning \xe2\x80\xa6000000BnClone inner ChunkedArray and wrap in a new Arc00C`Collect all <code>LazyFrame</code> computations.0ClEquivalent to <code>.collect::&lt;Vec&lt;_&gt;&gt;()</code>.AeData page compression00000BdRedo a length and null_count compute0CkRecommended concatenation of LazyFrames from many input \xe2\x80\xa600AeConcat lists entries.00BeUsed for <code>DataType::Date</code>.0EbCreate a column of date ranges from a <code>start</code> and <code>stop</code> \xe2\x80\xa600CkDeserializes the statistics in the column chunks from a \xe2\x80\xa60EhTake a <code>DataFrame</code> and produces a boolean <code>Series</code> that serves \xe2\x80\xa6ClCalculate the exponentially-weighted moving average by a \xe2\x80\xa6CmExtract each successive non-overlapping regex match in an \xe2\x80\xa60CgExtract each successive non-overlapping match in an \xe2\x80\xa6EnAdd at most <code>num</code> items of <code>value</code> into the <code>FixedRingBuffer</code>ClCreate a new <code>ChunkedArray</code> from existing chunks.fSafety0100CnConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.0CnCreate a key value metadata object from a static key value \xe2\x80\xa6AoConstruct from a static string.01EdConstruct a <code>MemSlice</code> that simply wraps around a <code>&amp;[u8]</code>.CfGet a reference to the <code>DataFrame</code> columns.0CnGet a reference to the mapping of categorical types to the \xe2\x80\xa600AoSet whether to write UTF-8 BOM.0BdGet the inner data type of the list.BoGet the inner data type of the fixed size list.BiGet the inner data type of a nested type.21120CkInterpolate intermediate values. Nulls at the beginning \xe2\x80\xa60CgTurn a scalar into a column with <code>length=1</code>.0CkTry to coerce to an AnyValue with static lifetime. This \xe2\x80\xa60BnGet mask of infinite values if dtype is Float.BbCheck if numeric value is infinite01EnA column which is <code>false</code> wherever <code>expr</code> is null, <code>true</code> \xe2\x80\xa6BbGet a mask of the non-null values.AoGet a mask of the valid values.BoRun is_not_null operation on <code>Expr</code>.212303oIts nullability0CfCheck if this <code>DataType</code> is a temporal type0DbIterator over the rows in this <code>DataFrame</code> as Arrow \xe2\x80\xa60DkIterates the <code>Field</code>s in this schema, constructing them anew \xe2\x80\xa6BlIterates over the values in insertion order.0AlLogical \xe2\x80\x9cand\xe2\x80\x9d operation.0CcGet minimal value that could be hold by this dtype.0BjGet the mean of the Series as a new Scalar0CkGet the mean of the Series as a new Series of length 1. \xe2\x80\xa6110CgGet the microsecond of a Time64 (scaled from nanosecs).0CgGet the millisecond of a Time64 (scaled from nanosecs).0CjAmount of elements in the window that should be filled \xe2\x80\xa6000BlRoll backward to the first day of the month.CdExtract the nanoseconds from a <code>Duration</code>DfReturns the nanoseconds from the <code>Duration</code> without the \xe2\x80\xa61100E`Compare <code>Expr</code> with other <code>Expr</code> on non-equality where \xe2\x80\xa60fSafety0CbConvert missing values to <code>NaN</code> values.0AeDataType::Null to any0BeConverts timezones to canonical form.0BhReturns the day of year starting from 1.0BgGet the ordinal_day of a Date/Datetime.01BgGet the output name of this expression.BmPartial comparison for two <code>Arc</code>s.CgOnly implemented for the same types and physical types!10CcThis is expected to map from \xe2\x80\x98PARQUET:field_id\xe2\x80\x990AbLazy API of PolarsCiAttempt to prefetch the memory in the slice to the L2 \xe2\x80\xa6EdGet the product of the <code>ChunkedArray</code> as a new <code>Series</code> of \xe2\x80\xa600AfWhen to insert quotes.0CoCreate <code>ChunkedArray</code> with samples from a Normal \xe2\x80\xa60BdRechunks this ChunkedArray in-place.CaRechunks all columns to only have a single chunk.10CjReplace all regex-matched (sub)strings with another string0EaReplace all values that match a regex <code>pat</code> with a <code>value</code>.AnGet the run-Lengths of values.ChApply a rolling custom function. This is pretty slow \xe2\x80\xa6ClApply a custom function over a rolling/ moving window of \xe2\x80\xa6001000B`Apply a rolling max to a Series.0AhApply a rolling maximum.0B`Apply a rolling min to a Series.0AhApply a rolling minimum.0BdApply a rolling std_dev to a Series.0AhApply a rolling std-dev.0B`Apply a rolling sum to a Series.0AdApply a rolling sum.0BeApply a rolling variance to a Series.0AiApply a rolling variance.0DdSample a fraction between 0.0-1.0 of this <code>ChunkedArray</code>.DaSample a fraction between 0.0-1.0 of this <code>DataFrame</code>.1101CjMake sure that all columns are contiguous in memory by \xe2\x80\xa6000AoSlices this <code>Array</code>.000000000CnRun a task on the rayon threadpool. To avoid deadlocks, if \xe2\x80\xa6DjSplit exactly <code>n</code> times by a given substring. The resulting \xe2\x80\xa6BhCheck if strings starts with a substringCgCheck if a binary value starts with the given sequence.D`Check if a string value starts with the <code>sub</code> string.122AjReverses the string values0ClCast expression to another data type. Throws an error if \xe2\x80\xa6DiCast <code>AnyValue</code> to the provided data type and return a new \xe2\x80\xa6C`Cast throws an error if conversion had overflows102ClRemove leading and trailing characters, or whitespace if \xe2\x80\xa6CfPerforms a set of actions within a synchronous update.00BeUsed for <code>DataType::Time</code>.0EbCreate a column of time ranges from a <code>start</code> and <code>stop</code> \xe2\x80\xa600BoConvert a String column into a Datetime column.BhTurn the scan source into a memory sliceDdConstruct a <code>MemSlice</code> in a zero-copy manner from the \xe2\x80\xa61BaConvert to the physical data type0CnExpress a Duration in terms of its total number of integer \xe2\x80\xa60CgTruncate the given ms timestamp by the window boundary.0CgTruncate the given ns timestamp by the window boundary.0CgTruncate the given us timestamp by the window boundary.0DbEquivalent to <code>.collect::&lt;Result&lt;_, _&gt;&gt;()</code>.DkUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Decimal</code>0CcGet maximal value that could be hold by this dtype.0ChReturns an iterator of <code>Box&lt;dyn Array&gt;</code>0AiThe length of the window.000fSafety0CiAdd or replace a column, given as an expression, to a \xe2\x80\xa6DjAdd a new column to this <code>DataFrame</code> or replace an existing \xe2\x80\xa601nSet the minute0AhConfigure the row limit.DcTry to stop parsing when <code>n</code> rows are parsed. During \xe2\x80\xa60BoStop reading when <code>n</code> rows are read.0BbLimits the number of rows to read.1011322AkSet the CSV file\xe2\x80\x99s schemaAlSet the JSON file\xe2\x80\x99s schema0CiSet the schema to use for CSV file. The length of the \xe2\x80\xa60121nSet the second0B`Write a batch to the csv writer.B`Write a batch to the ipc writer.BaWrite a batch to the json writer.BdWrite a batch to the parquet writer.BgExplode/flatten a List or String Series00BlReverse a <code>ChunkedArray&lt;T&gt;</code>00lChunkedArray00ChService principal client secret for authorizing requestsBnOptions to connect to various cloud providers.00EgArguments used by <code>datetime</code> in order to produce an <code>Expr</code> of \xe2\x80\xa600ClReturn a boolean literal signifying whether the datatype \xe2\x80\xa60EgArguments used by <code>duration</code> in order to produce an <code>Expr</code> of \xe2\x80\xa600CmAn iterator that yields the current count and the element \xe2\x80\xa6AlMetadata for a Parquet file.00BdMap the group values to the position0ClValues need to implement this so that they can be stored \xe2\x80\xa600CkWrapper around PyObject from pyo3 with additional trait \xe2\x80\xa6ChTry to estimate the number of rows so that joins can \xe2\x80\xa60BdEnable Support for S3 Requester PaysCcFill current allocation if &gt; 0 otherwise reallocDeA <code>Column</code> that consists of a repeated <code>Scalar</code>0DiWrapper struct to convert an iterator of type <code>T</code> into one \xe2\x80\xa60DeCreate a <code>DataFrame</code> that has fields for all the known \xe2\x80\xa60ChAdvise OS how this range of memory map will be accessed.fSafety000CaGet all keywords that are supported by Polars SQLDkAppend in place. This is done by adding the chunks of <code>other</code>\xe2\x80\xa6000CgAppends a value of type <code>T</code> into the builder00FhAppend a <code>T</code> of <code>ObjectChunked&lt;T&gt;</code> made generic via the <code>Any</code> \xe2\x80\xa6110111DfApply a closure to a column at index <code>idx</code>. This is the \xe2\x80\xa60CeApply kernel and return result as a new ChunkedArray.00CnApply a closure elementwise. This is fastest when the null \xe2\x80\xa6BkApply a closure <code>F</code> elementwise.110CkGet arrow schema of the Ipc Stream File, this is faster \xe2\x80\xa6ClGet arrow schema of the avro File, this is faster than a \xe2\x80\xa61DiAsserts that two expressions of type <code>DataFrame</code> are equal \xe2\x80\xa6ChApplies a kernel that produces <code>Array</code> types.00D`The bitwise or (<code>|</code>) of the bits in two flags values.0000000000CkOptions used when deciding how to cast the arguments of \xe2\x80\xa6CgIf this dtype is a Categorical or Enum, returns the \xe2\x80\xa60BgTraits and utilities for temporal data.0CeCoerces a slice of datatypes into a single supertype.0DeReturns column order for <code>i</code>th column in this file. If \xe2\x80\xa60AcCompatibility level00BhUses aho-corasick to find many patterns.EdNote, <code>data_source_format</code> can be None for some <code>table_type</code>s.CeReturns the end position of the slice (offset + len).CaExclude a column from a wildcard/regex selection.0DkRecursively traverses directories and expands globs if <code>glob</code>\xe2\x80\xa60CkExtend this builder with the given number of null elements.0BkUses aho-corasick to replace many patterns.DnConverts <code>Some(v)</code> to <code>None</code> if <code>v</code> is empty.0CkReturn the index position of a literal substring in the \xe2\x80\xa60ChFind the index of a literal substring within another \xe2\x80\xa6AkAllow Float32 -&gt; Float640CfTraverse and collect every nth element in a new array.0CaGetter for the <code>DataType</code> of the value0CdGet mutable references to several items of the ArenaCcFetch and memoize the metadata of the parquet file.0CjCreate the tuples need for a group_by operation. * The \xe2\x80\xa6000AeTime or index column.000DmInfers a <code>ArrowSchema</code> from parquet\xe2\x80\x99s <code>FileMetadata</code>.0DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.0000000000CnTurns the selector into an ordered set of selected columns \xe2\x80\xa60AnIs the first path a cloud URL?0CcReturns whether the duration consists of full days.00CjExtract year from underlying NaiveDate representation. \xe2\x80\xa6000CnExtract year from underlying NaiveDateTime representation. \xe2\x80\xa600CkCheck if datatype is a primitive type. By that we mean that0CjThis is similar to a left-join except that we match on \xe2\x80\xa6EgConsume <code>self</code> and return a <code>JoinBuilder</code> to customize a join \xe2\x80\xa60BkGenerate a series of equally-spaced points.00BlColumn names that are used in the predicate.CkApply a function/closure over multiple columns once the \xe2\x80\xa60CcShould be used to match the chunk_id of another \xe2\x80\xa60AgThe schema to match to.0BlThe highest number of chunks for any column.0CeExtract the microseconds from a <code>Duration</code>00CeExtract the milliseconds from a <code>Duration</code>00DfCreates a new <code>CommentPrefix</code> from a <code>&amp;str</code>.0FeCreate a new <code>TrustMyLength</code> iterator that repeats <code>value</code> <code>len</code> \xe2\x80\xa6CfExtract ordinal year from underlying NaiveDateTime \xe2\x80\xa600ChGet the output datatype from the output element datatype0CdSplit into multiple DataFrames partitioned by groups0CdCompute the pearson correlation between two columns.0CnThis is a perfect sort particularly useful for an arg_sort \xe2\x80\xa6BgCentralized Polars serialization entry.Bfallow predicate pushdown optimizations0ChBin continuous values into discrete categories using \xe2\x80\xa6D`Create <code>ChunkedArray</code> with samples from a Uniform \xe2\x80\xa60BkAnalogous to <code>Iterator::reduce</code>.00CkGet a mutable reference to the function registry of the \xe2\x80\xa6DhReplace specific time component of a <code>DateChunked</code> with a \xe2\x80\xa60BkUses aho-corasick to replace many patterns.BaApply a rolling mean to a Series.0AeApply a rolling mean.0BaApply a rolling rank to a Series.0AeApply a rolling skew.0C`Create a LazyFrame directly from a parquet scan.0DgSet the values at indexes <code>idx</code> by applying a closure to \xe2\x80\xa600Abschema descriptor.00CeCheck if <code>DataFrame</code>\xe2\x80\x99 schemas are equal.0AmSerialize columns in parallel0B`Sets the validity of this array.000CmStream a query result into a parquet file. This is useful \xe2\x80\xa60nRemove prefix.nRemove suffix.DaGets the number of strong (<code>Arc</code>) pointers to this \xe2\x80\xa60BmTake ownership of the underlying columns vec.0CaModify the strings to their lowercase equivalent.ChUpdate the root column name to use lowercase characters.10BdConvert all characters to lowercase.DkTake another <code>Schema</code> and try to find the supertypes between \xe2\x80\xa6CaModify the strings to their titlecase equivalent.0BdConvert all characters to titlecase.CaModify the strings to their uppercase equivalent.ChUpdate the root column name to use uppercase characters.10BdConvert all characters to uppercase.DlUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Datetime</code>DlUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Duration</code>ChApplies a kernel that produces <code>Array</code> types.00DlUndo any renaming operation like <code>alias</code>, <code>keep_name</code>.C`Get a reference to the <code>GroupsSlice</code>.0FcCreate a <code>DataFrame</code> with the unique <code>values</code> of this <code>Series</code> \xe2\x80\xa6CmCount all unique values and create a struct mapping value \xe2\x80\xa6011CmAdd or replace multiple columns, given as expressions, to \xe2\x80\xa6AjColumns to select/ project00AhWhich columns to select.101112oSet the minutes0AmSets custom CSV read options.0CkRechunk the memory to contiguous chunks when parsing is \xe2\x80\xa600CbWhether to makes the columns contiguous in memory.0111oSet the seconds0BaSet sources of the scanned files.0CaThe set of supported logical types in this crate.000B`The time units defined in Arrow.000BbAuthority host used in oauth flowsBaA set of AWS security credentialsCmAn IndexMap where the keys are always u8 slices which are \xe2\x80\xa6AeUnity catalog client.B`Quantile and median aggregation.00C`A location on cloud storage, may have wildcards.0nContainer nameAcIn memory DataFrame0CjA 64-bit date representing the elapsed time since UNIX \xe2\x80\xa600nDefault regionBdDynamic dispatch to async functions.0CjPython function to dynamically compute key value metadata.CkA list of some logical data type with a fixed number of \xe2\x80\xa60o(values, width)110BaA Google Cloud Storage CredentialBeMaps Iceberg physical IDs to columns.0DoSpecialized expressions for <code>Series</code> of <code>DataType::List</code>.0CaA cached function that use <code>LruCache</code>.AlMatch / Evolve into a schema0BoSpecialized expressions for Categorical dtypes.CaMsi resource id for use with managed identity \xe2\x80\xa6BlRead Apache parquet format into a DataFrame.0BdWrite a DataFrame to Parquet format.0CiRun many expression optimization rules until fixed point.0ChA reference to a single item in <code>ScanSources</code>0BjA type-erased wrapper around ArrayBuilder.0AdSkip signing requestAeSkip signing requests1CiRun many type coercion optimization rules until fixed \xe2\x80\xa60CkAn IndexMap where the keys are hashed and compared with \xe2\x80\xa6CfArguments for <code>LazyFrame::unpivot</code> function00BlReturn the indices of the bottom k elements.00CjGet a list of all function names that are supported by \xe2\x80\xa6AmAnalyzes a chunk of CSV data.0ClRechunk and return a pointer to the start of the Series. \xe2\x80\xa60BbOnly implemented for numeric types110DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Binary</code>0DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.0000000000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60000000000ClConverts an f32 into a canonical form, where -0 == 0 and \xe2\x80\xa6ClConverts an f64 into a canonical form, where -0 == 0 and \xe2\x80\xa6CgChecks if groups are of equal length. The caller is \xe2\x80\xa60BhGet the lengths of the underlying chunksCmReturns an iterator over the lengths of the chunks of the \xe2\x80\xa6101BgThe typed heart of every Series column.0EhRemove all the columns in the <code>DataFrame</code> but keep the <code>height</code>\xe2\x80\xa60BdWhich side windows should be closed.0B`CloudOptions used to list files.000000EeColumn (sort) order used for <code>min</code> and <code>max</code> values of each \xe2\x80\xa600CcCount all successive non-overlapping regex matches.0DbCount how often the value produced by <code>element</code> occurs.01CmReturns the number of days in the month of the underlying \xe2\x80\xa600000CgGet the number of days in the month of a Date/Datetime.01BcUse comma as the decimal separator.0CdGenerate a default dummy value for a given datatype.0CgReturn a String describing the naive (un-optimized) \xe2\x80\xa60CfRemove a column by name and return the column removed.0AfDrop the key in place.DeGet the <code>DataType</code> of the <code>pl.element()</code> value.0CcCheck for equality where <code>None == None</code>.BoCreate a boolean mask by checking for equality.011100BlExtract a constant usize from an expression.0DjRetrieve one of the fields of this <code>StructChunked</code> as a new \xe2\x80\xa6CoGet access to one of this <code>StructChunked</code>\xe2\x80\x99s fields1DfConstruct a new <code>DurationChunked</code> from an iterator over \xe2\x80\xa6CaConverts from strings to this CategoricalChunked.00CgExtends this builder with the contents of the given \xe2\x80\xa6CnExtends this builder with the contents of the given series \xe2\x80\xa610BhGet a single value. Beware this is slow.ChGets <code>AnyValue</code> from <code>LogicalType</code>0AnGets AnyValue from LogicalType12211CjReturns the maximum value of each row group of the column.CjReturns the minimum value of each row group of the column.CbGet the supertype of the columns in this DataFrame0BnGet internal table map. For internal use only.fSafetyCkGet a single value by index. Don\xe2\x80\x99t use this operation \xe2\x80\xa611DiGet a single value from this <code>ChunkedArray</code>. If the return \xe2\x80\xa6222210222122BeInsert a new column at a given index.0DdGet a mask of all the duplicated rows in the <code>DataFrame</code>.0B`Get a mask of duplicated values.AcWhich rows to keep.0CdGet the index of the last non null value in this \xe2\x80\xa60CmCreate a column of linearly-spaced sequences from \xe2\x80\x98start\xe2\x80\xa600EcGet the median of the <code>ChunkedArray</code> as a new <code>Series</code> of \xe2\x80\xa6CiGet the median of the Series as a new Series of length 1.0100CkSet if the file is to be memory_mapped. Only works with \xe2\x80\xa60ClIf true sort in multiple threads. Default <code>true</code>.ClWhether sort in multiple threads. Default <code>true</code>.10101010DnConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while \xe2\x80\xa60DhCreate a new <code>DataFrame</code> but does not check the length or \xe2\x80\xa60??DhConstructs a new <code>Arc</code> with uninitialized contents in the \xe2\x80\xa60EeCreate a new <code>ChunkedArray</code> and explicitly set its <code>length</code> \xe2\x80\xa60DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa60CmPersist the key remap to ensure consistent mapping across \xe2\x80\xa60Bgallow projection pushdown optimizations0CkRead the parquet file in parallel (default). The single \xe2\x80\xa60CdRename the fields of the <code>StructChunked</code>.0CnFind indices where elements should be inserted to maintain \xe2\x80\xa6BfSelect a <code>Series</code> by index.0DfSerialize function customized for <code>DslPlan</code>, with stack \xe2\x80\xa6DiChange the underlying <code>TimeUnit</code>. This does not modify the \xe2\x80\xa60DiChange the underlying <code>TimeZone</code>. This does not modify the \xe2\x80\xa6CdShrink the capacity of this array to fit its length.00ChShrink the capacity of this DataFrame to fit its length.110111BiAdd a sort operation to the logical plan.0BeSort <code>DataFrame</code> in place.0CgGet the length of the string values as number of bytes.0CgGet the length of the string values as number of chars.0B`Call sync when closing the file.0CjTakes the validity of this array, leaving it without a \xe2\x80\xa60CcA time duration specified as a string, for example:CnExpress a Duration in terms of its total number of integer \xe2\x80\xa6000DiLook up the name in the schema and return an owned <code>Field</code> \xe2\x80\xa6Ck<code>ToString::to_string</code>, but without panic on OOM.00000000000000000000000000000000000000000000000000000000000000000000ChReturns a count of the unique values in the order of \xe2\x80\xa600BoKeep only the unique values in every sub-array.CiDrop non-unique rows and maintain the order of kept rows.BmKeep only the unique values in every sublist.CkGet unique values of this expression, while maintaining \xe2\x80\xa6DoDrop duplicate rows from a <code>DataFrame</code>. <em>This fails when </em>\xe2\x80\xa6CiCompute the unique elements, but maintain order. This \xe2\x80\xa6105324DgCreates a new <code>RawTable</code> that will not reallocate before \xe2\x80\xa6AmSet  <code>CsvEncoding</code>BbSet the encoding used by the file.01EiSet the <code>char</code> used as end of line. The default is <code>b&#39;\\n&#39;</code>.ChSet the character used to indicate an end-of-line (eol).01BoCreates a new <code>Field</code> with metadata.0BgReturns this array with a new validity.000BgWrite a encoded data to the ipc writer.E`Specialized expressions for <code>Series</code> of <code>DataType::Array</code>.0CnHolds an async writeable file, abstracted over local files \xe2\x80\xa60CiConfiguration keys for <code>MicrosoftAzureBuilder</code>CdThe no null iterator for a <code>BooleanArray</code>0DjAggregations that return <code>Series</code> of unit length. Those can \xe2\x80\xa60FeCompare <code>Series</code> and <code>ChunkedArray</code>\xe2\x80\x99s and get a <code>boolean</code> mask \xe2\x80\xa6000CnThis differs from ChunkWindowCustom and ChunkWindow by not \xe2\x80\xa600DgShift the values of a <code>ChunkedArray</code> by a number of periods.00ClNote: This struct contains all the field names for a few \xe2\x80\xa6CcConfigure how to provide conditional put operationsAgDisable tagging objectsAhDisables tagging objectsAcFall back to ImdsV1CcUsed to create the tuples for a group_by operation.00AaCompression codec0BmAn Arrow IPC reader implemented on top of \xe2\x80\xa60C`Mask the last unique values as <code>true</code>00fSafety000EgA <code>PolarsIterator</code> is an iterator over a <code>ChunkedArray</code> which \xe2\x80\xa600AgPushdown slices/limits.0BhAn iterator for <code>ScanSources</code>0B`Path to the service account fileBo<code>UnsafeCell</code>, but <code>Sync</code>.ClCreate a new column with the bitwise-and of the elements \xe2\x80\xa600B`Allow parallel table evaluation.0DbThis is an iterator over a <code>ListChunked</code> that saves \xe2\x80\xa6DbThis is an iterator over a <code>ArrayChunked</code> that save \xe2\x80\xa60101CnCreate a new column with the bitwise-or of the elements in \xe2\x80\xa600CiCast a numeric array to another numeric data type and \xe2\x80\xa60ChApply a function/closure over the groups of multiple \xe2\x80\xa60DiIgnore the list indices and apply <code>func</code> to the inner type \xe2\x80\xa600000CnApply a closure elementwise and write results to a mutable \xe2\x80\xa600fPanics0EnCan the <code>AnyValue</code> exist as having <code>dtype</code> as its <code>DataType</code>.0DdChange the underlying <code>TimeUnit</code>. And update the data \xe2\x80\xa6000CeDoes not check if the cast is a valid one and may \xe2\x80\xa6fSafetyCmCast from physical to logical types without any checks on \xe2\x80\xa6212110Boensure that nulls are propagated to both arraysCmGet a handle to the schema \xe2\x80\x94 a map from column names to \xe2\x80\xa60DgCompute the schema. This requires conversion to <code>IR</code> and \xe2\x80\xa60CmCount the number of rows. The slice passed must represent \xe2\x80\xa6CiAccumulate over multiple columns horizontally / row wise.00Biif <code>None</code> will be 1024^2 bytes00EcCreate a datetime range from a <code>start</code> and <code>stop</code> expression.00BcDefault values for missing columns.0CcEquality where <code>None</code> is treated as UTC.0DbCheck if all values in <code>DataFrame</code>s are equal where \xe2\x80\xa6DkCheck if all values in series are equal where <code>None == None</code> \xe2\x80\xa610ClReturns an estimation of the total (heap) allocated size \xe2\x80\xa6000CkExtract all capture groups from pattern and return as a \xe2\x80\xa60AoAwait the result synchronously.0CbRetrieve one or multiple of the fields of this \xe2\x80\xa60CnGet the final LazyFrame. This method assumes, that path is \xe2\x80\xa60CeGet the index of the first non null value in this \xe2\x80\xa60AkAllow Float64 -&gt; Float320B`Force parallel table evaluation.0CmGet the internal representation of the GroupBy operation. \xe2\x80\xa60CdRecurse nested types until we are at the leaf array.0000BoPredicate parts only referring to hive columns.BeHorizontally concatenate all strings.0CnSupport for traversing paginated response values that look \xe2\x80\xa6AmSet whether to write headers.0CeAllow casting when target dtype is lossless supertype0CkInterpolate intermediate values. Nulls at the beginning \xe2\x80\xa60CaTests if the provided compression level is valid.CgIterates over the (hash, key) pairs in insertion order.BbWhether to preserve the row order.DkIf true maintain the order of equal elements. Default <code>false</code>\xe2\x80\xa6DkWhether maintain the order of equal elements. Default <code>false</code>\xe2\x80\xa6ClThe output file needs to maintain order of the data that \xe2\x80\xa6CmThis will maintain the order of the input. Note that this \xe2\x80\xa632323232104CfAggregate the column horizontally to their max values.CcCreate a new column with the maximum value per row.1CfAggregate the column horizontally to their min values.CcCreate a new column with the minimum value per row.1CkCreate a new ChunkedArray filled with values at that index.CiCreate a new Series filled with values from the given \xe2\x80\xa61010CfConstruct a date ChunkedArray from individual time \xe2\x80\xa60CjConstruct a datetime ChunkedArray from individual time \xe2\x80\xa60BaThe partition nulls are put into.CmPipe different functions/ closure operations that work on \xe2\x80\xa60AmSelect fields using a bitmap.0CkWill push an item and not check if there is enough capacityfSafetyDbCreate <code>ChunkedArray</code> with samples from a Bernoulli \xe2\x80\xa600DdReplace column at index <code>idx</code> with a <code>Series</code>.0CkReplace or update a column. The difference between this \xe2\x80\xa60BgReplace all values by different values.BkReplace the given values with other values.0ChApply a rolling max to a Series based on another Series.0C`Apply a rolling maximum based on another column.0AgApply a rolling median.0ChApply a rolling min to a Series based on another Series.0C`Apply a rolling minimum based on another column.0ChApply a rolling std_dev to a Series based on another \xe2\x80\xa60C`Apply a rolling std-dev based on another column.0ChApply a rolling sum to a Series based on another Series.0BlApply a rolling sum based on another column.0CiApply a rolling variance to a Series based on another \xe2\x80\xa60CaApply a rolling variance based on another column.0BiRound to a number of significant figures.0CoIf <code>None</code> will be all written to a single row group.00DeSet the values at indexes <code>idx</code> to some optional value \xe2\x80\xa600DjSelect column(s) from this <code>DataFrame</code> and return them into \xe2\x80\xa60CcReturn the SET DIFFERENCE between both list arrays.CcTry to reduce memory pressure at the expense of \xe2\x80\xa60AlSet the null count directly.0CnShift the values by a given period and fill the parts that \xe2\x80\xa60CmShift the values in the array by some period and fill the \xe2\x80\xa61101CnReturns true if the chunks of the columns do not align and \xe2\x80\xa60BkSum all values horizontally across columns.00BiGather values from ChunkedArray by index.DeTake from <code>self</code> at the indexes given by <code>idx</code>.11111fSafety021222222001AjConvert to an Arrow Field.0CjTranspose a DataFrame. This is a very expensive operation.0DeReturns the underlying <code>object_store::buffered::BufWriter</code>0DbConstructs a new <code>Arc</code> with uninitialized contents, \xe2\x80\xa60DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa60BjSet the extension. Defaults to \xe2\x80\x9c.ipc\xe2\x80\x9d.0CnNumber of threads to use for reading. Defaults to the size \xe2\x80\xa60AhConfigure the row index.CaAdd a new column at index 0 that counts the rows.AgAdd a row index column.0000AhAdds a row index column.2201113211CiSet the CSV file\xe2\x80\x99s column separator as a byte characterCjSet the CSV file\xe2\x80\x99s column separator as a byte character.CkThe character used to separate fields in the CSV file. This012DiSkip the first <code>n</code> rows during parsing. The header will be \xe2\x80\xa6DgStart reading after <code>skip_rows</code> rows. The header will be \xe2\x80\xa601EeChange the underlying <code>TimeUnit</code> of the <code>Series</code>. This does \xe2\x80\xa60AbValid compressionsAkAn Azure storage credentialEaSpecialized expressions for <code>Series</code> of <code>DataType::String</code>.0ChConfigure how to provide <code>copy_if_not_exists</code>CdReplace simple projections with a faster inlined \xe2\x80\xa60CeA ring-buffer with a size determined at creation-timeCnOpaque binary data of fixed size. Enum parameter specifies \xe2\x80\xa6000CmConfiguration keys for <code>GoogleCloudStorageBuilder</code>BnRead Arrows Stream IPC format into a DataFrame0CcWrite a DataFrame to Arrow\xe2\x80\x99s Streaming IPC format0CaMask the first unique values as <code>true</code>00CfTrait used to get a hold to file handler or to the \xe2\x80\xa6n[minor, micro]0CiSerialization wrapper for T: TrySerializeToBytes that \xe2\x80\xa6AaSecret Access Key<BjSpecialized expressions for Struct dtypes.0CbScan arguments shared across different scan types.0CeAvoid computing payload checksum when calculating \xe2\x80\xa6ClHelper that combines the groups into a parallel iterator \xe2\x80\xa600fSafety0BkApply a closure <code>F</code> elementwise.00BkGet the approximate count of unique values.0CiAggregate all the chunks in the DataFrame to a single \xe2\x80\xa60AmGet the base offset from UTC.0BhCumulatively count values from 0 to len.0C`Get schema-level custom metadata of the Ipc fileCgGet schema-level custom metadata of the Ipc Stream file10BiUsed for <code>DataType::Datetime</code>.0EfCreate a column of datetime ranges from a <code>start</code> and <code>stop</code> \xe2\x80\xa600DcExtract the days from a <code>Duration</code> as a fractional value00:DhDeserialize function customized for <code>DslPlan</code>, with stack \xe2\x80\xa6AmExtend with a constant value.0CnConstruct a new <code>Series</code> from a slice of AnyValues.0EhConstruct a new <code>DateChunked</code> from an iterator over <code>NaiveDate</code>\xe2\x80\xa6EhConstruct a new <code>TimeChunked</code> from an iterator over <code>NaiveTime</code>\xe2\x80\xa6BmGet mutable access to the underlying columns.0CnFetch byte ranges into a HashMap keyed by the range start. \xe2\x80\xa60DcSimilar to <code>group_by</code>, but order of the DataFrame is \xe2\x80\xa6CiGroup DataFrame using a Series column. The groups are \xe2\x80\xa601DeDifferent from <code>group_by_windows</code>, where define window \xe2\x80\xa60BiDetermine whether days are business days.BoGet the buffer of bits representing null values0B`String appended after every row.0BdMatch or evolve to a certain schema.0CnCompute the mean of all numeric values horizontally across \xe2\x80\xa6CkCompute the mean of all values horizontally across columns.1CfParse a time zone string to <code>chrono_tz::Tz</code>0DbWe prefer this as <code>type_text</code> cannot be trusted for \xe2\x80\xa6BgReturns the offset of a positive slice.CgPropagate nulls of nested datatype to all levels of \xe2\x80\xa6BePropagate down nulls in nested types.01100EeGet the quantile of the <code>ChunkedArray</code> as a new <code>Series</code> of \xe2\x80\xa6CkGet the quantile of the ChunkedArray as a new Series of \xe2\x80\xa60100CiReplace the leftmost literal (sub)string with another \xe2\x80\xa60CgReplaces a \xe2\x80\x9c~\xe2\x80\x9d in the Path with the home directory.0CiApply a rolling mean to a Series based on another Series.0BmApply a rolling mean based on another column.0CiApply a rolling rank to a Series based on another Series.0DkSelect column(s) from this <code>DataFrame</code> by range and return a \xe2\x80\xa60fPanics00000BcSet the \xe2\x80\x98sorted\xe2\x80\x99 bit meta info.EgSet this <code>Series</code> as <code>sorted</code> so that downstream code can use \xe2\x80\xa610BeSlices this <code>StructArray</code>.0fSafetyEhSplit a <code>DataFrame</code> in <code>target</code> elements. The target doesn\xe2\x80\x99t \xe2\x80\xa6CkSplit the string by a substring and keep the substring. \xe2\x80\xa6CkRemove trailing characters, or whitespace if matches is \xe2\x80\xa6CgExtends this builder with the contents of the given \xe2\x80\xa6CnExtends this builder with the contents of the given series \xe2\x80\xa610EiReturns <code>&amp;self</code> for all but <code>ArrowDataType::Extension</code>. For \xe2\x80\xa60BnTurn any iterator in a trusted length iteratorDmEquivalent to <code>.collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;()</code>.DkDeserializes [<code>crate::parquet::thrift_format::FileMetadata</code>] \xe2\x80\xa60DiCast <code>AnyValue</code> to the provided data type and return a new \xe2\x80\xa60DcIf we have the only reference to <code>T</code> then unwrap it. \xe2\x80\xa60CiUpsample a <code>DataFrame</code> at a regular frequency.0<<DkGet a single value from this <code>ChunkedArray</code>. Null values are \xe2\x80\xa6=BgGet a value at a certain index location10>C`Set the batch size to use while writing the CSV.CjSet the batch size (number of records to load at one time)10CkSets the chunk size used by the parser. This influences \xe2\x80\xa600000BdSet whether the CSV file has headersBkSets whether the CSV file has a header row.01CaReduce memory usage at the expense of performanceCgReduce memory consumption at the expense of performance01BoSet the CSV file\xe2\x80\x99s null value representation.0CkWhether place null values last. Default <code>false</code>.CnWhether to place null values last. Default <code>false</code>.10CmSet the reader\xe2\x80\x99s column projection. This counts from 0, \xe2\x80\xa60CjSet the reader\xe2\x80\x99s column projection: the names of the \xe2\x80\xa61CmWhich columns to select denoted by their index. The index \xe2\x80\xa6202212FcSet the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If \xe2\x80\xa6BoSet the single byte character used for quoting.CjSet the character used for field quoting. This is most \xe2\x80\xa6012DjSkip the first <code>n</code> lines during parsing. The header will be \xe2\x80\xa6DiStart reading after <code>skip_lines</code> lines. The header will be \xe2\x80\xa601AkCompute and write statistic0AoToggle type check optimization.0BlA single value that\xe2\x80\x99s used for all columns000CjApply kernels on the arrow array chunks in a ChunkedArray.00EbCompare <code>Series</code> and <code>ChunkedArray</code>\xe2\x80\x99s using inequality \xe2\x80\xa600BaDefines valid compression levels.AnOptions for writing CSV files.00CnAn ordered collection of unique strings with an associated \xe2\x80\xa6000BmA registry that holds user defined functions.CmKey/value pairs that can be attached to a Parquet file as \xe2\x80\xa60BbSet the instance metadata endpointBfTrimmed down object safe polars object0AiA dimension in a reshape.000000BjOptions to serialize logical types to CSV.0CjMainly used to enable compression when serializing the \xe2\x80\xa6D`Ensure all the chunks in the <code>DataFrame</code> are aligned.0CdGet the inner data type of a multidimensional array.0BhCheck if strings contain a given literal0CbCheck if a binary value contains a literal binary.CeCheck if a string value contains a literal substring.1CiAccumulate over multiple columns horizontally / row wise.00ClConvert a collection of <code>DataType</code> into a schema.CmExtract each successive non-overlapping regex match in an \xe2\x80\xa60BlPer-field overwrites for writing properties.00DkUsed for <code>DataType::Float64</code> and <code>DataType::Float32</code>.0BbConvert from a bits value exactly.0000000000BkCreate a new ChunkedArray from an iterator.000000000000CjCreate a key value metadata object from a Python function.CbGet column index of a <code>Series</code> by name.0gExample0CeReturns the DataType variant associated with this \xe2\x80\xa6000CnGroup based on a time value (or index value of type Int32, \xe2\x80\xa60DiWindow boundaries are created based on the given <code>Window</code>, \xe2\x80\xa60DdExtract the hours from a <code>Duration</code> as a fractional value00ChSet the JSON reader to infer the schema of the file. \xe2\x80\xa60BiGet the inner data type of a nested type.0BdGet a mask of the last unique value.0Ee<code>madvise()</code> with <code>MADV_WILLNEED</code> on unix systems. This is a \xe2\x80\xa6ClConstructs a new atomically reference-counted slice with \xe2\x80\xa6000BoReturn only the keys array when going to arrow.0DjReplace specific time component of a <code>DatetimeChunked</code> with \xe2\x80\xa60AeApply a rolling skew.0BeApply a rolling quantile to a Series.0AiApply a rolling quantile.0AeSet the column names.0CeReturn the SET INTERSECTION between both list arrays.AjReturns this array sliced.0CiEscapes all regular expression meta characters in the \xe2\x80\xa60fSafety0gReturns0FeConvert an <code>StringChunked</code> to a <code>Series</code> of <code>DataType::Decimal</code>. \xe2\x80\xa600CfConvert the datatype of the list into the physical \xe2\x80\xa6CeConvert a struct to the underlying physical datatype.CgConvert the datatype of the array into the physical \xe2\x80\xa6CjConverts a Series to their physical representation, if \xe2\x80\xa631130Dathe <code>PhysicalType</code> of this <code>ArrowDataType</code>.0DhApply a closure that may fail to a column at index <code>idx</code>. \xe2\x80\xa60ChApplies a kernel that produces <code>Array</code> types.00BoAdvise OS how this memory map will be accessed.CeCheck if operations are order dependent and unset \xe2\x80\xa60CgAdd or replace multiple columns to a DataFrame, but \xe2\x80\xa60BkSet the compression used. Defaults to None.00ChSet the compression used. Defaults to <code>Zstd</code>.11110BaSet the CSV file\xe2\x80\x99s date format.0BbSet the maximum number of retries.0AcSet the microsecond0AcSet the nanoseconds0CeSet values that will be interpreted as missing/ null.CdSet values that will be interpreted as missing/null.01CfSet the CSV file\xe2\x80\x99s quoting behavior. See more on \xe2\x80\xa60BcSet the \xe2\x80\x98sorted\xe2\x80\x99 bit meta info.0BaSet the CSV file\xe2\x80\x99s time format.0CcConfiguration keys for <code>AmazonS3Builder</code>CeRun common-subexpression-elimination. This elides \xe2\x80\xa60CiRun common-subplan-elimination. This elides duplicate \xe2\x80\xa60CiHyperLogLog in Practice: Algorithmic Engineering of a \xe2\x80\xa6nUsed by scans.0CgUtility methods for dealing with nested chunked arrays.00DeSpecialized expressions for <code>Series</code> with dates/datetimes.0CkConfiguration variant that defaults to raising on mismatch.0CnSpecialized expressions for modifying the name of existing \xe2\x80\xa60BmPython hooks SIGINT to instead generate a \xe2\x80\xa60BfParquet statistics for a nesting level0DfPolars wrapper around <code>ObjectStore</code> functionality. This \xe2\x80\xa60BcThe serialized service account key.CkAn interior mutable version of <code>StatisticsFlags</code>0AgThe statistics to write0BdUse object store with url scheme \xe2\x80\xa6ClMeant for internal use. In very rare conditions this can \xe2\x80\xa600BdAdd a given number of business days.CgApply a kernel that outputs an array of different type.00ChRetrieve the indexes need to sort this and the other \xe2\x80\xa60fPanics000100DiParsing string values and return a <code>DateChunked</code> Different \xe2\x80\xa600ChApplies a kernel that produces <code>Array</code> types.00CmForcibly blocks this thread to evaluate the given future. \xe2\x80\xa6CiCast a <code>ChunkedArray</code> to <code>DataType</code>BeCast expression to another data type.CjCast <code>Series</code> to another <code>DataType</code>.2201ChA predicate that gets given statistics and evaluates \xe2\x80\xa6AnReturns the compression level.00EeChange the underlying <code>TimeZone</code> of the <code>Series</code>. This does \xe2\x80\xa60DlCreates an empty <code>DataFrame</code> with a specific <code>height</code>.0DhCreate an empty <code>DataFrame</code> with empty columns as per the \xe2\x80\xa60DkRecursively traverses directories and expands globs if <code>glob</code>\xe2\x80\xa60CnConstructs a schema keyed by the physical ID stored in the \xe2\x80\xa60BkCreate a new ChunkedArray from an iterator.00DiImplementations of upstream traits for <code>ChunkedArray&lt;T&gt;</code>0CiCreate a new ChunkedArray from a Vec and a validity mask.0ClThis module defines a FunctionRegistry for supported SQL \xe2\x80\xa6C`Same as get_cat, but with the hash pre-computed.0DhReturns a mutable reference into the given <code>Arc</code>, without \xe2\x80\xa60ChAmortize allocations by reusing a row. The caller is \xe2\x80\xa60CmConverts a hash to a partition. It is guaranteed that the \xe2\x80\xa6CiInfer the schema of a CSV file by reading through the \xe2\x80\xa600BeGet a mask of the first unique value.0nCheck validity0AjRe-export to shorten code.BfApply a function to the parse options.01BjTranslate the negative index to an offset.0CeCheck for inequality where <code>None == None</code>.CaCreate a boolean mask by checking for inequality.011100CgExtends this builder with the contents of the given \xe2\x80\xa60BoApply a rolling median based on another column.0ChDetermines if the credential requires the request be \xe2\x80\xa6EhSplit a <code>Container</code> in <code>target</code> elements. The target doesn\xe2\x80\x99t \xe2\x80\xa6CjRemove leading characters, or whitespace if matches is \xe2\x80\xa6ElConvert to a <code>Vec</code> but don\xe2\x80\x99t return <code>Option&lt;T::Native&gt;</code> if \xe2\x80\xa60CfExpress a Duration in terms of its total number of \xe2\x80\xa60DjUnpack to <code>ChunkedArray</code> of dtype <code>DataType::Binary</code>0CkGiven two data types, determine the data type that both \xe2\x80\xa6EeNote: Prefer using <code>Writeable</code> / <code>Writeable::try_new</code> where \xe2\x80\xa60DiConstructs a new <code>Arc</code> with uninitialized contents, in the \xe2\x80\xa60DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa60BfSet context information for the writer0AdSet the microseconds0AdSet the milliseconds0ChTry to estimate the number of rows so that joins can \xe2\x80\xa60BeImplode lists to match nesting types.EaTakes a <code>name</code> and <code>capacity</code> and constructs a new builder.0AmBitwise Reduction Operations.0CkCreate a new ChunkedArray filled with values at that index.00B`Replace None values with a value00ClDefault field values when they are missing from the data \xe2\x80\xa60AdFabric session tokenAdFabric workload hostChFile containing token for Azure AD workload identity \xe2\x80\xa6CiReads LazyFrame from a filesystem or a cloud storage. \xe2\x80\xa60DkByte source backed by a <code>MemSlice</code>, which can potentially be \xe2\x80\xa60BnApply predicates/filters as early as possible.0CjThe compression strategy to use for writing Parquet files.0BdOptions for the Polars Row Encoding.0DlTake the <code>ScalarColumn</code> as a series with a <code>n</code> values.0B`Evaluate the number of set bits.0DiBuild an <code>ObjectStore</code> based on the URL and passed in url. \xe2\x80\xa60BiBuild the values array of the dictionary:0DhConcat <code>DataFrame</code>s diagonally. Concat diagonally thereby \xe2\x80\xa60DcConcat LazyFrames diagonally. Calls <code>concat</code> internally.0CnCast null arrays to inner type and ensure that all offsets \xe2\x80\xa60CcCount all successive non-overlapping regex matches.0CgReturn a String describing the naive (un-optimized) \xe2\x80\xa60DmDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete \xe2\x80\xa60BjThe number of chunks for the first column.0CfConvert from a bits value, unsetting any unknown bits.0000000000CgGet the index of the first occurrence of a glob symbol.0CnFinds the value corresponding to a key with the given hash \xe2\x80\xa6BkFiles with these prefixes will not be read.0BdAdd the boundaries to the DataFrame.0AoInfer the data type of a record0CkReturns true if contains a single chunk and has no null \xe2\x80\xa60nCheck validity0Adreturns the metadataBdCustom file-level key value metadataB`key_value_metadata of this file.01201ClSearch through a series of chunks for the first position \xe2\x80\xa600Eg<code>madvise()</code> with <code>MADV_SEQUENTIAL</code> on unix systems. This is a \xe2\x80\xa6DfExtract the minutes from a <code>Duration</code> as a fractional value00CnCreate a new SQLContext from a table map. For internal use \xe2\x80\xa6CdConverts a sequence of columns into a DataFrame, \xe2\x80\xa60CkConvert fixed offset to Etc/GMT one from time zone database0DePrepare the given <code>DslPlan</code> for execution on Polars Cloud.0ChSplits datatypes that cannot be natively read into a \xe2\x80\xa60AdRemove empty chunks.0BgReplace all values by different values.CkRestricts the bounds of the slice to within a number of \xe2\x80\xa6CjInfer the schema data types of rows by determining the \xe2\x80\xa60C`Create a LazyFrame directly from a parquet scan.0DfExtract the seconds from a <code>Duration</code> as a fractional value00CkSelect with a known schema. The schema names must match \xe2\x80\xa60CnChecks if casting can be done to a dtype with a configured \xe2\x80\xa60CnCompute the spearman rank correlation between two columns. \xe2\x80\xa60ElReturns <code>i</code> such that <code>&amp;self.as_str()[i..]</code> strips the scheme, \xe2\x80\xa60CfExpress a Duration in terms of its total number of \xe2\x80\xa6000ChApplies a kernel that produces <code>Array</code> types.00AnSet the CSV decimal separator.BoParse floats with a comma as decimal separator.01CkContinue with next batch when a ParserError is encountered.DfSet values as <code>Null</code> if parsing fails because of schema \xe2\x80\xa6CmReturn a <code>null</code> if an error occurs during parsing.1220121ClWhether sort in multiple threads. Default <code>true</code>.CoWhether to sort in multiple threads. Default <code>true</code>.10AjSet allowed optimizations.0CnSets the CSV parsing options. See map_parse_options for an \xe2\x80\xa60B`Add a row index column in place.0C`Modify a schema before we run the lazy scanning.0ChToggle expression simplification optimization on or off.0BbToggle type coercion optimization.0BfCombine the validities of two structs.CnAdaptor which wraps the interface of ObjectStore::BufWriter\xe2\x80\xa60CeCheck if operations are order dependent and unset \xe2\x80\xa60CcThe physical datatype backing a categorical / enum.000CcOnly read columns that are used later in the query.0BfSort options for multi-series sorting.0000CjUtility whose Display impl truncates the string unless \xe2\x80\xa6ChSerializes a Python object without additional system \xe2\x80\xa6BbRepresents a user-defined function000DfReturns the backing <code>Series</code> for the values of this column.0CkThis will not panic even in debug mode - there are some \xe2\x80\xa60CiEnsure the chunks in both ChunkedArrays have the same \xe2\x80\xa6CiAggregate all the chunks in the DataFrame to a single \xe2\x80\xa60BbEvaluate the number of unset bits.0BiA function that creates an object builder0CkExecute all the lazy operations and collect them into a \xe2\x80\xa60BlConcat the DataFrames to a single DataFrame.CdCheck (recursively) whether datatype contains an \xe2\x80\xa60EhDrop columns that are in <code>names</code> without allocating a <code>HashSet</code>\xe2\x80\xa60CkGiven multiple data types, determine the data type that \xe2\x80\xa6DkFind the index of the first element of <code>arr</code> that is greater \xe2\x80\xa60BkForcibly reads at least one byte each page.DfCreate a <code>CategoricalChunked</code> from a physical array and \xe2\x80\xa600DeConstructs a new <code>ColumnStats</code> from a single-value Series.DfConstruct a new <code>DatetimeChunked</code> from an iterator over \xe2\x80\xa6BjIntended to be called with an internal \xe2\x80\xa6CeParse a configuration from a Hashmap. This is the \xe2\x80\xa60CfGets the hash, key and value at the given index by \xe2\x80\xa6CjGets the key and value at the given index by insertion \xe2\x80\xa6fSafety0DgGet a hold to an implementor of the <code>Display</code> trait that \xe2\x80\xa6CiIndicate if this expression only selects columns; the \xe2\x80\xa6CcIndicate if this expression expands to multiple \xe2\x80\xa6ChAnswers if this type matches the given type of a schema.0CiMaterialize this datatype if it is unknown. All other \xe2\x80\xa60ClConstructs a new atomically reference-counted slice with \xe2\x80\xa6000de.g.CnSplit into multiple DataFrames partitioned by groups Order \xe2\x80\xa60CkInsert a key which will never be mapped to. Returns the \xe2\x80\xa6CjReplace all matching literal (sub)strings with another \xe2\x80\xa60CiApply a rolling quantile to a Series based on another \xe2\x80\xa60CaApply a rolling quantile based on another column.0DiGiven a <code>slice</code> that is relative to the start of a list of \xe2\x80\xa6==ClGets the underlying <code>ObjectStore</code> implementation.0>>>ClSet the comment prefix for this instance. Lines starting \xe2\x80\xa6CmSets the comment prefix for this instance. Lines starting \xe2\x80\xa601DiSets the maximum bytes size of a data page. If <code>None</code> will \xe2\x80\xa60DkWhether maintain the order of equal elements. Default <code>false</code>\xe2\x80\xa6ClWhether to maintain the order of equal elements. Default \xe2\x80\xa610AmReverse the order of sorting.BmReverse the order of sorting for each column.10CmRaise an error if CSV is empty (otherwise return an empty \xe2\x80\xa6CgWhether to raise an error if the frame is empty. By \xe2\x80\xa601CnSet the row group size (in number of rows) during writing. \xe2\x80\xa60BcToggle slice pushdown optimization.0AdAllowedOptimizations0DhCluster sequential <code>with_columns</code> calls to independent calls.0BoSpecialized expressions for Categorical dtypes.000CbAll masked out values have their nulls propagated.0CfRepresents the compression algorithms that we have \xe2\x80\xa60EhConstructs a new <code>Column</code> of the same variant as <code>self</code> from a \xe2\x80\xa60fPanicsChEvaluate the number most-significant set bits before \xe2\x80\xa60CaGet the string corresponding to a categorical id.0CkSplit DataFrame into chunks in preparation for writing. \xe2\x80\xa60DhConcat <code>DataFrame</code>s horizontally. Concat horizontally and \xe2\x80\xa60AoConcat LazyFrames horizontally.0CmUtility for decoding JSON that adds the response value to \xe2\x80\xa60BnCreate a new <code>DataFrame</code> from rows.0CgReturns the null count of each row group of the column.CdGet a hold to an object that can be formatted or \xe2\x80\xa600CcIndicate if this expression expands to multiple \xe2\x80\xa6AiAdd columns horizontally.0BoSame as to_cat, but with the hash pre-computed.0DcCheck if this <code>DataType</code> is a primitive numeric type \xe2\x80\xa60CjA projection that only takes a column or a column + alias.DbIterator over the rows in this <code>DataFrame</code> as Arrow \xe2\x80\xa60CcMax row group height, useful for sharing column \xe2\x80\xa600CnReturns an upper bound such that all strings inserted into \xe2\x80\xa60DiConstruct an object_store <code>Path</code> from a string without any \xe2\x80\xa60CmThis module implements an order statistic multiset, which \xe2\x80\xa6DhCreate <code>ChunkedArray</code> with samples from a Standard Normal \xe2\x80\xa60C`Create a LazyFrame directly from a parquet scan.0DiSet the function that will be called by the <code>polars_warn!</code> \xe2\x80\xa60CkStream a query result into an csv file in a partitioned \xe2\x80\xa60CeStream a query result into an ipc/arrow file in a \xe2\x80\xa60ChA predicate that gets given statistics and evaluates \xe2\x80\xa6DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60000000000DeTake from <code>self</code> at the indexes given by <code>idx</code>.fSafety01001BkGet the name for <code>include_paths</code>0CbGet column index of a <code>Series</code> by name.0BiGet the inner data type of a nested type.0DcConcatenate a <code>DataFrame</code> to this <code>DataFrame</code>0BeSet the CSV file\xe2\x80\x99s datetime format.0CnOverwrite the schema with the dtypes in this given Schema. \xe2\x80\xa6CjOverwrite the dtypes in the schema in the order of the \xe2\x80\xa601BeSet the CSV file\xe2\x80\x99s float precision.0BeSet the CSV file\xe2\x80\x99s line terminator.0AmTreat missing fields as null.000CkAutomatically try to parse dates/datetimes and time. If \xe2\x80\xa6000DeA utility that allocates an <code>AmortSeries</code>. The applied \xe2\x80\xa6DhAn <code>AnyValueBuffer</code> that should be used when we trust the \xe2\x80\xa60AhFabric token service urlAjIceberg positional deletes0????BkCurrently intended only for Iceberg supportCjSpecify if the scan provider should allow slice pushdowns.0DcParsing string values and return a <code>DatetimeChunked</code> \xe2\x80\xa600CjEvaluate the number most-significant unset bits before \xe2\x80\xa60CiEvaluate the number least-significant set bits before \xe2\x80\xa60AoDataType::Categorical to string0CiPotentially avoids copying memory compared to a naive \xe2\x80\xa6CeReplace None values with a give value <code>T</code>.00ClCreate a new <code>ChunkedArray</code> from existing chunks.0DfConstruct a new <code>DurationChunked</code> from an iterator over \xe2\x80\xa6DjPerform an in-place <code>Iterator::filter_map</code> over two vectors \xe2\x80\xa6Eh<code>madvise()</code> with <code>MADV_POPULATE_READ</code> on linux systems. This a \xe2\x80\xa6CkConstruct a new BlockingCloudWriter, re-using the given \xe2\x80\xa60CkStream a query result into a JSON file in a partitioned \xe2\x80\xa60AnSlices the <code>Array</code>.000000000DhSplit exactly <code>n</code> times by a given substring and keep the \xe2\x80\xa6BjReturns <code>(schema, hive_schema)</code>CfGet a dot language representation of the streaming \xe2\x80\xa60CkReturns the cached file after ensuring it is up to date \xe2\x80\xa6DfReturn whether or not the <code>CategoricalChunked</code> uses the \xe2\x80\xa600DkAdds a column to the <code>DataFrame</code> without doing any checks on \xe2\x80\xa60CkSet the CSV file\xe2\x80\x99s forced scientific notation for floats.0CmSpecify whether to place nulls last, per-column. Defaults \xe2\x80\xa60DaSpecify sorting order for the column. Default <code>false</code>.DcSort order for all columns. Default <code>false</code> which is \xe2\x80\xa610AlSet the JSON file\xe2\x80\x99s schemaBgOverwrite parts of the inferred schema.CgOverwrites the data types in the schema by column name.012AkTurn off all optimizations.0CiThis trait can be registered, after which that global \xe2\x80\xa60AlApplication credentials pathCkContext that can be used to construct custom file-level \xe2\x80\xa60fSafetyDeGet a reference to a <code>Series</code> for this <code>Column</code>ChGet the <code>ScalarColumn</code> as <code>Series</code>01DcTake the <code>ScalarColumn</code> as a series with a single value.0EfReturns <code>i</code> such that <code>&amp;self.to_str()[..i]</code> trims to the \xe2\x80\xa60CkEvaluate the number least-significant unset bits before \xe2\x80\xa605DjDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa60CeFind the indices of the values where the validity \xe2\x80\xa6CiFind the indices of elements where the null masks are \xe2\x80\xa61010DiGet the <code>Vec&lt;PlSmallStr&gt;</code> representing the column names.0Cjreturns the bounds for the earliest window bounds that \xe2\x80\xa60DjIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa60BjTry to infer the output datatype of a UDF.0DgDecompress <code>bytes</code> if compression is detected, otherwise \xe2\x80\xa60DhExtract the nanoseconds from a <code>Duration</code> as a fractional \xe2\x80\xa600CdConverts a sequence of columns into a DataFrame, \xe2\x80\xa60BnNote, technically shouldn\xe2\x80\x99t be under the \xe2\x80\xa60CmGathers elements from a ChunkedArray, specifying for each \xe2\x80\xa6CbTake elements by a slice of <code>ChunkId</code>s.CnFinds the value corresponding to a key with the given hash \xe2\x80\xa6ClDirectly returns the cached file if it finds one without \xe2\x80\xa6ChApplies a kernel that produces <code>Array</code> types.00ChAdvise OS how this range of memory map will be accessed.BmEnsure all equal height and names are unique.0DjAdd a new column to this <code>DataFrame</code> or replace an existing \xe2\x80\xa60CnToggle common subexpression elimination optimization on or \xe2\x80\xa6ChToggle common subplan elimination optimization on or offCjadd a function registry to the SQLContext the registry \xe2\x80\xa6D`This is for <code>polars-python</code> to inject so that the \xe2\x80\xa60CkA default registry that does not support registering or \xe2\x80\xa6AiFabric cluster identifierDiSame helper as <code>_agg_helper_idx</code> but for aggregations that \xe2\x80\xa600DaDetermine the supertype of a collection of <code>AnyValue</code>.BkApply a closure <code>F</code> elementwise.00000<<<CiCast a numeric array to another numeric data type and \xe2\x80\xa60CnExtend the columns without checking for name collisions or \xe2\x80\xa60CfReturn a String describing the optimized logical plan.0DhCreate an empty <code>DataFrame</code> with empty columns as per the \xe2\x80\xa60DkConstruct a new <code>DateChunked</code> from an iterator over optional \xe2\x80\xa6DkConstruct a new <code>TimeChunked</code> from an iterator over optional \xe2\x80\xa6DfConvert a non-logical <code>ListChunked</code> back into a logical \xe2\x80\xa6DgConvert a non-logical <code>ArrayChunked</code> back into a logical \xe2\x80\xa6DhConvert a non-logical <code>StructChunked</code> back into a logical \xe2\x80\xa6fSafetyCkConvert a non-logical series back into a logical series \xe2\x80\xa6343410CkGet a single value. Beware this is slow. If you need to \xe2\x80\xa62220022DdConsumes the <code>Arc</code>, returning the wrapped pointer and \xe2\x80\xa60DiExtract the microseconds from a <code>Duration</code> as a fractional \xe2\x80\xa600DiExtract the milliseconds from a <code>Duration</code> as a fractional \xe2\x80\xa6CeExtract the milliseconds from a <code>Duration</code>1BnGet a boolean mask of the local maximum peaks.BnGet a boolean mask of the local minimum peaks.CnRechunks all columns to only have a single chunk and turns \xe2\x80\xa60EbCreate a new <code>ScalarColumn</code> from a <code>length=1</code> Series and \xe2\x80\xa60CnPrints a log message if sensitive verbose logging has been \xe2\x80\xa6EfSet <code>milliseconds</code>, <code>microseconds</code>, and <code>nanoseconds</code>0ClSet custom file-level key value metadata for the Parquet \xe2\x80\xa60BgToggle predicate pushdown optimization.0EdZip with a <code>ChunkedArray</code> then apply a binary function <code>F</code> \xe2\x80\xa600ChThe schema names must match the column names of this \xe2\x80\xa60B`See <code>amortized_iter</code>.DbThis is an iterator over a <code>ArrayChunked</code> that save \xe2\x80\xa61001CmRuns the passed function, catching any KeyboardInterrupts \xe2\x80\xa60EfCreate a new <code>ScalarColumn</code> from a <code>length&lt;=1</code> Series and \xe2\x80\xa60BlGet the configured memory prefetch function.DlGet the <code>RowEncodingContext</code> for a certain <code>DataType</code>.00ClTurn <code>Column</code> into a <code>Column::Series</code>.0CiReturn the SET SYMMETRIC DIFFERENCE between both list \xe2\x80\xa6CnStream a query result into a parquet file in a partitioned \xe2\x80\xa60CgExtends this builder with the contents of the given \xe2\x80\xa60CcTake <code>Series</code> from a <code>Column</code>EfTake the <code>ScalarColumn</code> and materialize as a <code>Series</code> if not \xe2\x80\xa601DnThis returns <code>Result&lt;&gt;</code> - if a write was performed before \xe2\x80\xa60ChSet the number of rows to use when inferring the csv \xe2\x80\xa6CiSet the number of rows to use when inferring the json \xe2\x80\xa61110BhToggle projection pushdown optimization.0ChAllow casting of primitive types (numeric, bools) to \xe2\x80\xa6BnIf virtual hosted style request has to be usedfSafety0CgSpecify if the scan provider should allow predicate \xe2\x80\xa60BmApply a closure <code>F</code> to each array.00CnRead the number of rows without parsing columns useful for \xe2\x80\xa60CmRead the number of rows without parsing columns, assuming \xe2\x80\xa60BcAllow casting to change time units.0DjDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa60ClTotal len divided by max len of first and last non-empty \xe2\x80\xa60EfConstruct a new <code>Series</code> with the given <code>dtype</code> from a slice \xe2\x80\xa60CoCreate a new <code>DataFrame</code> from an iterator over rows.0AjGet current optimizations.0DjIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> \xe2\x80\xa60ClInfer the schema of rows by determining the supertype of \xe2\x80\xa60<<BiToggle cluster with columns optimization.0CnWrite a partitioned parquet dataset. This functionality is \xe2\x80\xa60EdWrapper that implements <code>IntoCredentialProvider</code>, <code>Debug</code>, \xe2\x80\xa60???DkStruct representation of the arrow <code>month_day_nano_interval</code> \xe2\x80\xa6ChSpecify if the scan provider should allow projection \xe2\x80\xa60DfApplies a kernel that produces <code>ArrayRef</code> of the same type.00CjCreate a list-array from an iterator. Used in group_by \xe2\x80\xa6000CkGiven two data types, determine the data type that both \xe2\x80\xa6DiSets custom schema metadata. Must be called before <code>start</code> \xe2\x80\xa6000BoControl whether extension types may be created.0fSafetyCkTake elements by a slice of optional <code>ChunkId</code>s.DaTake function that checks of null state in <code>ChunkIdx</code>.BjTry to infer the output datatype of a UDF.0DcConcatenate a <code>DataFrame</code> to this <code>DataFrame</code>0BoTruncate lines that are longer than the schema.000CdCategorical converter that prunes unused categories.0CgSet the container credentials full URI when used in EKS77777777ChAmortize allocations by reusing a row. The caller is \xe2\x80\xa60DiIf <code>ambiguous</code> is length-1 and not equal to \xe2\x80\x9cnull\xe2\x80\x9d, we \xe2\x80\xa60DnGet the <code>ScalarColumn</code> as <code>Series</code> if it was already \xe2\x80\xa60EhChange the underlying <code>TimeUnit</code> and <code>TimeZone</code>. This does not \xe2\x80\xa6BoTry apply a closure <code>F</code> elementwise.00BlSeries to <code>ChunkedArray&lt;T&gt;</code>0CoSpecify order for each column. Defaults all <code>false</code>.0CcSkip this number of rows after the header location.BlNumber of rows to skip after the header row.01EhWill add the <code>AnyValue</code> into <code>Self</code> and unpack as the physical \xe2\x80\xa60CeApplies a function only to the non-null elements, \xe2\x80\xa60ClReturn a String describing the optimized logical plan in \xe2\x80\xa60CjCreate a list-array from an iterator. Used in group_by \xe2\x80\xa60CkGet the value at this index as a downcastable Any trait \xe2\x80\xa6000BiCreates a CSV reader using a file handle.0CfMerge 2 lists of columns into one, where each list \xe2\x80\xa6CnSelect with a known schema without checking for duplicates \xe2\x80\xa60ClStrips the scheme, then returns the authority component, \xe2\x80\xa60ClChecks if the keyboard interrupt flag is set, and if yes \xe2\x80\xa6000ClNote: This does not update the schema from the inference \xe2\x80\xa60CdChecks that the file contains all the columns in \xe2\x80\xa60CnEnsure the chunks in ChunkedArray and Series have the same \xe2\x80\xa6CkAllow datetime[ns] to be casted to any lower precision. \xe2\x80\xa60EhThis will update <code>scan_args.hive_options.enabled</code> to <code>true</code> if \xe2\x80\xa60DfCreate a <code>CategoricalChunked</code> from a physical array and \xe2\x80\xa600fSafety0ClInfer schema from rows and set the first no null type as \xe2\x80\xa60CgExtends this builder with the contents of the given \xe2\x80\xa60CaTry apply a closure <code>F</code> to each array.00DhCreate a new <code>DataFrame</code> from an iterator over rows. This \xe2\x80\xa60CiThis takes ownership of the DataFrame so that drop is \xe2\x80\xa6BdAppends from an iterator over values0BbAllow datetime[us] to datetime[ms]0CnApply a macro on the Downcasted ChunkedArrays of DataTypes \xe2\x80\xa6EhReturns <code>true</code> if <code>expanded_paths</code> were expanded from a single \xe2\x80\xa60999DfApplies a kernel that produces <code>ArrayRef</code> of the same type.00BgCreates a CSV reader using a file path.0CnSet the authorization token in plain text when used in EKS \xe2\x80\xa6CkSet the container credentials relative URI when used in ECS===DkUtility to ensure the dtype of the column in <code>current_schema</code>\xe2\x80\xa60>>>CiTakes chunks and a polars datatype and constructs the \xe2\x80\xa60CjCreate a list-array from an iterator. Used in group_by \xe2\x80\xa60DhCreate a new <code>DataFrame</code> but does not check the length or \xe2\x80\xa60CdConverts a sequence of columns into a DataFrame, \xe2\x80\xa60BmApply a macro on the Downcasted ChunkedArraysCcTrim all lists of unused start and end elements \xe2\x80\xa6000000CeApplies a function only to the non-null elements, \xe2\x80\xa60CnCreate a new Series without checking if the inner dtype of \xe2\x80\xa60EdZip with a <code>ChunkedArray</code> then apply a binary function <code>F</code> \xe2\x80\xa600?AkApply a macro on the SeriesfSafety1CiDetermine the supertype and the number of unique data \xe2\x80\xa6EdReturns a numeric supertype that <code>l</code> and <code>r</code> can be safely \xe2\x80\xa6CmConverts self to a physical representation with the given \xe2\x80\xa600AoTODO: Move this somewhere else?0CdIf the memory repr of this Column is a scalar, a \xe2\x80\xa60ChRecursive version of <code>CAN_FAST_EXPLODE_LIST</code>.0CiThis takes ownership of the DataFrame so that drop is \xe2\x80\xa6ClApply elementwise binary function which produces string, \xe2\x80\xa600")