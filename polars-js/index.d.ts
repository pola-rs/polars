/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export interface JsRollingOptions {
  windowSize: number
  weights?: Array<number> | undefined | null
  minPeriods: number
  center: boolean
}
export interface JsRowCount {
  name: string
  offset: number
}
export interface ReadCsvOptions {
  inferSchemaLength?: number | undefined | null
  chunkSize: number
  hasHeader: boolean
  ignoreErrors: boolean
  nRows?: number | undefined | null
  skipRows: number
  sep: string
  rechunk: boolean
  columns?: Array<string> | undefined | null
  encoding: string
  nThreads?: number | undefined | null
  path?: string | undefined | null
  lowMemory: boolean
  commentChar?: string | undefined | null
  quoteChar?: string | undefined | null
  parseDates: boolean
  skipRowsAfterHeader: number
  rowCount?: JsRowCount | undefined | null
}
export interface WriteCsvOptions {
  hasHeader?: boolean | undefined | null
  sep?: string | undefined | null
  quote?: string | undefined | null
}
export interface Shape {
  height: number
  width: number
}
export function readCsv(pathOrBuffer: string | Buffer, options: ReadCsvOptions): PyDataFrame
export function fromRows(rows: unknown[], schema?: Wrap | undefined | null, inferSchemaLength?: number | undefined | null): PyDataFrame
export const enum DataType {
  Int8 = 0,
  Int16 = 1,
  Int32 = 2,
  Int64 = 3,
  UInt8 = 4,
  UInt16 = 5,
  UInt32 = 6,
  UInt64 = 7,
  Float32 = 8,
  Float64 = 9,
  Bool = 10,
  Utf8 = 11,
  List = 12,
  Date = 13,
  Datetime = 14,
  Time = 15,
  Object = 16,
  Categorical = 17,
  Struct = 18
}
export interface ScanCsvOptions {
  inferSchemaLength?: number | undefined | null
  cache?: boolean | undefined | null
  hasHeader?: boolean | undefined | null
  ignoreErrors: boolean
  nRows?: number | undefined | null
  skipRows?: number | undefined | null
  sep: string
  rechunk?: boolean | undefined | null
  columns?: Array<string> | undefined | null
  encoding: string
  lowMemory?: boolean | undefined | null
  commentChar?: string | undefined | null
  quoteChar?: string | undefined | null
  parseDates?: boolean | undefined | null
  skipRowsAfterHeader: number
  rowCount?: JsRowCount | undefined | null
}
export function scanCsv(path: string, options: ScanCsvOptions): PyLazyFrame
export interface ScanParquetOptions {
  nRows?: number | undefined | null
  cache?: boolean | undefined | null
  parallel?: boolean | undefined | null
  rechunk?: boolean | undefined | null
  rowCount?: JsRowCount | undefined | null
}
export function scanParquet(path: string, options: ScanParquetOptions): PyLazyFrame
export interface ScanIpcOptions {
  nRows?: number | undefined | null
  cache?: boolean | undefined | null
  rechunk?: boolean | undefined | null
  rowCount?: JsRowCount | undefined | null
}
export function scanIpc(path: string, options: ScanIpcOptions): PyLazyFrame
export function col(name: string): PyExpr
export function count(): PyExpr
export function first(): PyExpr
export function last(): PyExpr
export function cols(names: Array<string>): PyExpr
export function lit(value: JsAnyValue): PyExpr
export function range(low: number, high: number, dtype: Wrap): PyExpr
export function seriesSetAtIdxStr(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxF64(series: PySeries, indices: Array<number>, value?: number | undefined | null): PySeries
export function seriesSetAtIdxF32(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxU8(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxU16(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxU32(series: PySeries, indices: Array<number>, value?: number | undefined | null): PySeries
export function seriesSetAtIdxU64(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxI8(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxI16(series: PySeries, indices: Array<number>, value?: Wrap | undefined | null): PySeries
export function seriesSetAtIdxI32(series: PySeries, indices: Array<number>, value?: number | undefined | null): PySeries
export function seriesSetAtIdxI64(series: PySeries, indices: Array<number>, value?: number | undefined | null): PySeries
export function seriesSetWithMaskStr(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskF64(series: PySeries, mask: PySeries, value?: number | undefined | null): PySeries
export function seriesSetWithMaskF32(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskU8(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskU16(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskU32(series: PySeries, mask: PySeries, value?: number | undefined | null): PySeries
export function seriesSetWithMaskU64(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskI8(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskI16(series: PySeries, mask: PySeries, value?: Wrap | undefined | null): PySeries
export function seriesSetWithMaskI32(series: PySeries, mask: PySeries, value?: number | undefined | null): PySeries
export function seriesSetWithMaskI64(series: PySeries, mask: PySeries, value?: number | undefined | null): PySeries
export function seriesGetF32(s: PySeries, index: number): number | undefined | null
export function seriesGetF64(s: PySeries, index: number): number | undefined | null
export function seriesGetU8(s: PySeries, index: number): number | undefined | null
export function seriesGetU16(s: PySeries, index: number): number | undefined | null
export function seriesGetU32(s: PySeries, index: number): number | undefined | null
export function seriesGetU64(s: PySeries, index: number): number | undefined | null
export function seriesGetI8(s: PySeries, index: number): number | undefined | null
export function seriesGetI16(s: PySeries, index: number): number | undefined | null
export function seriesGetI32(s: PySeries, index: number): number | undefined | null
export function seriesGetI64(s: PySeries, index: number): number | undefined | null
export function seriesGetDate(s: PySeries, index: number): number | undefined | null
export function seriesGetDatetime(s: PySeries, index: number): number | undefined | null
export function seriesGetDuration(s: PySeries, index: number): number | undefined | null
export function seriesGetStr(s: PySeries, index: number): string | undefined | null
export function seriesAddU8(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU16(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU32(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU64(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI8(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI16(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI32(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI64(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddDatetime(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddDuration(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddF32(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddF64(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU8(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU16(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU32(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU64(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI8(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI16(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI32(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI64(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubDatetime(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubDuration(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubF32(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubF64(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU8(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU16(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU32(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU64(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI8(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI16(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI32(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI64(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivF32(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivF64(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU8(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU16(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU32(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU64(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI8(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI16(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI32(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI64(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulF32(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulF64(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU8(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU16(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU32(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU64(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI8(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI16(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI32(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI64(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemF32(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemF64(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddU64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddI64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddF32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesAddF64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubU64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubI64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubF32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesSubF64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivU64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivI64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivF32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesDivF64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulU64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulI64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulF32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesMulF64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemU64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI8Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI16Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemI64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemF32Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesRemF64Rhs(s: PySeries, other: JsAnyValue): PySeries
export function seriesEqU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesEqStr(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesNeqStr(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtStr(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesGtEqStr(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtStr(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqU8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqU16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqU32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqU64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqI8(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqI16(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqI32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqI64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqF32(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqF64(s: PySeries, rhs: JsAnyValue): PySeries
export function seriesLtEqStr(s: PySeries, rhs: JsAnyValue): PySeries
export class PyDataFrame {
  constructor(columns: unknown[])
  estimatedSize(): number
  toString(): string
  add(s: PySeries): PyDataFrame
  sub(s: PySeries): PyDataFrame
  div(s: PySeries): PyDataFrame
  mul(s: PySeries): PyDataFrame
  rem(s: PySeries): PyDataFrame
  addDf(s: PyDataFrame): PyDataFrame
  subDf(s: PyDataFrame): PyDataFrame
  divDf(s: PyDataFrame): PyDataFrame
  mulDf(s: PyDataFrame): PyDataFrame
  remDf(s: PyDataFrame): PyDataFrame
  rechunk(): PyDataFrame
  fillNull(strategy: Wrap): PyDataFrame
  join(other: PyDataFrame, leftOn: Array<string>, rightOn: Array<string>, how: string, suffix: string): PyDataFrame
  getColumns(): Array<PySeries>
  /** Get column names */
  get columns(): Array<string>
  set columns(names: Array<string>)
  withColumn(s: PySeries): PyDataFrame
  /** Get datatypes */
  dtypes(): Array<JsDataType>
  nChunks(): number
  get shape(): Shape
  get height(): number
  get width(): number
  hstackMut(columns: unknown[]): void
  hstack(columns: unknown[]): PyDataFrame
  extend(df: PyDataFrame): void
  vstackMut(df: PyDataFrame): void
  vstack(df: PyDataFrame): PyDataFrame
  dropInPlace(name: string): PySeries
  dropNulls(subset?: Array<string> | undefined | null): PyDataFrame
  drop(name: string): PyDataFrame
  selectAtIdx(idx: number): PySeries | undefined | null
  findIdxByName(name: string): number | undefined | null
  column(name: string): PySeries
  select(selection: Array<string>): PyDataFrame
  filter(mask: PySeries): PyDataFrame
  take(indices: Array<number>): PyDataFrame
  takeWithSeries(indices: PySeries): PyDataFrame
  sort(byColumn: string, reverse: boolean, nullsLast: boolean): PyDataFrame
  sortInPlace(byColumn: string, reverse: boolean): void
  replace(column: string, newCol: PySeries): void
  rename(column: string, newCol: string): void
  replaceAtIdx(index: number, newCol: PySeries): void
  insertAtIdx(index: number, newCol: PySeries): void
  slice(offset: number, length: number): PyDataFrame
  head(length?: number | undefined | null): PyDataFrame
  tail(length?: number | undefined | null): PyDataFrame
  isUnique(): PySeries
  isDuplicated(): PySeries
  frameEqual(other: PyDataFrame, nullEqual: boolean): boolean
  withRowCount(name: string, offset?: number | undefined | null): PyDataFrame
  clone(): PyDataFrame
  melt(idVars: Array<string>, valueVars: Array<string>, valueName?: string | undefined | null, variableName?: string | undefined | null): PyDataFrame
  partitionBy(groups: Array<string>, stable: boolean): Array<PyDataFrame>
  shift(periods: number): PyDataFrame
  unique(maintainOrder: boolean, subset: Array<string> | undefined | null, keep: Wrap): PyDataFrame
  lazy(): object
  max(): PyDataFrame
  min(): PyDataFrame
  sum(): PyDataFrame
  mean(): PyDataFrame
  std(): PyDataFrame
  var(): PyDataFrame
  median(): PyDataFrame
  hmean(nullStrategy: Wrap): PySeries | undefined | null
  hmax(): PySeries | undefined | null
  hmin(): PySeries | undefined | null
  hsum(nullStrategy: Wrap): PySeries | undefined | null
  quantile(quantile: number, interpolation: Wrap): PyDataFrame
  toDummies(): PyDataFrame
  nullCount(): PyDataFrame
  shrinkToFit(): void
  hashRows(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): PySeries
  transpose(includeHeader: boolean, names: string): PyDataFrame
  upsample(by: Array<string>, indexColumn: string, every: string, offset: string, stable: boolean): PyDataFrame
  toStruct(name: string): PySeries
  unnest(names: Array<string>): PyDataFrame
  static fromBincode(buf: Buffer): PyDataFrame
  toBincode(): Buffer
  toJson(pretty?: boolean | undefined | null): Buffer
  toRow(idx: number): unknown[]
  toRows(): unknown[]
  toRowsCb(callback: (...args: any[]) => any): void
  toRowObj(idx: number | number): object
  toObjects(): unknown[]
  toObjectsCb(callback: (...args: any[]) => any): void
  writeCsv(pathOrBuffer: string | Buffer | (...args: any[]) => any, options: WriteCsvOptions): void
  writeParquet(pathOrBuffer: string | Buffer | (...args: any[]) => any, compression: Wrap): void
  writeIpc(pathOrBuffer: string | Buffer | (...args: any[]) => any, compression: Wrap): void
  writeJson(pathOrBuffer: string | Buffer | (...args: any[]) => any, jsonFormat: string): void
}
export class PyLazyGroupBy {
  agg(aggs: Array<PyExpr>): PyLazyFrame
  head(n: number): PyLazyFrame
  tail(n: number): PyLazyFrame
}
export class PyLazyFrame {
  describePlan(): string
  describeOptimizedPlan(): string
  toDot(optimized: boolean): string
  optimizationToggle(typeCoercion: boolean, predicatePushdown: boolean, projectionPushdown: boolean, simplifyExpr: boolean, stringCache: boolean, slicePushdown: boolean): PyLazyFrame
  sort(byColumn: string, reverse: boolean, nullsLast: boolean): PyLazyFrame
  sortByExprs(byColumn: Array<PyExpr>, reverse: Array<boolean>): PyLazyFrame
  cache(): PyLazyFrame
  collectSync(): PyDataFrame
  collect(): PyDataFrame
  fetch(nRows: number): PyDataFrame
  fetchSync(nRows: number): PyDataFrame
  filter(predicate: PyExpr): PyLazyFrame
  select(exprs: Array<PyExpr>): PyLazyFrame
  groupby(by: Array<PyExpr>, maintainOrder: boolean): PyLazyGroupBy
  groupbyRolling(indexColumn: string, period: string, offset: string, closed: Wrap, by: Array<PyExpr>): PyLazyGroupBy
  groupbyDynamic(indexColumn: string, every: string, period: string, offset: string, truncate: boolean, includeBoundaries: boolean, closed: Wrap, by: Array<PyExpr>): PyLazyGroupBy
  joinAsof(other: PyLazyFrame, leftOn: PyExpr, rightOn: PyExpr, leftBy: Array<string> | undefined | null, rightBy: Array<string> | undefined | null, allowParallel: boolean, forceParallel: boolean, suffix: string, strategy: string, tolerance?: Wrap | undefined | null, toleranceStr?: string | undefined | null): PyLazyFrame
  join(other: PyLazyFrame, leftOn: Array<PyExpr>, rightOn: Array<PyExpr>, allowParallel: boolean, forceParallel: boolean, how: string, suffix: string, asofByLeft: Array<string>, asofByRight: Array<string>): PyLazyFrame
  withColumn(expr: PyExpr): PyLazyFrame
  withColumns(exprs: Array<PyExpr>): PyLazyFrame
  rename(existing: Array<string>, new: Array<string>): PyLazyFrame
  reverse(): PyLazyFrame
  shift(periods: number): PyLazyFrame
  shiftAndFill(periods: number, fillValue: PyExpr): PyLazyFrame
  fillNull(fillValue: PyExpr): PyLazyFrame
  fillNan(fillValue: PyExpr): PyLazyFrame
  min(): PyLazyFrame
  max(): PyLazyFrame
  sum(): PyLazyFrame
  mean(): PyLazyFrame
  std(): PyLazyFrame
  var(): PyLazyFrame
  median(): PyLazyFrame
  quantile(quantile: number, interpolation: Wrap): PyLazyFrame
  explode(column: Array<PyExpr>): PyLazyFrame
  unique(maintainOrder: boolean, subset: Array<string> | undefined | null, keep: Wrap): PyLazyFrame
  dropNulls(subset?: Array<string> | undefined | null): PyLazyFrame
  slice(offset: number, len: number): PyLazyFrame
  tail(n: number): PyLazyFrame
  melt(idVars: Array<string>, valueVars: Array<string>, valueName?: string | undefined | null, variableName?: string | undefined | null): PyLazyFrame
  withRowCount(name: string, offset?: number | undefined | null): PyLazyFrame
  dropColumns(cols: Array<string>): PyLazyFrame
  clone(): PyLazyFrame
  columns(): Array<string>
  unnest(cols: Array<string>): PyLazyFrame
}
export class PyExpr {
  add(rhs: PyExpr): PyExpr
  sub(rhs: PyExpr): PyExpr
  mul(rhs: PyExpr): PyExpr
  truediv(rhs: PyExpr): PyExpr
  mod(rhs: PyExpr): PyExpr
  floordiv(rhs: PyExpr): PyExpr
  toString(): string
  eq(other: PyExpr): PyExpr
  neq(other: PyExpr): PyExpr
  gt(other: PyExpr): PyExpr
  gtEq(other: PyExpr): PyExpr
  ltEq(other: PyExpr): PyExpr
  lt(other: PyExpr): PyExpr
  alias(name: string): PyExpr
  isNot(): PyExpr
  isNull(): PyExpr
  isNotNull(): PyExpr
  isInfinite(): PyExpr
  isFinite(): PyExpr
  isNan(): PyExpr
  isNotNan(): PyExpr
  min(): PyExpr
  max(): PyExpr
  mean(): PyExpr
  median(): PyExpr
  sum(): PyExpr
  nUnique(): PyExpr
  argUnique(): PyExpr
  unique(): PyExpr
  uniqueStable(): PyExpr
  first(): PyExpr
  last(): PyExpr
  list(): PyExpr
  quantile(quantile: number, interpolation: Wrap): PyExpr
  aggGroups(): PyExpr
  count(): PyExpr
  valueCounts(multithreaded: boolean): PyExpr
  uniqueCounts(): PyExpr
  cast(dataType: Wrap, strict: boolean): PyExpr
  sortWith(descending: boolean, nullsLast: boolean): PyExpr
  argSort(reverse: boolean): PyExpr
  argMax(): PyExpr
  argMin(): PyExpr
  take(idx: PyExpr): PyExpr
  sortBy(by: Array<PyExpr>, reverse: Array<boolean>): PyExpr
  backwardFill(): PyExpr
  forwardFill(): PyExpr
  shift(periods: number): PyExpr
  shiftAndFill(periods: number, fillValue: PyExpr): PyExpr
  fillNull(expr: PyExpr): PyExpr
  fillNullWithStrategy(strategy: Wrap): PyExpr
  fillNan(expr: PyExpr): PyExpr
  dropNulls(): PyExpr
  dropNans(): PyExpr
  filter(predicate: PyExpr): PyExpr
  reverse(): PyExpr
  std(): PyExpr
  var(): PyExpr
  isUnique(): PyExpr
  isFirst(): PyExpr
  explode(): PyExpr
  takeEvery(n: number): PyExpr
  tail(n?: number | undefined | null): PyExpr
  head(n?: number | undefined | null): PyExpr
  slice(offset: PyExpr, length: PyExpr): PyExpr
  round(decimals: number): PyExpr
  floor(): PyExpr
  ceil(): PyExpr
  clip(min: number, max: number): PyExpr
  abs(): PyExpr
  isDuplicated(): PyExpr
  over(partitionBy: Array<PyExpr>): PyExpr
  and(expr: PyExpr): PyExpr
  xor(expr: PyExpr): PyExpr
  or(expr: PyExpr): PyExpr
  isIn(expr: PyExpr): PyExpr
  repeatBy(by: PyExpr): PyExpr
  pow(exponent: number): PyExpr
  cumsum(reverse: boolean): PyExpr
  cummax(reverse: boolean): PyExpr
  cummin(reverse: boolean): PyExpr
  cumprod(reverse: boolean): PyExpr
  product(): PyExpr
  strParseDate(fmt: string | undefined | null, strict: boolean, exact: boolean): PyExpr
  strParseDatetime(fmt: string | undefined | null, strict: boolean, exact: boolean): PyExpr
  strStrip(): PyExpr
  strRstrip(): PyExpr
  strLstrip(): PyExpr
  strToUppercase(): PyExpr
  strSlice(start: number, length?: number | undefined | null): PyExpr
  strToLowercase(): PyExpr
  strLengths(): PyExpr
  strReplace(pat: string, val: string): PyExpr
  strReplaceAll(pat: string, val: string): PyExpr
  strContains(pat: string): PyExpr
  strHexEncode(): PyExpr
  strHexDecode(strict?: boolean | undefined | null): PyExpr
  strBase64Encode(): PyExpr
  strBase64Decode(strict?: boolean | undefined | null): PyExpr
  strJsonPathMatch(pat: string): PyExpr
  strExtract(pat: string, groupIndex: number): PyExpr
  strftime(fmt: string): PyExpr
  strSplit(by: string): PyExpr
  strSplitInclusive(by: string): PyExpr
  strSplitExact(by: string, n: number): PyExpr
  strSplitExactInclusive(by: string, n: number): PyExpr
  arrLengths(): PyExpr
  year(): PyExpr
  month(): PyExpr
  week(): PyExpr
  weekday(): PyExpr
  day(): PyExpr
  ordinalDay(): PyExpr
  hour(): PyExpr
  minute(): PyExpr
  second(): PyExpr
  nanosecond(): PyExpr
  durationDays(): PyExpr
  durationHours(): PyExpr
  durationSeconds(): PyExpr
  durationNanoseconds(): PyExpr
  durationMilliseconds(): PyExpr
  timestamp(): PyExpr
  dtEpochSeconds(): PyExpr
  dot(other: PyExpr): PyExpr
  hash(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): PyExpr
  reinterpret(signed: boolean): PyExpr
  mode(): PyExpr
  keepName(): PyExpr
  prefix(prefix: string): PyExpr
  suffix(suffix: string): PyExpr
  exclude(columns: Array<string>): PyExpr
  excludeDtype(dtypes: Array<Wrap>): PyExpr
  interpolate(): PyExpr
  rollingSum(options: JsRollingOptions): PyExpr
  rollingMin(options: JsRollingOptions): PyExpr
  rollingMax(options: JsRollingOptions): PyExpr
  rollingMean(options: JsRollingOptions): PyExpr
  rollingStd(options: JsRollingOptions): PyExpr
  rollingVar(options: JsRollingOptions): PyExpr
  rollingMedian(options: JsRollingOptions): PyExpr
  rollingQuantile(quantile: number, interpolation: Wrap, options: JsRollingOptions): PyExpr
  rollingSkew(windowSize: number, bias: boolean): PyExpr
  lowerBound(): PyExpr
  upperBound(): PyExpr
  lstMax(): PyExpr
  lstMin(): PyExpr
  lstSum(): PyExpr
  lstMean(): PyExpr
  lstSort(reverse: boolean): PyExpr
  lstReverse(): PyExpr
  lstUnique(): PyExpr
  lstGet(index: number): PyExpr
  lstJoin(separator: string): PyExpr
  lstArgMin(): PyExpr
  lstArgMax(): PyExpr
  lstDiff(n: number, nullBehavior: Wrap): PyExpr
  lstShift(periods: number): PyExpr
  lstSlice(offset: number, length: number): PyExpr
  rank(method: Wrap, reverse: boolean): PyExpr
  diff(n: number, nullBehavior: Wrap): PyExpr
  pctChange(n: number): PyExpr
  skew(bias: boolean): PyExpr
  kurtosis(fisher: boolean, bias: boolean): PyExpr
  strConcat(delimiter: string): PyExpr
  catSetOrdering(ordering: string): PyExpr
  reshape(dims: Array<number>): PyExpr
  cumcount(reverse: boolean): PyExpr
  toPhysical(): PyExpr
  shuffle(seed: Wrap): PyExpr
  sampleFrac(frac: number, withReplacement: boolean, seed?: number | undefined | null): PyExpr
  ewmMean(alpha: number, adjust: boolean, minPeriods: number): PyExpr
  ewmStd(alpha: number, adjust: boolean, minPeriods: number): PyExpr
  ewmVar(alpha: number, adjust: boolean, minPeriods: number): PyExpr
  extendConstant(value: JsAnyValue, n: number): PyExpr
  any(): PyExpr
  all(): PyExpr
  structFieldByName(name: string): PyExpr
  structRenameFields(names: Array<string>): PyExpr
  log(base: number): PyExpr
  entropy(base: number): PyExpr
}
export class PySeries {
  static newInt8Array(name: string, arr: Int8Array): PySeries
  static newUint8Array(name: string, arr: Uint8Array): PySeries
  static newUint8ClampedArray(name: string, arr: Uint8ClampedArray): PySeries
  static newInt16Array(name: string, arr: Int16Array): PySeries
  static newUint16Array(name: string, arr: Uint16Array): PySeries
  static newInt32Array(name: string, arr: Int32Array): PySeries
  static newUint32Array(name: string, arr: Uint32Array): PySeries
  static newFloat32Array(name: string, arr: Float32Array): PySeries
  static newFloat64Array(name: string, arr: Float64Array): PySeries
  static newBigint64Array(name: string, arr: BigInt64Array): PySeries
  static newBiguint64Array(name: string, arr: BigUint64Array): PySeries
  static newOptStr(name: string, val: Wrap): PySeries
  static newOptBool(name: string, val: Wrap, strict: boolean): PySeries
  static newOptI32(name: string, val: Wrap, strict: boolean): PySeries
  static newOptI64(name: string, val: Wrap, strict: boolean): PySeries
  static newOptU64(name: string, val: Wrap, strict: boolean): PySeries
  static newOptU32(name: string, val: Wrap, strict: boolean): PySeries
  static newOptF32(name: string, val: Wrap, strict: boolean): PySeries
  static newOptF64(name: string, val: Wrap, strict: boolean): PySeries
  static newOptDate(name: string, values: Array<unknown>, strict?: boolean | undefined | null): PySeries
  static newList(name: string, values: object, dtype: Wrap): PySeries
  static repeat(name: string, val: JsAnyValue, n: number, dtype: Wrap): PySeries
  get dtype(): DataType
  get inner(): ExternalObject<Series>
  get innerDtype(): DataType | undefined | null
  get name(): string
  toString(): string
  getFmt(index: number): string
  estimatedSize(): number
  rechunk(inPlace: boolean): PySeries | undefined | null
  getIdx(idx: number): Wrap
  bitand(other: PySeries): PySeries
  bitor(other: PySeries): PySeries
  bitxor(other: PySeries): PySeries
  cumsum(reverse?: boolean | undefined | null): PySeries
  cummax(reverse?: boolean | undefined | null): PySeries
  cummin(reverse?: boolean | undefined | null): PySeries
  cumprod(reverse?: boolean | undefined | null): PySeries
  chunkLengths(): Array<number>
  rename(name: string): void
  mean(): number | undefined | null
  max(): number | boolean | number | undefined | null
  min(): number | boolean | number | undefined | null
  sum(): number | boolean | number | undefined | null
  nChunks(): number
  limit(numElements: number): PySeries
  slice(offset: number, length: number): PySeries
  append(other: PySeries): void
  extend(other: PySeries): void
  filter(filter: PySeries): PySeries
  add(other: PySeries): PySeries
  sub(other: PySeries): PySeries
  mul(other: PySeries): PySeries
  div(other: PySeries): PySeries
  rem(other: PySeries): PySeries
  head(length?: number | undefined | null): PySeries
  tail(length?: number | undefined | null): PySeries
  sort(reverse?: boolean | undefined | null): PySeries
  argsort(reverse: boolean, nullsLast: boolean): PySeries
  unique(): PySeries
  uniqueStable(): PySeries
  valueCounts(): object
  argUnique(): PySeries
  argMin(): number | undefined | null
  argMax(): number | undefined | null
  take(indices: Array<number>): PySeries
  takeWithSeries(indices: PySeries): PySeries
  nullCount(): number
  hasValidity(): boolean
  isNull(): PySeries
  isNotNull(): PySeries
  isNotNan(): PySeries
  isNan(): PySeries
  isFinite(): PySeries
  isInfinite(): PySeries
  isUnique(): PySeries
  argTrue(): PySeries
  sampleN(n: number, withReplacement: boolean, seed?: Wrap | undefined | null): this
  sampleFrac(frac: number, withReplacement: boolean, seed?: Wrap | undefined | null): this
  isDuplicated(): PySeries
  explode(): PySeries
  takeEvery(n: number): PySeries
  seriesEqual(other: PySeries, nullEqual: boolean, strict: boolean): boolean
  eq(rhs: PySeries): PySeries
  neq(rhs: PySeries): PySeries
  gt(rhs: PySeries): PySeries
  gtEq(rhs: PySeries): PySeries
  lt(rhs: PySeries): PySeries
  ltEq(rhs: PySeries): PySeries
  not(): PySeries
  asStr(): string
  len(): number
  toPhysical(): PySeries
  toTypedArray(): TypedArrayBuffer
  toArray(): Wrap
  median(): number | undefined | null
  quantile(quantile: number, interpolation: Wrap): JsAnyValue
  dropNulls(): PySeries
  fillNull(strategy: Wrap): PySeries
  isIn(other: PySeries): PySeries
  clone(): PySeries
  shift(periods: number): PySeries
  zipWith(mask: PySeries, other: PySeries): PySeries
  strLengths(): PySeries
  strContains(pat: string): PySeries
  strJsonPathMatch(pat: string): PySeries
  strExtract(pat: string, groupIndex: number): PySeries
  strReplace(pat: string, val: string): PySeries
  strReplaceAll(pat: string, val: string): PySeries
  strToUppercase(): PySeries
  strToLowercase(): PySeries
  strSlice(start: number, length?: number | undefined | null): PySeries
  strHexEncode(): PySeries
  strHexDecode(strict?: boolean | undefined | null): PySeries
  strBase64Encode(): PySeries
  strBase64Decode(strict?: boolean | undefined | null): PySeries
  strftime(fmt: string): PySeries
  arrLengths(): PySeries
  toDummies(): PySeries
  getList(index: number): PySeries | undefined | null
  rollingSum(options: JsRollingOptions): PySeries
  rollingMean(options: JsRollingOptions): PySeries
  rollingMedian(options: JsRollingOptions): PySeries
  rollingMax(options: JsRollingOptions): PySeries
  rollingMin(options: JsRollingOptions): PySeries
  rollingVar(options: JsRollingOptions): PySeries
  rollingStd(options: JsRollingOptions): PySeries
  rollingQuantile(quantile: number, interpolation: Wrap, options: JsRollingOptions): PySeries
  year(): PySeries
  month(): PySeries
  weekday(): PySeries
  week(): PySeries
  day(): PySeries
  ordinalDay(): PySeries
  hour(): PySeries
  minute(): PySeries
  second(): PySeries
  nanosecond(): PySeries
  dtEpochSeconds(): PySeries
  peakMax(): PySeries
  peakMin(): PySeries
  nUnique(): number
  isFirst(): PySeries
  round(decimals: number): PySeries
  floor(): PySeries
  ceil(): PySeries
  shrinkToFit(): void
  dot(other: PySeries): number | undefined | null
  hash(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): PySeries
  reinterpret(signed: boolean): PySeries
  mode(): PySeries
  interpolate(): PySeries
  rank(method: Wrap, reverse?: boolean | undefined | null): PySeries
  diff(n: number, nullBehavior: Wrap): PySeries
  skew(bias: boolean): number | undefined | null
  kurtosis(fisher: boolean, bias: boolean): number | undefined | null
  cast(dtype: Wrap, strict?: boolean | undefined | null): PySeries
  abs(): PySeries
  reshape(dims: Array<number>): PySeries
  shuffle(seed: Wrap): PySeries
  extendConstant(value: Wrap, n: number): PySeries
  timeUnit(): string | undefined | null
  toJson(): Buffer
  toBinary(): Buffer
}
